var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/// <reference path="../declarations/TemporaryScriptTypes.d.ts" />
/// <reference path="../declarations/DataStore/BadgeCase.d.ts" />
/// <reference path="../declarations/party/Category.d.ts"/>
class App {
    static start() {
        // Hide tooltips that stay on game load
        $('.tooltip').tooltip('hide');
        if (!App.debug) {
            Object.freeze(GameConstants);
        }
        Preload.load(App.debug).then(() => {
            ko.options.deferUpdates = true;
            console.log(`[${GameConstants.formatDate(new Date())}] %cLoading Game Data..`, 'color:#8e44ad;font-weight:900;');
            App.game = new Game();
            console.log(`[${GameConstants.formatDate(new Date())}] %cGame loaded`, 'color:#2ecc71;font-weight:900;');
            Notifier.notify({ message: 'Game loaded', type: NotificationConstants.NotificationOption.info });
            console.log(`[${GameConstants.formatDate(new Date())}] %cStarting game..`, 'color:#8e44ad;font-weight:900;');
            GameController.bindToolTips();
            GameController.addKeyListeners();
            App.game.initialize();
            GameLoadState.updateLoadState(GameLoadState.states.initialized);
            // Fix any settings that conflict with the now-loaded game data
            Settings.checkAndFix();
            // Fixes custom theme css if Default theme was different from save theme (must be done before bindings)
            document.body.className = 'no-select';
            ko.applyBindings(App.game);
            GameLoadState.updateLoadState(GameLoadState.states.appliedBindings);
            Preload.hideSplashScreen();
            App.game.start();
            GameLoadState.updateLoadState(GameLoadState.states.running);
            // Check if Mobile and deliver a warning around mobile compatability / performance issues
            const isMobile = /Mobile/.test(navigator.userAgent);
            const isTouchDevice = 'ontouchstart' in document.documentElement;
            const hasSeenWarning = localStorage.getItem('hasSeenMobileWarning');
            if (isMobile && isTouchDevice && hasSeenWarning != 'true') {
                Notifier.warning({
                    title: 'Mobile Device Detected',
                    message: 'Please Note: \n\nYou may experience performance issues playing on mobile, especially on older models. \n\nWhile it is ' +
                        'possible to play on a phone or tablet, please be aware that the controls and features are designed with a mouse and keyboard in ' +
                        'mind and may not work as well on a mobile device. \n\nFor the best gameplay experience we highly recommend playing on a PC ' +
                        'browser or our desktop client by <b><a href="https://github.com/RedSparr0w/Pokeclicker-desktop/releases/latest" target="_blank">downloading here</a>' +
                        '\n\nThank You!',
                }).then((result) => {
                    if (result) {
                        localStorage.setItem('hasSeenMobileWarning', 'true');
                    }
                });
            }
        });
    }
}
App.debug = false;
App.isUsingClient = typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0;
App.translation = new Translate(Settings.getSetting('translation.language'));
App;
class ExternalHelper {
    static isInLiveVersion(content) {
        if (content instanceof Town) {
            if (content.region > GameConstants.MAX_AVAILABLE_REGION) {
                return false;
            }
            if (ExternalHelper.townCache[content.name] == undefined) {
                ExternalHelper.townCache[content.name] = ExternalHelper.containsDevRequirement(content.requirements);
            }
            return !ExternalHelper.townCache[content.name];
        }
        if (content instanceof QuestLine) {
            if (ExternalHelper.questlineCache[content.name] == undefined) {
                ExternalHelper.questlineCache[content.name] = ExternalHelper.containsDevRequirement(content.requirement);
            }
            return !ExternalHelper.questlineCache[content.name];
        }
        if (content instanceof TemporaryBattle) {
            if (ExternalHelper.temporaryBattleCache[content.name] == undefined) {
                ExternalHelper.temporaryBattleCache[content.name] = ExternalHelper.containsDevRequirement(content.requirements);
            }
            return !ExternalHelper.temporaryBattleCache[content.name];
        }
        if (content instanceof RegionRoute) {
            if (content.region > GameConstants.MAX_AVAILABLE_REGION) {
                return false;
            }
            if (ExternalHelper.routeCache[content.routeName] == undefined) {
                ExternalHelper.routeCache[content.routeName] = ExternalHelper.containsDevRequirement(content.requirements);
            }
            return !ExternalHelper.routeCache[content.routeName];
        }
        if (content instanceof Gym) {
            if (ExternalHelper.gymCache[content.town] == undefined) {
                ExternalHelper.gymCache[content.town] = ExternalHelper.containsDevRequirement(content.requirements);
            }
            return !ExternalHelper.gymCache[content.town];
        }
        return true;
    }
    static containsDevRequirement(requirements) {
        if (!requirements) {
            return false;
        }
        if (requirements instanceof Requirement) {
            requirements = [requirements];
        }
        let containsDevRequirement = false;
        requirements.forEach((r) => {
            if (r instanceof DevelopmentRequirement) {
                containsDevRequirement = true;
            }
            else if (r instanceof QuestLineCompletedRequirement) {
                containsDevRequirement = ExternalHelper.isInLiveVersion(r.cachedQuest);
            }
            else if (r instanceof QuestLineStartedRequirement) {
                containsDevRequirement = ExternalHelper.isInLiveVersion(r.cachedQuest);
            }
            else if (r instanceof QuestLineStepCompletedRequirement) {
                containsDevRequirement = ExternalHelper.isInLiveVersion(r.cachedQuest);
            }
            else if (r instanceof TemporaryBattleRequirement) {
                containsDevRequirement = ExternalHelper.isInLiveVersion(TemporaryBattleList[r.battleName]);
            }
            else if (r instanceof RouteKillRequirement) {
                containsDevRequirement = ExternalHelper.isInLiveVersion(Routes.getRoute(r.region, r.route));
            }
            else if (r instanceof ClearGymRequirement) {
                containsDevRequirement = ExternalHelper.isInLiveVersion(Object.values(GymList).find(g => GameConstants.getGymIndex(g.town) == r.gymIndex));
            }
            else if (r instanceof MaxRegionRequirement) {
                containsDevRequirement = r.requiredValue > GameConstants.MAX_AVAILABLE_REGION;
            }
            else if (r instanceof ObtainedPokemonRequirement) {
                containsDevRequirement = ExternalHelper.pokemonIsInLiveVersion(r.pokemon);
            }
            else if (r instanceof PokemonLevelRequirement) {
                containsDevRequirement = ExternalHelper.pokemonIsInLiveVersion(r.pokemon);
            }
            else if (r instanceof StarterRequirement) {
                containsDevRequirement = r.region > GameConstants.MAX_AVAILABLE_REGION;
            }
            else if (r instanceof MultiRequirement) {
                r.requirements.forEach(r2 => {
                    if (!containsDevRequirement) {
                        containsDevRequirement = ExternalHelper.containsDevRequirement(r2);
                    }
                });
            }
            else if (r instanceof OneFromManyRequirement) {
                let containsNonDevRequirement = false;
                r.requirements.forEach(r2 => {
                    if (!containsNonDevRequirement) {
                        containsNonDevRequirement = !ExternalHelper.containsDevRequirement(r2);
                    }
                    containsDevRequirement = !containsNonDevRequirement;
                });
            }
            if (containsDevRequirement) {
                return false;
            }
        });
        return containsDevRequirement;
    }
    static pokemonIsInLiveVersion(name) {
        if (PokemonHelper.calcNativeRegion(name) > GameConstants.MAX_AVAILABLE_REGION) {
            return false;
        }
        const locations = PokemonLocations.getPokemonLocations(name);
        if (!locations) {
            return false;
        }
        //TODO: run ExternalHelper.isInLiveVersion for each location
        return true;
    }
}
ExternalHelper.townCache = {};
ExternalHelper.questlineCache = {};
ExternalHelper.temporaryBattleCache = {};
ExternalHelper.routeCache = {};
ExternalHelper.gymCache = {};
/// <reference path="../declarations/TemporaryScriptTypes.d.ts" />
/// <reference path="../declarations/DataStore/BadgeCase.d.ts" />
/// <reference path="../declarations/GameHelper.d.ts" />
/// <reference path="../declarations/party/Category.d.ts"/>
/// <reference path="../declarations/effectEngine/effectEngineRunner.d.ts"/>
/// <reference path="../declarations/items/ItemHandler.d.ts"/>
/**
 * Main game class.
 */
class Game {
    constructor() {
        // Needs to be loaded first so save data can be updated (specifically "player" data)
        this.update = new Update();
        this.multiplier = new Multiplier();
        // Load player
        player = Save.load();
        // Load other Features
        this.profile = new Profile();
        this.breeding = new Breeding(this.multiplier);
        this.pokeballs = new Pokeballs();
        this.pokeballFilters = new PokeballFilters();
        this.wallet = new Wallet(this.multiplier);
        this.keyItems = new KeyItems();
        this.badgeCase = new BadgeCase();
        this.oakItems = new OakItems([20, 50, 100], this.multiplier);
        this.oakItemLoadouts = new OakItemLoadouts();
        this.categories = new PokemonCategories();
        this.party = new Party(this.multiplier);
        this.gems = new Gems();
        this.underground = new Underground();
        this.farming = new Farming(this.multiplier);
        this.logbook = new LogBook();
        this.redeemableCodes = new RedeemableCodes();
        this.statistics = new Statistics();
        this.quests = new Quests();
        this.specialEvents = new SpecialEvents();
        this.discord = new Discord();
        this.achievementTracker = new AchievementTracker();
        this.challenges = new Challenges();
        this.battleFrontier = new BattleFrontier();
        this.saveReminder = new SaveReminder();
        this.battleCafe = new BattleCafeSaveObject();
        this.dreamOrbController = new DreamOrbController();
        this.purifyChamber = new PurifyChamber();
        this.weatherApp = new WeatherApp();
        this.zMoves = new ZMoves();
        this._gameState = ko.observable(GameConstants.GameState.loading);
    }
    load() {
        const saveJSON = localStorage.getItem(`save${Save.key}`);
        const saveObject = JSON.parse(saveJSON || '{}');
        Object.keys(this).filter(key => { var _a; return (_a = this[key]) === null || _a === void 0 ? void 0 : _a.saveKey; }).forEach(key => {
            try {
                const saveKey = this[key].saveKey;
                // Load our save object or the default save data
                this[key].fromJSON(saveObject[saveKey] || this[key].toJSON());
            }
            catch (error) {
                console.error('Unable to load sava data from JSON for:', key, '\nError:\n', error);
            }
        });
        AchievementHandler.fromJSON(saveObject.achievements);
    }
    initialize() {
        AchievementHandler.initialize(this.multiplier, this.challenges);
        FarmController.initialize();
        EffectEngineRunner.initialize(this.multiplier, GameHelper.enumStrings(GameConstants.BattleItemType).map((name) => ItemList[name]));
        ItemHandler.initializeItems();
        BreedingController.initialize();
        PokedexHelper.initialize();
        this.profile.initialize();
        this.breeding.initialize();
        this.pokeballs.initialize();
        this.keyItems.initialize();
        this.oakItems.initialize();
        this.underground.initialize();
        this.farming.initialize();
        this.specialEvents.initialize();
        this.pokeballFilters.initialize();
        this.load();
        // Unlock achievements that have already been completed, avoids renotifying
        AchievementHandler.preCheckAchievements();
        // Flute bonuses depend on achievements so should be initialized afterwards
        // but the bonuses can affect some achievements so we need to recheck them once flutes are online
        FluteEffectRunner.initialize(this.multiplier);
        AchievementHandler.preCheckAchievements();
        // TODO refactor to proper initialization methods
        if (player.regionStarters[GameConstants.Region.kanto]() != GameConstants.Starter.None) {
            Battle.generateNewEnemy();
        }
        else {
            const battlePokemon = new BattlePokemon('MissingNo.', 0, PokemonType.None, PokemonType.None, 0, 0, 0, 0, new Amount(0, GameConstants.Currency.money), false, 0, GameConstants.BattlePokemonGender.NoGender, GameConstants.ShadowStatus.None, EncounterType.route);
            Battle.enemyPokemon(battlePokemon);
        }
        //Safari.load();
        AchievementHandler.calculateMaxBonus(); //recalculate bonus based on active challenges
        const now = new Date();
        SeededDateRand.seedWithDate(now);
        BerryDeal.generateDeals(now);
        Weather.generateWeather(now);
        GemDeals.generateDeals();
        ShardDeal.generateDeals();
        GenericDeal.generateDeals();
        SafariPokemonList.generateSafariLists();
        RoamingPokemonList.generateIncreasedChanceRoutes(now);
        WeatherApp.initialize();
        DamageCalculator.initialize();
        if (Settings.getSetting('disableOfflineProgress').value === false) {
            this.computeOfflineEarnings();
        }
        this.checkAndFix();
        if (Settings.getSetting('disableAutoSave').value === true) {
            Notifier.notify({
                type: NotificationConstants.NotificationOption.danger,
                title: 'Auto Save Disabled',
                message: 'You have disabled auto saving! Be sure to manually save before exiting or any progress will be lost!',
                timeout: 5 * GameConstants.MINUTE,
            });
        }
        // If the player isn't on a route, they're in a town/dungeon
        this.gameState = player.route ? GameConstants.GameState.fighting : GameConstants.GameState.town;
    }
    computeOfflineEarnings() {
        const now = Date.now();
        const timeDiffInSeconds = Math.floor((now - player._lastSeen) / 1000);
        if (timeDiffInSeconds > 1) {
            // Only allow up to 24 hours worth of bonuses
            const timeDiffOverride = Math.min(86400, timeDiffInSeconds);
            let region = player.region;
            let route = player.route || GameConstants.StartingRoutes[region];
            if (!MapHelper.validRoute(route, region)) {
                route = 1;
                region = GameConstants.Region.kanto;
            }
            const availablePokemonMap = RouteHelper.getAvailablePokemonList(route, region).map(name => pokemonMap[name]);
            const maxHealth = PokemonFactory.routeHealth(route, region);
            let hitsToKill = 0;
            for (const pokemon of availablePokemonMap) {
                const type1 = pokemon.type[0];
                const type2 = pokemon.type.length > 1 ? pokemon.type[1] : PokemonType.None;
                const attackAgainstPokemon = App.game.party.calculatePokemonAttack(type1, type2);
                const currentHitsToKill = Math.ceil(maxHealth / attackAgainstPokemon);
                hitsToKill += currentHitsToKill;
            }
            hitsToKill = Math.ceil(hitsToKill / availablePokemonMap.length);
            const numberOfPokemonDefeated = Math.floor(timeDiffOverride / hitsToKill);
            if (numberOfPokemonDefeated === 0) {
                return;
            }
            const routeMoney = PokemonFactory.routeMoney(player.route, player.region, false);
            const baseMoneyToEarn = numberOfPokemonDefeated * routeMoney;
            const moneyToEarn = Math.floor(baseMoneyToEarn * 0.5); //Debuff for offline money
            App.game.wallet.gainMoney(moneyToEarn, true);
            Notifier.notify({
                type: NotificationConstants.NotificationOption.info,
                title: 'Offline Bonus',
                message: `Defeated: ${numberOfPokemonDefeated.toLocaleString('en-US')} Pokémon\nEarned: <img src="./assets/images/currency/money.svg" height="24px"/> ${moneyToEarn.toLocaleString('en-US')}`,
                strippedMessage: `Defeated: ${numberOfPokemonDefeated.toLocaleString('en-US')} Pokémon\nEarned: ${moneyToEarn.toLocaleString('en-US')} Pokédollars`,
                timeout: 2 * GameConstants.MINUTE,
                setting: NotificationConstants.NotificationSetting.General.offline_earnings,
            });
            // Dream orbs
            if ((new DreamOrbTownContent()).isUnlocked()) {
                const orbsUnlocked = App.game.dreamOrbController.orbs.filter((o) => !o.requirement || o.requirement.isCompleted());
                const orbsEarned = Math.floor(timeDiffOverride / 3600);
                if (orbsEarned > 0) {
                    const orbAmounts = Object.fromEntries(orbsUnlocked.map(o => [o.color, 0]));
                    for (let i = 0; i < orbsEarned; i++) {
                        const orb = Rand.fromArray(orbsUnlocked);
                        GameHelper.incrementObservable(orb.amount);
                        orbAmounts[orb.color]++;
                    }
                    const messageAppend = Object.keys(orbAmounts).filter(key => orbAmounts[key] > 0).map(key => `<li>${orbAmounts[key]} ${key}</li>`).join('');
                    Notifier.notify({
                        type: NotificationConstants.NotificationOption.info,
                        title: 'Dream Orbs',
                        message: `Gained ${orbsEarned} Dream Orbs while offline:<br /><ul class="mb-0">${messageAppend}</ul>`,
                        timeout: 2 * GameConstants.MINUTE,
                        setting: NotificationConstants.NotificationSetting.General.offline_earnings,
                    });
                }
            }
        }
    }
    checkAndFix() {
        // Quest box not showing (game thinking tutorial is not completed)
        if (App.game.quests.getQuestLine('Tutorial Quests').state() == QuestLineState.inactive) {
            if (App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Pewter City')]() >= 1) {
                // Defeated Brock, Has completed the Tutorial
                App.game.quests.getQuestLine('Tutorial Quests').state(QuestLineState.ended);
            }
            else if (player.regionStarters[GameConstants.Region.kanto]() > GameConstants.Starter.None) {
                // Has chosen a starter, Tutorial is started
                App.game.quests.getQuestLine('Tutorial Quests').state(QuestLineState.started);
                App.game.quests.getQuestLine('Tutorial Quests').beginQuest(App.game.quests.getQuestLine('Tutorial Quests').curQuest());
            }
        }
        // Mining expedition questline
        if (App.game.quests.getQuestLine('Mining Expedition').state() == QuestLineState.inactive) {
            if (App.game.party.alreadyCaughtPokemon(142)) {
                // Has obtained Aerodactyl
                App.game.quests.getQuestLine('Mining Expedition').state(QuestLineState.ended);
            }
            else if (App.game.badgeCase.badgeList[BadgeEnums.Soul]()) {
                // Has the soul badge, Quest is started
                App.game.quests.getQuestLine('Mining Expedition').state(QuestLineState.started);
                App.game.quests.getQuestLine('Mining Expedition').beginQuest(App.game.quests.getQuestLine('Mining Expedition').curQuest());
            }
        }
        // Check if Koga has been defeated, but have no safari ticket yet
        if (App.game.badgeCase.badgeList[BadgeEnums.Soul]() && !App.game.keyItems.itemList[KeyItemType.Safari_ticket].isUnlocked()) {
            App.game.keyItems.gainKeyItem(KeyItemType.Safari_ticket, true);
        }
        // Check if Giovanni has been defeated, but have no gem case yet
        if (App.game.badgeCase.badgeList[BadgeEnums.Earth]() && !App.game.keyItems.itemList[KeyItemType.Gem_case].isUnlocked()) {
            App.game.keyItems.gainKeyItem(KeyItemType.Gem_case, true);
        }
        // Check that none of our quest are less than their initial value
        App.game.quests.questLines().filter(q => q.state() == 1 && q.curQuest() < q.quests().length).forEach(questLine => {
            const quest = questLine.curQuestObject();
            if (quest instanceof MultipleQuestsQuest) {
                quest.quests.forEach((q) => {
                    if (q.initial() > q.focus()) {
                        q.initial(q.focus());
                    }
                });
            }
            else {
                if (quest.initial() > quest.focus()) {
                    quest.initial(quest.focus());
                    questLine.curQuestInitial(quest.initial());
                }
            }
        });
        // Check for breeding pokemons not in queue
        const breeding = [...App.game.breeding.eggList.map((l) => l().pokemon), ...App.game.breeding.queueList()];
        App.game.party.caughtPokemon.filter((p) => p.breeding).forEach((p) => {
            if (!breeding.includes(p.id)) {
                p.breeding = false;
            }
        });
        // Egg partyPokemon requires App.game.party and cannot be set until after loading is complete
        App.game.breeding.eggList.filter(e => e().pokemon).forEach(e => {
            e().setPartyPokemon();
        });
        // Kick player out of Client Island if they are not on the client
        if (!App.isUsingClient && player._townName === 'Client Island') {
            MapHelper.moveToTown('One Island');
        }
    }
    start() {
        var _a;
        console.log(`[${GameConstants.formatDate(new Date())}] %cGame started`, 'color:#2ecc71;font-weight:900;');
        if (player.regionStarters[GameConstants.Region.kanto]() === GameConstants.Starter.None) {
            StartSequenceRunner.start();
        }
        let pageHidden = document.hidden;
        // requestAnimationFrame (consistent if page visible)
        let lastFrameTime = 0;
        let ticks = 0;
        const tick = (currentFrameTime) => {
            // Don't process while page hidden
            if (pageHidden) {
                this.frameRequest = requestAnimationFrame(tick);
                return;
            }
            const delta = currentFrameTime - lastFrameTime;
            ticks += delta;
            lastFrameTime = currentFrameTime;
            if (ticks >= GameConstants.TICK_TIME) {
                // Skip the ticks if we have too many...
                if (ticks >= GameConstants.TICK_TIME * 2) {
                    ticks = 0;
                }
                else {
                    ticks -= GameConstants.TICK_TIME;
                }
                this.gameTick();
            }
            this.frameRequest = requestAnimationFrame(tick);
        };
        this.frameRequest = requestAnimationFrame(tick);
        // Try start our webworker so we can process stuff while the page isn't focused
        try {
            console.log(`[${GameConstants.formatDate(new Date())}] %cStarting web worker..`, 'color:#8e44ad;font-weight:900;');
            const blob = new Blob([
                `
                // Window visibility state
                let pageHidden = false;
                self.onmessage = function(e) {
                    if (e.data.pageHidden != undefined) {
                        pageHidden = e.data.pageHidden;
                    }
                };

                // setInterval (slightly slower on FireFox)
                const tickInterval = setInterval(() => {
                    // Don't process while page visible
                    if (!pageHidden) return;

                    postMessage('tick')
                }, ${GameConstants.TICK_TIME});
                `,
            ]);
            const blobURL = window.URL.createObjectURL(blob);
            this.worker = new Worker(blobURL);
            // use a setTimeout to queue the event
            (_a = this.worker) === null || _a === void 0 ? void 0 : _a.addEventListener('message', () => Settings.getSetting('useWebWorkerForGameTicks').value ? this.gameTick() : null);
            document.addEventListener('visibilitychange', () => {
                // Let our worker know if the page is visible or not
                if (pageHidden != document.hidden) {
                    pageHidden = document.hidden;
                    this.worker.postMessage({ 'pageHidden': pageHidden });
                }
                // Save resources by not displaying updates if game is not currently visible
                const gameEl = document.getElementById('game');
                document.hidden ? gameEl.classList.add('hidden') : gameEl.classList.remove('hidden');
            });
            this.worker.postMessage({ 'pageHidden': pageHidden });
            if (this.worker) {
                console.log(`[${GameConstants.formatDate(new Date())}] %cWeb worker started`, 'color:#2ecc71;font-weight:900;');
            }
        }
        catch (e) {
            console.error(`[${GameConstants.formatDate(new Date())}] Web worker error`, e);
        }
        window.onbeforeunload = () => {
            this.save();
        };
        console.log('%cStop!', 'color: red; font-size: 36px; font-weight: bold;');
        console.log('%cThis is a browser feature intended for developers. If you were told to copy-paste or enter something here to obtain an easter egg or unlock a secret, it can corrupt your save file, cause bugs, or otherwise break your game.', 'color: red; font-size: 16px;');
    }
    stop() {
        cancelAnimationFrame(this.frameRequest);
        window.onbeforeunload = () => { };
    }
    gameTick() {
        // Acheivements
        Game.achievementCounter += GameConstants.TICK_TIME;
        if (Game.achievementCounter >= GameConstants.ACHIEVEMENT_TICK) {
            Game.achievementCounter = 0;
            AchievementHandler.checkAchievements();
            GameHelper.incrementObservable(App.game.statistics.secondsPlayed);
        }
        // Battles
        switch (this.gameState) {
            case GameConstants.GameState.fighting: {
                Battle.counter += GameConstants.TICK_TIME;
                if (Battle.counter >= GameConstants.BATTLE_TICK) {
                    Battle.tick();
                }
                break;
            }
            case GameConstants.GameState.gym: {
                GymBattle.counter += GameConstants.TICK_TIME;
                if (GymBattle.counter >= GameConstants.BATTLE_TICK) {
                    GymBattle.tick();
                }
                GymRunner.tick();
                break;
            }
            case GameConstants.GameState.dungeon: {
                DungeonBattle.counter += GameConstants.TICK_TIME;
                if (DungeonBattle.counter >= GameConstants.BATTLE_TICK) {
                    DungeonBattle.tick();
                }
                DungeonRunner.tick();
                break;
            }
            case GameConstants.GameState.battleFrontier: {
                BattleFrontierBattle.counter += GameConstants.TICK_TIME;
                if (BattleFrontierBattle.counter >= GameConstants.BATTLE_FRONTIER_TICK) {
                    BattleFrontierBattle.tick();
                }
                BattleFrontierRunner.tick();
                break;
            }
            case GameConstants.GameState.temporaryBattle: {
                TemporaryBattleBattle.counter += GameConstants.TICK_TIME;
                if (TemporaryBattleBattle.counter >= GameConstants.BATTLE_TICK) {
                    TemporaryBattleBattle.tick();
                }
                TemporaryBattleRunner.tick();
                break;
            }
        }
        // Auto Save
        Save.counter += GameConstants.TICK_TIME;
        if (Save.counter > GameConstants.SAVE_TICK) {
            const old = new Date(player._lastSeen);
            const now = new Date();
            // Check if it's a new day
            if (old.toLocaleDateString() !== now.toLocaleDateString()) {
                // Time traveller flag
                if (old > now) {
                    Notifier.notify({
                        title: 'Welcome Time Traveller!',
                        message: `Please ensure you keep a backup of your old save as travelling through time can cause some serious problems.

                        Any Pokémon you may have obtained in the future could cease to exist which could corrupt your save file!`,
                        type: NotificationConstants.NotificationOption.danger,
                        timeout: GameConstants.HOUR,
                    });
                    player._timeTraveller = true;
                }
                GameHelper.updateDay();
                App.game.farming.mutations.find(m => m instanceof EnigmaMutation).resetIndex();
                SeededDateRand.seedWithDate(now);
                // Give the player a free quest refresh
                this.quests.freeRefresh(true);
                //Refresh the Underground deals
                BerryDeal.generateDeals(now);
                if (App.game.quests.isDailyQuestsUnlocked()) {
                    Notifier.notify({
                        title: 'It\'s a new day!',
                        message: `${App.game.quests.isDailyQuestsUnlocked() ? '<i>You have a free quest refresh.</i>' : ''}`,
                        type: NotificationConstants.NotificationOption.info,
                        timeout: 3e4,
                    });
                }
                // Give the players more Battle Cafe spins
                BattleCafeController.spinsLeft(BattleCafeController.spinsPerDay());
                // Generate the weather forecast
                WeatherApp.initialize();
                // Refresh Friend Safari Pokemon List
                SafariPokemonList.generateKalosSafariList();
                // Reset some temporary battles
                Object.values(TemporaryBattleList).forEach(t => {
                    var _a;
                    if ((_a = t.optionalArgs) === null || _a === void 0 ? void 0 : _a.resetDaily) {
                        this.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex(t.name)](0);
                    }
                });
            }
            // Check if it's a new hour
            if (old.getHours() !== now.getHours()) {
                Weather.generateWeather(now);
                RoamingPokemonList.generateIncreasedChanceRoutes(now);
                // Check if it's weather change time
                if (now.getHours() % Weather.period === 0) {
                    WeatherApp.checkDateHasPassed();
                }
            }
            player._lastSeen = Date.now();
            this.save();
        }
        // Underground
        if (this.underground.canAccess()) {
            this.underground.update(GameConstants.TICK_TIME / GameConstants.SECOND);
        }
        // Farm
        this.farming.update(GameConstants.TICK_TIME / GameConstants.SECOND);
        // Effect Engine (battle items and flutes)
        EffectEngineRunner.counter += GameConstants.TICK_TIME;
        if (EffectEngineRunner.counter >= GameConstants.EFFECT_ENGINE_TICK) {
            EffectEngineRunner.tick();
        }
        FluteEffectRunner.counter += GameConstants.TICK_TIME;
        if (FluteEffectRunner.counter >= GameConstants.EFFECT_ENGINE_TICK) {
            FluteEffectRunner.tick();
        }
        this.zMoves.counter += GameConstants.TICK_TIME;
        if (this.zMoves.counter >= GameConstants.ZMOVE_TICK) {
            this.zMoves.tick();
        }
        // Game timers
        GameHelper.counter += GameConstants.TICK_TIME;
        if (GameHelper.counter >= GameConstants.MINUTE) {
            GameHelper.tick();
        }
        // Check our save reminder once every 5 minutes
        SaveReminder.counter += GameConstants.TICK_TIME;
        if (SaveReminder.counter >= 5 * GameConstants.MINUTE) {
            SaveReminder.tick();
        }
        // update event calendar
        this.specialEvents.counter += GameConstants.TICK_TIME;
        if (this.specialEvents.counter >= GameConstants.SPECIAL_EVENT_TICK) {
            this.specialEvents.tick();
        }
    }
    save() {
        if (Settings.getSetting('disableAutoSave').value === false) {
            Save.store(player);
        }
    }
    // Knockout getters/setters
    get gameState() {
        return this._gameState();
    }
    set gameState(value) {
        this._gameState(value);
    }
}
Game.achievementCounter = 0;
/**
 * Class which controls the UI of the game.
 */
class GameController {
    static showMapTooltip(tooltipText) {
        if (tooltipText) {
            const tooltip = $('#mapTooltip');
            tooltip.text(tooltipText);
            tooltip.css('visibility', 'visible');
        }
    }
    static hideMapTooltip() {
        const tooltip = $('#mapTooltip');
        tooltip.text('');
        tooltip.css('visibility', 'hidden');
    }
    static convertKey(key) {
        let newKey = key.length > 1 ? key : key.toUpperCase();
        if (newKey == ' ') {
            newKey = 'Space';
        }
        return newKey;
    }
    static simulateKey(code, type = 'keydown', modifiers = {}) {
        const evtName = type.startsWith('key') ? type : `key${type}`;
        const event = document.createEvent('HTMLEvents');
        Object.defineProperties(event, {
            key: { value: code },
        });
        event.initEvent(evtName, true, false);
        for (const i in modifiers) {
            event[i] = modifiers[i];
        }
        document.dispatchEvent(event);
    }
    static bindToolTips() {
        $('[data-toggle="popover"]').popover();
        $('[data-toggle="tooltip"]').tooltip();
    }
    //Event listeners for hide, hidden and shown. hide is required to prevent 'softlocking' and bricking Bootstrap when closed externally
    static addKeyListeners() {
        // Oak Items
        const oakItems = App.game.oakItems;
        const $oakItemsModal = $('#oakItemsModal');
        $oakItemsModal.on('hide.bs.modal', _ => $oakItemsModal.data('disable-toggle', true));
        $oakItemsModal.on('hidden.bs.modal shown.bs.modal', _ => $oakItemsModal.data('disable-toggle', false));
        // Pokeball Selector
        const pokeballs = App.game.pokeballs;
        const $pokeballSelector = $('#pokeballSelectorModal');
        $pokeballSelector.on('hide.bs.modal', _ => $pokeballSelector.data('disable-toggle', true));
        $pokeballSelector.on('hidden.bs.modal shown.bs.modal', _ => $pokeballSelector.data('disable-toggle', false));
        // Underground
        const underground = App.game.underground;
        const $undergroundModal = $('#mineModal');
        $undergroundModal.on('hide.bs.modal', _ => $undergroundModal.data('disable-toggle', true));
        $undergroundModal.on('hidden.bs.modal shown.bs.modal', _ => $undergroundModal.data('disable-toggle', false));
        // Quests
        const quests = App.game.quests;
        const $questModal = $('#QuestModal');
        $questModal.on('hide.bs.modal', _ => $questModal.data('disable-toggle', true));
        $questModal.on('hidden.bs.modal shown.bs.modal', _ => $questModal.data('disable-toggle', false));
        // Farm
        const farms = App.game.farming;
        const $farmsModal = $('#farmModal');
        $farmsModal.on('hide.bs.modal', _ => $farmsModal.data('disable-toggle', true));
        $farmsModal.on('hidden.bs.modal shown.bs.modal', _ => $farmsModal.data('disable-toggle', false));
        // Hatchery
        const hatchery = App.game.breeding;
        const $hatcheryModal = $('#breedingModal');
        $hatcheryModal.on('hide.bs.modal', _ => $hatcheryModal.data('disable-toggle', true));
        $hatcheryModal.on('hidden.bs.modal shown.bs.modal', _ => $hatcheryModal.data('disable-toggle', false));
        // Achievements Tracker
        const achievements = App.game.achievementTracker;
        const $achievementsModal = $('#achievementsModal');
        $achievementsModal.on('hide.bs.modal', _ => $achievementsModal.data('disable-toggle', true));
        $achievementsModal.on('hidden.bs.modal shown.bs.modal', _ => $achievementsModal.data('disable-toggle', false));
        // Shop
        const $shopModal = $('#shopModal');
        $shopModal.on('hide.bs.modal', _ => $shopModal.data('disable-toggle', true));
        $shopModal.on('hidden.bs.modal shown.bs.modal', _ => $shopModal.data('disable-toggle', false));
        // Castform App (Weather)
        const $weatherModal = $('#weatherAppModal');
        $weatherModal.on('hide.bs.modal', _ => $weatherModal.data('disable-toggle', true));
        $weatherModal.on('hidden.bs.modal shown.bs.modal', _ => $weatherModal.data('disable-toggle', false));
        // Purify Chamber
        const $purifyChamberModal = $('#purifyChamberModal');
        $purifyChamberModal.on('hide.bs.modal', _ => $purifyChamberModal.data('disable-toggle', true));
        $purifyChamberModal.on('hidden.bs.modal shown.bs.modal', _ => $purifyChamberModal.data('disable-toggle', false));
        // Ship
        const $shipModal = $('#ShipModal');
        // Modal Collapse
        $(GameConstants.ModalCollapseList).map(function () {
            const id = `#${this}`;
            const method = Settings.getSetting(`modalCollapse.${this}`).value ? 'show' : 'hide';
            $(id).collapse(method);
            return $(id).get();
        }).on('show.bs.collapse', function () {
            Settings.setSettingByName(`modalCollapse.${this.id}`, true);
        }).on('hide.bs.collapse', function () {
            Settings.setSettingByName(`modalCollapse.${this.id}`, false);
        });
        $(document).on('keydown', e => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
            // Ignore any of our controls if focused on an input element
            if (GameHelper.focusedOnEditableElement()) {
                return;
            }
            const key = GameController.convertKey(e.key);
            // Set flags for any key currently pressed down (used to check if key held down currently)
            if (GameController.keyHeld[key]) {
                GameController.keyHeld[key](true);
            }
            else {
                GameController.keyHeld[key] = ko.observable(true).extend({ boolean: null });
            }
            // Set our number key if defined (-1 for 0 indexed)
            const numberKey = (+key) - 1;
            const isNumberKey = !isNaN(numberKey) && numberKey >= 0;
            const visibleModals = $('.modal:visible').length;
            //Global Multi-key combinations
            if (isNumberKey) {
                if ((_b = (_a = GameController.keyHeld)[Settings.getSetting('hotkey.pokeballSelection').value]) === null || _b === void 0 ? void 0 : _b.call(_a)) {
                    // Open pokeball selector modal using P + (1-4) for each condition
                    if (!((_c = $pokeballSelector.data('bs.modal')) === null || _c === void 0 ? void 0 : _c._isShown) && !$pokeballSelector.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        (_d = $('#pokeballSelectorBody .clickable.pokeball-selected').eq(numberKey)) === null || _d === void 0 ? void 0 : _d.trigger('click');
                        return e.preventDefault();
                    }
                }
            }
            // Safari Zone
            if (App.game.gameState === GameConstants.GameState.safari) {
                switch (key) {
                    case 'ArrowUp':
                    case Settings.getSetting('hotkey.dungeon.up').value:
                        Safari.move('up');
                        break;
                    case 'ArrowLeft':
                    case Settings.getSetting('hotkey.dungeon.left').value:
                        Safari.move('left');
                        break;
                    case 'ArrowDown':
                    case Settings.getSetting('hotkey.dungeon.down').value:
                        Safari.move('down');
                        break;
                    case 'ArrowRight':
                    case Settings.getSetting('hotkey.dungeon.right').value:
                        Safari.move('right');
                        break;
                    case Settings.getSetting('hotkey.safari.ball').value:
                        SafariBattle.throwBall();
                        break;
                    case Settings.getSetting('hotkey.safari.bait').value:
                        SafariBattle.throwBait();
                        break;
                    case Settings.getSetting('hotkey.safari.rock').value:
                        SafariBattle.throwRock();
                        break;
                    case Settings.getSetting('hotkey.safari.run').value:
                        SafariBattle.run();
                        break;
                }
                // We don't want to process any other keys while in the Safari zone
                return e.preventDefault();
            }
            // Within modals
            if ((_e = $farmsModal.data('bs.modal')) === null || _e === void 0 ? void 0 : _e._isShown) {
                switch (key) {
                    case Settings.getSetting('hotkey.farm.toggleShovel').value:
                        [FarmingTool.Shovel, FarmingTool.MulchShovel].includes(FarmController.selectedFarmTool()) ? FarmController.selectedFarmTool(FarmController.berryListVisible() ? FarmingTool.Berry : FarmingTool.Mulch) : FarmController.selectedFarmTool(FarmController.berryListVisible() ? FarmingTool.Shovel : FarmingTool.MulchShovel);
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.farm.togglePlotSafeLock').value:
                        FarmController.selectedFarmTool() == FarmingTool.Lock ? FarmController.selectedFarmTool(FarmController.berryListVisible() ? FarmingTool.Berry : FarmingTool.Mulch) : FarmController.selectedFarmTool(FarmingTool.Lock);
                        return e.preventDefault();
                }
            }
            if ((_f = $undergroundModal.data('bs.modal')) === null || _f === void 0 ? void 0 : _f._isShown) {
                switch (key) {
                    case Settings.getSetting('hotkey.underground.hammer').value:
                        App.game.underground.tools.selectedToolType = UndergroundToolType.Hammer;
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.underground.chisel').value:
                        App.game.underground.tools.selectedToolType = UndergroundToolType.Chisel;
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.underground.bomb').value:
                        App.game.underground.tools.selectedToolType = UndergroundToolType.Bomb;
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.underground.survey').value:
                        App.game.underground.tools.selectedToolType = UndergroundToolType.Survey;
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.underground.discharge').value:
                        App.game.underground.battery.discharge();
                        return e.preventDefault();
                }
            }
            if ((_g = $oakItemsModal.data('bs.modal')) === null || _g === void 0 ? void 0 : _g._isShown) {
                // Toggle oak items
                if (isNumberKey) {
                    if (oakItems.isUnlocked(numberKey)) {
                        if (oakItems.isActive(numberKey)) {
                            oakItems.deactivate(numberKey);
                        }
                        else {
                            oakItems.activate(numberKey);
                        }
                    }
                    return e.preventDefault();
                }
            }
            if ((_h = $pokeballSelector.data('bs.modal')) === null || _h === void 0 ? void 0 : _h._isShown) {
                if (isNumberKey) {
                    // Switch selection type
                    if ((_k = (_j = GameController.keyHeld)[Settings.getSetting('hotkey.pokeballSelection').value]) === null || _k === void 0 ? void 0 : _k.call(_j)) {
                        (_l = $('#pokeballSelectorBody .clickable.pokeball-selected').eq(numberKey)) === null || _l === void 0 ? void 0 : _l.trigger('click');
                        return e.preventDefault();
                    }
                    // Select Pokeball from pokeball selector (0 = none)
                    if (numberKey < App.game.pokeballs.pokeballs.length) {
                        (_m = pokeballs.selectedSelection()) === null || _m === void 0 ? void 0 : _m(numberKey);
                    }
                    return e.preventDefault();
                }
            }
            if ((_o = $shipModal.data('bs.modal')) === null || _o === void 0 ? void 0 : _o._isShown) {
                if (isNumberKey) {
                    if (numberKey <= player.highestRegion()) {
                        const regionButton = $('.ship-modal-region-button').eq(numberKey);
                        if (regionButton && !regionButton.prop('disabled')) {
                            regionButton.trigger('click');
                        }
                    }
                    return e.preventDefault();
                }
            }
            if ((_p = $shopModal.data('bs.modal')) === null || _p === void 0 ? void 0 : _p._isShown) {
                if (isNumberKey) {
                    if (numberKey <= ShopHandler.shopObservable().items.length) {
                        ShopHandler.setSelected(numberKey);
                    }
                    return e.preventDefault();
                }
                switch (key) {
                    case Settings.getSetting('hotkey.shop.buy').value:
                        ShopHandler.buyItem();
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.shop.max').value:
                        ShopHandler.maxAmount();
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.shop.reset').value:
                        ShopHandler.resetAmount();
                        return e.preventDefault();
                    case Settings.getSetting('hotkey.shop.increase').value:
                        if (GameController.keyHeld.Shift()) {
                            switch (Settings.getSetting('shopButtons').value) {
                                case 'original':
                                    ShopHandler.increaseAmount(100);
                                    break;
                                case 'multiplication':
                                    ShopHandler.multiplyAmount(0.1);
                                    break;
                                case 'bigplus':
                                    ShopHandler.increaseAmount(1000);
                                    break;
                            }
                        }
                        else {
                            switch (Settings.getSetting('shopButtons').value) {
                                case 'original':
                                    ShopHandler.increaseAmount(10);
                                    break;
                                case 'multiplication':
                                    ShopHandler.multiplyAmount(10);
                                    break;
                                case 'bigplus':
                                    ShopHandler.increaseAmount(100);
                                    break;
                            }
                        }
                        return e.preventDefault();
                }
            }
            // Only run if no modals are open
            if (visibleModals === 0) {
                // Route Battles
                if (App.game.gameState === GameConstants.GameState.fighting && !((_r = (_q = GameController.keyHeld).Control) === null || _r === void 0 ? void 0 : _r.call(_q))) {
                    const cycle = Routes.getRoutesByRegion(player.region).filter(r => r.isUnlocked()).map(r => r.number);
                    if (cycle.length > 1) {
                        const idx = cycle.findIndex(r => r == player.route);
                        // Allow '=' to fallthrough to '+' since they share a key on many keyboards
                        switch (key) {
                            case '=':
                            case '+':
                                MapHelper.moveToRoute(cycle[(idx + 1) % cycle.length], player.region);
                                return e.preventDefault();
                            case '-':
                                MapHelper.moveToRoute(cycle[(idx + cycle.length - 1) % cycle.length], player.region);
                                return e.preventDefault();
                        }
                    }
                }
                // Dungeons
                if (App.game.gameState === GameConstants.GameState.dungeon) {
                    switch (key) {
                        case 'ArrowUp':
                        case Settings.getSetting('hotkey.dungeon.up').value:
                            DungeonRunner.map.moveUp();
                            return e.preventDefault();
                        case 'ArrowLeft':
                        case Settings.getSetting('hotkey.dungeon.left').value:
                            DungeonRunner.map.moveLeft();
                            return e.preventDefault();
                        case 'ArrowDown':
                        case Settings.getSetting('hotkey.dungeon.down').value:
                            DungeonRunner.map.moveDown();
                            return e.preventDefault();
                        case 'ArrowRight':
                        case Settings.getSetting('hotkey.dungeon.right').value:
                            DungeonRunner.map.moveRight();
                            return e.preventDefault();
                        case Settings.getSetting('hotkey.dungeon.interact').value:
                            DungeonRunner.handleInteraction(GameConstants.DungeonInteractionSource.Keybind);
                            DungeonRunner.continuousInteractionInput = true;
                            return e.preventDefault();
                    }
                }
                // Within towns
                if (App.game.gameState === GameConstants.GameState.town) {
                    if (key === Settings.getSetting('hotkey.town.start').value) {
                        if (player.town instanceof DungeonTown) {
                            DungeonRunner.initializeDungeon(player.town.dungeon);
                        }
                        else {
                            player.town.content[0].protectedOnclick();
                        }
                        return e.preventDefault();
                    }
                    else if (isNumberKey) {
                        // Check if a number higher than 0 and less than our towns content was pressed
                        const filteredContent = player.town.content.filter(c => c.isVisible());
                        const filteredNPCs = (_s = player.town.npcs) === null || _s === void 0 ? void 0 : _s.filter(n => n.isVisible());
                        if (numberKey < filteredContent.length) {
                            filteredContent[numberKey].protectedOnclick();
                        }
                        else if (filteredNPCs && numberKey < filteredContent.length + filteredNPCs.length) {
                            NPCController.openDialog(filteredNPCs[numberKey - filteredContent.length]);
                        }
                        return e.preventDefault();
                    }
                    else if (player.town instanceof DungeonTown && !((_u = (_t = GameController.keyHeld).Control) === null || _u === void 0 ? void 0 : _u.call(_t))) {
                        const cycle = Object.values(TownList).filter(t => t instanceof DungeonTown && t.region == player.region && t.isUnlocked());
                        const idx = cycle.findIndex(d => d.name == player.town.name);
                        switch (key) {
                            case '=':
                            case '+':
                                MapHelper.moveToTown(cycle[(idx + 1) % cycle.length].name);
                                return e.preventDefault();
                            case '-':
                                MapHelper.moveToTown(cycle[(idx + cycle.length - 1) % cycle.length].name);
                                return e.preventDefault();
                        }
                    }
                }
            }
            // Anywhere keys
            switch (key) {
                case Settings.getSetting('hotkey.farm').value:
                    // Open the Farm
                    if (farms.canAccess() && !$farmsModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $farmsModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.hatchery').value:
                    // Open the Hatchery
                    if (hatchery.canAccess() && !$hatcheryModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $hatcheryModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.achievementsTracker').value:
                    // Open the achievmeents tracker
                    if (achievements.canAccess() && !$achievementsModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $achievementsModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.oakItems').value:
                    // Open oak items
                    if (oakItems.canAccess() && !$oakItemsModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $oakItemsModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.underground').value:
                    // Open the Underground
                    if (underground.canAccess() && !$undergroundModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $undergroundModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.shop').value:
                    // Open the Poke Mart
                    if (App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Champion Lance')]() >= 1 && !$shopModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        ShopHandler.showShop(pokeMartShop);
                        $shopModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.forceSave').value:
                    if (GameController.keyHeld.Shift()) {
                        Save.store(player);
                        Notifier.notify({ message: 'Game Saved!' });
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.downloadSave').value:
                    if (GameController.keyHeld.Shift()) {
                        Save.download();
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.mute').value:
                    if (GameController.keyHeld.Shift()) {
                        Settings.getSetting('sound.muted').toggle();
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.dailyQuests').value:
                    // Open the Quests
                    if (quests.isDailyQuestsUnlocked() && !$questModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        $questModal.modal('toggle');
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.castformApp').value:
                    if (WeatherApp.shortcutVisible() && !$weatherModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        WeatherApp.openWeatherAppModal();
                        return e.preventDefault();
                    }
                    break;
                case Settings.getSetting('hotkey.purifyChamber').value:
                    if (PurifyChamber.shortcutVisible() && !$purifyChamberModal.data('disable-toggle')) {
                        $('.modal').modal('hide');
                        PurifyChamber.openPurifyChamberModal();
                        return e.preventDefault();
                    }
                    break;
            }
            if (key === 'Space') {
                return e.preventDefault();
            }
        });
        $(document).on('keyup', e => {
            var _a, _b;
            // Ignore any of our controls if focused on an input element
            if (GameHelper.focusedOnEditableElement()) {
                return;
            }
            const key = GameController.convertKey(e.key);
            // Our key is no longer being held down
            (_b = (_a = GameController.keyHeld)[key]) === null || _b === void 0 ? void 0 : _b.call(_a, false);
            if (App.game.gameState === GameConstants.GameState.safari) {
                switch (key) {
                    case 'ArrowUp':
                    case Settings.getSetting('hotkey.dungeon.up').value:
                        Safari.stop('up');
                        return e.preventDefault();
                    case 'ArrowLeft':
                    case Settings.getSetting('hotkey.dungeon.left').value:
                        Safari.stop('left');
                        return e.preventDefault();
                    case 'ArrowDown':
                    case Settings.getSetting('hotkey.dungeon.down').value:
                        Safari.stop('down');
                        return e.preventDefault();
                    case 'ArrowRight':
                    case Settings.getSetting('hotkey.dungeon.right').value:
                        Safari.stop('right');
                        return e.preventDefault();
                }
            }
            if (key === Settings.getSetting('hotkey.dungeon.interact').value) {
                DungeonRunner.continuousInteractionInput = false;
                return e.preventDefault();
            }
            if (key === 'Space') {
                return e.preventDefault();
            }
        });
    }
}
// Store keys for multi-key combinations
GameController.keyHeld = {
    Shift: ko.observable(false).extend({ boolean: null }),
};
// when stacking modals allow scrolling after top modal hidden
$(document).on('hidden.bs.modal', '.modal', () => {
    $('.modal:visible').length && $(document.body).addClass('modal-open');
});
/// <reference path="../declarations/TemporaryScriptTypes.d.ts" />
/// <reference path="../declarations/upgrades/Upgrade.d.ts" />
/**
 * Required modules before porting:
 * Save.ts
 * upgrades/Upgrade.ts
 * towns/Town.ts - Town, TownList
 * worldmap/MapHelper.ts
 * items/Item.ts - ItemList
 */
/**
 * Information about the player.
 * All player variables need to be saved.
 */
class Player {
    constructor(savedPlayer) {
        var _a, _b, _c, _d;
        this._timeTraveller = false;
        this.effectList = {};
        this.effectTimer = {};
        const saved = (savedPlayer != null);
        savedPlayer = savedPlayer || {
            _region: GameConstants.Region.kanto,
            _route: 1,
        };
        this._lastSeen = savedPlayer._lastSeen || 0;
        this._timeTraveller = savedPlayer._timeTraveller || false;
        if (this._lastSeen > Date.now()) {
            Notifier.notify({
                title: 'Welcome Time Traveller!',
                message: 'Please ensure you keep a backup of your old save as travelling through time can cause some serious problems.\n\nAny Pokémon you may have obtained in the future could cease to exist which could corrupt your save file!',
                type: NotificationConstants.NotificationOption.danger,
                timeout: GameConstants.HOUR,
            });
            this._timeTraveller = true;
        }
        this._region = ko.observable(savedPlayer._region);
        this._subregion = ko.observable(savedPlayer._subregion || 0);
        this.subregionObject = ko.pureComputed(() => SubRegions.getSubRegionById(this.region, this.subregion));
        this._route = ko.observable(savedPlayer._route);
        // Check that the route is valid, otherwise set it to the regions starting route (route 0 means they are in a town)
        if (this.route > 0 && !MapHelper.validRoute(this.route, this.region)) {
            this.route = GameConstants.StartingRoutes[this.region];
        }
        // Return player to last town or starter town if their town no longer exist for whatever reason
        this._townName = TownList[savedPlayer._townName] ? savedPlayer._townName : GameConstants.StartingTowns[this.region];
        this._town = ko.observable(TownList[this._townName]);
        this._town.subscribe(value => this._townName = value.name);
        this.highestRegion = ko.observable(savedPlayer.highestRegion || 0);
        this.highestSubRegion = ko.observable(savedPlayer.highestSubRegion || 0);
        this.regionStarters = new Array();
        for (let i = 0; i <= GameConstants.MAX_AVAILABLE_REGION; i++) {
            this.regionStarters.push(ko.observable((_b = (_a = savedPlayer.regionStarters) === null || _a === void 0 ? void 0 : _a[i]) !== null && _b !== void 0 ? _b : GameConstants.Starter.None));
        }
        this._itemList = Save.initializeItemlist();
        if (savedPlayer._itemList) {
            for (const key in savedPlayer._itemList) {
                if (this.itemList[key]) {
                    this.itemList[key](savedPlayer._itemList[key]);
                }
            }
        }
        this._itemMultipliers = savedPlayer._itemMultipliers || Save.initializeMultipliers();
        this.effectList = Save.initializeEffects(savedPlayer.effectList || {});
        this.effectTimer = Save.initializeEffectTimer();
        // Save game origins, useful for tracking down any errors that may not be related to the main game
        this._origins = [...new Set((savedPlayer._origins || [])).add((_c = window.location) === null || _c === void 0 ? void 0 : _c.origin)];
        this.trainerId = savedPlayer.trainerId || Rand.intBetween(0, 999999).toString().padStart(6, '0');
        this._createdTime = (_d = savedPlayer._createdTime) !== null && _d !== void 0 ? _d : Date.now();
    }
    get itemList() {
        return this._itemList;
    }
    amountOfItem(itemName) {
        return this.itemList[itemName]();
    }
    get itemMultipliers() {
        return this._itemMultipliers;
    }
    get route() {
        return this._route();
    }
    set route(value) {
        this._route(value);
    }
    get region() {
        return this._region();
    }
    set region(value) {
        this._region(value);
    }
    get subregion() {
        return this._subregion();
    }
    set subregion(value) {
        if (value < 0) {
            value = Math.max(...SubRegions.getSubRegions(this.region).filter(sr => sr.unlocked()).map(sr => sr.id));
        }
        if (value > Math.max(...SubRegions.getSubRegions(this.region).filter(sr => sr.unlocked()).map(sr => sr.id))) {
            value = 0;
        }
        const changedSubregions = value !== this.subregion;
        this._subregion(value);
        if (value > this.highestSubRegion()) {
            this.highestSubRegion(value);
        }
        if (changedSubregions) {
            const subregion = SubRegions.getSubRegionById(this.region, value);
            if (subregion.startRoute && subregion.startRoute !== this.route) {
                MapHelper.moveToRoute(subregion.startRoute, this.region);
            }
            else if (subregion.startTown && subregion.startTown !== this.town.name) {
                MapHelper.moveToTown(subregion.startTown);
            }
        }
    }
    get town() {
        return this._town();
    }
    set town(value) {
        this._town(value);
    }
    gainItem(itemName, amount) {
        this.itemList[itemName](this.itemList[itemName]() + amount);
    }
    loseItem(itemName, amount) {
        this.itemList[itemName](this.itemList[itemName]() - amount);
    }
    lowerItemMultipliers(multiplierDecreaser, amount = 1) {
        for (const obj in ItemList) {
            const item = ItemList[obj];
            item.decreasePriceMultiplier(amount, multiplierDecreaser);
        }
    }
    hasMegaStone(megaStone) {
        return this.itemList[GameConstants.MegaStoneType[megaStone]]() > 0;
    }
    gainMegaStone(megaStone, notify = true) {
        const name = GameConstants.MegaStoneType[megaStone];
        if (!this.itemList[name]()) {
            this.gainItem(name, 1);
        }
        if (notify) {
            const item = ItemList[GameConstants.MegaStoneType[megaStone]];
            const partyPokemon = App.game.party.getPokemonByName(item.basePokemon);
            Notifier.notify({
                message: partyPokemon ? `${partyPokemon.displayName} has gained a Mega Stone!` : `You have gained a Mega Stone for ${item.basePokemon}!`,
                type: NotificationConstants.NotificationOption.success,
            });
        }
    }
    pickStarter(index) {
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SHOP);
        App.game.party.gainPokemonById(GameConstants.RegionalStarters[this.region][index], shiny);
        this.regionStarters[this.region](index);
    }
    hasBeatenChampOfRegion(region = this.highestRegion()) {
        const champion = GameConstants.RegionGyms[region].find(gym => { var _a; return (_a = GymList[gym]) === null || _a === void 0 ? void 0 : _a.flags.champion; });
        return champion === undefined ? false : App.game.badgeCase.hasBadge(GymList[champion].badgeReward);
    }
    get createdTime() {
        return this._createdTime;
    }
    toJSON() {
        const keep = [
            '_route',
            '_region',
            '_subregion',
            '_townName',
            '_itemList',
            '_itemMultipliers',
            '_lastSeen',
            '_timeTraveller',
            '_origins',
            'effectList',
            'highestRegion',
            'highestSubRegion',
            'regionStarters',
            'trainerId',
            '_createdTime',
        ];
        const plainJS = ko.toJS(this);
        Object.entries(plainJS._itemMultipliers).forEach(([key, value]) => {
            if (value <= 1) {
                delete plainJS._itemMultipliers[key];
            }
        });
        Object.entries(plainJS._itemList).forEach(([key, value]) => {
            if (!value) {
                delete plainJS._itemList[key];
            }
        });
        Object.entries(plainJS.effectList).forEach(([key, value]) => {
            if (!value) {
                delete plainJS.effectList[key];
            }
        });
        return Save.filter(plainJS, keep);
    }
}
/// <reference path="../declarations/TemporaryScriptTypes.d.ts" />
///<reference path="../declarations/Sortable.d.ts"/>
class Save {
    static store(player) {
        localStorage.setItem(`player${Save.key}`, JSON.stringify(player));
        localStorage.setItem(`save${Save.key}`, JSON.stringify(this.getSaveObject()));
        localStorage.setItem(`settings${Save.key}`, JSON.stringify(Settings.toJSON()));
        this.counter = 0;
        //console.log('%cGame saved', 'color:#3498db;font-weight:900;');
    }
    static getSaveObject() {
        const saveObject = {};
        Object.keys(App.game).filter(key => App.game[key].saveKey).forEach(key => {
            saveObject[App.game[key].saveKey] = App.game[key].toJSON();
        });
        saveObject.achievements = AchievementHandler.toJSON();
        return saveObject;
    }
    static load() {
        const saved = localStorage.getItem(`player${Save.key}`);
        // Load our settings, or the saved default settings, or no settings
        const settings = localStorage.getItem(`settings${Save.key}`) || localStorage.getItem('settings') || '{}';
        Settings.fromJSON(JSON.parse(settings));
        // Sort modules now, save settings, load settings
        SortModules();
        if (saved !== 'null') {
            return new Player(JSON.parse(saved));
        }
        else {
            return new Player();
        }
    }
    static download() {
        const backupSaveData = { player, save: this.getSaveObject(), settings: Settings.toJSON() };
        try {
            const element = document.createElement('a');
            element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(SaveSelector.btoa(JSON.stringify(backupSaveData)))}`);
            const datestr = GameConstants.formatDate(new Date());
            const filename = Settings.getSetting('saveFilename').value ? Settings.getSetting('saveFilename').value : Settings.getSetting('saveFilename').defaultValue;
            element.setAttribute('download', GameHelper.saveFileName(filename, { '{date}': datestr, '{version}': App.game.update.version, '{name}': App.game.profile.name() }));
            element.style.display = 'none';
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
            App.game.saveReminder.lastDownloaded(App.game.statistics.secondsPlayed());
        }
        catch (err) {
            console.error('Error trying to download save', err);
            Notifier.notify({
                title: 'Failed to download save data',
                message: 'Please check the console for errors, and report them on our Discord.',
                type: NotificationConstants.NotificationOption.primary,
                timeout: 6e4,
            });
            try {
                localStorage.backupSave = JSON.stringify(backupSaveData);
            }
            catch (e) { }
        }
    }
    static copySaveToClipboard() {
        const backupSaveData = { player, save: this.getSaveObject(), settings: Settings.toJSON() };
        navigator.clipboard.writeText(SaveSelector.btoa(JSON.stringify(backupSaveData)));
        Notifier.notify({
            title: 'Save copied',
            message: 'Please paste the clipboard contents into a new \'.txt\' file.',
            type: NotificationConstants.NotificationOption.info,
        });
    }
    static delete() {
        return __awaiter(this, void 0, void 0, function* () {
            const confirmDelete = yield Notifier.prompt({
                title: 'Delete save file',
                message: 'Are you sure you want delete your save file?\n\nTo confirm, type "DELETE"',
                type: NotificationConstants.NotificationOption.danger,
                timeout: 6e4,
            });
            if (confirmDelete == 'DELETE') {
                localStorage.removeItem(`player${Save.key}`);
                localStorage.removeItem(`save${Save.key}`);
                localStorage.removeItem(`settings${Save.key}`);
                // Prevent the old save from being saved again
                window.onbeforeunload = () => { };
                location.reload();
            }
        });
    }
    /** Filters an object by property names
     * @param     object : any The object you want to filter
     * @param       keep : string[] An array of property names that should be kept
     * @returns {Object} : The original object with only the specified properties
     */
    static filter(object, keep) {
        const filtered = {};
        let prop;
        for (prop in object) {
            if (keep.includes(prop)) {
                filtered[prop] = object[prop];
            }
        }
        return filtered;
    }
    static initializeMultipliers() {
        const res = {};
        for (const obj in ItemList) {
            res[obj] = 1;
        }
        return res;
    }
    static initializeItemlist() {
        const res = {};
        for (const obj in ItemList) {
            res[obj] = ko.observable(0).extend({ numeric: 0 });
        }
        return res;
    }
    static initializeGems(saved) {
        let res;
        if (saved) {
            res = saved.map((type) => {
                return type.map((effectiveness) => {
                    return ko.observable(effectiveness);
                });
            });
        }
        else {
            res = [];
            for (const item in PokemonType) {
                if (!isNaN(Number(item))) {
                    res[item] = [];
                    res[item][GameConstants.TypeEffectiveness.Immune] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.NotVery] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.Neutral] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.Very] = ko.observable(0);
                }
            }
        }
        return res;
    }
    static initializeEffects(saved) {
        const res = {};
        for (const obj in GameConstants.BattleItemType) {
            res[obj] = ko.observable(saved ? saved[obj] || 0 : 0);
        }
        for (const obj in GameConstants.FluteItemType) {
            res[obj] = ko.observable(saved ? saved[obj] || 0 : 0);
        }
        return res;
    }
    static initializeEffectTimer() {
        const res = {};
        for (const obj in GameConstants.BattleItemType) {
            res[obj] = ko.observable('00:00');
        }
        for (const obj in GameConstants.FluteItemType) {
            res[obj] = ko.observable('00:00');
        }
        return res;
    }
    static loadFromFile(file) {
        const fileToRead = file;
        const fr = new FileReader();
        fr.readAsText(fileToRead);
        setTimeout(() => {
            try {
                const decoded = SaveSelector.atob(fr.result);
                console.debug('decoded:', decoded);
                const json = JSON.parse(decoded);
                console.debug('json:', json);
                if (decoded && json && json.player && json.save) {
                    localStorage.setItem(`player${Save.key}`, JSON.stringify(json.player));
                    localStorage.setItem(`save${Save.key}`, JSON.stringify(json.save));
                    if (json.settings) {
                        localStorage.setItem(`settings${Save.key}`, JSON.stringify(json.settings));
                    }
                    else {
                        localStorage.removeItem(`settings${Save.key}`);
                    }
                    // Prevent the old save from being saved again
                    window.onbeforeunload = () => { };
                    location.reload();
                }
                else {
                    Notifier.notify({
                        message: 'This is not a valid decoded savefile',
                        type: NotificationConstants.NotificationOption.danger,
                    });
                }
            }
            catch (err) {
                Notifier.notify({
                    message: 'This is not a valid savefile',
                    type: NotificationConstants.NotificationOption.danger,
                });
            }
        }, 1000);
    }
}
// Process new day events as soon as possible after loading a file.
Save.counter = GameConstants.SAVE_TICK - GameConstants.TICK_TIME;
Save.key = '';
Save;
class StartSequenceRunner {
    static start() {
        App.game.gameState = GameConstants.GameState.paused;
        $('#startSequenceModal').modal('show');
    }
    static pickStarter(s) {
        // Reload the achievements in case the user has any challenge modes activated
        AchievementHandler.load();
        App.game.quests.getQuestLine('Tutorial Quests').beginQuest(0);
        this.starterPicked = s;
        $('#pickStarterTutorialModal').modal('hide');
        const dataPokemon = PokemonHelper.getPokemonById(GameConstants.RegionalStarters[GameConstants.Region.kanto][this.starterPicked]);
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        const gender = PokemonFactory.generateGender(dataPokemon.gender.femaleRatio, dataPokemon.gender.type);
        App.game.gameState = GameConstants.GameState.fighting;
        const battlePokemon = new BattlePokemon(dataPokemon.name, dataPokemon.id, dataPokemon.type1, dataPokemon.type2, 10, 1, 100, 0, new Amount(0, GameConstants.Currency.money), shiny, 0, gender, GameConstants.ShadowStatus.None, EncounterType.route);
        Battle.enemyPokemon(battlePokemon);
        // Show the help information text
        Information.show({
            steps: [
                {
                    element: document.getElementsByClassName('battle-view')[0],
                    intro: 'Click here to deal "Click Attack" damage to Pokémon.',
                },
            ],
        });
        // Set the function to call showCaughtMessage after pokemon is caught
        battlePokemon.isAlive = function () {
            if (battlePokemon.health() <= 0) {
                setTimeout(() => {
                    Information.hide();
                    player.regionStarters[GameConstants.Region.kanto](StartSequenceRunner.starterPicked);
                    App.game.profile.pokemon(dataPokemon.id);
                    // Re-enable filters in case the player toggled off the hidden Capture Starter
                    App.game.pokeballFilters.toggleAllFiltersEnabled(true);
                    StartSequenceRunner.showCaughtMessage();
                }, 1000);
                //reset the function so you don't call it too many times :)
                //What a beautiful piece of code
                battlePokemon.isAlive = function () {
                    return false;
                };
            }
            return this.health() > 0;
        };
    }
    static showCaughtMessage() {
        App.game.gameState = GameConstants.GameState.paused;
        $('#starterCaughtModal').modal('show');
        $('#pokeballSelector').css('display', 'block');
        $('#pokemonListContainer').css('display', 'block');
        $('#oakItemsContainer').css('display', 'block');
        $('#questDisplayContainer').css('display', 'block');
        $('#currencyContainer').css('display', 'block');
    }
}
StartSequenceRunner.starterPicked = GameConstants.Starter.None;
StartSequenceRunner.noStarterCount = 0;
document.addEventListener('DOMContentLoaded', () => {
    $('#startSequenceModal').on('hidden.bs.modal', () => {
        $('#pickStarterTutorialModal').modal('show');
    });
    $('#pickStarterTutorialModal').on('hidden.bs.modal', () => {
        if (StartSequenceRunner.starterPicked == GameConstants.Starter.None) {
            StartSequenceRunner.noStarterCount++;
            const startersCount = StartSequenceRunner.noStarterCount >= 5 ? 'four' : 'three';
            $('#pickStarterTutorialModalText').text(`I can't hold off all ${startersCount}! Please pick the Pokémon you want to fight!`);
            $('#pickStarterTutorialModal').modal('show');
            if (StartSequenceRunner.noStarterCount == 5) {
                // Add Pikachu to the selections
                $('#starterSelection').append(`<div class="col">
                        <input class="image-starter" type="image"
                           src="assets/images/pokemon/25.png"
                           onclick="StartSequenceRunner.pickStarter(GameConstants.Starter.Special)">
                    </div>`);
            }
            if (StartSequenceRunner.noStarterCount == 20) {
                $('#pickStarterTutorialModal .modal-body').append(`<div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input" id="toggleCaptureStarter" onchange="App.game.pokeballFilters.toggleAllFiltersEnabled(this.checked)" checked>
                        <label class="custom-control-label" for="toggleCaptureStarter">Capture Starter</label>
                    </div>`);
            }
        }
    });
    $('#starterCaughtModal').on('hidden.bs.modal', () => {
        Save.store(player);
        App.game.gameState = GameConstants.GameState.fighting;
        Information.show({
            steps: [
                {
                    element: document.getElementById('questDisplayContainer'),
                    intro: 'Complete the tutorial quests to continue.',
                },
            ],
        });
    });
});
class Update {
    constructor() {
        this.saveKey = 'update';
        // Loaded from package.json
        this.version = '0.10.24';
        this.saveVersion = '0.0.0';
        this.updateSteps = {
            '0.4.0': ({ playerData, saveData }) => {
                saveData.update = { version: '0.0.0' };
                // Update the save data as it is no longer a part of player data
                saveData.statistics = Object.assign(Object.assign({}, playerData.statistics || {}), { pokemonCaptured: playerData._caughtAmount || 0, pokemonDefeated: playerData._defeatedAmount || 0, totalShinyPokemonCaptured: playerData._shinyCatches || 0, totalPokemonCaptured: playerData.statistics.pokemonCaptured || 0, totalPokemonDefeated: playerData.statistics.pokemonDefeated || 0 });
            },
            '0.4.4': ({ saveData }) => {
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { clickAttacks: saveData.statistics.clicks || 0, totalDungeonTokens: saveData.statistics.totalTokens || 0, undergroundItemsFound: saveData.statistics.digItems || 0, undergroundLayersMined: saveData.statistics.digDeeper || 0 });
            },
            '0.4.15': ({ playerData, saveData }) => {
                playerData._itemList.Lucky_egg = playerData._itemList.xExp;
                delete playerData._itemList.xExp;
                delete localStorage.mine;
            },
            '0.4.17': ({ saveData }) => {
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalPokemonHatched: saveData.statistics.hatchedEggs || 0 });
            },
            '0.4.18': ({ playerData, saveData }) => {
                // Move quests from player data -> save data
                saveData.quests = {
                    xp: Math.floor(playerData._questXP || 0),
                    refreshes: playerData.questRefreshes || 0,
                    lastRefresh: playerData._lastSeen,
                    questList: new Array(10).fill({}).map((q, index) => ({ index, initial: null })),
                    questLines: [
                        {
                            state: playerData.tutorialComplete ? 2 : 1,
                            name: 'Tutorial Quests',
                            quest: playerData.tutorialProgress || 0,
                        },
                    ],
                };
                // Convert quest the player is currently doing
                (playerData.currentQuests || []).forEach(quest => {
                    saveData.quests.questList[quest.index || 0].initial = quest.initial || null;
                });
                // Convert quest the player has completed
                (playerData.completedQuestList || []).forEach((complete, index) => {
                    if (complete) {
                        saveData.quests.questList[index].notified = true;
                        saveData.quests.questList[index].claimed = true;
                        saveData.quests.questList[index].initial = 0;
                    }
                });
            },
            '0.5.0': ({ playerData }) => {
                // Give the players Soothe Bells in place of Time stones
                playerData._itemList = playerData._itemList || {};
                playerData._itemList.Soothe_bell = playerData._itemList.Time_stone || 0;
                delete playerData._itemList.Time_stone;
            },
            '0.5.2': ({ saveData }) => {
                // Calculate hatched amount (we can't calculate the shiny hatches though)
                const pokemonHatched = {};
                saveData.party.caughtPokemon.forEach(p => pokemonHatched[p.id] = p.attackBonus / 25);
                // Rename from the old statistic name, add our new statistics
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalBerriesHarvested: saveData.statistics.berriesHarvested.reduce((sum, b) => sum + b, 0) || 0, totalShardsGained: saveData.statistics.totalShards.reduce((sum, b) => sum + b, 0) || 0, shardsGained: saveData.statistics.totalShards || 0, pokemonHatched });
                // If the player has the Soul Badge already
                // Not using game constants incase the badge value isn't 5 in the future
                if (saveData.badgeCase[5]) {
                    Update.startQuestLine(saveData, 'Mining Expedition');
                }
            },
            '0.5.5': ({ saveData }) => {
                // Correct statistics
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 22, 34); // Petalburg Woods
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 30, 35); // New Mauville
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 56, 50); // Hall of Origin
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 33); // Sealed Chamber
            },
            '0.5.7': ({ saveData }) => {
                // Update shinies
                saveData.party.shinyPokemon.forEach(name => {
                    const id = pokemonMap[name].id;
                    if (id) {
                        const pokemon = saveData.party.caughtPokemon.find(p => p.id == id);
                        if (pokemon) {
                            pokemon.shiny = true;
                        }
                    }
                });
            },
            '0.5.8': ({ playerData, saveData }) => {
                // Hardcoded to allow upgrading from an older save, if we change
                // the Routes class in the future. Values are lowest/highest route
                // index
                const regionRoutes = {
                    kanto: [1, 25],
                    johto: [26, 48],
                    hoenn: [101, 134],
                    sinnoh: [201, 230],
                };
                const result = saveData.statistics.routeKills.reduce((acc, nextValue, nextIndex) => {
                    const [region] = Object.entries(regionRoutes).find(([, check]) => (
                    // Find the region that contains this index
                    check[0] <= nextIndex && nextIndex <= check[1])) || ['none'];
                    // Skip over any statistics for the 'none' region that are also 0, since
                    // these are just the gaps in the route numbers
                    if (region === 'none' && nextValue === 0) {
                        return acc;
                    }
                    // Ensure the region has been prepared
                    acc[region] = (acc[region] || {});
                    // Track the route with its number in the statistics
                    acc[region][nextIndex] = nextValue;
                    return acc;
                }, {});
                saveData.statistics.routeKills = result;
                // Refund any shards spent on shard upgrades that have no effect
                // Using magic number incase any of these values change in the future
                const invalidUpgrades = {
                    0: 3,
                    1: 0,
                    2: 0,
                    4: 0,
                    5: 0,
                    9: 0,
                    11: 0,
                    12: 0,
                    15: 0,
                    16: 0,
                    17: 0,
                };
                Object.entries(invalidUpgrades).forEach(([type, effectiveness]) => {
                    const index = +type * 4 + effectiveness;
                    let level = saveData.shards.shardUpgrades[index];
                    // Refund each level of upgrade purchased
                    while (level-- > 0) {
                        const cost = (level + 1) * 500;
                        saveData.shards.shardWallet[type] += cost;
                    }
                });
                // Give breeding slots based on highest region
                saveData.breeding.queueSlots = 0;
                for (let region = 0; region < playerData.highestRegion; region++) {
                    saveData.breeding.queueSlots += Math.max(4, 4 * Math.pow(2, region - 1));
                }
            },
            '0.6.0': ({ saveData }) => {
                // Update the attack bonus percentages
                saveData.party.caughtPokemon = saveData.party.caughtPokemon.map(p => {
                    p.attackBonusPercent = p.attackBonus;
                    delete p.attackBonus;
                    return p;
                });
                // Update Farm data
                // Refund Farm Points for current berries
                for (let i = 0; i < 8; i++) {
                    const amount = 100 / i;
                    const refundTokens = Math.floor(saveData.farming.berryList[i] / amount);
                    saveData.wallet.currencies[4] += refundTokens;
                    saveData.farming.berryList[i] = 0;
                }
                // Unlock & Give 5 Cheri berries to start off with
                saveData.farming.unlockedBerries = [true];
                saveData.farming.berryList[0] = 5;
                // Refund Farm Points for plots previously unlocked
                saveData.wallet.currencies[4] += saveData.farming.plotList.map((p, i) => p.isUnlocked ? 10 * Math.floor(Math.pow(i, 2)) : 0).reduce((s, a) => s + a, 0);
                // Reset all plots
                delete saveData.farming.plotList;
            },
            '0.6.1': ({ saveData }) => {
                // Only update if save is from v0.6.0+
                if (this.minUpdateVersion('0.6.0', saveData)) {
                    if (saveData.oakItems.purchaseList) {
                        if (saveData.oakItems.purchaseList[OakItemType.Squirtbottle]) {
                            saveData.oakItems[OakItemType[OakItemType.Squirtbottle]].purchased = true;
                        }
                        if (saveData.oakItems.purchaseList[OakItemType.Sprinklotad]) {
                            saveData.oakItems[OakItemType[OakItemType.Sprinklotad]].purchased = true;
                        }
                    }
                }
            },
            '0.6.5': ({ playerData, saveData }) => {
                // Only update if save is from v0.6.0+
                if (this.minUpdateVersion('0.6.0', saveData)) {
                    // nerf amount of proteins used per Pokemon
                    const maxProteins = (playerData.highestRegion + 1) * 5;
                    let proteinsToRefund = 0;
                    saveData.party.caughtPokemon = saveData.party.caughtPokemon.map(p => {
                        if (!p.proteinsUsed || p.proteinsUsed <= maxProteins) {
                            return p;
                        }
                        proteinsToRefund += p.proteinsUsed - maxProteins;
                        p.proteinsUsed = maxProteins;
                        return p;
                    });
                    playerData._itemList.Protein += proteinsToRefund || 0;
                }
            },
            '0.7.1': ({ playerData, saveData }) => {
                var _a, _b;
                saveData.breeding.eggList.map((egg) => {
                    egg.shinyChance = GameConstants.SHINY_CHANCE_BREEDING - (0.5 * GameConstants.SHINY_CHANCE_BREEDING * Math.min(1, egg.shinySteps / egg.steps));
                    return egg;
                });
                // Update underground item IDs
                const itemMap = (id) => {
                    if (id <= 7) { // fossils
                        return id + 199;
                    }
                    else if (id <= 16) { // Diamond Items
                        return id - 7;
                    }
                    else if (id <= 22) { // Evolution Stones
                        return id + 283;
                    }
                    else if (id <= 28) { // Diamond Items
                        return id - 13;
                    }
                    else { // Shard Plates
                        return id + 71;
                    }
                };
                playerData.mineInventory = ((_a = playerData.mineInventory) === null || _a === void 0 ? void 0 : _a.map(i => {
                    i.id = itemMap(i.id);
                    return i;
                })) || [];
                if ((_b = saveData.underground) === null || _b === void 0 ? void 0 : _b.mine) {
                    // Reset the mine
                    delete saveData.underground.mine;
                }
            },
            '0.7.4': ({ playerData, saveData }) => {
                // Clear old quest data
                saveData.quests.questList = [];
                // Update starter selection
                playerData.starter = playerData._starter;
                /*
                 * Challenge Modes
                 */
                // Create empty challenges object
                saveData.challenges = { list: {} };
                // Disable Click Attacks
                if (saveData.statistics.clickAttacks <= 100) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Click Attack challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableClickAttack.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Battle Items
                Notifier.notify({
                    title: 'Active Challenge Mode?',
                    message: `Do you want to activate No Battle Item challenge mode?

                <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableBattleItems.activate(); Object.values(player.effectList).forEach(e => e(0));" data-dismiss="toast">Activate</button>`,
                    timeout: GameConstants.HOUR,
                });
                // Disable Master Balls
                if (!saveData.statistics.pokeballsUsed[3]) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Masterball challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableMasterballs.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Oak Items
                if (Object.values(saveData.oakItems).every((oi) => !oi.exp)) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Oak Item challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableOakItems.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Shards
                if (saveData.shards.shardUpgrades.every((s) => !s)) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Shard challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableShards.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Disable Proteins
                if (saveData.party.caughtPokemon.every(p => !p.proteinsUsed)) {
                    Notifier.notify({
                        title: 'Active Challenge Mode?',
                        message: `Do you want to activate No Protein challenge mode?

                    <button class="btn btn-block btn-danger" onclick="App.game.challenges.list.disableVitamins.activate();" data-dismiss="toast">Activate</button>`,
                        timeout: GameConstants.HOUR,
                    });
                }
                // Add Solaceon Ruins
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 43);
                // Multi saves profile
                const firstPokemon = saveData.party.caughtPokemon[0];
                saveData.profile = {
                    name: 'Trainer',
                    pokemon: (firstPokemon === null || firstPokemon === void 0 ? void 0 : firstPokemon.id) || 0,
                    pokemonShiny: (firstPokemon === null || firstPokemon === void 0 ? void 0 : firstPokemon.shiny) || false,
                };
            },
            '0.7.6': ({ playerData, saveData }) => {
                Update.changeHatcheryKey(saveData, 'Lets go Pikachu', 'Let\'s Go Pikachu');
                Update.changeHatcheryKey(saveData, 'Lets go Eevee', 'Let\'s Go Eevee');
                // Check if the Let's Go Pikachu is hidden due to MissingNo (reset breeding status)
                const pikachu = saveData.party.caughtPokemon.find(p => p.id == -8);
                if (pikachu) {
                    pikachu.breeding = !!saveData.breeding.eggList.find((e) => e.pokemon == 'Let\'s Go Pikachu')
                        || !!saveData.breeding.queueList.find((p) => p == 'Let\'s Go Pikachu');
                }
                // Check if the Let's Go Eevee is hidden due to MissingNo (reset breeding status)
                const eevee = saveData.party.caughtPokemon.find(p => p.id == -9);
                if (eevee) {
                    eevee.breeding = !!saveData.breeding.eggList.find((e) => e.pokemon == 'Let\'s Go Eevee')
                        || !!saveData.breeding.queueList.find((p) => p == 'Let\'s Go Eevee');
                }
            },
            '0.8.1': ({ playerData, saveData }) => {
                // Add Weather Institute
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 29);
                // Add Magma Hideout
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 32);
                // Add Aqua Hideout
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 33);
                // Add Team Plasma Assault
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 72);
                // Add Plasma Frigate
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 74);
            },
            '0.8.3': ({ playerData, saveData }) => {
                // If player has defeated the 8th Kalos gym, start the vivillon quest line
                saveData.badgeCase = saveData.badgeCase || [];
                // Not using game constants incase the value isn't 73 in the future
                if (saveData.badgeCase[73]) { // Iceberg badge
                    Update.startQuestLine(saveData, 'The Great Vivillon Hunt!');
                }
                // Add missing key items if the player has the badge
                const badgeToKeyItems = {
                    [5]: 'Safari_ticket',
                    [8]: 'Shard_case', //Earth badge
                };
                Object.keys(badgeToKeyItems).forEach(badge => {
                    const keyItem = badgeToKeyItems[badge];
                    if (saveData.badgeCase[badge]) {
                        saveData.keyItems[keyItem] = true;
                    }
                });
            },
            '0.8.4': ({ playerData, saveData }) => {
                var _a;
                // Update Pokemon names
                Update.changeHatcheryKey(saveData, 'Vivillon', 'Vivillon (Meadow)');
                // Track Battle Frontier milestones earned
                const milestones = [
                    [5, '25 x Pokéball'],
                    [10, '100 x Pokéball'],
                    [20, '100 x Greatball'],
                    [30, '100 x Ultraball'],
                    [35, '100 x xClick'],
                    [40, '100 x xAttack'],
                    [50, '100 x Small Restore'],
                    [100, 'Deoxys'],
                    [110, '10 x Water Stone'],
                    [120, '10 x Leaf Stone'],
                    [130, '10 x Thunder Stone'],
                    [140, '10 x Fire Stone'],
                    [150, '200 x Medium Restore'],
                    [151, 'Deoxys (attack)'],
                    [160, '100 x Lucky Egg'],
                    [170, '100 x Lucky Incense'],
                    [180, '100 x Item Magnet'],
                    [190, '10 x Mystery Egg'],
                    [200, '100 x Large Restore'],
                    [210, '40 x Water Stone'],
                    [220, '40 x Leaf Stone'],
                    [230, '40 x Thunder Stone'],
                    [240, '40 x Moon Stone'],
                    [250, '6400 x Ultraball'],
                    [251, 'Deoxys (defense)'],
                    [300, '100 x Linking Cord'],
                    [386, 'Deoxys (speed)'],
                ];
                const highestStageCompleted = ((_a = saveData.statistics) === null || _a === void 0 ? void 0 : _a.battleFrontierHighestStageCompleted) || 0;
                saveData.battleFrontier = {
                    milestones: milestones.filter(([stage]) => stage <= highestStageCompleted),
                };
            },
            '0.8.9': ({ playerData, saveData }) => {
                var _a, _b, _c;
                // Retroactively track proteins obtained
                let proteinsObtained = 0;
                // Only update if save is from v0.6.0+ (when proteins were added)
                if (this.minUpdateVersion('0.6.0', saveData)) {
                    saveData.party.caughtPokemon.forEach(p => {
                        proteinsObtained += p.proteinsUsed;
                    });
                    proteinsObtained += playerData._itemList.Protein;
                }
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalProteinsObtained: proteinsObtained });
                // Only run if save is from v0.8.7 (a forked version which is breaking stuff)
                if (((_a = saveData.update) === null || _a === void 0 ? void 0 : _a.version) == '0.8.7') {
                    // Check if the save has the Vivillon quest line, otherwise it's not from the main website
                    const questLines = ((_c = (_b = saveData.quests) === null || _b === void 0 ? void 0 : _b.questLines) === null || _c === void 0 ? void 0 : _c.length) || 0;
                    if (questLines < 4) {
                        Notifier.notify({
                            title: 'Importing this save will cause errors!',
                            message: 'Please only use saves from the main website https://pokeclicker.com/',
                            type: NotificationConstants.NotificationOption.danger,
                            timeout: GameConstants.DAY,
                        });
                        throw new Error('Importing this save will cause errors');
                    }
                }
            },
            '0.8.12': ({ playerData, saveData }) => {
                // Add Team Rockets Hideout
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 19);
                // Add Radio Tower
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 20);
                // Add Victory Road Johto
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 23);
                // If the player has the Fog Badge already
                // Not using game constants incase the badge value isn't 17 in the future
                if (saveData.badgeCase[17]) {
                    Update.startQuestLine(saveData, 'Team Rocket Again');
                }
                setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                    // Check if player wants to activate the new challenge modes
                    const debuffChallengeState = Notifier.confirm({ title: 'Regional Attack Debuff (recommended)', message: 'New challenge mode added: Regional Attack Debuff.\n\nLowers Pokémon attack based on native region and highest reached region.\n\nThis is the default and recommended way to play, but is now an optional challenge.\n\nPlease choose if you would like this challenge mode to be enabled or disabled (cannot be re-enabled later)', confirm: 'Disable', cancel: 'Enable' });
                    const pokedexChallengeState = Notifier.confirm({ title: 'Require Complete Pokédex (recommended)', message: 'New challenge mode added: Require Complete Pokédex.\n\nRequires a complete regional pokédex before moving on to the next region.\n\nThis is the default and recommended way to play, but is now an optional challenge.\n\nPlease choose if you would like this challenge mode to be enabled or disabled (cannot be re-enabled later)', confirm: 'Disable', cancel: 'Enable' });
                    if (yield debuffChallengeState) {
                        App.game.challenges.list.regionalAttackDebuff.disable(false);
                    }
                    if (yield pokedexChallengeState) {
                        App.game.challenges.list.requireCompletePokedex.disable(false);
                    }
                }), GameConstants.SECOND);
            },
            '0.8.14': ({ playerData, saveData }) => {
                // Start Aqua Magma questline if player has Dynamo Badge already
                if (saveData.badgeCase[29]) {
                    Update.startQuestLine(saveData, 'Land vs. Water');
                }
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalBerriesObtained: saveData.statistics.totalBerriesHarvested || 0, pokeballsObtained: saveData.statistics.pokeballsBought || 0, berriesObtained: saveData.statistics.berriesHarvested || 0 });
            },
            '0.8.15': ({ playerData, saveData }) => {
                var _a, _b, _c, _d;
                // Start Plasma questline if player has Jet Badge already
                if (saveData.badgeCase[58]) {
                    Update.startQuestLine(saveData, 'Quest for the DNA Splicers');
                }
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 2, 1); // Digletts Cave
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 5, 4); // Power Plant
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 31, 28); // Jagged Pass
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 29, 30); // Mt. Chimney
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 32, 34); // New Mauville
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 84, 64); // Pledge Grove
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 78, 79); // Abundant Shrine
                // Shards -> Gems
                //Questlist update
                saveData.quests.questList = ((_a = saveData.quests.questList) === null || _a === void 0 ? void 0 : _a.map(q => {
                    if (q.name == 'GainShardsQuest') {
                        q.name = 'GainGemsQuest';
                    }
                    return q;
                })) || [];
                //Setting gems = shards
                saveData.gems = {
                    gemWallet: saveData.shards.shardWallet || [],
                    gemCollapsed: saveData.shards.shardCollapsed || [],
                    gemUpgrades: saveData.shards.shardUpgrades || [],
                };
                delete saveData.keyItems.Shard_case;
                // Swapping Shard Case for Gem Case
                if (saveData.badgeCase[8]) {
                    saveData.keyItems.Gem_case = true;
                }
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalGemsGained: saveData.statistics.totalShardsGained || 0, gemsGained: saveData.statistics.shardsGained || 0 });
                // Challenge update
                saveData.challenges.list.disableGems = (_d = (_c = (_b = saveData.challenges) === null || _b === void 0 ? void 0 : _b.list) === null || _c === void 0 ? void 0 : _c.disableShards) !== null && _d !== void 0 ? _d : false;
            },
            '0.9.0': ({ playerData, saveData }) => {
                var _a;
                // Migrate event negative ID's to decimals of base form
                const eventIDs = [
                    [-1, 25.08],
                    [-2, 25.09],
                    [-3, 150.1],
                    [-4, 143.1],
                    [-5, 175.1],
                    [-6, 1.2],
                    [-7, 25.1],
                    [-8, 25.11],
                    [-9, 133.1],
                    [-10, 1.1],
                    [-11, 2.1],
                    [-12, 3.1],
                    [-13, 4.1],
                    [-14, 5.1],
                    [-15, 6.1],
                    [-16, 7.1],
                    [-17, 8.1],
                    [-18, 9.1],
                ];
                eventIDs.forEach(([oldID, newID]) => {
                    const pokemon = saveData.party.caughtPokemon.find(p => p.id === oldID);
                    // If player hasn't caught this mon yet, return.
                    if (pokemon == undefined) {
                        return;
                    }
                    // Update our ID
                    pokemon.id = newID;
                    if (!saveData.statistics.pokemonHatched) {
                        saveData.statistics.pokemonHatched = {};
                    }
                    if (!saveData.statistics.shinyPokemonHatched) {
                        saveData.statistics.shinyPokemonHatched = {};
                    }
                    // Update our statistics
                    saveData.statistics.pokemonEncountered[newID] = saveData.statistics.pokemonEncountered[oldID] || 0;
                    saveData.statistics.pokemonDefeated[newID] = saveData.statistics.pokemonDefeated[oldID] || 0;
                    saveData.statistics.pokemonCaptured[newID] = saveData.statistics.pokemonCaptured[oldID] || 0;
                    saveData.statistics.pokemonHatched[newID] = saveData.statistics.pokemonHatched[oldID] || 0;
                    saveData.statistics.shinyPokemonEncountered[newID] = saveData.statistics.shinyPokemonEncountered[oldID] || 0;
                    saveData.statistics.shinyPokemonDefeated[newID] = saveData.statistics.shinyPokemonDefeated[oldID] || 0;
                    saveData.statistics.shinyPokemonCaptured[newID] = saveData.statistics.shinyPokemonCaptured[oldID] || 0;
                    saveData.statistics.shinyPokemonHatched[newID] = saveData.statistics.shinyPokemonHatched[oldID] || 0;
                    // Delete our old statistics
                    delete saveData.statistics.pokemonEncountered[oldID];
                    delete saveData.statistics.pokemonDefeated[oldID];
                    delete saveData.statistics.pokemonCaptured[oldID];
                    delete saveData.statistics.pokemonHatched[oldID];
                    delete saveData.statistics.shinyPokemonEncountered[oldID];
                    delete saveData.statistics.shinyPokemonDefeated[oldID];
                    delete saveData.statistics.shinyPokemonCaptured[oldID];
                    delete saveData.statistics.shinyPokemonHatched[oldID];
                });
                playerData.mineInventory = ((_a = playerData.mineInventory) === null || _a === void 0 ? void 0 : _a.map(i => {
                    i.sellLocked = false;
                    return i;
                })) || [];
                // Start Galactic questline if player has Coal Badge already
                if (saveData.badgeCase[40]) {
                    Update.startQuestLine(saveData, 'A New World');
                }
                // Clear Valley Windworks Clears
                saveData.statistics.dungeonsCleared[44] = 0;
                // Add Team Galactic Eterna Building
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 47);
                // Move Lake Verity
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 53, 52);
                // Move Lake Valor
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 52, 54);
                // Add Team Galactic HQ
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 56);
                // Move Spear Pillar
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 57, 59);
                // Add Sendoff Spring
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 60);
            },
            '0.9.4': ({ playerData, saveData }) => {
                // Modifications relating to smaller save file sizes
                const PartyKeyMap = {
                    'attackBonusPercent': 0,
                    'attackBonusAmount': 1,
                    'proteinsUsed': 2,
                    'exp': 3,
                    'breeding': 4,
                    'shiny': 5,
                    'category': 6,
                    'levelEvolutionTriggered': 7,
                };
                Object.entries(PartyKeyMap).forEach(([oldKey, newKey]) => {
                    saveData.party.caughtPokemon.forEach(p => {
                        p[newKey] = p[oldKey];
                        delete p[oldKey];
                    });
                });
                saveData.farming.mutations = saveData.farming.mutations.map(m => m.hintsSeen || m.hintSeen);
                // Change Ultra Wormhole to a Temporary Battle
                saveData.statistics.temporaryBattleDefeated = new Array();
                saveData.statistics.temporaryBattleDefeated[0] = saveData.statistics.gymsDefeated[84];
                // Remove the Elite_Nihilego Gym, now a temporary battle instead of a gym
                saveData.statistics.gymsDefeated.splice(84, 1);
                saveData.badgeCase.splice(84, 1);
                // Change Ultra Megalopolis to a Temporary Battle
                saveData.statistics.temporaryBattleDefeated[1] = saveData.statistics.gymsDefeated[88];
                // Remove the Elite_ULtraNecrozma Gym, now a temporary battle instead of a gym
                saveData.statistics.gymsDefeated.splice(88, 1);
                saveData.badgeCase.splice(88, 1);
            },
            '0.9.6': ({ playerData, saveData }) => {
                // Set our last save reminder/download to our current in game time
                // This way we won't get a reminder notification for at least 12 hours
                saveData.saveReminder = {
                    lastReminder: saveData.statistics.secondsPlayed,
                    lastDownloaded: saveData.statistics.secondsPlayed,
                };
                // Start Mina's Trial questline if player has cleared Ultra Necrozma already
                if (saveData.statistics.temporaryBattleDefeated[1]) {
                    Update.startQuestLine(saveData, 'Mina\'s Trial');
                }
                // Add Rocket Game Corner
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 4);
                // Add Silph Co.
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 6);
                // Start Team Rocket Kanto questline if player has Cascade Badge already
                if (saveData.badgeCase[2]) {
                    Update.startQuestLine(saveData, 'Team Rocket');
                }
                // Rename Land vs. Water questline, so QuestLineCompletedRequirement will work
                saveData.quests.questLines.forEach(v => {
                    if (v.name === 'Land vs Water') {
                        v.name = 'Land vs. Water';
                    }
                });
                // Add AZ TemporaryBattle
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 0);
                //Replace Poison Barb with Rocky Helmet
                saveData.oakItems.Rocky_Helmet = saveData.oakItems.Poison_Barb;
                delete saveData.oakItems.Poison_Barb;
                // Give the players Dowsing Machines in place of Item Magnets
                playerData._itemList.Dowsing_machine = playerData._itemList.Item_magnet;
                playerData.effectList.Dowsing_machine = playerData.effectList.Item_magnet;
                delete playerData._itemList.Item_magnet;
                delete playerData.effectList.Item_magnet;
                // Start pokerus
                setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                    // Check if player wants to activate the new challenge modes
                    if (!(yield Notifier.confirm({ title: 'Slow EVs', message: 'New challenge mode added: Slow EVs.\n\nDiminishes the rate at which EVs are gained.\n\nThis is an optional challenge and is NOT the recommended way to play.\n\nPlease choose if you would like this challenge mode to be disabled or enabled.\n\nCan be disabled later. Can NOT be enabled later!', confirm: 'Disable', cancel: 'Enable' }))) {
                        App.game.challenges.list.slowEVs.activate();
                    }
                }), GameConstants.SECOND);
            },
            '0.9.7': ({ playerData, saveData }) => {
                // Fix people not getting the pokerus
                if (saveData.keyItems.Pokerus_virus) {
                    let starter;
                    switch (playerData.starter) {
                        case 0:
                            starter = saveData.party.caughtPokemon.find(p => p.id == 1);
                            break;
                        case 1:
                            starter = saveData.party.caughtPokemon.find(p => p.id == 4);
                            break;
                        case 2:
                            starter = saveData.party.caughtPokemon.find(p => p.id == 7);
                            break;
                        case 3:
                            starter = saveData.party.caughtPokemon.find(p => p.id == 25);
                            break;
                    }
                    starter[8] = true;
                }
                // Add Fighting Dojo TemporaryBattle
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 0);
            },
            '0.9.8': ({ playerData, saveData, settingsData }) => {
                var _a, _b, _c, _d, _e;
                // Add names to oak item loadouts
                saveData.oakItemLoadouts = ((_a = saveData.oakItemLoadouts) === null || _a === void 0 ? void 0 : _a.map((list, index) => ({ name: `Loadout ${index + 1}`, loadout: list }))) || [];
                // Fix pokerus & EVs moved from statistics
                saveData.party.caughtPokemon.forEach(p => {
                    var _a;
                    // If has pokerus, set to "contagious"
                    let status = (p[8]) ? 2 : 0;
                    // Get effort points (0 if not infected), Multiply by 100 for finer control
                    const effortPoints = status ? ((_a = saveData.statistics.effortPoints) === null || _a === void 0 ? void 0 : _a[p.id]) * 100 || 0 : 0;
                    // Set to cured if reached required amount of EVs
                    const requiredForCured = saveData.challenges.list.slowEVs ? 500000 : 50000;
                    if (effortPoints >= requiredForCured) {
                        status = 3;
                    }
                    // Update status and EVs
                    p[8] = status;
                    p[9] = effortPoints;
                });
                // Give the players Linking Cords in place of Trade Stones
                playerData._itemList.Linking_cord = playerData._itemList.Trade_stone || 0;
                delete playerData._itemList.Trade_stone;
                // Start Sevii questline if player has Volcano Badge already
                if (saveData.badgeCase[7]) {
                    Update.startQuestLine(saveData, 'Bill\'s Errand');
                }
                // Start Persons of Interest questline if player has Earth Badge already
                if (saveData.badgeCase[8]) {
                    Update.startQuestLine(saveData, 'Persons of Interest');
                }
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Add new statistic
                saveData.statistics.totalProteinsPurchased = saveData.statistics.totalProteinsObtained || 0;
                // Add Mt. Ember Summit
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 10);
                // Add Berry Forest
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 11);
                // Add Biker Gang Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 1);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 2);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 3);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 4);
                // Add Galactic Boss Cyrus Temporary Battle
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 5);
                // Add Ash Ketchum Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 7);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 8);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 9);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 10);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 11);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 12);
                // Update settings
                if (settingsData) {
                    // Update our default quest location color
                    if (settingsData['--questAtLocation'] === '#34BF45') {
                        settingsData['--questAtLocation'] = '#55ff00';
                    }
                    // Remove current location color
                    delete settingsData['--currentPlace'];
                    // Split dungeon loot notifications into two
                    settingsData['notification.common_dungeon_item_found'] = (_b = settingsData['notification.dungeon_item_found']) !== null && _b !== void 0 ? _b : true;
                    settingsData['notification.common_dungeon_item_found.desktop'] = (_c = settingsData['notification.dungeon_item_found.desktop']) !== null && _c !== void 0 ? _c : false;
                    settingsData['notification.rare_dungeon_item_found'] = (_d = settingsData['notification.dungeon_item_found']) !== null && _d !== void 0 ? _d : true;
                    settingsData['notification.rare_dungeon_item_found.desktop'] = (_e = settingsData['notification.dungeon_item_found.desktop']) !== null && _e !== void 0 ? _e : false;
                    delete settingsData['notification.dungeon_item_found'];
                    delete settingsData['notification.dungeon_item_found.desktop'];
                }
            },
            '0.9.9': ({ playerData, saveData }) => {
                // Fix pokemon having Pokérus early (key item not unlocked)
                if (!saveData.keyItems.Pokerus_virus) {
                    saveData.party.caughtPokemon.forEach(p => {
                        // Pokérus State
                        p[8] = 0;
                        // Effort Points
                        p[9] = 0;
                    });
                }
            },
            '0.9.10': ({ playerData, saveData }) => {
                var _a;
                // Rename statistic
                saveData.statistics.pokeballsPurchased = saveData.statistics.pokeballsBought;
                // Update total proteins obtained to be equal to the total purchased (or whichever is higher)
                saveData.statistics.totalProteinsObtained = Math.max(saveData.statistics.totalProteinsPurchased, saveData.statistics.totalProteinsObtained);
                // If Pokémon doesn't have Pokérus yet, it shouldn't have Effort Points
                saveData.party.caughtPokemon.forEach(p => {
                    // Check Pokérus state
                    if (!p[8]) {
                        // Reset Effort Points
                        p[9] = 0;
                    }
                });
                // Turn Parfum Palace into a town
                saveData.statistics.dungeonsCleared.splice(96, 1);
                // Filter already earned milestones due to item/Pokémon name updates
                const milestones = [
                    [5, '25 x Poké Ball'],
                    [10, '100 x Poké Ball'],
                    [20, '100 x Great Ball'],
                    [30, '100 x Ultra Ball'],
                    [35, '100 x X Click'],
                    [40, '100 x X Attack'],
                    [50, '100 x Small Restore'],
                    [100, 'Deoxys'],
                    [110, '10 x Water Stone'],
                    [120, '10 x Leaf Stone'],
                    [130, '10 x Thunder Stone'],
                    [140, '10 x Fire Stone'],
                    [150, '200 x Medium Restore'],
                    [151, 'Deoxys (Attack)'],
                    [160, '100 x Lucky Egg'],
                    [170, '100 x Lucky Incense'],
                    [180, '100 x Dowsing Machine'],
                    [190, '10 x Mystery Egg'],
                    [200, '100 x Large Restore'],
                    [210, '40 x Water Stone'],
                    [220, '40 x Leaf Stone'],
                    [230, '40 x Thunder Stone'],
                    [240, '40 x Moon Stone'],
                    [250, '6,400 x Ultra Ball'],
                    [251, 'Deoxys (Defense)'],
                    [300, '100 x Linking Cord'],
                    [386, 'Deoxys (Speed)'],
                ];
                const highestStageCompleted = ((_a = saveData.statistics) === null || _a === void 0 ? void 0 : _a.battleFrontierHighestStageCompleted) || 0;
                saveData.battleFrontier = {
                    milestones: milestones.filter(([stage]) => stage <= highestStageCompleted),
                    checkpoint: saveData.battleFrontier.checkpoint,
                };
                // Update Pokemon name changes for hatchery/queue
                const renamePokemon = Update.changeHatcheryKey;
                renamePokemon(saveData, 'Bulbasaur (clone)', 'Bulbasaur (Clone)');
                renamePokemon(saveData, 'Ivysaur (clone)', 'Ivysaur (Clone)');
                renamePokemon(saveData, 'Venusaur (clone)', 'Venusaur (Clone)');
                renamePokemon(saveData, 'Charmander (clone)', 'Charmander (Clone)');
                renamePokemon(saveData, 'Charmeleon (clone)', 'Charmeleon (Clone)');
                renamePokemon(saveData, 'Charizard (clone)', 'Charizard (Clone)');
                renamePokemon(saveData, 'Pikachu (Original cap)', 'Pikachu (Original Cap)');
                renamePokemon(saveData, 'Pikachu (Hoenn cap)', 'Pikachu (Hoenn Cap)');
                renamePokemon(saveData, 'Pikachu (Sinnoh cap)', 'Pikachu (Sinnoh Cap)');
                renamePokemon(saveData, 'Pikachu (Unova cap)', 'Pikachu (Unova Cap)');
                renamePokemon(saveData, 'Pikachu (Kalos cap)', 'Pikachu (Kalos Cap)');
                renamePokemon(saveData, 'Pikachu (Alola cap)', 'Pikachu (Alola Cap)');
                renamePokemon(saveData, 'Pikachu (Partner cap)', 'Pikachu (Partner Cap)');
                renamePokemon(saveData, 'Castform (sunny)', 'Castform (Sunny)');
                renamePokemon(saveData, 'Castform (rainy)', 'Castform (Rainy)');
                renamePokemon(saveData, 'Castform (snowy)', 'Castform (Snowy)');
                renamePokemon(saveData, 'Deoxys (attack)', 'Deoxys (Attack)');
                renamePokemon(saveData, 'Deoxys (defense)', 'Deoxys (Defense)');
                renamePokemon(saveData, 'Deoxys (speed)', 'Deoxys (Speed)');
                renamePokemon(saveData, 'Burmy (plant)', 'Burmy (Plant)');
                renamePokemon(saveData, 'Burmy (sand)', 'Burmy (Sand)');
                renamePokemon(saveData, 'Burmy (trash)', 'Burmy (Trash)');
                renamePokemon(saveData, 'Wormadam (plant)', 'Wormadam (Plant)');
                renamePokemon(saveData, 'Wormadam (sand)', 'Wormadam (Sand)');
                renamePokemon(saveData, 'Wormadam (trash)', 'Wormadam (Trash)');
                renamePokemon(saveData, 'Cherrim (overcast)', 'Cherrim (Overcast)');
                renamePokemon(saveData, 'Cherrim (sunshine)', 'Cherrim (Sunshine)');
                renamePokemon(saveData, 'Shellos (west)', 'Shellos (West)');
                renamePokemon(saveData, 'Shellos (east)', 'Shellos (East)');
                renamePokemon(saveData, 'Gastrodon (west)', 'Gastrodon (West)');
                renamePokemon(saveData, 'Gastrodon (east)', 'Gastrodon (East)');
                renamePokemon(saveData, 'Rotom (heat)', 'Rotom (Heat)');
                renamePokemon(saveData, 'Rotom (wash)', 'Rotom (Wash)');
                renamePokemon(saveData, 'Rotom (frost)', 'Rotom (Frost)');
                renamePokemon(saveData, 'Rotom (fan)', 'Rotom (Fan)');
                renamePokemon(saveData, 'Rotom (mow)', 'Rotom (Mow)');
                renamePokemon(saveData, 'Rotom (discord)', 'Rotom (Discord)');
                renamePokemon(saveData, 'Giratina (altered)', 'Giratina (Altered)');
                renamePokemon(saveData, 'Shaymin (land)', 'Shaymin (Land)');
                renamePokemon(saveData, 'Shaymin (sky)', 'Shaymin (Sky)');
                renamePokemon(saveData, 'Arceus (normal)', 'Arceus (Normal)');
                renamePokemon(saveData, 'Meloetta (aria)', 'Meloetta (Aria)');
                renamePokemon(saveData, 'Meloetta (pirouette)', 'Meloetta (Pirouette)');
                renamePokemon(saveData, 'Ash Greninja', 'Ash-Greninja');
                renamePokemon(saveData, 'Vivillon (Pokéball)', 'Vivillon (Poké Ball)');
                renamePokemon(saveData, 'Oricorio (Pom-pom)', 'Oricorio (Pom-Pom)');
                renamePokemon(saveData, 'Minior (Blue-core)', 'Minior (Blue Core)');
                renamePokemon(saveData, 'Minior (Green-core)', 'Minior (Green Core)');
                renamePokemon(saveData, 'Minior (Indigo-core)', 'Minior (Indigo Core)');
                renamePokemon(saveData, 'Minior (Orange-core)', 'Minior (Orange Core)');
                renamePokemon(saveData, 'Minior (Red-core)', 'Minior (Red Core)');
                renamePokemon(saveData, 'Minior (Violet-core)', 'Minior (Violet Core)');
                renamePokemon(saveData, 'Minior (Yellow-core)', 'Minior (Yellow Core)');
                // Start Galactic questline if player has Coal Badge already
                // Don't start completed questline again if updating from v0.9.8/9 to v0.9.16+
                const aNewWorld = saveData.quests.questLines.find(ql => ql.name == 'A new world');
                if (saveData.badgeCase[40] && !aNewWorld) {
                    Update.startQuestLine(saveData, 'A New World');
                }
                // Update mine inventory
                playerData.mineInventory.forEach(i => {
                    if (i.valueType == 'Diamond') {
                        // Shards
                        if (i.name.includes('Shard')) {
                            i.valueType = 2;
                        }
                        else { // Diamond items
                            i.valueType = 0;
                        }
                    }
                    // Fossils
                    if (i.valueType == 'Mine Egg') {
                        i.valueType = 3;
                    }
                    // Gems
                    if (i.value == 100) {
                        i.valueType = 1;
                    }
                });
            },
            '0.9.11': ({ playerData, saveData }) => {
                // Add Tohjo Falls
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 27);
                // Add Celebi Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 5);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 6);
            },
            '0.9.12': ({ playerData, saveData }) => {
                // Revert player back to Alola if in Galar
                if (playerData._region >= 7) {
                    playerData._region = 6;
                    playerData._subregion = 0;
                    playerData._route = 0;
                    playerData._townName = 'Iki Town Outskirts';
                }
            },
            '0.9.13': ({ playerData, saveData }) => {
                // Add sevii4567 temp battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 5);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 6);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 7);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 8);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 9);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 10);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 11);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 12);
                // Pinkan Ash
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 23);
                // Add sevii4567 dungeons
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 14);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 15);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 16);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 17);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 18);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 19);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 20);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 21);
                // Add orange league badges
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 40);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 41);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 42);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 43);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 44);
                // Start Plasma questline if player has Toxic Badge already
                if (saveData.badgeCase[59]) {
                    Update.startQuestLine(saveData, 'Quest for the DNA Splicers');
                }
                // Remove Team Plasma Assault dungeon
                saveData.statistics.dungeonsCleared.splice(90, 1);
                // Add Team Plasma Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 16);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 17);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 18);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 19);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 20);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 21);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 22);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 23);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 24);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 25);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 26);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 27);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 28);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 29);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 30);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 31);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 32);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 33);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 34);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 35);
                // Move player out of Team Plasma Assault
                if (playerData._townName == ('Team Plasma Assault')) {
                    playerData._townName = ('Opelucid City');
                }
                // Move player out of Plasma Frigate
                if (playerData._townName == ('Plasma Frigate')) {
                    playerData._townName = ('Humilau City');
                }
                // Move player out of Giant Chasm
                if (playerData._townName == ('Giant Chasm')) {
                    playerData._townName = ('Humilau City');
                }
                // Add Detective Pikachu TemporaryBattles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 36);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 37);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 38);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 39);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 40);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 41);
            },
            '0.9.14': ({ playerData, saveData }) => {
                if (saveData.party.caughtPokemon.filter(p => p.id === 103.02).length) {
                    saveData.wallet.currencies[1] += 50000;
                }
            },
            '0.9.15': ({ playerData, saveData, settingsData }) => {
                // Aegislash and Pumpkaboo line renames
                const renamePokemon = Update.changeHatcheryKey;
                renamePokemon(saveData, 'Aegislash', 'Aegislash (Shield)');
                renamePokemon(saveData, 'Pumpkaboo', 'Pumpkaboo (Average)');
                renamePokemon(saveData, 'Gourgeist', 'Gourgeist (Average)');
                // Add Snorlax Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 1);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 2);
                // Add Suicune Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 7);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 8);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 9);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 10);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 11);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 12);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 13);
                // Pinkan Berry
                saveData.farming.berryList = Update.moveIndex(saveData.farming.berryList, 35);
                saveData.farming.unlockedBerries = Update.moveIndex(saveData.farming.unlockedBerries, 35);
                saveData.farming.mutations = Update.moveIndex(saveData.farming.mutations, 28);
                saveData.farming.plotList.forEach(p => {
                    if (p.berry >= 35) {
                        p.berry++;
                    }
                });
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 22);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 23);
                // Add Princess Diancie Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 53);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 54);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 55);
                // Replace Pokémon names to IDs
                const eggList = saveData.breeding.eggList;
                const queueList = saveData.breeding.queueList;
                Update.changePokemonNameToId(saveData, eggList);
                Update.changePokemonNameToId(saveData, queueList);
                // Adding more Galar badges
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 109);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 110);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 111);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 112);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 113);
            },
            '0.9.16': ({ playerData, saveData }) => {
                // Pinkan Berry
                saveData.statistics.berriesHarvested = Update.moveIndex(saveData.statistics.berriesHarvested, 35);
                // Rename Pinkan Rocket questline and Sinnoh questline
                saveData.quests.questLines.forEach(v => {
                    if (v.name === 'Team Rocket\'s Pinkan Themepark') {
                        v.name = 'Team Rocket\'s Pinkan Theme Park';
                    }
                });
                saveData.quests.questLines.forEach(v => {
                    if (v.name === 'A new world') {
                        v.name = 'A New World';
                    }
                });
            },
            '0.9.17': ({ playerData, saveData, settingsData }) => {
                // Add Sudowoodo Temporary Battle
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 7);
                // Pinkan Berry - Obtained Statistics
                saveData.statistics.berriesObtained = Update.moveIndex(saveData.statistics.berriesObtained, 35);
                // Fix A New World questline for players updating from v0.9.8/9 to v0.9.16+
                const aNewWorld = saveData.quests.questLines.find(ql => ql.name == 'A New World') || {};
                if (aNewWorld.state === 1 && aNewWorld.quest <= 3) {
                    saveData.statistics.temporaryBattleDefeated[27] = 0;
                }
            },
            '0.10.0': ({ playerData, saveData, settingsData }) => {
                var _a;
                // Add Kimono Girls Temporary Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 25);
                // Create new Pokemon Gender Statistics if they don't exist
                // Male
                if (!saveData.statistics.malePokemonCaptured) {
                    saveData.statistics.malePokemonCaptured = {};
                }
                if (!saveData.statistics.malePokemonDefeated) {
                    saveData.statistics.malePokemonDefeated = {};
                }
                if (!saveData.statistics.malePokemonEncountered) {
                    saveData.statistics.malePokemonEncountered = {};
                }
                if (!saveData.statistics.malePokemonHatched) {
                    saveData.statistics.malePokemonHatched = {};
                }
                // Shiny male
                if (!saveData.statistics.shinyMalePokemonCaptured) {
                    saveData.statistics.shinyMalePokemonCaptured = {};
                }
                if (!saveData.statistics.shinyMalePokemonDefeated) {
                    saveData.statistics.shinyMalePokemonDefeated = {};
                }
                if (!saveData.statistics.shinyMalePokemonEncountered) {
                    saveData.statistics.shinyMalePokemonEncountered = {};
                }
                if (!saveData.statistics.shinyMalePokemonHatched) {
                    saveData.statistics.shinyMalePokemonHatched = {};
                }
                // Female
                if (!saveData.statistics.femalePokemonCaptured) {
                    saveData.statistics.femalePokemonCaptured = {};
                }
                if (!saveData.statistics.femalePokemonDefeated) {
                    saveData.statistics.femalePokemonDefeated = {};
                }
                if (!saveData.statistics.femalePokemonEncountered) {
                    saveData.statistics.femalePokemonEncountered = {};
                }
                if (!saveData.statistics.femalePokemonHatched) {
                    saveData.statistics.femalePokemonHatched = {};
                }
                // Shiny female
                if (!saveData.statistics.shinyFemalePokemonCaptured) {
                    saveData.statistics.shinyFemalePokemonCaptured = {};
                }
                if (!saveData.statistics.shinyFemalePokemonDefeated) {
                    saveData.statistics.shinyFemalePokemonDefeated = {};
                }
                if (!saveData.statistics.shinyFemalePokemonEncountered) {
                    saveData.statistics.shinyFemalePokemonEncountered = {};
                }
                if (!saveData.statistics.shinyFemalePokemonHatched) {
                    saveData.statistics.shinyFemalePokemonHatched = {};
                }
                // Initialize total statistics
                saveData.statistics.totalMalePokemonCaptured = 0;
                saveData.statistics.totalMalePokemonDefeated = 0;
                saveData.statistics.totalMalePokemonEncountered = 0;
                saveData.statistics.totalMalePokemonHatched = 0;
                saveData.statistics.totalShinyMalePokemonCaptured = 0;
                saveData.statistics.totalShinyMalePokemonDefeated = 0;
                saveData.statistics.totalShinyMalePokemonEncountered = 0;
                saveData.statistics.totalShinyMalePokemonHatched = 0;
                saveData.statistics.totalFemalePokemonCaptured = 0;
                saveData.statistics.totalFemalePokemonDefeated = 0;
                saveData.statistics.totalFemalePokemonEncountered = 0;
                saveData.statistics.totalFemalePokemonHatched = 0;
                saveData.statistics.totalShinyFemalePokemonCaptured = 0;
                saveData.statistics.totalShinyFemalePokemonDefeated = 0;
                saveData.statistics.totalShinyFemalePokemonEncountered = 0;
                saveData.statistics.totalShinyFemalePokemonHatched = 0;
                saveData.statistics.totalGenderlessPokemonCaptured = 0;
                saveData.statistics.totalGenderlessPokemonDefeated = 0;
                saveData.statistics.totalGenderlessPokemonEncountered = 0;
                saveData.statistics.totalGenderlessPokemonHatched = 0;
                saveData.statistics.totalShinyGenderlessPokemonCaptured = 0;
                saveData.statistics.totalShinyGenderlessPokemonDefeated = 0;
                saveData.statistics.totalShinyGenderlessPokemonEncountered = 0;
                saveData.statistics.totalShinyGenderlessPokemonHatched = 0;
                // Assign generic Pokemon statistics to the gendered Pokemon ones
                (_a = saveData.party.caughtPokemon) === null || _a === void 0 ? void 0 : _a.forEach(pokemon => {
                    const capturedStatistic = saveData.statistics.pokemonCaptured[pokemon.id] || 0;
                    const defeatedStatistic = saveData.statistics.pokemonDefeated[pokemon.id] || 0;
                    const encounteredStatistic = saveData.statistics.pokemonEncountered[pokemon.id] || 0;
                    const hatchedStatistic = saveData.statistics.pokemonHatched[pokemon.id] || 0;
                    const shinyCapturedStatistic = saveData.statistics.shinyPokemonCaptured[pokemon.id] || 0;
                    const shinyDefeatedStatistic = saveData.statistics.shinyPokemonDefeated[pokemon.id] || 0;
                    const shinyEncounteredStatistic = saveData.statistics.shinyPokemonEncountered[pokemon.id] || 0;
                    const shinyHatchedStatistic = saveData.statistics.shinyPokemonHatched[pokemon.id] || 0;
                    if (pokemonMap[pokemon.id].gender.type == GameConstants.Genders.MaleFemale) { // No genderless
                        if (pokemonMap[pokemon.id].gender.femaleRatio != 1) { // Anything but female-only
                            saveData.statistics.malePokemonCaptured[pokemon.id] = capturedStatistic;
                            saveData.statistics.malePokemonDefeated[pokemon.id] = defeatedStatistic;
                            saveData.statistics.malePokemonEncountered[pokemon.id] = encounteredStatistic;
                            saveData.statistics.malePokemonHatched[pokemon.id] = hatchedStatistic;
                            saveData.statistics.shinyMalePokemonCaptured[pokemon.id] = shinyCapturedStatistic;
                            saveData.statistics.shinyMalePokemonDefeated[pokemon.id] = shinyDefeatedStatistic;
                            saveData.statistics.shinyMalePokemonEncountered[pokemon.id] = shinyEncounteredStatistic;
                            saveData.statistics.shinyMalePokemonHatched[pokemon.id] = shinyHatchedStatistic;
                            // Assign the generic total ones to the male ones
                            saveData.statistics.totalMalePokemonCaptured += capturedStatistic;
                            saveData.statistics.totalMalePokemonDefeated += defeatedStatistic;
                            saveData.statistics.totalMalePokemonEncountered += encounteredStatistic;
                            saveData.statistics.totalMalePokemonHatched += hatchedStatistic;
                            saveData.statistics.totalShinyMalePokemonCaptured += shinyCapturedStatistic;
                            saveData.statistics.totalShinyMalePokemonDefeated += shinyDefeatedStatistic;
                            saveData.statistics.totalShinyMalePokemonEncountered += shinyEncounteredStatistic;
                            saveData.statistics.totalShinyMalePokemonHatched += shinyHatchedStatistic;
                        }
                        else { // Female-only
                            saveData.statistics.femalePokemonCaptured[pokemon.id] = capturedStatistic;
                            saveData.statistics.femalePokemonDefeated[pokemon.id] = defeatedStatistic;
                            saveData.statistics.femalePokemonEncountered[pokemon.id] = encounteredStatistic;
                            saveData.statistics.femalePokemonHatched[pokemon.id] = hatchedStatistic;
                            saveData.statistics.shinyFemalePokemonCaptured[pokemon.id] = shinyCapturedStatistic;
                            saveData.statistics.shinyFemalePokemonDefeated[pokemon.id] = shinyDefeatedStatistic;
                            saveData.statistics.shinyFemalePokemonEncountered[pokemon.id] = shinyEncounteredStatistic;
                            saveData.statistics.shinyFemalePokemonHatched[pokemon.id] = shinyHatchedStatistic;
                            // Assign the generic total ones to the female ones
                            saveData.statistics.totalFemalePokemonCaptured += capturedStatistic;
                            saveData.statistics.totalFemalePokemonDefeated += defeatedStatistic;
                            saveData.statistics.totalFemalePokemonEncountered += encounteredStatistic;
                            saveData.statistics.totalFemalePokemonHatched += hatchedStatistic;
                            saveData.statistics.totalShinyFemalePokemonCaptured += shinyCapturedStatistic;
                            saveData.statistics.totalShinyFemalePokemonDefeated += shinyDefeatedStatistic;
                            saveData.statistics.totalShinyFemalePokemonEncountered += shinyEncounteredStatistic;
                            saveData.statistics.totalShinyFemalePokemonHatched += shinyHatchedStatistic;
                        }
                    }
                    else { // Genderless
                        // Assign the generic total ones to the genderless ones
                        saveData.statistics.totalGenderlessPokemonCaptured += capturedStatistic;
                        saveData.statistics.totalGenderlessPokemonDefeated += defeatedStatistic;
                        saveData.statistics.totalGenderlessPokemonEncountered += encounteredStatistic;
                        saveData.statistics.totalGenderlessPokemonHatched += hatchedStatistic;
                        saveData.statistics.totalShinyGenderlessPokemonCaptured += shinyCapturedStatistic;
                        saveData.statistics.totalShinyGenderlessPokemonDefeated += shinyDefeatedStatistic;
                        saveData.statistics.totalShinyGenderlessPokemonEncountered += shinyEncounteredStatistic;
                        saveData.statistics.totalShinyGenderlessPokemonHatched += shinyHatchedStatistic;
                    }
                });
                // Update Region filter from integer to bitfield.
                if (settingsData.breedingRegionFilter == -2) {
                    settingsData.breedingRegionFilter = (2 << playerData.highestRegion) - 1;
                }
                else {
                    settingsData.breedingRegionFilter = 1 << settingsData.breedingRegionFilter;
                }
            },
            '0.10.1': ({ playerData, saveData }) => {
                var _a, _b;
                // Brawlers Cave renamed
                if (playerData._townName == 'Brawlers Cave') {
                    playerData._townName = 'Brawlers\' Cave';
                }
                // Remove cleared BF milestones from save if corresponding Pokémon is not in party
                if ((_b = (_a = saveData === null || saveData === void 0 ? void 0 : saveData.battleFrontier) === null || _a === void 0 ? void 0 : _a.milestones) === null || _b === void 0 ? void 0 : _b.length) {
                    const pokemonRewards = [
                        ['Deoxys', 386],
                        ['Deoxys (Attack)', 386.1],
                        ['Deoxys (Defense)', 386.2],
                        ['Deoxys (Speed)', 386.3],
                        ['Vivillon (Poké Ball)', 666.01],
                    ];
                    // Find Pokémon rewards that are not in our party
                    pokemonRewards
                        .filter(([name, id]) => {
                        return saveData.party.caughtPokemon.filter(p => p.id === id).length < 1;
                    })
                        // And remove any cleared milestones corresponding to missing Pokémon
                        .forEach(([name, id]) => {
                        saveData.battleFrontier.milestones = saveData.battleFrontier.milestones.filter(milestone => milestone[1] !== name);
                    });
                }
            },
            '0.10.2': ({ playerData, saveData }) => {
                // Kecleon Fights
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 15);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 16);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 17);
                // Zero Temporary Battle
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 32);
                // Dream Researcher fight
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 53);
                // Korrina fight
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 54);
                // Translations
                saveData.logbook.logs.forEach(log => log.content = createLogContent.notTranslated({ text: log.description }));
                // Rotate form IDs
                const formIDs = [
                    // Vivillon (Poke Ball to before Fancy, Icy Snow to before Polar)
                    [666.01, 666.18, 666.17, 666.16, 666.15, 666.14, 666.13, 666.12, 666.11, 666.1, 666.09, 666.08, 666.07],
                    // Flabebe line (swap Blue and Orange)
                    [669.02, 669.03],
                    [670.02, 670.03],
                    [671.02, 671.03],
                    // ROYGBIV Minior instead of BGIORVY
                    [774.01, 774.05],
                    [774.02, 774.04],
                    [774.03, 774.06, 774.07],
                ];
                formIDs.forEach(list => Update.rotatePokemonIDs(saveData, list));
                // Meltan  Temp Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 85);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 86);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 87);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 88);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 89);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 90);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 91);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 92);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 93);
                // Kanto starter should be saved in regionStarter, unless they update a very old save
                if (!playerData.regionStarters) {
                    playerData.regionStarters = [playerData.starter];
                }
                // Rivals Temp Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 0);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 1);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 2);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 3);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 7);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 12);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 13);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 14);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 16);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 17);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 18);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 26);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 27);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 28);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 29);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 30);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 31);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 32);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 36);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 37);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 51);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 52);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 53);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 54);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 56);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 57);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 58);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 60);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 61);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 63);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 66);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 67);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 68);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 73);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 87);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 88);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 89);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 91);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 92);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 93);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 94);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 95);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 103);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 104);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 105);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 106);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 107);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 108);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 109);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 110);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 122);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 123);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 124);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 125);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 126);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 127);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 128);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 129);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 130);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 131);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 133);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 134);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 135);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 136);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 145);
            },
            '0.10.3': ({ playerData, saveData }) => {
                const johtoBeastQL = saveData.quests.questLines.find((q) => q.name == 'The Legendary Beasts');
                if (johtoBeastQL && johtoBeastQL.state == 1 && johtoBeastQL.quest == 3 && johtoBeastQL.initial instanceof Array) {
                    johtoBeastQL.quest = 4;
                }
                // On the Rival fight, but already beat it before the quest
                if (johtoBeastQL && johtoBeastQL.state == 1 && johtoBeastQL.quest == 2 && johtoBeastQL.initial > 0) {
                    johtoBeastQL.initial = 0;
                }
            },
            '0.10.4': ({ playerData, saveData }) => {
                // Adding Magikarp Jump badges
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 101);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 102);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 103);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 104);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 105);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 106);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 107);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 108);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 109);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 110);
                // Update starter pokerus status if it wasn't infected after unlocking the key item
                if (saveData.keyItems.Pokerus_virus) {
                    let starter;
                    switch (playerData.regionStarters[0]) {
                        case 0:
                            starter = saveData.party.caughtPokemon.find(p => p.id == 1);
                            break;
                        case 1:
                            starter = saveData.party.caughtPokemon.find(p => p.id == 4);
                            break;
                        case 2:
                            starter = saveData.party.caughtPokemon.find(p => p.id == 7);
                            break;
                        case 3:
                            starter = saveData.party.caughtPokemon.find(p => p.id == 25);
                            break;
                    }
                    if (starter && (!starter[8] || starter[8] == 0)) {
                        starter[8] = 2;
                    }
                }
            },
            '0.10.5': ({ playerData, saveData, settingsData }) => {
                // Red temporary battle
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 28);
                // Magikarp Jump Temp Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 160);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 161);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 162);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 163);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 164);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 165);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 166);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 167);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 168);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 169);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 170);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 171);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 172);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 173);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 174);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 175);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 176);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 177);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 178);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 179);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 180);
                // Rotate form IDs
                const formIDs = [
                    // Butterfree (Gigantamax before others)
                    [12.01, 12.02, 12.03, 12.04],
                    //Pikachu (Put World Cap after Alola Cap, Gigantamax after Partner Cap)
                    [25.07, 25.08, 25.09, 25.10, 25.11, 25.12],
                    [25.09, 25.10, 25.11, 25.12, 25.13, 25.14],
                ];
                formIDs.forEach(list => Update.rotatePokemonIDs(saveData, list));
                // Move IDs from .x to .0x for consistency
                const consistentIDs = [
                    [1.1, 1.01],
                    [1.2, 1.02],
                    [1.3, 1.03],
                    [2.1, 2.01],
                    [2.2, 2.02],
                    [2.3, 2.03],
                    [3.1, 3.03],
                    [3.2, 3.04],
                    [3.3, 3.05],
                    [4.1, 4.01],
                    [5.1, 5.01],
                    [6.1, 6.04],
                    [7.1, 7.01],
                    [8.1, 8.01],
                    [9.1, 9.03],
                    [21.1, 21.01],
                    [52.01, 52.02],
                    [52.2, 52.03],
                    [77.1, 77.01],
                    [78.1, 78.01],
                    [79.1, 79.01],
                    [80.1, 80.02],
                    [83.1, 83.01],
                    [110.01, 110.02],
                    [110.1, 110.01],
                    [122.1, 122.01],
                    [133.1, 133.02],
                    [143.1, 143.02],
                    [144.1, 144.01],
                    [145.1, 145.01],
                    [146.1, 146.01],
                    [150.1, 150.03],
                    [172.1, 172.01],
                    [175.1, 175.01],
                    [175.2, 175.02],
                    [176.1, 176.01],
                    [199.1, 199.01],
                    [208.1, 208.02],
                    [222.1, 222.01],
                    [251.1, 251.02],
                    [251.2, 251.01],
                    [263.1, 263.01],
                    [264.1, 264.01],
                    [351.1, 351.01],
                    [351.2, 351.02],
                    [351.3, 351.03],
                    [386.1, 386.01],
                    [386.2, 386.02],
                    [386.3, 386.03],
                    [412.1, 412.01],
                    [412.2, 412.02],
                    [413.1, 413.01],
                    [413.2, 413.02],
                    [421.1, 421.01],
                    [422.1, 422.01],
                    [423.1, 423.01],
                    [446.1, 446.01],
                    [468.1, 468.01],
                    [479.1, 479.01],
                    [479.2, 479.02],
                    [479.3, 479.03],
                    [479.4, 479.04],
                    [479.5, 479.05],
                    [479.6, 479.06],
                    [487.1, 487.01],
                    [492.1, 492.01],
                    [554.1, 554.01],
                    [555.1, 555.01],
                    [555.2, 555.02],
                    [555.3, 555.03],
                    [562.1, 562.01],
                    [618.1, 618.01],
                    [641.1, 641.01],
                    [642.1, 642.01],
                    [645.1, 645.01],
                    [646.1, 646.01],
                    [646.2, 646.02],
                    [647.1, 647.01],
                    [648.1, 648.01],
                    [681.1, 681.01],
                    [710.1, 710.01],
                    [710.2, 710.02],
                    [710.3, 710.03],
                    [711.1, 711.01],
                    [711.2, 711.02],
                    [711.3, 711.03],
                    [791.1, 791.01],
                    [792.1, 792.01],
                    [801.1, 801.01],
                    [845.1, 845.01],
                    [845.2, 845.02],
                    [849.1, 849.01],
                    [869.01, -869.01],
                    [869.02, -869.02],
                    [869.03, -869.03],
                    [869.04, -869.04],
                    [869.05, -869.05],
                    [869.06, -869.06],
                    [869.07, -869.07],
                    [869.08, -869.08],
                    [869.11, -869.11],
                    [869.12, -869.12],
                    [869.13, -869.13],
                    [869.14, -869.14],
                    [869.15, -869.15],
                    [869.16, -869.16],
                    [869.17, -869.17],
                    [869.18, -869.18],
                    [869.21, -869.21],
                    [869.22, -869.22],
                    [869.23, -869.23],
                    [869.24, -869.24],
                    [869.25, -869.25],
                    [869.26, -869.26],
                    [869.27, -869.27],
                    [869.28, -869.28],
                    [869.31, -869.31],
                    [869.32, -869.32],
                    [869.33, -869.33],
                    [869.34, -869.34],
                    [869.35, -869.35],
                    [869.36, -869.36],
                    [869.37, -869.37],
                    [869.38, -869.38],
                    [869.41, -869.41],
                    [869.42, -869.42],
                    [869.43, -869.43],
                    [869.44, -869.44],
                    [869.45, -869.45],
                    [869.46, -869.46],
                    [869.47, -869.47],
                    [869.48, -869.48],
                    [869.51, -869.51],
                    [869.52, -869.52],
                    [869.53, -869.53],
                    [869.54, -869.54],
                    [869.55, -869.55],
                    [869.56, -869.56],
                    [869.57, -869.57],
                    [869.58, -869.58],
                    [869.61, -869.61],
                    [869.62, -869.62],
                    [869.63, -869.63],
                    [869.64, -869.64],
                    [869.65, -869.65],
                    [869.66, -869.66],
                    [869.67, -869.67],
                    [869.68, -869.68],
                    [-869.01, 869.06],
                    [-869.02, 869.07],
                    [-869.03, 869.04],
                    [-869.04, 869.01],
                    [-869.05, 869.02],
                    [-869.06, 869.08],
                    [-869.07, 869.03],
                    [-869.08, 869.05],
                    [-869.11, 869.16],
                    [-869.12, 869.17],
                    [-869.13, 869.14],
                    [-869.14, 869.11],
                    [-869.15, 869.12],
                    [-869.16, 869.18],
                    [-869.17, 869.13],
                    [-869.18, 869.15],
                    [-869.21, 869.26],
                    [-869.22, 869.27],
                    [-869.23, 869.24],
                    [-869.24, 869.21],
                    [-869.25, 869.22],
                    [-869.26, 869.28],
                    [-869.27, 869.23],
                    [-869.28, 869.25],
                    [-869.31, 869.36],
                    [-869.32, 869.37],
                    [-869.33, 869.34],
                    [-869.34, 869.31],
                    [-869.35, 869.32],
                    [-869.36, 869.38],
                    [-869.37, 869.33],
                    [-869.38, 869.35],
                    [-869.41, 869.46],
                    [-869.42, 869.47],
                    [-869.43, 869.44],
                    [-869.44, 869.41],
                    [-869.45, 869.42],
                    [-869.46, 869.48],
                    [-869.47, 869.43],
                    [-869.48, 869.45],
                    [-869.51, 869.56],
                    [-869.52, 869.57],
                    [-869.53, 869.54],
                    [-869.54, 869.51],
                    [-869.55, 869.52],
                    [-869.56, 869.58],
                    [-869.57, 869.53],
                    [-869.58, 869.55],
                    [-869.61, 869.66],
                    [-869.62, 869.67],
                    [-869.63, 869.64],
                    [-869.64, 869.61],
                    [-869.65, 869.62],
                    [-869.66, 869.68],
                    [-869.67, 869.63],
                    [-869.68, 869.65],
                    [875.1, 875.01],
                    [876.1, 876.01],
                    [877.1, 877.01],
                    [888.1, 888.01],
                    [889.1, 889.01],
                    [892.1, 892.01],
                    [893.1, 893.01],
                    [898.1, 898.01],
                    [898.2, 898.02],
                ];
                consistentIDs.forEach(([oldID, newID]) => {
                    // Update all the Pokemon IDs
                    Update.updatePokemonId(saveData, oldID, newID);
                });
                // Update proteins → vitamins
                saveData.challenges.list.disableVitamins = saveData.challenges.list.disableProteins || false;
                saveData.statistics.totalVitaminsObtained = saveData.statistics.totalProteinsObtained || 0;
                saveData.statistics.totalVitaminsPurchased = saveData.statistics.totalProteinsPurchased || 0;
                // Delete our old statistics
                delete saveData.statistics.totalProteinsObtained;
                delete saveData.statistics.totalProteinsPurchased;
                // Update Vitamins used
                saveData.party.caughtPokemon.forEach(p => {
                    // Check Proteins used
                    if (p[2]) {
                        // Update Proteins used
                        p[2] = {
                            0: p[2],
                        };
                    }
                });
                // Update our settings
                settingsData.vitaminSort = settingsData.proteinSort;
                settingsData.vitaminSortDirection = settingsData.proteinSortDirection;
                settingsData.vitaminHideMaxedPokemon = settingsData.proteinHideMaxedPokemon;
                settingsData.vitaminHideShinyPokemon = settingsData.proteinHideShinyPokemon;
                settingsData.vitaminSearchFilter = settingsData.proteinSearchFilter;
                settingsData.vitaminRegionFilter = settingsData.proteinRegionFilter;
                settingsData.vitaminTypeFilter = settingsData.proteinTypeFilter;
                // Delete old settings
                delete settingsData.proteinSort;
                delete settingsData.proteinSortDirection;
                delete settingsData.proteinHideMaxedPokemon;
                delete settingsData.proteinHideShinyPokemon;
                delete settingsData.proteinSearchFilter;
                delete settingsData.proteinRegionFilter;
                delete settingsData.proteinTypeFilter;
                // Fix Galar main story temp battles
                const darkestDayQL = saveData.quests.questLines.find((q) => q.name == 'The Darkest Day');
                if ((darkestDayQL === null || darkestDayQL === void 0 ? void 0 : darkestDayQL.state) < 2) {
                    // Fix temp battle indicies based on quest step.
                    if (darkestDayQL.quest <= 1) {
                        saveData.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Bede 3')] = 0;
                    }
                    if (darkestDayQL.quest <= 3) {
                        saveData.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Hop 6')] = 0;
                    }
                    if (darkestDayQL.quest <= 4) {
                        saveData.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Hop 7')] = 0;
                    }
                    if (darkestDayQL.quest <= 17) {
                        saveData.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Eternatus')] = 0;
                    }
                    if (darkestDayQL.quest <= 18) {
                        saveData.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('The Darkest Day')] = 0;
                    }
                }
                // Suicune Quest autostart for players too far in Legendary Beasts quest
                const johtoBeastsQuestLine = saveData.quests.questLines.find((q) => q.name == 'The Legendary Beasts');
                const johtoSuicuneQuestLine = saveData.quests.questLines.find((q) => q.name == 'Eusine\'s Chase');
                if ((johtoBeastsQuestLine === null || johtoBeastsQuestLine === void 0 ? void 0 : johtoBeastsQuestLine.state) == 2 || ((johtoBeastsQuestLine === null || johtoBeastsQuestLine === void 0 ? void 0 : johtoBeastsQuestLine.state) == 1 && (johtoBeastsQuestLine === null || johtoBeastsQuestLine === void 0 ? void 0 : johtoBeastsQuestLine.quest) >= 4)) {
                    if (!johtoSuicuneQuestLine) {
                        // add to array
                        saveData.quests.questLines.push({
                            state: 1,
                            name: 'Eusine\'s Chase',
                            quest: 0,
                        });
                    }
                    else if (johtoSuicuneQuestLine.state == 0) {
                        // activate quest
                        johtoSuicuneQuestLine.state = 1;
                    }
                }
                //Red Gyarados
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 22);
            },
            '0.10.6': ({ playerData, saveData }) => {
                // Give the player any missing questline or temporary battle rewards
                Update.giveMissingQuestLineProgressRewardPokemon(saveData, 'Unfinished Business', 8, 172.01);
                Update.giveMissingQuestLineProgressRewardPokemon(saveData, 'Princess Diancie', 6, 681.01);
                Update.giveMissingQuestLineProgressRewardPokemon(saveData, 'A Mystery Gift', 1, 801.01);
                Update.giveMissingTempBattleRewardPokemon(saveData, 123, 25.14); // Ash Ketchum Pinkan
                Update.giveMissingTempBattleRewardPokemon(saveData, 151, 25.08); // Ash Ketchum Alola
                if (saveData.statistics.dungeonsCleared[157] > 0) { // Tower of Waters
                    Update.giveMissingPokemon(saveData, 892.01);
                }
                // Set 'Team Plasma Grunt 1' to 0 if quest step not completed
                Update.fixTempBattleState(saveData, 64, 0, 'Quest for the DNA Splicers', 0);
                // Set Cyrus as complete if 'A New World' completed
                Update.fixTempBattleState(saveData, 57, 1, 'A New World', 3);
            },
            '0.10.7': ({ playerData, saveData }) => {
                //JirachiQuest
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 40);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 41);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 42);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 43);
            },
            '0.10.8': ({ playerData, saveData }) => {
                //Grand Duchess Diantha
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 129);
            },
            '0.10.9': ({ playerData, saveData }) => {
                saveData.pokeballs.alreadyCaughtContagiousSelection = saveData.pokeballs.alreadyCaughtSelection;
                //Hex Maniac Aster
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 112);
                //ManaphyQuest
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 65);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 66);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 67);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 68);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 69);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 70);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 71);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 72);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 73);
                //Marquis Grant
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 139);
                //Latios Latias Quest
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 44);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 45);
            },
            '0.10.10': ({ playerData, saveData, settingsData }) => {
                var _a;
                // Bill's Grandpa
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 12);
                //Mega Manectric/Houndoom
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 144);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 145);
                // Derive Trainer Id from linked Discord Id to preserve Enigma hints
                if ((_a = saveData === null || saveData === void 0 ? void 0 : saveData.discord) === null || _a === void 0 ? void 0 : _a.ID) {
                    const getDerivedTrainerId = (discordId) => {
                        const MULTIPLIER = 9301;
                        const OFFSET = 49297;
                        const MOD = 233280;
                        let val = (discordId * MULTIPLIER + OFFSET) % MOD;
                        val = (val - OFFSET + MOD) % MOD;
                        val = (val * 123901) % MOD;
                        return val;
                    };
                    const trainerId = getDerivedTrainerId(saveData.discord.ID);
                    playerData.trainerId = trainerId.toString().padStart(6, '0');
                }
                // Delta Episode
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 115);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 116);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 117);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 118);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 119);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 120);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 121);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 122);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 123);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 124);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 125);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 126);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 127);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 128);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 129);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 130);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 131);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 132);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 133);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 134);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 135);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 136);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 137);
                // Add Near Space dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 56);
                // Mega Diancie
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 156);
                // If Distortion World has been cleared and no Pokémon in our party has Pokérus, infect the first Pokémon in our party
                if (saveData.statistics.dungeonsCleared[72] && !saveData.party.caughtPokemon.some(pokemon => pokemon[8] > 0)) {
                    saveData.party.caughtPokemon[0][8] = 2;
                }
                //Joey
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 31);
            },
            '0.10.11': ({ playerData, saveData, settingsData }) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                // Hoenn Stone Shop fight
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 139);
                // Updates Sorting
                if (settingsData.hatcherySort > 5) {
                    settingsData.hatcherySort++;
                }
                if (settingsData.partySort > 5) {
                    settingsData.partySort++;
                }
                if (settingsData.vitaminSort > 5) {
                    settingsData.vitaminSort++;
                }
                if (settingsData.heldItemSort > 5) {
                    settingsData.heldItemSort++;
                }
                (_a = saveData.breeding.hatcheryHelpers) === null || _a === void 0 ? void 0 : _a.forEach(helper => {
                    if (helper.sortOption > 5) {
                        helper.sortOption++;
                    }
                });
                // Update categories and fix category filters
                const max = saveData.categories.categories.length - 1;
                saveData.categories.categories.forEach((c, id) => {
                    c.id = id;
                });
                if (settingsData.pokedexCategoryFilter > max) {
                    settingsData.pokedexCategoryFilter = -1;
                }
                if (settingsData.breedingCategoryFilter > max) {
                    settingsData.breedingCategoryFilter = -1;
                }
                // Reset Blue 5 to undefeated if he has been defeated before reaching the quest step to battle him
                const teamRocketQuestLine = saveData.quests.questLines.find((q) => q.name == 'Team Rocket');
                if (saveData.statistics.temporaryBattleDefeated[7]
                    && ((teamRocketQuestLine === null || teamRocketQuestLine === void 0 ? void 0 : teamRocketQuestLine.state) == 0 || ((teamRocketQuestLine === null || teamRocketQuestLine === void 0 ? void 0 : teamRocketQuestLine.state) == 1 && (teamRocketQuestLine === null || teamRocketQuestLine === void 0 ? void 0 : teamRocketQuestLine.quest) <= 2))) {
                    saveData.statistics.temporaryBattleDefeated[7] = 0;
                }
                // Add Phenac City Battles dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 57);
                // Add Pyrite Town Battles dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 58);
                // Add Pyrite Colosseum Battles dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 59);
                // Add Pyrite Blgd dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 60);
                // Add Pyrite Cave dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 61);
                // Add Relic Cave dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 62);
                // Add Mt. Battle Battles dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 63);
                // Add The Under Subway dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 64);
                // Add Cipher Lab Battles dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 65);
                // Add Realgam Tower Battles dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 66);
                // Add Realgam Colosseum Battles dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 67);
                // Add Snagem Hideout dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 68);
                // Add Deep Colosseum dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 69);
                // Add Phenac Stadium dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 70);
                // Add Under Colosseum dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 71);
                // Add Orre Colosseum dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 72);
                //Team Flare Grunt 1
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 114);
                //Team Flare Grunt 2
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 115);
                //Team Flare Lysandre
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 152);
                //Team Flare Xerosic
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 153);
                //Xerneas
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 154);
                //Yveltal
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 155);
                //Team Flare Boss Lysandre 1
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 156);
                //Storyline AZ
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 166);
                //Team Flare Boss Lysandre 2
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 178);
                // Start Team Flare questline if player has beaten Sycamore 1 already
                if (saveData.statistics.temporaryBattleDefeated[111]) {
                    Update.startQuestLine(saveData, 'A Beautiful World');
                }
                // Move pokeball selections onto new filters
                saveData.pokeballFilters = {
                    list: [
                        {
                            name: 'Caught',
                            options: { caught: true },
                            ball: (_c = (_b = saveData.pokeballs) === null || _b === void 0 ? void 0 : _b.alreadyCaughtSelection) !== null && _c !== void 0 ? _c : GameConstants.Pokeball.None,
                        },
                        {
                            name: 'Contagious',
                            options: { pokerus: GameConstants.Pokerus.Contagious },
                            ball: (_e = (_d = saveData.pokeballs) === null || _d === void 0 ? void 0 : _d.alreadyCaughtContagiousSelection) !== null && _e !== void 0 ? _e : GameConstants.Pokeball.None,
                        },
                        {
                            name: 'Caught Shiny',
                            options: { shiny: true, caughtShiny: true },
                            ball: (_g = (_f = saveData.pokeballs) === null || _f === void 0 ? void 0 : _f.alreadyCaughtShinySelection) !== null && _g !== void 0 ? _g : GameConstants.Pokeball.Pokeball,
                        },
                        {
                            name: 'New',
                            options: { caught: false },
                            ball: (_j = (_h = saveData.pokeballs) === null || _h === void 0 ? void 0 : _h.notCaughtSelection) !== null && _j !== void 0 ? _j : GameConstants.Pokeball.Pokeball,
                        },
                        {
                            name: 'New Shiny',
                            options: { shiny: true, caughtShiny: false },
                            ball: (_l = (_k = saveData.pokeballs) === null || _k === void 0 ? void 0 : _k.notCaughtShinySelection) !== null && _l !== void 0 ? _l : GameConstants.Pokeball.Pokeball,
                        },
                    ],
                };
                // Add Hisui Gyms
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 114);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 115);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 116);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 117);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 118);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 119);
                //Primal Reversion battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 142);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 143);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 144);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 145);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 146);
                // Mega Stones are items now!
                // Give the player the Mega Stone if they own the Mega form or have the mega stone on the base form.
                // Then delete the megaStone property on all caught pokemon.
                const updateMegaStone = (megaStone, basePokemonId, megaPokemonId) => {
                    const basePokemon = saveData.party.caughtPokemon.find(p => p.id === basePokemonId);
                    const megaPokemon = saveData.party.caughtPokemon.find(p => p.id === megaPokemonId);
                    if (megaPokemon || (basePokemon === null || basePokemon === void 0 ? void 0 : basePokemon[14])) {
                        playerData._itemList[megaStone] = 1;
                    }
                };
                updateMegaStone('Abomasite', 460, 460.01); // Abomasnow
                updateMegaStone('Absolite', 359, 359.01); // Absol
                updateMegaStone('Aerodactylite', 142, 142.01); // Aerodactyl
                updateMegaStone('Aggronite', 306, 306.01); // Aggron
                updateMegaStone('Alakazite', 65, 65.01); // Alakazam
                updateMegaStone('Ampharosite', 181, 181.01); // Ampharos
                updateMegaStone('Audinite', 531, 531.01); // Audino
                updateMegaStone('Beedrillite', 15, 15.01); // Beedrill
                updateMegaStone('Cameruptite', 323, 323.01); // Camerupt
                updateMegaStone('Diancite', 719, 719.01); // Diancie
                updateMegaStone('Galladite', 475, 475.01); // Gallade
                updateMegaStone('Garchompite', 445, 445.01); // Garchomp
                updateMegaStone('Gardevoirite', 282, 282.01); // Gardevoir
                updateMegaStone('Gengarite', 94, 94.01); // Gengar
                updateMegaStone('Glalitite', 362, 362.01); // Glalie
                updateMegaStone('Heracronite', 214, 214.01); // Heracross
                updateMegaStone('Houndoominite', 229, 229.01); // Houndoom
                updateMegaStone('Kangaskhanite', 115, 115.01); // Kangaskhan
                updateMegaStone('Latiasite', 380, 380.01); // Latias
                updateMegaStone('Latiosite', 381, 381.01); // Latios
                updateMegaStone('Lopunnite', 428, 428.01); // Lopunny
                updateMegaStone('Lucarionite', 448, 448.01); // Lucario
                updateMegaStone('Manectite', 310, 310.01); // Manectric
                updateMegaStone('Mawilite', 303, 303.01); // Mawile
                updateMegaStone('Metagrossite', 376, 376.01); // Metagross
                updateMegaStone('Meteorite', 384, 384.01); // Rayquaza
                updateMegaStone('Pidgeotite', 18, 18.01); // Pidgeot
                updateMegaStone('Sablenite', 302, 302.01); // Sableye
                updateMegaStone('Salamencite', 373, 373.01); // Salamence
                updateMegaStone('Sharpedonite', 319, 319.01); // Sharpedo
                updateMegaStone('Slowbronite', 80, 80.01); // Slowbro
                updateMegaStone('Steelixite', 208, 208.01); // Steelix
                updateMegaStone('Tyranitarite', 248, 248.01); // Tyranitar
                saveData.party.caughtPokemon.forEach(p => {
                    delete p[14]; // megaStone
                });
                // Hopo Berry
                saveData.farming.mutations = Update.moveIndex(saveData.farming.mutations, 70);
            },
            '0.10.12': ({ playerData, saveData, settingsData }) => {
                // Rename Unova's Quest for the DNA Splicers questline
                saveData.quests.questLines.forEach(v => {
                    if (v.name === 'Quest for the DNA Splicers') {
                        v.name = 'Hollow Truth and Ideals';
                    }
                });
                //Colosseum battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 48);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 49);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 50);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 51);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 52);
                //Kalos Stone Salesman battle
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 147);
                //Silvally Types
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 215);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 216);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 217);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 218);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 219);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 220);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 221);
                // Adding Orre badges
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 45);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 46);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 47);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 48);
                // Changing MissingResistant to match new default
                if (settingsData['--missingResistant'] === '#ffffff') {
                    settingsData['--missingResistant'] = Settings.getSetting('--missingResistant').defaultValue;
                }
            },
            '0.10.13': ({ playerData, saveData, settingsData }) => {
                // Fix up any decoding errors from v0.10.12
                const decodeStringsDeep = (obj) => {
                    Object.keys(obj).forEach(key => {
                        if (typeof obj[key] === 'object' && obj[key] !== null) {
                            decodeStringsDeep(obj[key]);
                        }
                        if (typeof obj[key] === 'string') {
                            try {
                                obj[key] = decodeURI(obj[key]);
                            }
                            catch (e) {
                                console.warn('Unable to decode save file string', obj[key]);
                            }
                        }
                    });
                };
                // try and decode our data
                decodeStringsDeep(saveData);
                decodeStringsDeep(playerData);
                decodeStringsDeep(settingsData);
                // Fix up Zero's Ambition questline restarting
                if (saveData.party.caughtPokemon.find(p => p.id === 487)) { // If Giratina Altered caught
                    const zeroQuestLine = saveData.quests.questLines.find(q => q.name === 'Zero\'s Ambition');
                    if (zeroQuestLine) {
                        zeroQuestLine.state = 2;
                    }
                }
                else if (saveData.statistics.temporaryBattleDefeated[83] >= 1) { // If zero temp battle defeated
                    const zeroQuestLine = saveData.quests.questLines.find(q => q.name === 'Zero\'s Ambition');
                    if (zeroQuestLine) {
                        zeroQuestLine.state = 1;
                        zeroQuestLine.quest = 14;
                        zeroQuestLine.initial = 0;
                    }
                }
                // Fix up Zero's Ambition questline starting early
                const zeroQuestLine = saveData.quests.questLines.find(q => q.name === 'Zero\'s Ambition');
                if (zeroQuestLine && zeroQuestLine.state === 1) {
                    // Quest is started, check if the player has the rquirements for starting the quest
                    const caughtUxie = saveData.party.caughtPokemon.find(p => p.id === 480);
                    const caughtMesprit = saveData.party.caughtPokemon.find(p => p.id === 481);
                    const caughtAzelf = saveData.party.caughtPokemon.find(p => p.id === 482);
                    const hasSinnohChampionBadge = !!saveData.badgeCase[61];
                    // If any of these requirements are not met, reset the questline
                    if (!caughtUxie || !caughtMesprit || !caughtAzelf || !hasSinnohChampionBadge) {
                        zeroQuestLine.state = 0;
                        zeroQuestLine.quest = 0;
                        zeroQuestLine.initial = 0;
                    }
                }
            },
            '0.10.14': ({ playerData, saveData, settingsData }) => {
                var _a;
                // Hoopa battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 167);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 168);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 169);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 170);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 171);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 172);
                // Add XD dungeons
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 73);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 74);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 75);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 76);
                // Update Mewtwo Strikes Back! event
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 12);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 12);
                // Add XD Temp Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 54);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 55);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 56);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 57);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 58);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 59);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 60);
                // Add Mega Mewtwo battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 205);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 206);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 207);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 208);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 209);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 210);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 211);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 212);
                // Max Raids
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 340);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 341);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 342);
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 189);
                // ZCrystals
                const crystalOrder = [
                    'Normalium Z',
                    'Fightinium Z',
                    'Waterium Z',
                    'Firium Z',
                    'Grassium Z',
                    'Rockium Z',
                    'Electrium Z',
                    'Ghostium Z',
                    'Darkinium Z',
                    'Dragonium Z',
                    'Fairium Z',
                    'Groundium Z',
                ];
                const crystalFirstID = 88;
                crystalOrder.forEach((crystalName, rid) => {
                    if (!!saveData.badgeCase[crystalFirstID + rid]) {
                        playerData._itemList[crystalName] = 1;
                    }
                });
                // Fixing Silvally item amounts
                Object.keys(playerData._itemList).filter(itemName => itemName.includes('Memory_Silvally')).forEach(itemName => playerData._itemList[itemName] = Math.min(1, playerData._itemList[itemName]));
                //Replace Blaze Cassette with Magma Stone
                saveData.oakItems.Magma_Stone = saveData.oakItems.Blaze_Cassette;
                delete saveData.oakItems.Blaze_Cassette;
                // Snover Berry
                saveData.farming.berryList = Update.moveIndex(saveData.farming.berryList, 54);
                saveData.farming.unlockedBerries = Update.moveIndex(saveData.farming.unlockedBerries, 54);
                saveData.farming.mutations = Update.moveIndex(saveData.farming.mutations, 50);
                saveData.statistics.berriesHarvested = Update.moveIndex(saveData.statistics.berriesHarvested, 54);
                saveData.statistics.berriesObtained = Update.moveIndex(saveData.statistics.berriesObtained, 54);
                saveData.farming.plotList.forEach(p => {
                    if (p.berry >= 54) {
                        p.berry++;
                    }
                });
                // Add milestone for Vivillon (Poké Ball) if the quest is complete.
                const vivillonQuestLine = saveData.quests.questLines.find((q) => q.name == 'The Great Vivillon Hunt!');
                if (((_a = saveData.battleFrontier) === null || _a === void 0 ? void 0 : _a.milestones) && (vivillonQuestLine === null || vivillonQuestLine === void 0 ? void 0 : vivillonQuestLine.state) == 2) {
                    saveData.battleFrontier.milestones.push([666, 'Vivillon (Poké Ball)']);
                }
                // Add Paldea Gyms
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 120);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 121);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 122);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 123);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 124);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 125);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 126);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 127);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 128);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 129);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 130);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 131);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 132);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 133);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 134);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 135);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 136);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 137);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 138);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 139);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 140);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 141);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 142);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 143);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 144);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 145);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 146);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 147);
                saveData.statistics.gymsDefeated = Update.moveIndex(saveData.statistics.gymsDefeated, 148);
                // Remove Orre Colosseum Dungeon
                saveData.statistics.dungeonsCleared.splice(73, 1);
                // Adding Orre XD badges
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 49);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 50);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 51);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 52);
                saveData.badgeCase = Update.moveIndex(saveData.badgeCase, 53);
                // Reset Red temp battle
                saveData.statistics.temporaryBattleDefeated[31] = 0;
            },
            '0.10.16': ({ saveData, settingsData }) => {
                var _a;
                // Fix None category color being incomplete
                if (saveData.categories.categories[0].color === '#333') {
                    saveData.categories.categories[0].color = '#333333';
                }
                // ClearBattleFrontier → ClearBattleFrontierQuest
                saveData.quests.questList = ((_a = saveData.quests.questList) === null || _a === void 0 ? void 0 : _a.map(q => {
                    if (q.name == 'ClearBattleFrontier') {
                        q.name = 'ClearBattleFrontierQuest';
                    }
                    return q;
                })) || [];
                // Add Genesect Quest Battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 122);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 123);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 124);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 125);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 126);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 127);
                // Remove erroneous BreedingFilter search setting
                delete settingsData[''];
                // Remove Z Crystal gyms and badges (remove furthest down the index first as to not get confused by index numbers)
                // Mina\'s Trial
                saveData.statistics.gymsDefeated.splice(88, 1);
                // Vast Poni Canyon Trial
                saveData.statistics.gymsDefeated.splice(87, 1);
                // Acerola\'s Trial
                saveData.statistics.gymsDefeated.splice(85, 1);
                // Sophocles\' Trial
                saveData.statistics.gymsDefeated.splice(84, 1);
                // Mallow\'s Trial
                saveData.statistics.gymsDefeated.splice(82, 1);
                // Kiawe\'s Trial
                saveData.statistics.gymsDefeated.splice(81, 1);
                // Lana\'s Trial
                saveData.statistics.gymsDefeated.splice(80, 1);
                // Ilima\'s Trial
                saveData.statistics.gymsDefeated.splice(78, 1);
                // FairiumZ
                saveData.badgeCase.splice(103, 1);
                // DragoniumZ
                saveData.badgeCase.splice(102, 1);
                // GhostiumZ
                saveData.badgeCase.splice(100, 1);
                // ElectriumZ
                saveData.badgeCase.splice(99, 1);
                // GrassiumZ
                saveData.badgeCase.splice(97, 1);
                // FiriumZ
                saveData.badgeCase.splice(96, 1);
                // WateriumZ
                saveData.badgeCase.splice(95, 1);
                // NormaliumZ
                saveData.badgeCase.splice(93, 1);
                // Santa Jynx TempBattles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 15);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 15);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 15);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 15);
                // Fix Hopo berry visible in berrydex when not available
                saveData.farming.mutations[71] = false;
            },
            '0.10.17': ({ saveData }) => {
                var _a;
                // Fix Anomaly Mewtwo 5 if the quest is not completed.
                if (((_a = saveData.quests.questLines.find(ql => ql.name === 'An Unrivaled Power')) === null || _a === void 0 ? void 0 : _a.state) < 2) {
                    saveData.statistics.temporaryBattleDefeated[223] = 0;
                }
            },
            '0.10.18': ({ playerData, saveData, settingsData }) => {
                var _a, _b, _c;
                // Actually fix Anomaly Mewtwo 5 if the quest is not completed.
                if (((_b = (_a = saveData.quests.questLines.find(ql => ql.name === 'An Unrivaled Power')) === null || _a === void 0 ? void 0 : _a.state) !== null && _b !== void 0 ? _b : 0) !== 2) {
                    saveData.statistics.temporaryBattleDefeated[223] = 0;
                }
                // Give the player Fairy Feathers in place of Pink Bows
                playerData._itemList.Fairy_Feather = playerData._itemList.Pink_Bow || 0;
                delete playerData._itemList.Pink_Bow;
                // Update pokemon held item Pink Bow -> Fairy Feather
                saveData.party.caughtPokemon.forEach(p => {
                    if (p[10] === 'Pink_Bow') {
                        p[10] = 'Fairy_Feather';
                    }
                });
                // ID to itemName interface
                const converter = {
                    1: 'Rare_bone', 2: 'Star_piece', 3: 'Revive', 4: 'Max_revive', 5: 'Iron_ball', 6: 'Heart_scale', 7: 'Light_clay', 8: 'Odd_keystone', 9: 'Hard_stone', 10: 'Oval_stone', 11: 'Everstone', 12: 'Smooth_rock', 13: 'Heat_rock', 14: 'Icy_rock', 15: 'Damp_rock',
                    100: 'Draco_plate', 101: 'Dread_plate', 102: 'Earth_plate', 103: 'Fist_plate', 104: 'Flame_plate', 105: 'Icicle_plate', 106: 'Insect_plate', 107: 'Iron_plate', 108: 'Meadow_plate', 109: 'Mind_plate', 110: 'Sky_plate', 111: 'Splash_plate', 112: 'Spooky_plate', 113: 'Stone_plate', 114: 'Toxic_plate', 115: 'Zap_plate', 116: 'Pixie_plate',
                    200: 'Helix_fossil', 201: 'Dome_fossil', 202: 'Old_amber', 203: 'Root_fossil', 204: 'Claw_fossil', 205: 'Armor_fossil', 206: 'Skull_fossil', 207: 'Cover_fossil', 208: 'Plume_fossil', 209: 'Jaw_fossil', 210: 'Sail_fossil', 211: 'Fossilized_bird', 212: 'Fossilized_fish', 213: 'Fossilized_drake', 214: 'Fossilized_dino',
                    300: 'Fire_stone', 301: 'Water_stone', 302: 'Thunder_stone', 303: 'Leaf_stone', 304: 'Moon_stone', 305: 'Sun_stone', 306: 'Shiny_stone', 307: 'Dusk_stone', 308: 'Dawn_stone', 309: 'Ice_stone',
                    400: 'Red_shard', 401: 'Yellow_shard', 402: 'Green_shard', 403: 'Blue_shard', 404: 'Grey_shard', 405: 'Purple_shard', 406: 'Ochre_shard', 407: 'Black_shard', 408: 'Crimson_shard', 409: 'Lime_shard', 410: 'White_shard', 411: 'Pink_shard', 412: 'Cyan_shard', 413: 'Rose_shard', 414: 'Brown_shard',
                    500: 'Aerodactylite', 501: 'Mawilite', 502: 'Sablenite',
                };
                // Port player.mineInventory to player.itemList
                const sellLocks = (saveData.underground.sellLocks = {});
                playerData.mineInventory.forEach(it => {
                    if (!converter[it.id]) {
                        return console.error(`${it.name} is not a valid item to store.`);
                    }
                    playerData._itemList[converter[it.id]] = (playerData._itemList[converter[it.id]] || 0) + it.amount;
                    sellLocks[converter[it.id]] = it.sellLocked;
                });
                // Update sort settings to make room for new attack at lv 100 sort option
                ['hatcherySort', 'partySort', 'vitaminSort', 'heldItemSort', 'consumableSort']
                    .forEach((sortSetting) => {
                    if (settingsData[sortSetting] >= 5) {
                        settingsData[sortSetting]++;
                    }
                });
                // Sort by attack -> sort by attack at lv100
                if (settingsData.hatcherySort == 2) {
                    settingsData.hatcherySort = 5;
                }
                // Update hatchery helper sorting
                (_c = saveData.breeding.hatcheryHelpers) === null || _c === void 0 ? void 0 : _c.forEach(helper => {
                    if (helper.sortOption >= 5) {
                        // Move index
                        helper.sortOption++;
                    }
                    else if (helper.sortOption == 2) {
                        // Sort by attack -> sort by attack at lv100
                        helper.sortOption = 5;
                    }
                });
                // Fix pokerus status for party members infected via shop eggs
                saveData.party.caughtPokemon.forEach(pokemon => {
                    // PartyPokemonSaveKeys.pokerus and .breeding
                    if (pokemon[8] === GameConstants.Pokerus.Infected && !pokemon[4]) {
                        pokemon[8] = GameConstants.Pokerus.Contagious;
                    }
                });
                // Preserve bottom-to-top catch filter priority for existing players
                settingsData['catchFilters.invertPriorityOrder'] = true;
            },
            '0.10.19': ({ playerData, saveData, settingsData }) => {
                var _a;
                // Update hatchery helper sorting (again)
                (_a = saveData.breeding.hatcheryHelpers) === null || _a === void 0 ? void 0 : _a.forEach(helper => {
                    if (helper.sortOption == 2) {
                        // Sort by attack -> sort by attack at lv100
                        helper.sortOption = 5;
                    }
                });
            },
            '0.10.20': ({ playerData, saveData, settingsData }) => {
                // Add Olivine Lighthouse dungeon
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 29);
                if (saveData.badgeCase[17]) {
                    Update.startQuestLine(saveData, 'The Sick Ampharos');
                }
                // Multicategory pokemon
                saveData.party.caughtPokemon.forEach(pokemon => {
                    var _a;
                    pokemon[6] = [(_a = pokemon[6]) !== null && _a !== void 0 ? _a : 0];
                });
                // Add Alola story battles
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 225);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 227);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 228);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 229);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 230);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 236);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 237);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 242);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 243);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 244);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 245);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 248);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 249);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 250);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 251);
                saveData.statistics.temporaryBattleDefeated = Update.moveIndex(saveData.statistics.temporaryBattleDefeated, 262);
                // Reset temporary battles important to story
                saveData.statistics.temporaryBattleDefeated[247] = 0; // Gladion 2
                saveData.statistics.temporaryBattleDefeated[252] = 0; // Necrozma
                saveData.statistics.temporaryBattleDefeated[253] = 0; // Ultra Megalopolis
                saveData.statistics.temporaryBattleDefeated[261] = 0; // Gladion 3
                // Reset questline Eater of Light if it exists in the save
                const eaterID = saveData.quests.questLines.findIndex(ql => ql.name == 'Eater of Light');
                if (eaterID > -1) {
                    saveData.quests.questLines.splice(eaterID, 1);
                }
                // Reset/Remove questline Mina\'s Trial if in the save
                const minaID = saveData.quests.questLines.findIndex(ql => ql.name == 'Mina\'s Trial');
                if (minaID > -1) {
                    saveData.quests.questLines.splice(minaID, 1);
                }
                // Reset Mina\'s Trial temporary battles
                saveData.statistics.temporaryBattleDefeated[254] = 0;
                saveData.statistics.temporaryBattleDefeated[255] = 0;
                saveData.statistics.temporaryBattleDefeated[256] = 0;
                saveData.statistics.temporaryBattleDefeated[257] = 0;
                saveData.statistics.temporaryBattleDefeated[258] = 0;
                saveData.statistics.temporaryBattleDefeated[259] = 0;
                saveData.statistics.temporaryBattleDefeated[260] = 0;
                // Start Alola story quests if player has beaten temp battles already
                // Hau 1
                if (saveData.statistics.temporaryBattleDefeated[224]) {
                    Update.startQuestLine(saveData, 'Welcome to Paradise, Cousin!');
                }
                /* Uncomment and move once Z-Moves are ready
                // Give Z-Power_Ring key item if Hau 2 defeated
                if (saveData.statistics.temporaryBattleDefeated[226]) {
                    saveData.keyItems['Z-Power_Ring'] = true;
                    KeyItemController.showGainModal(KeyItemType['Z-Power_Ring']);
                }*/
                // Sina and Dexio
                if (saveData.statistics.temporaryBattleDefeated[232] && saveData.statistics.temporaryBattleDefeated[233]) {
                    Update.startQuestLine(saveData, 'Symbiotic Relations');
                }
                // Hau 5
                if (saveData.statistics.temporaryBattleDefeated[241]) {
                    Update.startQuestLine(saveData, 'Child of the Stars');
                }
                // Reimburse Survey Efficiency upgrade
                const surveyEfficiencyLevel = saveData.underground.upgrades.Survey_Efficiency;
                if (surveyEfficiencyLevel) {
                    const surveyEfficiencyCost = GameHelper.createArray(100, 400, 100);
                    const investedDiamonds = surveyEfficiencyCost.slice(0, surveyEfficiencyLevel).reduce((acc, cur) => acc + cur, 0);
                    saveData.wallet.currencies[GameConstants.Currency.diamond] += investedDiamonds;
                }
                // The NewYLayer upgrades has been refactored to Items_All, copy the level
                saveData.underground.upgrades.Items_All = saveData.underground.upgrades.NewYLayer;
            },
            '0.10.21': ({ playerData, saveData, settingsData }) => {
                // Rename settings to match pokedex filter name convention
                settingsData.breedingType1Filter = settingsData.breedingTypeFilter1;
                delete settingsData.breedingTypeFilter1;
                settingsData.breedingType2Filter = settingsData.breedingTypeFilter2;
                delete settingsData.breedingTypeFilter2;
                // Rename settings to accurately describe purpose
                settingsData.pokedexCaughtFilter = settingsData.pokedexShinyFilter;
                delete settingsData.pokedexShinyFilter;
                settingsData.breedingDisplayTextSetting = settingsData.breedingDisplayFilter;
                delete settingsData.breedingDisplayFilter;
                // Update breeding filters to use numeric values
                ['breedingCategoryFilter', 'breedingShinyFilter', 'breedingType1Filter', 'breedingType2Filter', 'breedingRegionFilter', 'breedingPokerusFilter', 'breedingRegionalAttackDebuffSetting']
                    .forEach((filter) => {
                    const convertedValue = Number.parseInt(settingsData[filter]);
                    if (!Number.isNaN(convertedValue)) {
                        settingsData[filter] = convertedValue;
                    }
                    else {
                        delete settingsData[filter];
                    }
                });
                // Update breedingHideAltFilter to use actual booleans
                settingsData.breedingHideAltFilter = settingsData.breedingHideAltFilter === 'true';
                // Update breeding type filters to use null for 'any type', matching the pokedex filters
                if (settingsData.breedingType1Filter == -2) {
                    settingsData.breedingType1Filter = null;
                }
                if (settingsData.breedingType2Filter == -2) {
                    settingsData.breedingType2Filter = null;
                }
                // Pokémon Center renamed
                if (playerData._townName == 'Route 3 Pokémon Center') {
                    playerData._townName = 'Route 4 Pokémon Center';
                }
                // Fix all weird amounts of Pokéballs
                saveData.pokeballs.pokeballs = saveData.pokeballs.pokeballs.map(n => Math.min(Number.MAX_SAFE_INTEGER, Math.max(0, n)));
                // Fix pokemon multi-category bug from 0.10.20 update for very old files
                saveData.party.caughtPokemon.forEach(pokemon => {
                    var _a;
                    if (!Array.isArray(pokemon[6])) {
                        pokemon[6] = [(_a = pokemon[6]) !== null && _a !== void 0 ? _a : 0];
                    }
                });
                // Reset settings that the player shouldn't have access to yet but might have been
                // set as default from a different file
                if (playerData.highestRegion < 5) { // Kalos
                    settingsData.pokedexUniqueTransformationFilter = 'all';
                    settingsData.breedingUniqueTransformationFilter = 'all';
                }
                if (!saveData.challenges.list.regionalAttackDebuff) {
                    settingsData.breedingRegionalAttackDebuffSetting = '-1';
                }
            },
            '0.10.22': ({ playerData, saveData, settingsData }) => {
                // Reimburse and reset the underground upgrades
                const upgradeCostMap = {
                    'Energy_Max': GameHelper.createArray(50, 500, 50),
                    'Items_Max': GameHelper.createArray(200, 800, 200),
                    'Items_Min': GameHelper.createArray(500, 5000, 1500),
                    'Energy_Gain': GameHelper.createArray(100, 1700, 100),
                    'Energy_Regen_Time': GameHelper.createArray(20, 400, 20),
                    'Daily_Deals_Max': GameHelper.createArray(150, 300, 150),
                    'Bomb_Efficiency': GameHelper.createArray(50, 250, 50),
                    'Survey_Cost': GameHelper.createArray(50, 250, 50),
                    'Items_All': GameHelper.createArray(3000, 3000, 3000),
                    'Reduced_Shards': GameHelper.createArray(750, 750, 750),
                    'Reduced_Plates': GameHelper.createArray(1000, 1000, 1000),
                    'Reduced_Evolution_Items': GameHelper.createArray(500, 500, 500),
                    'Reduced_Fossil_Pieces': GameHelper.createArray(200, 200, 200),
                };
                const totalReimburse = Object.entries(saveData.underground.upgrades).map(([key, value]) => {
                    var _a, _b;
                    return (_b = (_a = upgradeCostMap[key]) === null || _a === void 0 ? void 0 : _a.slice(0, value).reduce((acc, cur) => acc + cur, 0)) !== null && _b !== void 0 ? _b : 0;
                }).reduce((acc, cur) => acc + cur, 0);
                saveData.underground.upgrades = {};
                saveData.wallet.currencies[GameConstants.Currency.diamond] += totalReimburse;
                if (totalReimburse > 0) {
                    Notifier.notify({
                        title: 'Underground refund',
                        type: NotificationConstants.NotificationOption.info,
                        timeout: GameConstants.DAY,
                        message: `The old Underground upgrade system has been removed due to recent changes.
                    We have refunded ${totalReimburse.toLocaleString('en-US')} <img src="./assets/images/currency/diamond.svg" height="24px"/> to your wallet.`,
                    });
                }
                if (saveData.keyItems.Explorer_kit) {
                    Notifier.notify({
                        title: 'Underground changes',
                        type: NotificationConstants.NotificationOption.warning,
                        timeout: GameConstants.DAY,
                        message: `The Underground has been overhauled! Check out the Underground Help tab for all the details on the new features and how everything works. Dive in and explore the changes!
                    <button class="btn btn-block btn-secondary" onclick="UndergroundController.openUndergroundModal()" data-dismiss="toast">Open Underground</button>`,
                    });
                }
                // Remove the old underground save data
                saveData.underground = null;
                // Reset the Cell Battery
                saveData.oakItems[OakItemType[OakItemType.Cell_Battery]].level = 0;
                saveData.oakItems[OakItemType[OakItemType.Cell_Battery]].exp = 0;
                // Reset Key Stone multiplier
                delete playerData._itemMultipliers.Key_stone;
                // Held item setting change
                settingsData.heldItemHideHoldingThisItem = settingsData.heldItemShowHoldingThisItem;
                delete settingsData.heldItemShowHoldingThisItem;
                // Simplify farm module settings
                if (settingsData.showFarmModule === false) {
                    settingsData.showFarmModule = 'never';
                }
                else {
                    settingsData.showFarmModule = settingsData.showFarmModuleControls === false ? 'limited' : 'extended';
                }
                delete settingsData.showFarmModuleControls;
                // Pokémon Center renamed
                if (playerData._townName == 'Pokemon HQ Lab') {
                    playerData._townName = 'Pokémon HQ Lab';
                }
            },
            '0.10.23': ({ playerData, saveData, settingsData }) => {
                var _a;
                // Remove easier-to-fix locale misformatting from underground grid item tiles
                (_a = saveData.underground) === null || _a === void 0 ? void 0 : _a.mine.grid.map(t => t.reward).filter(r => r).forEach(r => {
                    if (!r.backgroundPosition.match(/^\d+% \d+%$/)) {
                        r.backgroundPosition = r.backgroundPosition.replaceAll(',', '.');
                        r.backgroundPosition = r.backgroundPosition.replace(/^([\d.]+)\s% ([\d.]+)\s%$/, '$1% $2%');
                        r.backgroundPosition = r.backgroundPosition.replace(/^%\s([\d.]+) %\s([\d.]+)$/, '$1% $2%');
                    }
                });
            },
            '0.10.24': ({ playerData, saveData, settingsData }) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
                const reimburseFarmPoints = [0, 2000, 5000, 10000, 20000, 50000]
                    .slice(0, saveData.oakItems[OakItemType[OakItemType.Sprinklotad]].level + 1)
                    .reduce((previousValue, currentValue) => previousValue + currentValue, 0);
                saveData.wallet.currencies[GameConstants.Currency.farmPoint] += reimburseFarmPoints;
                // Reset the Sprinklotad
                saveData.oakItems[OakItemType[OakItemType.Sprinklotad]].level = 0;
                saveData.oakItems[OakItemType[OakItemType.Sprinklotad]].exp = 0;
                // Resets An Unrivaled Power Red tempbattle if needed
                const megaMewtwoQl = saveData.quests.questLines.find(ql => ql.name === 'An Unrivaled Power');
                if (megaMewtwoQl && [1, 3].includes(megaMewtwoQl.state) && megaMewtwoQl.quest === 0) {
                    megaMewtwoQl.initial = 0;
                }
                // Remove & refund any fossils in the hatchery
                // Update hatchery EggTypes
                const fossilConversionMap = {
                    138: 'Helix_fossil',
                    140: 'Dome_fossil',
                    142: 'Old_amber',
                    345: 'Root_fossil',
                    347: 'Claw_fossil',
                    410: 'Armor_fossil',
                    408: 'Skull_fossil',
                    564: 'Cover_fossil',
                    566: 'Plume_fossil',
                    696: 'Jaw_fossil',
                    698: 'Sail_fossil',
                };
                (_a = saveData.breeding.eggList) === null || _a === void 0 ? void 0 : _a.forEach((egg, i) => {
                    const oldType = egg.type;
                    if (egg.type === 6) {
                        egg.type = 0; // EggType.Pokemon
                    }
                    else if (egg.type === 8) {
                        // EggType.Fossil no longer exists, refund the fossil item and remove the egg
                        const fossil = fossilConversionMap[egg.pokemon];
                        if (fossil) {
                            playerData._itemList[fossil] = (playerData._itemList[fossil] || 0) + 1;
                        }
                        saveData.breeding.eggList[i] = null;
                    }
                    else if ([0, 1, 2, 3, 4, 5, 7].includes(egg.type)) {
                        egg.type = 1; // EggType.EggItem now covers every EggItemType
                    }
                    else {
                        egg.type = -1; // EggType.None
                    }
                });
                // Remove unused pokemon egg item
                delete playerData._itemList.Pokemon_egg;
                // Add the new default shadow filter to save files that haven't reached the requirements yet
                const shadowsInTheDesert = saveData.quests.questLines.find((q) => q.name == 'Shadows in the Desert');
                if (!shadowsInTheDesert || (shadowsInTheDesert.state !== 2 && shadowsInTheDesert.quest < 4)) {
                    const filter = { name: 'New Shadow', options: { shadow: true, caughtShadow: false } };
                    const inverted = (_b = settingsData['catchFilters.invertPriorityOrder']) !== null && _b !== void 0 ? _b : false;
                    if (inverted) { // added to beginning
                        (_d = (_c = saveData.pokeballFilters) === null || _c === void 0 ? void 0 : _c.list) === null || _d === void 0 ? void 0 : _d.splice(0, 0, filter);
                    }
                    else { // added to end
                        (_f = (_e = saveData.pokeballFilters) === null || _e === void 0 ? void 0 : _e.list) === null || _f === void 0 ? void 0 : _f.push(filter);
                    }
                }
                // Update Enigma hint data
                saveData.farming.mutations[63] = { seen: saveData.farming.mutations[63], last: null };
                // Refund any vitamins on MissingNo. as it now gets removed on update.
                // Will also no longer be able to give it vitamins so this is a one time thing
                const vitaminsUsed = (_g = saveData.party.caughtPokemon.find(p => p.id === 0)) === null || _g === void 0 ? void 0 : _g[2];
                if (vitaminsUsed) {
                    playerData._itemList.Protein = ((_h = playerData._itemList.Protein) !== null && _h !== void 0 ? _h : 0) + ((_j = vitaminsUsed[0]) !== null && _j !== void 0 ? _j : 0);
                    playerData._itemList.Calcium = ((_k = playerData._itemList.Calcium) !== null && _k !== void 0 ? _k : 0) + ((_l = vitaminsUsed[1]) !== null && _l !== void 0 ? _l : 0);
                    playerData._itemList.Carbos = ((_m = playerData._itemList.Carbos) !== null && _m !== void 0 ? _m : 0) + ((_o = vitaminsUsed[2]) !== null && _o !== void 0 ? _o : 0);
                }
                //Remove second AZ battle.
                saveData.statistics.temporaryBattleDefeated.splice(202, 1);
                // Replace the UG discord rich presence strings
                if (settingsData['discord-rp.line-1']) {
                    settingsData['discord-rp.line-1'] = settingsData['discord-rp.line-1'].replace(/{underground_deal_trades}/g, '{underground_trades}');
                }
                if (settingsData['discord-rp.line-2']) {
                    settingsData['discord-rp.line-2'] = settingsData['discord-rp.line-2'].replace(/{underground_deal_trades}/g, '{underground_trades}');
                }
                // Set file creation time to zero for existing files
                playerData._createdTime = 0;
                // None now locked as the first category
                const categoryNoneIndex = saveData.categories.categories.findIndex(c => c.id === 0);
                if (categoryNoneIndex > 0) {
                    const cats = saveData.categories.categories;
                    const noneCategory = cats.splice(categoryNoneIndex, 1)[0];
                    saveData.categories.categories = [noneCategory, ...cats];
                }
                // Mark new Pokemon Gifts as claimed if they are already owned
                const ownsFloetteEternal = saveData.party.caughtPokemon.find((p) => p.id === 670.05);
                if (ownsFloetteEternal) {
                    saveData.statistics.npcTalkedTo[GameHelper.hash('eternalfloettegift')] = 1;
                }
                const ownsMagearnaOriginal = saveData.party.caughtPokemon.find((p) => p.id === 801.01);
                if (ownsMagearnaOriginal) {
                    saveData.statistics.npcTalkedTo[GameHelper.hash('magearnamysterygift')] = 1;
                }
            },
        };
        const saveData = this.getSaveData();
        if (saveData) {
            this.fromJSON(saveData.update, true);
        }
        // Start our update check
        this.checkForNewerVersionOnInterval();
    }
    checkForNewerVersionOnInterval() {
        // Lets check every 3 hours for a newer version
        const checkForNewVersionInterval = setInterval(() => {
            try {
                $.ajax({
                    cache: false,
                    url: './package.json',
                    dataType: 'json',
                    success: result => {
                        // If the website version is newer
                        if (this.isNewerVersion(result.version, this.version)) {
                            clearInterval(checkForNewVersionInterval);
                            Notifier.notify({
                                title: `[UPDATE] v${result.version}`,
                                message: 'A newer version of the game is available:\n\n<a class="btn btn-warning btn-block" href="#" onclick="location.reload(true);">Reload Page</a>',
                                timeout: GameConstants.DAY,
                            });
                        }
                    },
                });
            }
            catch (ಠ_ಠ) {
                console.error('[update] Unable to check for new version', ಠ_ಠ);
            }
        }, GameConstants.HOUR * 3);
    }
    // check if save version is newer or equal to version
    minUpdateVersion(version, saveData) {
        var _a;
        return !this.isOlderVersion((_a = saveData.update) === null || _a === void 0 ? void 0 : _a.version, version);
    }
    // potentially newer version > check against version
    isNewerVersion(version, compareVersion) {
        return compareVersion.localeCompare(version, undefined, { numeric: true }) === -1;
    }
    // potentially older version < check against version
    isOlderVersion(version, compareVersion) {
        return compareVersion.localeCompare(version, undefined, { numeric: true }) === 1;
    }
    getBackupButton() {
        const playerData = this.getPlayerData();
        const saveData = this.getSaveData();
        const settingsData = this.getSettingsData();
        const data = { player: playerData, save: saveData, settings: settingsData };
        // Save the data by stringifying it, so that it isn't mutated during update
        const backupSaveData = JSON.stringify(data);
        let button = null;
        try {
            button = SaveSelector.createDownloadElement(data, this.saveVersion, true);
            button.className = 'btn btn-block btn-warning';
            button.innerText = 'Click to Backup Save!';
        }
        catch (e) {
            console.error('Failed to create backup button data:', e);
        }
        return [button, backupSaveData];
    }
    automaticallyDownloadBackup(button, settingsData) {
        // Add to body and click, triggering auto download
        if (!(settingsData === null || settingsData === void 0 ? void 0 : settingsData.disableAutoDownloadBackupSaveOnUpdate)) {
            button.style.display = 'none';
            document.body.appendChild(button);
            // We don't want auto download on dev build
            if (!GameHelper.isDevelopmentBuild()) {
                button.click();
            }
            document.body.removeChild(button);
        }
        button.style.display = '';
    }
    check() {
        if (this.saveVersion === this.version) {
            return;
        }
        // Check if the save is newer than the current client, don't allow it to load.
        if (this.isNewerVersion(this.saveVersion, this.version)) {
            Notifier.notify({
                title: 'Save version is newer than game version!',
                message: `Please update your game before attempting to load this save..\n\nSave version: ${this.saveVersion}\nGame version: ${this.version}`,
                type: NotificationConstants.NotificationOption.danger,
                timeout: GameConstants.DAY,
            });
            throw new Error(`Save is newer than game version\nSave version: ${this.saveVersion}\nGame version: ${this.version}`);
            return;
        }
        const [backupButton, backupSaveData] = this.getBackupButton();
        // Must modify these object when updating
        const playerData = this.getPlayerData();
        const saveData = this.getSaveData();
        const settingsData = this.getSettingsData();
        if (!playerData || !saveData) {
            return;
        }
        const updateResult = Object.entries(this.updateSteps)
            .filter(([version]) => this.isOlderVersion(this.saveVersion, version))
            .sort(([a], [b]) => this.isNewerVersion(a, b) ? 1 : -1)
            .reduce((beforeUpdate, [version, callback]) => {
            // The parse(stringify(...)) will deep-clone the object so
            // that it isn't mutated, and we can log if something fails
            const updateData = JSON.parse(JSON.stringify(beforeUpdate));
            try {
                console.info(`Applying update v${version}`);
                callback(updateData);
                return updateData;
            }
            catch (e) {
                console.error(`Caught error while applying update v${version}:\n`, e, { beforeUpdate, updateData });
                try {
                    localStorage.backupSave = backupSaveData;
                }
                catch (e) {
                    console.error('Caught error while backing up save file to localStorage:\n', e);
                }
                if (backupButton == null) {
                    // Failed to get backup button, don't give them the option to reset their save
                    Notifier.notify({
                        title: `Failed to update to v${this.version}!`,
                        message: 'Please check the console for errors, and report them on our <a class="text-light" href="https://discord.gg/a6DFe4p"><u>Discord</u></a>.\n\nUnable to prepare backup save for download. Your save file is safe, but report this error as well.',
                        type: NotificationConstants.NotificationOption.warning,
                        timeout: GameConstants.DAY,
                    });
                    throw e;
                }
                const resetButton = document.createElement('a');
                resetButton.className = 'btn btn-block btn-danger';
                resetButton.innerText = 'Reset your save - This is not reversible';
                resetButton.id = 'failedUpdateResetButton';
                Notifier.notify({
                    title: `Failed to update to v${this.version}!`,
                    message: `Please check the console for errors, and report them on our <a class="text-light" href="https://discord.gg/a6DFe4p"><u>Discord</u></a> along with your save file.\n\n${backupButton.outerHTML}\n${resetButton.outerHTML}`,
                    type: NotificationConstants.NotificationOption.primary,
                    timeout: GameConstants.DAY,
                });
                // On the next tick, set the reset button click handler
                setTimeout(() => {
                    document.getElementById('failedUpdateResetButton').onclick = () => {
                        Notifier.confirm({
                            title: 'Reset save',
                            message: 'Are you sure you want to reset your save?\n\nThis cannot be undone, so please make sure you have a backup first!',
                            type: NotificationConstants.NotificationOption.warning,
                            confirm: 'Reset',
                        }).then(confirmed => {
                            if (confirmed) {
                                // Force an autodownload of the backup when resetting the save
                                this.automaticallyDownloadBackup(backupButton, { disableAutoDownloadBackupSaveOnUpdate: false });
                                localStorage.removeItem(`player${Save.key}`);
                                localStorage.removeItem(`save${Save.key}`);
                                localStorage.removeItem(`settings${Save.key}`);
                                location.reload();
                            }
                        });
                    };
                }, 0);
                // Rethrow the error to prevent the game from corrupting the save
                throw e;
            }
        }, { playerData, saveData, settingsData });
        // Remove MissingNo.
        this.removeMissingNo(updateResult.saveData);
        try {
            this.automaticallyDownloadBackup(backupButton, settingsData);
            Notifier.notify({
                title: `[v${this.version}] Game has been updated!`,
                message: `Check the <a class="text-light" href="#changelogModal" data-toggle="modal"><u>changelog</u></a> for details!\n\n${backupButton.outerHTML}`,
                type: NotificationConstants.NotificationOption.primary,
                timeout: 6e4,
            });
        }
        catch (err) {
            console.error('Error trying to convert backup save', err);
            Notifier.notify({
                title: `[v${this.version}] Game has been updated!`,
                message: 'Check the <a class="text-light" href="#changelogModal" data-toggle="modal"><u>changelog</u></a> for details!\n\n<i>Failed to download old save. Please check the console for errors, and report them on our <a class="text-light" href="https://discord.gg/a6DFe4p"><u>Discord</u></a>.</i>',
                type: NotificationConstants.NotificationOption.warning,
                timeout: 6e4,
            });
            try {
                localStorage.backupSave = backupSaveData;
            }
            catch (e) {
                console.error('Caught error while backing up old save file to localStorage:\n', e);
            }
            throw err;
        }
        // Update the save data version to our current version
        updateResult.saveData.update.version = this.version;
        this.setPlayerData(updateResult.playerData);
        this.setSaveData(updateResult.saveData);
        this.setSettingsData(updateResult.settingsData);
    }
    // Will move from the previous ID to the new ID and delete any old statistics
    static updatePokemonId(saveData, oldID, newID) {
        Update.rotatePokemonIDs(saveData, [newID, oldID], false);
    }
    // Replaces Pokémon names to IDs in the save data
    static changePokemonNameToId(saveData, pokemonArray) {
        pokemonArray === null || pokemonArray === void 0 ? void 0 : pokemonArray.forEach(pokemonName => {
            const pokemon = PokemonHelper.getPokemonByName(pokemonName);
            Update.changeHatcheryKey(saveData, pokemonName, pokemon.id);
        });
    }
    static giveMissingQuestLineProgressRewardPokemon(saveData, questLineName, questStep, pokemonId) {
        const quest = saveData.quests.questLines.find((q) => q.name == questLineName);
        if ((quest === null || quest === void 0 ? void 0 : quest.state) == 2 || ((quest === null || quest === void 0 ? void 0 : quest.state) == 1 && (quest === null || quest === void 0 ? void 0 : quest.quest) >= questStep)) {
            Update.giveMissingPokemon(saveData, pokemonId);
        }
    }
    static giveMissingTempBattleRewardPokemon(saveData, tempBattleIndex, pokemonId) {
        if (saveData.statistics.temporaryBattleDefeated[tempBattleIndex] > 0) {
            Update.giveMissingPokemon(saveData, pokemonId);
        }
    }
    static giveMissingPokemon(saveData, pokemonId) {
        if (!saveData.party.caughtPokemon.find((p) => p.id == pokemonId)) {
            saveData.party.caughtPokemon.push({ id: pokemonId });
            saveData.statistics.pokemonCaptured[pokemonId] = saveData.statistics.pokemonCaptured[pokemonId] + 1 || 1;
        }
    }
    removeMissingNo(saveData) {
        // remove from party
        let idx;
        while ((idx = saveData.party.caughtPokemon.findIndex(p => p.id === 0)) !== -1) {
            saveData.party.caughtPokemon.splice(idx, 1);
        }
        // remove from breeding queue
        saveData.breeding.queueList = saveData.breeding.queueList.filter(p => Array.isArray(p) || pokemonMap[p].id !== 0);
        // remove from egg slot
        saveData.breeding.eggList = saveData.breeding.eggList.map(e => e === null || (pokemonMap[e.pokemon].id === 0 && e.type !== -1) ? null : e);
    }
    getPlayerData() {
        let playerData;
        try {
            playerData = JSON.parse(localStorage.getItem(`player${Save.key}`));
        }
        catch (err) {
            console.warn('Error getting player data', err);
        }
        finally {
            return playerData;
        }
    }
    setPlayerData(playerData) {
        try {
            localStorage.setItem(`player${Save.key}`, JSON.stringify(playerData));
        }
        catch (err) {
            console.error('Error setting player data', err);
        }
    }
    getSaveData() {
        let saveData;
        try {
            saveData = JSON.parse(localStorage.getItem(`save${Save.key}`));
        }
        catch (err) {
            console.warn('Error getting save data', err);
        }
        finally {
            return saveData;
        }
    }
    setSaveData(saveData) {
        try {
            localStorage.setItem(`save${Save.key}`, JSON.stringify(saveData));
        }
        catch (err) {
            console.error('Error setting save data', err);
        }
    }
    getSettingsData() {
        let settingsData;
        try {
            settingsData = JSON.parse(localStorage.getItem(`settings${Save.key}`) || localStorage.settings);
        }
        catch (err) {
            console.warn('Error getting settings data', err);
        }
        finally {
            return settingsData || {};
        }
    }
    setSettingsData(settingsData) {
        try {
            localStorage.setItem(`settings${Save.key}`, JSON.stringify(settingsData));
        }
        catch (err) {
            console.error('Error setting settings data', err);
        }
    }
    fromJSON(json, initial = false) {
        if (!initial) {
            return;
        }
        if (!json) {
            json = { version: '0.0.0' };
        }
        this.saveVersion = json.version || '0.0.0';
        this.check();
    }
    toJSON() {
        return {
            version: this.version,
        };
    }
}
// Used for moving dungeons and other stuff
// Be sure to insert from lowest index to highest index
// Example to get dungeons new index: GameConstants.getDungeonIndex('Aqua Hideout')
Update.moveIndex = (arr, to, from = Infinity, defaultVal = 0) => {
    let temp = arr.splice(from, 1);
    if (!temp.length) {
        temp = [defaultVal];
    }
    const end = arr.splice(to);
    arr = [...arr, ...temp, ...end];
    return arr;
};
// If any pokemon names change in the data rename them,
// note that name isn't used in party.
Update.changeHatcheryKey = (saveData, oldName, newName) => {
    var _a, _b;
    if (!saveData.breeding) {
        return;
    }
    // Fixup eggs
    (_a = saveData.breeding.eggList) === null || _a === void 0 ? void 0 : _a.forEach(egg => {
        if (egg.pokemon == oldName) {
            egg.pokemon = newName;
        }
    });
    // Fixup queue
    saveData.breeding.queueList = ((_b = saveData.breeding.queueList) === null || _b === void 0 ? void 0 : _b.map(p => p == oldName ? newName : p)) || [];
};
// Swapping or Rotating Pokemon IDs
Update.rotatePokemonIDs = (saveData, rotationlist, keepLast = true) => {
    // save some characters
    const s = saveData.statistics;
    const lastID = rotationlist[rotationlist.length - 1];
    Update.changeHatcheryKey(saveData, lastID, 1e9);
    const lastPokemon = saveData.party.caughtPokemon.find(p => p.id === lastID);
    // Store values from last ID to not get overwritten
    const tempIDvalues = {
        // Store our last ID
        storedID: lastID,
        // Store our last ID statistics
        statistics: [
            s.pokemonEncountered[lastID],
            s.pokemonDefeated[lastID],
            s.pokemonCaptured[lastID],
            s.pokemonHatched[lastID],
            s.shinyPokemonEncountered[lastID],
            s.shinyPokemonDefeated[lastID],
            s.shinyPokemonCaptured[lastID],
            s.shinyPokemonHatched[lastID],
            s.malePokemonEncountered[lastID],
            s.malePokemonDefeated[lastID],
            s.malePokemonCaptured[lastID],
            s.malePokemonHatched[lastID],
            s.shinyMalePokemonEncountered[lastID],
            s.shinyMalePokemonDefeated[lastID],
            s.shinyMalePokemonCaptured[lastID],
            s.shinyMalePokemonHatched[lastID],
            s.femalePokemonEncountered[lastID],
            s.femalePokemonDefeated[lastID],
            s.femalePokemonCaptured[lastID],
            s.femalePokemonHatched[lastID],
            s.shinyFemalePokemonEncountered[lastID],
            s.shinyFemalePokemonDefeated[lastID],
            s.shinyFemalePokemonCaptured[lastID],
            s.shinyFemalePokemonHatched[lastID],
        ],
    };
    // Overwrite values of current ID with next ID
    // Loop backwards so when rotating a -> b -> c, we don't overwrite b stats before needing them
    for (let i = rotationlist.length - 1; i > 0; i--) {
        const fromID = rotationlist[i - 1];
        const toID = rotationlist[i];
        Update.changeHatcheryKey(saveData, fromID, toID);
        // Rotate our ID
        const pokemon = saveData.party.caughtPokemon.find(p => p.id === fromID);
        if (pokemon) {
            pokemon.id = toID;
        }
        // Rotate our statistics
        s.pokemonEncountered[toID] = s.pokemonEncountered[fromID];
        s.pokemonDefeated[toID] = s.pokemonDefeated[fromID];
        s.pokemonCaptured[toID] = s.pokemonCaptured[fromID];
        s.pokemonHatched[toID] = s.pokemonHatched[fromID];
        s.shinyPokemonEncountered[toID] = s.shinyPokemonEncountered[fromID];
        s.shinyPokemonDefeated[toID] = s.shinyPokemonDefeated[fromID];
        s.shinyPokemonCaptured[toID] = s.shinyPokemonCaptured[fromID];
        s.shinyPokemonHatched[toID] = s.shinyPokemonHatched[fromID];
        s.malePokemonEncountered[toID] = s.malePokemonEncountered[fromID];
        s.malePokemonDefeated[toID] = s.malePokemonDefeated[fromID];
        s.malePokemonCaptured[toID] = s.malePokemonCaptured[fromID];
        s.malePokemonHatched[toID] = s.malePokemonHatched[fromID];
        s.shinyMalePokemonEncountered[toID] = s.shinyMalePokemonEncountered[fromID];
        s.shinyMalePokemonDefeated[toID] = s.shinyMalePokemonDefeated[fromID];
        s.shinyMalePokemonCaptured[toID] = s.shinyMalePokemonCaptured[fromID];
        s.shinyMalePokemonHatched[toID] = s.shinyMalePokemonHatched[fromID];
        s.femalePokemonEncountered[toID] = s.femalePokemonEncountered[fromID];
        s.femalePokemonDefeated[toID] = s.femalePokemonDefeated[fromID];
        s.femalePokemonCaptured[toID] = s.femalePokemonCaptured[fromID];
        s.femalePokemonHatched[toID] = s.femalePokemonHatched[fromID];
        s.shinyFemalePokemonEncountered[toID] = s.shinyFemalePokemonEncountered[fromID];
        s.shinyFemalePokemonDefeated[toID] = s.shinyFemalePokemonDefeated[fromID];
        s.shinyFemalePokemonCaptured[toID] = s.shinyFemalePokemonCaptured[fromID];
        s.shinyFemalePokemonHatched[toID] = s.shinyFemalePokemonHatched[fromID];
    }
    const firstID = rotationlist[0];
    // Overwrite last values with first ID
    // Rotate our ID
    if (lastPokemon) {
        lastPokemon.id = firstID;
    }
    // Update last ID statistics
    Update.changeHatcheryKey(saveData, 1e9, firstID);
    s.pokemonEncountered[firstID] = tempIDvalues.statistics[0];
    s.pokemonDefeated[firstID] = tempIDvalues.statistics[1];
    s.pokemonCaptured[firstID] = tempIDvalues.statistics[2];
    s.pokemonHatched[firstID] = tempIDvalues.statistics[3];
    s.shinyPokemonEncountered[firstID] = tempIDvalues.statistics[4];
    s.shinyPokemonDefeated[firstID] = tempIDvalues.statistics[5];
    s.shinyPokemonCaptured[firstID] = tempIDvalues.statistics[6];
    s.shinyPokemonHatched[firstID] = tempIDvalues.statistics[7];
    s.malePokemonEncountered[firstID] = tempIDvalues.statistics[8];
    s.malePokemonDefeated[firstID] = tempIDvalues.statistics[9];
    s.malePokemonCaptured[firstID] = tempIDvalues.statistics[10];
    s.malePokemonHatched[firstID] = tempIDvalues.statistics[11];
    s.shinyMalePokemonEncountered[firstID] = tempIDvalues.statistics[12];
    s.shinyMalePokemonDefeated[firstID] = tempIDvalues.statistics[13];
    s.shinyMalePokemonCaptured[firstID] = tempIDvalues.statistics[14];
    s.shinyMalePokemonHatched[firstID] = tempIDvalues.statistics[15];
    s.femalePokemonEncountered[firstID] = tempIDvalues.statistics[16];
    s.femalePokemonDefeated[firstID] = tempIDvalues.statistics[17];
    s.femalePokemonCaptured[firstID] = tempIDvalues.statistics[18];
    s.femalePokemonHatched[firstID] = tempIDvalues.statistics[19];
    s.shinyFemalePokemonEncountered[firstID] = tempIDvalues.statistics[20];
    s.shinyFemalePokemonDefeated[firstID] = tempIDvalues.statistics[21];
    s.shinyFemalePokemonCaptured[firstID] = tempIDvalues.statistics[22];
    s.shinyFemalePokemonHatched[firstID] = tempIDvalues.statistics[23];
    if (!keepLast) {
        delete s.pokemonEncountered[lastID];
        delete s.pokemonDefeated[lastID];
        delete s.pokemonCaptured[lastID];
        delete s.pokemonHatched[lastID];
        delete s.shinyPokemonEncountered[lastID];
        delete s.shinyPokemonDefeated[lastID];
        delete s.shinyPokemonCaptured[lastID];
        delete s.shinyPokemonHatched[lastID];
        delete s.malePokemonEncountered[lastID];
        delete s.malePokemonDefeated[lastID];
        delete s.malePokemonCaptured[lastID];
        delete s.malePokemonHatched[lastID];
        delete s.shinyMalePokemonEncountered[lastID];
        delete s.shinyMalePokemonDefeated[lastID];
        delete s.shinyMalePokemonCaptured[lastID];
        delete s.shinyMalePokemonHatched[lastID];
        delete s.femalePokemonEncountered[lastID];
        delete s.femalePokemonDefeated[lastID];
        delete s.femalePokemonCaptured[lastID];
        delete s.femalePokemonHatched[lastID];
        delete s.shinyFemalePokemonEncountered[lastID];
        delete s.shinyFemalePokemonDefeated[lastID];
        delete s.shinyFemalePokemonCaptured[lastID];
        delete s.shinyFemalePokemonHatched[lastID];
    }
};
Update.startQuestLine = (saveData, questLineName) => {
    const questLine = saveData.quests.questLines.find(ql => ql.name == questLineName);
    if (questLine) {
        // Set to started if not yet started, otherwise leave in it's current state
        questLine.state = questLine.state == 0 ? 1 : questLine.state;
    }
    else {
        // Push the quest, doesn't exist in save data yet
        saveData.quests.questLines.push({ state: 1, name: questLineName, quest: 0 });
    }
};
// Use setBattleState as 0 or 1 to manipulate battles to what status they should be based on related questline progress.
Update.fixTempBattleState = (saveData, battleIndex, setBattleState, questLineName, questStep) => {
    const ql = saveData.quests.questLines.find((q) => q.name === questLineName);
    if (!ql) {
        return;
    }
    if (setBattleState === 1) {
        // set to complete if related questline/step is completed
        if (ql.state === 2 || ql.quest > questStep) {
            saveData.statistics.temporaryBattleDefeated[battleIndex] = 1;
        }
    }
    if (setBattleState === 0) {
        // set to not complete if related questline/step isn't complete
        if (ql.state < 2 && ql.quest <= questStep) {
            saveData.statistics.temporaryBattleDefeated[battleIndex] = 0;
        }
    }
};
/**
 * TODO refactor this to no longer be global but App properties.
 * Will be done after the major player refactor.
 */
let player;
/**
 * Start the application when all html elements are loaded.
 */
document.addEventListener('DOMContentLoaded', () => {
    try {
        Settings.loadDefault();
        document.body.className = `no-select ${Settings.getSetting('theme').observableValue()} ${Settings.getSetting('backgroundImage').observableValue()}`;
        document.getElementById('theme-link').href = `https://bootswatch.com/4/${Settings.getSetting('theme').observableValue()}/bootstrap.min.css`;
    }
    catch (e) { }
    if (!App.isUsingClient) {
        document.getElementById('use-our-client-message').style.display = 'block';
    }
    // Load list of saves
    SaveSelector.loadSaves();
});
// Nested modals can be opened while they are in the middle of hiding.
// This should raise their backdrop on top of any existing modals,
// preventing us from getting into that messy situation.
// Copied from https://stackoverflow.com/questions/19305821/multiple-modals-overlay#answer-24914782
$(document).on('show.bs.modal', '.modal', function () {
    const zIndex = Math.max(1040, Math.max(...$('.modal:visible').get().map(e => +e.style.zIndex)) + 10);
    $(this).css('z-index', zIndex);
    // setTimeout with 0 delay because the backdrop doesn't exist yet
    setTimeout(() => {
        $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
    }, 0);
});
/// <reference path="../../declarations/TemporaryScriptTypes.d.ts" />
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/achievements/Achievement.d.ts" />
class AchievementHandler {
    static setNavigateIndex(index) {
        if (index < 0 || index >= AchievementHandler.numberOfTabs()) {
            return;
        }
        AchievementHandler.navigateIndex(index);
        Settings.setSettingByName('achievementsPage', index);
    }
    static navigateRight() {
        this.setNavigateIndex(AchievementHandler.navigateIndex() + 1);
    }
    static navigateLeft() {
        this.setNavigateIndex(AchievementHandler.navigateIndex() - 1);
    }
    static isNavigateDirectionDisabled(navigateBackward) {
        return navigateBackward
            ? this.navigateIndex() === 0
            : this.navigateIndex() + 1 === this.numberOfTabs();
    }
    static calculateNumberOfTabs() {
        this.numberOfTabs(Math.max(1, Math.ceil(this.achievementListFiltered().length / 10)));
    }
    static getAchievementListWithIndex() {
        return this.achievementSortedList().slice(this.navigateIndex() * 10, (this.navigateIndex() * 10) + 10);
    }
    static filterAchievementList(retainPage = false) {
        this.achievementListFiltered(this.achievementList.filter((a) => (a.category.isUnlocked() &&
            a.achievable() &&
            (this.filter.status() == -2 || a.unlocked() === !!this.filter.status()) &&
            (this.filter.type() == -2 || a.property.achievementType === this.filter.type()) &&
            (this.filter.category() == 'all' || a.category.name === this.filter.category()))));
        this.calculateNumberOfTabs();
        if (!retainPage) {
            this.setNavigateIndex(0);
        }
        else if (this.getAchievementListWithIndex().length === 0 && this.navigateIndex() > 0) {
            this.setNavigateIndex(this.numberOfTabs() - 1);
        }
    }
    static compareBy(option, direction) {
        return function (a, b) {
            let res, dir = (direction) ? -1 : 1;
            const config = AchievementSortOptionConfigs[option];
            const aValue = config.getValue(a);
            const bValue = config.getValue(b);
            if (config.invert) {
                dir *= -1;
            }
            //Compare by provided property
            if (aValue == bValue) {
                //If they are equal according to provided property, sort by name
                return a.name.localeCompare(b.name);
            }
            else if (aValue < bValue) {
                res = -1;
            }
            else if (aValue > bValue) {
                res = 1;
            }
            else {
                res = 0;
            }
            return res * dir;
        };
    }
    static preCheckAchievements() {
        AchievementHandler.filterAchievementList();
        // Check if our achievements are completed, we don't want to re-notify if already done
        for (let i = 0; i < AchievementHandler.achievementList.length; i++) {
            AchievementHandler.achievementList[i].unlocked(AchievementHandler.achievementList[i].isCompleted());
        }
        AchievementHandler.updateAchievementBonus();
    }
    static checkAchievements() {
        let updateBonus = false;
        for (let i = 0; i < AchievementHandler.achievementList.length; i++) {
            if (!AchievementHandler.achievementList[i].unlocked()) {
                const unlocked = AchievementHandler.achievementList[i].check();
                if (unlocked) {
                    updateBonus = true;
                }
            }
        }
        if (updateBonus) {
            AchievementHandler.updateAchievementBonus();
        }
    }
    static toJSON() {
        // Saves only achievements which have already been completed but currently don't have their requirements met, or that have the persist flag set
        const storage = AchievementHandler.achievementList.filter(a => a.unlocked() && (a.persist || !a.property.isCompleted())).map(a => a.name);
        return storage;
    }
    static fromJSON(unlockedAchievements) {
        unlockedAchievements === null || unlockedAchievements === void 0 ? void 0 : unlockedAchievements.forEach(achName => {
            var _a;
            (_a = AchievementHandler.findByName(achName)) === null || _a === void 0 ? void 0 : _a.unlocked(true);
        });
    }
    static addAchievement(name, description, property, bonus, category = GameConstants.ExtraAchievementCategories.global, achievableFunction = null) {
        let categoryObj;
        // ExtraAchievementCategory always starts at finals index
        if (category >= GameConstants.Region.final) {
            categoryObj = AchievementHandler.getAchievementCategoryByExtraCategory(category);
        }
        else {
            categoryObj = AchievementHandler.getAchievementCategoryByRegion(category);
        }
        categoryObj.totalWeight += bonus;
        AchievementHandler.achievementList.push(new Achievement(name, description, property, bonus, categoryObj, achievableFunction));
    }
    static addSecretAchievement(name, description, property, hint, persist = false) {
        AchievementHandler.achievementList.push(new SecretAchievement(name, description, property, hint, persist));
    }
    static calculateBonus() {
        AchievementHandler.achievementList.forEach((achievement) => {
            if (!achievement.achievable()) {
                return 0;
            }
            if (achievement.category.achievementBonus == 0) {
                achievement.bonus = 0;
            }
            else {
                achievement.bonus = (achievement.bonusWeight / achievement.category.totalWeight) * achievement.category.achievementBonus;
            }
        });
    }
    static calculateMaxBonus() {
        AchievementHandler.getAchievementCategories().forEach(category => {
            category.totalWeight = AchievementHandler.achievementList.filter(a => a.category == category && a.achievable()).reduce((sum, a) => sum + a.bonusWeight, 0);
        });
        AchievementHandler.calculateBonus();
        AchievementHandler.updateAchievementBonus();
    }
    static achievementBonus() {
        return AchievementHandler._cachedAchievementBonus();
    }
    static updateAchievementBonus() {
        let sum = 0;
        AchievementHandler.getAchievementCategories().forEach(category => {
            const total = AchievementHandler.achievementList.filter(a => {
                return a.category == category && a.isCompleted();
            }).reduce((sum, a) => sum + a.bonusWeight, 0) / category.totalWeight * category.achievementBonus / 100;
            if (!isNaN(total)) {
                sum += total;
            }
        });
        AchievementHandler._cachedAchievementBonus(sum);
    }
    static achievementBonusPercent() {
        return `${AchievementHandler.achievementBonus().toLocaleString('en-US', { style: 'percent', minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    }
    static findByName(name) {
        return AchievementHandler.achievementList.find((achievement) => achievement.name === name && achievement.achievable());
    }
    static getAchievementCategories() {
        if (AchievementHandler._achievementCategories) {
            return AchievementHandler._achievementCategories;
        }
        const categories = GameHelper.enumStrings(GameConstants.Region).filter(r => r != 'none' && r != 'final').map(r => new AchievementCategory(r, 100, () => player.highestRegion() >= GameConstants.Region[r]));
        categories.push(new AchievementCategory(GameConstants.ExtraAchievementCategories[GameConstants.ExtraAchievementCategories.global], 150, () => true));
        categories.push(new AchievementCategory(GameConstants.ExtraAchievementCategories[GameConstants.ExtraAchievementCategories.secret], 0, () => AchievementHandler.achievementList.some(a => a.category.name == GameConstants.ExtraAchievementCategories[GameConstants.ExtraAchievementCategories.secret] && a.unlocked())));
        categories.push(new AchievementCategory(GameConstants.ExtraAchievementCategories[GameConstants.ExtraAchievementCategories.sevii], 50, () => SubRegions.isSubRegionUnlocked(GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii123)));
        categories.push(new AchievementCategory(GameConstants.ExtraAchievementCategories[GameConstants.ExtraAchievementCategories.orre], 75, () => SubRegions.isSubRegionUnlocked(GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre)));
        categories.push(new AchievementCategory(GameConstants.ExtraAchievementCategories[GameConstants.ExtraAchievementCategories.magikarpJump], 25, () => SubRegions.isSubRegionUnlocked(GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump)));
        AchievementHandler._achievementCategories = categories;
        return categories;
    }
    static getAchievementCategoryByRegion(region) {
        return AchievementHandler.getAchievementCategories().find(c => c.name == GameConstants.Region[region]);
    }
    static getAchievementCategoryByExtraCategory(category) {
        return AchievementHandler.getAchievementCategories().find(c => c.name == GameConstants.ExtraAchievementCategories[category]);
    }
    static initialize(multiplier, challenges) {
        /*
         * GENERAL
         */
        AchievementHandler.addAchievement('My First Hundo', 'Obtain 100 Pokédollars.', new MoneyRequirement(100), 0.05);
        AchievementHandler.addAchievement('I Should Buy a Poké Mart', 'Obtain 1,000 Pokédollars.', new MoneyRequirement(1000), 0.10);
        AchievementHandler.addAchievement('A Small Fortune', 'Obtain 10,000 Pokédollars.', new MoneyRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Annual Wage', 'Obtain 100,000 Pokédollars.', new MoneyRequirement(100000), 0.20);
        AchievementHandler.addAchievement('Pfft, I Don\'t Need a Bike Voucher', 'Obtain 1,000,000 Pokédollars.', new MoneyRequirement(1000000), 0.25);
        AchievementHandler.addAchievement('A Billion Poképennies', 'Obtain 10,000,000 Pokédollars.', new MoneyRequirement(10000000), 0.3);
        AchievementHandler.addAchievement('Ready To Retire', 'Obtain 1,000,000,000 Pokédollars.', new MoneyRequirement(1000000000), 0.4);
        AchievementHandler.addAchievement('I Should Go to Space...', 'Obtain 100,000,000,000 Pokédollars.', new MoneyRequirement(100000000000), 0.6);
        AchievementHandler.addAchievement('Dungeon Time', 'Obtain 100 Dungeon Tokens.', new TokenRequirement(100), 0.05);
        AchievementHandler.addAchievement('Token Collector', 'Obtain 1,000 Dungeon Tokens.', new TokenRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Dungeon Grinder', 'Obtain 10,000 Dungeon Tokens.', new TokenRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Dungeon Master', 'Obtain 100,000 Dungeon Tokens.', new TokenRequirement(100000), 0.20);
        AchievementHandler.addAchievement('Dungeon Legend', 'Obtain 1,000,000 Dungeon Tokens.', new TokenRequirement(1000000), 0.25);
        AchievementHandler.addAchievement('Dungeon Myth', 'Obtain 100,000,000 Dungeon Tokens.', new TokenRequirement(100000000), 0.3);
        AchievementHandler.addAchievement('Dungeon God', 'Obtain 10,000,000,000 Dungeon Tokens.', new TokenRequirement(10000000000), 0.6);
        AchievementHandler.addAchievement('Farm Master', 'Obtain 100,000 Farm Points.', new FarmPointsRequirement(100000), 0.20);
        AchievementHandler.addAchievement('Farm Legend', 'Obtain 1,000,000 Farm Points.', new FarmPointsRequirement(1000000), 0.30);
        AchievementHandler.addAchievement('Farm Myth', 'Obtain 20,000,000 Farm Points.', new FarmPointsRequirement(20000000), 0.60);
        AchievementHandler.addAchievement('Startin\' Out', 'Capture your first Pokémon.', new CaughtPokemonRequirement(1), 0.01);
        AchievementHandler.addAchievement('Better Than Season 1 Ash', 'Capture 15 unique Pokémon.', new CaughtPokemonRequirement(15), 0.05);
        AchievementHandler.addAchievement('Wonderful! Do You Like To Collect Things?', 'Capture 50 unique Pokémon.', new CaughtPokemonRequirement(50), 0.10);
        AchievementHandler.addAchievement('Surpassing Ash', 'Capture 100 unique Pokémon.', new CaughtPokemonRequirement(100), 0.20);
        AchievementHandler.addAchievement('Enough for a Zoo', 'Capture 500 unique Pokémon.', new CaughtPokemonRequirement(500), 0.30);
        AchievementHandler.addAchievement('The PC Will Be Filled', 'Capture 1,000 unique Pokémon.', new CaughtPokemonRequirement(1000), 0.40);
        AchievementHandler.addAchievement('I\'d Rather Be Shiny', 'Capture your first Shiny Pokémon.', new ShinyPokemonRequirement(1), 0.03);
        AchievementHandler.addAchievement('These Pokémon Must Be Sick', 'Capture 10 unique Shiny Pokémon.', new ShinyPokemonRequirement(10), 0.06);
        AchievementHandler.addAchievement('Why Am I Doing This?', 'Capture 20 unique Shiny Pokémon.', new ShinyPokemonRequirement(20), 0.09);
        AchievementHandler.addAchievement('Why Am I Still Doing This?!', 'Capture 30 unique Shiny Pokémon.', new ShinyPokemonRequirement(30), 0.12);
        AchievementHandler.addAchievement('Okay Fine, I Can Do a Few More', 'Capture 40 unique Shiny Pokémon.', new ShinyPokemonRequirement(40), 0.15);
        AchievementHandler.addAchievement('Where Did All the Shiny Pokémon Go?', 'Capture 50 unique Shiny Pokémon.', new ShinyPokemonRequirement(50), 0.30);
        AchievementHandler.addAchievement('Nvm, Found Some More', 'Capture 75 unique Shiny Pokémon.', new ShinyPokemonRequirement(75), 0.45);
        AchievementHandler.addAchievement('Just Keep Swimming Just Keep Swimming - Oooo Shiny!', 'Capture 100 unique Shiny Pokémon.', new ShinyPokemonRequirement(100), 0.60);
        AchievementHandler.addAchievement('I Don\'t Know if I Can Handle the Next Batch of Shinies', 'Capture 151 unique Shiny Pokémon!', new ShinyPokemonRequirement(151), 1.00);
        AchievementHandler.addAchievement('Will Need Sunglasses', 'Capture 250 unique Shiny Pokémon!', new ShinyPokemonRequirement(250), 1.20);
        AchievementHandler.addAchievement('What Were the Odds Again?', 'Capture 500 unique Shiny Pokémon!', new ShinyPokemonRequirement(500), 1.30);
        AchievementHandler.addAchievement('Non-Shiny Is Now Becoming Rare', 'Capture 1,000 unique Shiny Pokémon!', new ShinyPokemonRequirement(1000), 1.50);
        AchievementHandler.addAchievement('First Team', 'Capture 100 Pokémon.', new CapturedRequirement(100), 0.05);
        AchievementHandler.addAchievement('Filling the PC', 'Capture 1,000 Pokémon.', new CapturedRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Pokémon Army', 'Capture 10,000 Pokémon.', new CapturedRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Pokémon Collector', 'Capture 100,000 Pokémon.', new CapturedRequirement(100000), 0.25);
        AchievementHandler.addAchievement('You Get a Pokémon, You Get a Pokémon, Everyone Gets a Pokémon!', 'Capture 1,000,000 Pokémon.', new CapturedRequirement(1000000), 0.50);
        AchievementHandler.addAchievement('A Long Road Ahead', 'Defeat 100 Pokémon.', new DefeatedRequirement(100), 0.05);
        AchievementHandler.addAchievement('Highway to Pallet Town', 'Defeat 1,000 Pokémon.', new DefeatedRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Overleveled', 'Defeat 10,000 Pokémon.', new DefeatedRequirement(10000), 0.15);
        AchievementHandler.addAchievement('The Cake Is a Lie, but the Grind Is Real', 'Defeat 100,000 Pokémon.', new DefeatedRequirement(100000), 0.25);
        AchievementHandler.addAchievement('Are There Any Left?', 'Defeat 1,000,000 Pokémon.', new DefeatedRequirement(1000000), 0.50);
        AchievementHandler.addAchievement('Basic Trainer', 'Have 100 Attack.', new AttackRequirement(100), 0.05);
        AchievementHandler.addAchievement('Improving', 'Have 1,000 Attack.', new AttackRequirement(1000), 0.10);
        AchievementHandler.addAchievement('An Unrelenting Force', 'Have 5,000 Attack.', new AttackRequirement(5000), 0.15);
        AchievementHandler.addAchievement('FUS RO DAH', 'Have 10,000 Attack.', new AttackRequirement(10000), 0.20);
        AchievementHandler.addAchievement('OK, I Have Enough Attack Already...', 'Have 25,000 Attack.', new AttackRequirement(25000), 0.25);
        AchievementHandler.addAchievement('Silver Attack Button!', 'Have 100,000 Attack.', new AttackRequirement(100000), 0.30);
        AchievementHandler.addAchievement('Pesky Roamers, I Need to One-Shot Routes for Them...', 'Have 250,000 Attack.', new AttackRequirement(250000), 0.35);
        AchievementHandler.addAchievement('You Pressed F12 by Any Chance?', 'Have 500,000 Attack.', new AttackRequirement(500000), 0.40);
        AchievementHandler.addAchievement('Left-Left-Right-Right-A-B-A-B - Hey, 1 Million!', 'Have 1,000,000 Attack.', new AttackRequirement(1000000), 0.40);
        AchievementHandler.addAchievement('Can I Beat Diantha Yet?', 'Have 5,000,000 Attack.', new AttackRequirement(5000000), 0.45);
        AchievementHandler.addAchievement('No One Can Challenge Me!', 'Have 20,000,000 Attack.', new AttackRequirement(20000000), 0.60);
        AchievementHandler.addAchievement('A Few Clicks In', 'Click Attack 10 times.', new ClickRequirement(10, 1), 0.02, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Clicking Pro', 'Click Attack 100 times.', new ClickRequirement(100, 1), 0.05, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Ultra Clicker', 'Click Attack 1,000 times.', new ClickRequirement(1000, 1), 0.10, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Need a New Mouse Yet?', 'Click Attack 10,000 times.', new ClickRequirement(10000, 1), 0.25, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Why Is My Voltorb Upside Down?', 'Purchase your first Poké Ball.', new PokeballRequirement(1, GameConstants.Pokeball.Pokeball), 0.01);
        AchievementHandler.addAchievement('Starting a Collection', 'Purchase 10 Poké Balls.', new PokeballRequirement(10, GameConstants.Pokeball.Pokeball), 0.03);
        AchievementHandler.addAchievement('Stocking Up', 'Purchase 100 Poké Balls.', new PokeballRequirement(100, GameConstants.Pokeball.Pokeball), 0.05);
        AchievementHandler.addAchievement('Fully Stocked', 'Purchase 1,000 Poké Balls.', new PokeballRequirement(1000, GameConstants.Pokeball.Pokeball), 0.10);
        AchievementHandler.addAchievement('Maybe Just a Few More for the Bunker', 'Purchase 10,000 Poké Balls.', new PokeballRequirement(10000, GameConstants.Pokeball.Pokeball), 0.15);
        AchievementHandler.addAchievement('Doomsday Bunker Stocked With Poké Balls!', 'Purchase 100,000 Poké Balls.', new PokeballRequirement(100000, GameConstants.Pokeball.Pokeball), 0.20);
        AchievementHandler.addAchievement('Ooooo a Blue One!', 'Purchase your first Great Ball.', new PokeballRequirement(1, GameConstants.Pokeball.Greatball), 0.03);
        AchievementHandler.addAchievement('I Got a Few Shiny Voltorb! Oh, Wait...', 'Obtain 10 Great Balls.', new PokeballRequirement(10, GameConstants.Pokeball.Greatball), 0.05);
        AchievementHandler.addAchievement('Now Shinies Won\'t Run Away So Easily!', 'Obtain 100 Great Balls.', new PokeballRequirement(100, GameConstants.Pokeball.Greatball), 0.10);
        AchievementHandler.addAchievement('Regular Poké Balls Just Aren\'t What They Used To Be', 'Obtain 1,000 Great Balls.', new PokeballRequirement(1000, GameConstants.Pokeball.Greatball), 0.15);
        AchievementHandler.addAchievement('A Great Investment', 'Obtain 10,000 Great Balls.', new PokeballRequirement(10000, GameConstants.Pokeball.Greatball), 0.20);
        AchievementHandler.addAchievement('The Greatest Collection of All Time', 'Obtain 100,000 Great Balls.', new PokeballRequirement(100000, GameConstants.Pokeball.Greatball), 0.30);
        AchievementHandler.addAchievement('They Made One Even Better?', 'Obtain your first Ultra Ball.', new PokeballRequirement(1, GameConstants.Pokeball.Ultraball), 0.05);
        AchievementHandler.addAchievement('Let\'s See How High the Catch Rate Becomes', 'Obtain 10 Ultra Balls.', new PokeballRequirement(10, GameConstants.Pokeball.Ultraball), 0.10);
        AchievementHandler.addAchievement('This Should Be Enough for Those Elusive Roamers...', 'Obtain 100 Ultra Balls.', new PokeballRequirement(100, GameConstants.Pokeball.Ultraball), 0.15);
        AchievementHandler.addAchievement('They Don\'t Work on Ultra Beasts? That\'s False Advertising!', 'Obtain 1,000 Ultra Balls.', new PokeballRequirement(1000, GameConstants.Pokeball.Ultraball), 0.20);
        AchievementHandler.addAchievement('I Don\'t Think I\'ll Ever Be Able To Go Back to the Commoner\'s Great Ball', 'Obtain 10,000 Ultra Balls.', new PokeballRequirement(10000, GameConstants.Pokeball.Ultraball), 0.30);
        AchievementHandler.addAchievement('Just Making Sure No Rare Pokémon Flees', 'Obtain 100,000 Ultra Balls.', new PokeballRequirement(100000, GameConstants.Pokeball.Ultraball), 0.40);
        AchievementHandler.addAchievement('The Ultimate Catching Device', 'Obtain your first Master Ball.', new PokeballRequirement(1, GameConstants.Pokeball.Masterball), 0.20);
        AchievementHandler.addAchievement('Legendaries Hate That Guy', 'Obtain 10 Master Balls.', new PokeballRequirement(10, GameConstants.Pokeball.Masterball), 0.30);
        AchievementHandler.addAchievement('No Pokémon in the World Can Run Away From Me Now!', 'Obtain 100 Master Balls.', new PokeballRequirement(100, GameConstants.Pokeball.Masterball), 0.40);
        AchievementHandler.addAchievement('Can You Do This for Me?', 'Complete your first quest.', new QuestRequirement(1), 0.05);
        AchievementHandler.addAchievement('One More Favor', 'Complete 10 quests.', new QuestRequirement(10), 0.15);
        AchievementHandler.addAchievement('YES MAN!', 'Complete 100 quests.', new QuestRequirement(100), 0.25);
        AchievementHandler.addAchievement('I Just Love Green Coins', 'Complete 1,000 quests.', new QuestRequirement(1000), 0.4);
        AchievementHandler.addAchievement('I Want To Be Ready for the Next Region', 'Complete 5,000 quests.', new QuestRequirement(5000), 0.6);
        AchievementHandler.addAchievement('Oh, Another Quest Slot!', 'Reach Quest Level 5.', new QuestLevelRequirement(5), 0.2);
        AchievementHandler.addAchievement('I Am Getting Good at Questing!', 'Reach Quest Level 10.', new QuestLevelRequirement(10), 0.3);
        AchievementHandler.addAchievement('What Do I Gain From Leveling This?', 'Reach Quest Level 20.', new QuestLevelRequirement(20), 0.5);
        AchievementHandler.addAchievement('Quest Master', 'Reach Quest Level 30.', new QuestLevelRequirement(30), 0.8);
        AchievementHandler.addAchievement('Is That How I Use This?', 'Level 1 Oak Item to the maximum level.', new MaxLevelOakItemRequirement(1), 0.05, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableOakItems.active());
        AchievementHandler.addAchievement('I\'ve Got My Hands Full With All of These', 'Level 3 Oak Items to the maximum level.', new MaxLevelOakItemRequirement(3), 0.1, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableOakItems.active());
        AchievementHandler.addAchievement('Professor Oak Is the Best!', 'Level 8 Oak Items to the maximum level.', new MaxLevelOakItemRequirement(8), 0.14, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableOakItems.active());
        AchievementHandler.addAchievement('Almost Prepared for Anything', 'Level 11 Oak Items to the maximum level.', new MaxLevelOakItemRequirement(11), 0.18, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableOakItems.active() && challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Prepared for Anything!', 'Level all 12 Oak Items to the maximum level.', new MaxLevelOakItemRequirement(12), 0.18, GameConstants.ExtraAchievementCategories.global, () => !challenges.list.disableOakItems.active() && !challenges.list.disableClickAttack.active());
        AchievementHandler.addAchievement('Pokémon Nursery', 'Hatch your first egg.', new HatchRequirement(1), 0.01);
        AchievementHandler.addAchievement('A Lot of Running', 'Hatch 10 eggs.', new HatchRequirement(10), 0.04);
        AchievementHandler.addAchievement('Marathon Runner', 'Hatch 100 eggs.', new HatchRequirement(100), 0.15);
        AchievementHandler.addAchievement('Egg Factory', 'Hatch 1,000 eggs.', new HatchRequirement(1000), 0.3);
        AchievementHandler.addAchievement('Official Easter Bunny', 'Hatch 10,000 eggs.', new HatchRequirement(10000), 0.4);
        AchievementHandler.addAchievement('What Do You Do With All the Eggshells?', 'Hatch 100,000 eggs.', new HatchRequirement(100000), 0.5);
        AchievementHandler.addAchievement('Day Care Is My Home', 'Hatch 250,000 eggs.', new HatchRequirement(250000), 0.7);
        AchievementHandler.addAchievement('Some Nice Help for the Day Care', 'Unlock 5 Hatchery Helpers.', new HatcheryHelperRequirement(5, 0), 0.1);
        AchievementHandler.addAchievement('Why Do They Have To Work in Shifts?', 'Unlock 11 Hatchery Helpers.', new HatcheryHelperRequirement(11, 0), 0.3);
        AchievementHandler.addAchievement('My Loyal Helpers', 'Get 3 Hatchery Helpers to 10% bonus efficiency.', new HatcheryHelperRequirement(3, 10), 0.4);
        AchievementHandler.addAchievement('Let\'s Try Some Other Helpers Too?', 'Get 5 Hatchery Helpers to 10% bonus efficiency.', new HatcheryHelperRequirement(5, 10), 0.5);
        AchievementHandler.addAchievement('Sam Just Wants To Help', 'Get 10 Hatchery Helpers to 10% bonus efficiency.', new HatcheryHelperRequirement(10, 10), 1);
        AchievementHandler.addAchievement('When Are You Going to Breed Yourself?', 'Get 10 Hatchery Helpers to 25% bonus efficiency.', new HatcheryHelperRequirement(10, 25), 1.3);
        AchievementHandler.addAchievement('My New Dirty Hobby', 'Unlock 3 Plots in the Farm.', new FarmPlotsUnlockedRequirement(3), 0.05);
        AchievementHandler.addAchievement('Allotment Gardener', 'Unlock 9 Plots in the Farm.', new FarmPlotsUnlockedRequirement(9), 0.15);
        AchievementHandler.addAchievement('Horticulture', 'Unlock all 25 Plots in the Farm.', new FarmPlotsUnlockedRequirement(25), 0.25);
        AchievementHandler.addAchievement('Who Planted These Here?', 'Unlock 8 Berries.', new BerriesUnlockedRequirement(8), 0.1);
        AchievementHandler.addAchievement('Farmer in Training', 'Unlock 18 Berries.', new BerriesUnlockedRequirement(18), 0.2);
        AchievementHandler.addAchievement('Farming Apprentice', 'Unlock 36 Berries.', new BerriesUnlockedRequirement(36), 0.3);
        AchievementHandler.addAchievement('Master Farmer', 'Unlock all 69 Berries.', new BerriesUnlockedRequirement(69), 0.4);
        AchievementHandler.addAchievement('Getting Some Help at the Farm', 'Unlock 3 Farm Hands.', new FarmHandRequirement(3), 0.2);
        AchievementHandler.addAchievement('Starting a Farming Empire', 'Unlock 6 Farm Hands.', new FarmHandRequirement(6), 0.3);
        AchievementHandler.addAchievement('Will I Ever Need All This Help?', 'Unlock all 9 Farm Hands.', new FarmHandRequirement(9), 0.4);
        AchievementHandler.addAchievement('Bling', 'Obtain 1,000 Diamonds.', new DiamondRequirement(1000), 0.05);
        AchievementHandler.addAchievement('Bling x10!', 'Obtain 10,000 Diamonds.', new DiamondRequirement(10000), 0.15);
        AchievementHandler.addAchievement('If You Like It, Then You Should\'ve Put a Ring on It', 'Obtain 100,000 Diamonds.', new DiamondRequirement(100000), 0.25);
        AchievementHandler.addAchievement('Just Keep Trading!', 'Obtain 250,000 Diamonds.', new DiamondRequirement(250000), 0.4);
        AchievementHandler.addAchievement('Get some daylight!', 'Obtain 1,000,000 Diamonds.', new DiamondRequirement(1000000), 0.6);
        AchievementHandler.addAchievement('Is My Thumb Green Yet?', 'Dig up an item in the Underground for the first time.', new UndergroundItemsFoundRequirement(1), 0.01);
        AchievementHandler.addAchievement('My Shovel Is Starting To Crack', 'Dig up 10 items in the Underground.', new UndergroundItemsFoundRequirement(10), 0.02);
        AchievementHandler.addAchievement('Why Can\'t I Make a Diamond Shovel?', 'Dig up 100 items in the Underground.', new UndergroundItemsFoundRequirement(100), 0.08);
        AchievementHandler.addAchievement('This Is Definitely Not Minecraft', 'Dig up 1,000 items in the Underground.', new UndergroundItemsFoundRequirement(1000), 0.1);
        AchievementHandler.addAchievement('I Wonder How Much Is Down There...', 'Dig up 10,000 items in the Underground.', new UndergroundItemsFoundRequirement(10000), 0.4);
        AchievementHandler.addAchievement('The Earth Is Like Onions', 'Dig deeper into the Underground for the first time.', new UndergroundLayersMinedRequirement(1), 0.01);
        AchievementHandler.addAchievement('This Takes Foreverrrrrrr', 'Dig deeper into the Underground 10 times.', new UndergroundLayersMinedRequirement(10), 0.03);
        AchievementHandler.addAchievement('DigDug Ain\'t Got Nothin\' on Me', 'Dig deeper into the Underground 100 times.', new UndergroundLayersMinedRequirement(100), 0.1);
        AchievementHandler.addAchievement('Both My Thumbs Are Green! This Can\'t Be Healthy', 'Dig deeper into the Underground 1,000 times.', new UndergroundLayersMinedRequirement(1000), 0.3);
        AchievementHandler.addAchievement('Well, this is easy', 'Reach Underground Level 10.', new UndergroundLevelRequirement(10), 0.25);
        AchievementHandler.addAchievement('To infinity and beyond', 'Reach Underground Level 20.', new UndergroundLevelRequirement(20), 0.5);
        AchievementHandler.addAchievement('Just one more thing', 'Reach Underground Level 50.', new UndergroundLevelRequirement(50), 1);
        AchievementHandler.addAchievement('Just pick one', 'Get at least 1 Underground Expert to level 25.', new UndergroundHelperRequirement(1, 25), 0.3);
        AchievementHandler.addAchievement('It\'s an honest days work', 'Get all 5 Underground Experts to level 25.', new UndergroundHelperRequirement(5, 25), 0.6);
        AchievementHandler.addAchievement('Got a favorite?', 'Get at least 1 Underground Expert to level 50.', new UndergroundHelperRequirement(1, 50), 0.6);
        AchievementHandler.addAchievement('They\'re all my favorites', 'Get all 5 Underground Experts to level 50.', new UndergroundHelperRequirement(5, 50), 1.2);
        AchievementHandler.addAchievement('Everyday I\'m chiseling', 'Use the Chisel Tool 1,000 times.', new UndergroundUseToolRequirement(UndergroundToolType.Chisel, 1000), 0.25);
        AchievementHandler.addAchievement('U Can\'t Touch This', 'Use the Hammer Tool 2,000 times.', new UndergroundUseToolRequirement(UndergroundToolType.Hammer, 2000), 0.25);
        AchievementHandler.addAchievement('KABOOM!', 'Use the Bomb Tool 5,000 times.', new UndergroundUseToolRequirement(UndergroundToolType.Bomb, 5000), 0.25);
        AchievementHandler.addAchievement('Eagle Eye', 'Use the Survey Tool 50 times.', new UndergroundUseToolRequirement(UndergroundToolType.Survey, 50), 0.25);
        AchievementHandler.addAchievement('Fine, I\'ll do it myself', 'Use any tool 10,000 times.', new UndergroundUseToolRequirement(null, 10000), 0.5);
        AchievementHandler.addAchievement('Let\'s Try This Out', 'Obtain your first Vitamin.', new VitaminObtainRequirement(1), 0.01);
        AchievementHandler.addAchievement('Pre-Workout Supplements', 'Obtain 5 Vitamins.', new VitaminObtainRequirement(5), 0.02);
        AchievementHandler.addAchievement('Well-Stocked Medicine Cabinet', 'Obtain 10 Vitamins.', new VitaminObtainRequirement(10), 0.04);
        AchievementHandler.addAchievement('I Can\'t Hold All These Vitamins!', 'Obtain 50 Vitamins.', new VitaminObtainRequirement(50), 0.08);
        AchievementHandler.addAchievement('Essential Nutrients', 'Obtain 100 Vitamins.', new VitaminObtainRequirement(100), 0.10);
        AchievementHandler.addAchievement('Putting the \'Bulk\' in Bulk-Buy', 'Obtain 500 Vitamins.', new VitaminObtainRequirement(500), 0.15);
        AchievementHandler.addAchievement('Vitamin Stockpile', 'Obtain 1,000 Vitamins.', new VitaminObtainRequirement(1000), 0.20);
        AchievementHandler.addAchievement('Fish, Eggs, Nuts, and Cheese', 'Obtain 5,000 Vitamins.', new VitaminObtainRequirement(5000), 0.35);
        AchievementHandler.addAchievement('Does This Powder Come With Flavours?', 'Obtain 10,000 Vitamins.', new VitaminObtainRequirement(10000), 0.50);
        AchievementHandler.addAchievement('A Literal Mountain of Muscle', 'Obtain 50,000 Vitamins.', new VitaminObtainRequirement(50000), 0.70);
        AchievementHandler.addAchievement('Fighting Novice', 'Complete stage 100 in the Battle Frontier.', new BattleFrontierHighestStageRequirement(100), 0.05);
        AchievementHandler.addAchievement('Competent Fighter', 'Complete stage 250 in the Battle Frontier.', new BattleFrontierHighestStageRequirement(250), 0.15);
        AchievementHandler.addAchievement('Unstoppable Fighting Machine', 'Complete stage 500 in the Battle Frontier.', new BattleFrontierHighestStageRequirement(500), 0.25);
        AchievementHandler.addAchievement('Living Legend', 'Complete stage 1,000 in the Battle Frontier.', new BattleFrontierHighestStageRequirement(1000), 0.4);
        AchievementHandler.addAchievement('Where Do They Find These Trainers?', 'Complete stage 2,000 in the Battle Frontier.', new BattleFrontierHighestStageRequirement(2000), 0.5);
        AchievementHandler.addAchievement('Keep On Fighting', 'Complete 500 total stages in the Battle Frontier.', new BattleFrontierTotalStageRequirement(500), 0.05);
        AchievementHandler.addAchievement('Uphill Battle', 'Complete 1,000 total stages in the Battle Frontier.', new BattleFrontierTotalStageRequirement(1000), 0.15);
        AchievementHandler.addAchievement('Don\'t Stop Trying', 'Complete 2,500 total stages in the Battle Frontier.', new BattleFrontierTotalStageRequirement(2500), 0.25);
        AchievementHandler.addAchievement('Need More Battle Points', 'Complete 5,000 total stages in the Battle Frontier.', new BattleFrontierTotalStageRequirement(5000), 0.4);
        AchievementHandler.addAchievement('I Can Do It This Time!', 'Complete 25,000 total stages in the Battle Frontier.', new BattleFrontierTotalStageRequirement(25000), 0.5);
        AchievementHandler.addAchievement('King of the Hill', 'Complete 100,000 total stages in the Battle Frontier.', new BattleFrontierTotalStageRequirement(100000), 0.7);
        AchievementHandler.addAchievement('I Hope It\'s Not Dangerous', 'Infect 20 Pokémon with Pokérus.', new PokerusStatusRequirement(20, GameConstants.Pokerus.Infected), 0.1);
        AchievementHandler.addAchievement('Any Way To Get Rid of It?', 'Infect 50 Pokémon with Pokérus.', new PokerusStatusRequirement(50, GameConstants.Pokerus.Infected), 0.2);
        AchievementHandler.addAchievement('It Is the Flu Season', 'Infect 100 Pokémon with Pokérus.', new PokerusStatusRequirement(100, GameConstants.Pokerus.Infected), 0.3);
        AchievementHandler.addAchievement('Where Is Nurse Joy?', 'Infect 250 Pokémon with Pokérus.', new PokerusStatusRequirement(250, GameConstants.Pokerus.Infected), 0.4);
        AchievementHandler.addAchievement('Infecting the Whole World', 'Infect 1,000 Pokémon with Pokérus.', new PokerusStatusRequirement(1000, GameConstants.Pokerus.Infected), 0.5);
        AchievementHandler.addAchievement('Curing Them One at a Time', 'Have 10 Pokémon Resistant to Pokérus.', new PokerusStatusRequirement(10, GameConstants.Pokerus.Resistant), 0.3);
        AchievementHandler.addAchievement('Pokémon Center Regular', 'Have 50 Pokémon Resistant to Pokérus.', new PokerusStatusRequirement(50, GameConstants.Pokerus.Resistant), 0.5);
        AchievementHandler.addAchievement('Doctor in Training', 'Have 250 Pokémon Resistant to Pokérus.', new PokerusStatusRequirement(250, GameConstants.Pokerus.Resistant), 1);
        AchievementHandler.addAchievement('I Should Open My Own Pokémon Center', 'Have 500 Pokémon Resistant to Pokérus.', new PokerusStatusRequirement(500, GameConstants.Pokerus.Resistant), 1.5);
        AchievementHandler.addAchievement('In the Shadow of Giants', 'Capture your first Shadow Pokémon', new ShadowPokemonRequirement(1), 1, GameConstants.ExtraAchievementCategories.orre);
        AchievementHandler.addAchievement('That\'s some Shady Pokémon! Do You Want to Sell Them?', 'Capture 10 unique Shadow Pokémon', new ShadowPokemonRequirement(10), 2, GameConstants.ExtraAchievementCategories.orre);
        AchievementHandler.addAchievement('Now Go Purify Them!', 'Capture 51 unique Shadow Pokémon', new ShadowPokemonRequirement(51), 4, GameConstants.ExtraAchievementCategories.orre);
        AchievementHandler.addAchievement('Beyond a Shadow of a Doubt', 'Capture all 131 unique Shadow Pokémon', new ShadowPokemonRequirement(131), 8, GameConstants.ExtraAchievementCategories.orre);
        AchievementHandler.addAchievement('Cleaning Crew', 'Purify your first Shadow Pokémon', new ShadowPokemonRequirement(1, GameConstants.ShadowStatus.Purified), 1.5, GameConstants.ExtraAchievementCategories.orre);
        AchievementHandler.addAchievement('Almost Clean Enough to Look Shiny', 'Purify 10 unique Shadow Pokémon', new ShadowPokemonRequirement(10, GameConstants.ShadowStatus.Purified), 3, GameConstants.ExtraAchievementCategories.orre);
        AchievementHandler.addAchievement('Priest in Training', 'Purify 51 unique Shadow Pokémon', new ShadowPokemonRequirement(51, GameConstants.ShadowStatus.Purified), 6, GameConstants.ExtraAchievementCategories.orre);
        AchievementHandler.addAchievement('Hand of Light', 'Purify all 131 unique Shadow Pokémon', new ShadowPokemonRequirement(131, GameConstants.ShadowStatus.Purified), 12, GameConstants.ExtraAchievementCategories.orre);
        AchievementHandler.addAchievement('Who Dropped These Here?', 'Pick up 10 Items in a Safari Zone', new SafariItemsRequirement(10), 0.1);
        AchievementHandler.addAchievement('Cheaper Than Buying It', 'Pick up 50 Items in a Safari Zone', new SafariItemsRequirement(50), 0.2);
        AchievementHandler.addAchievement('Itemfinder Has Nothing On Me!', 'Pick up 100 Items in a Safari Zone', new SafariItemsRequirement(100), 0.4);
        AchievementHandler.addAchievement('This Is Not A Pokéball!', 'Throw 10 Rocks in a Safari Zone', new SafariRocksRequirement(10), 0.1);
        AchievementHandler.addAchievement('You\'re A Big Meanie!', 'Throw 100 Rocks in a Safari Zone', new SafariRocksRequirement(100), 0.3);
        AchievementHandler.addAchievement('Why Are You Like This?', 'Throw 1,000 Rocks in a Safari Zone', new SafariRocksRequirement(1000), 0.7);
        AchievementHandler.addAchievement('Hope It Likes Berries', 'Throw 10 Bait in a Safari Zone', new SafariBaitRequirement(10), 0.1);
        AchievementHandler.addAchievement('What Is "Bait" Made Of?', 'Throw 100 Bait in a Safari Zone', new SafariBaitRequirement(100), 0.3);
        AchievementHandler.addAchievement('Stay For Dinner', 'Throw 1,000 Bait in a Safari Zone', new SafariBaitRequirement(1000), 0.5);
        AchievementHandler.addAchievement('Gotta Get Your Steps In!', 'Walk 100 Steps in a Safari Zone', new SafariStepsRequirement(100), 0.1);
        AchievementHandler.addAchievement('One More Lap', 'Walk 1,000 Steps in a Safari Zone', new SafariStepsRequirement(1000), 0.2);
        AchievementHandler.addAchievement('Marathon Runner 2', 'Walk 10,000 Steps in a Safari Zone', new SafariStepsRequirement(10000), 0.3);
        AchievementHandler.addAchievement('Where Pinsir?', 'Reach Safari Level 5.', new SafariLevelRequirement(5), 0.25);
        AchievementHandler.addAchievement('Chasing the Chansey', 'Reach Safari Level 15.', new SafariLevelRequirement(15), 0.5);
        AchievementHandler.addAchievement('Catch Animation Enthusiast', 'Reach Safari Level 30.', new SafariLevelRequirement(30), 1);
        AchievementHandler.addAchievement('Just Keep Chuckin\' Balls', 'Catch 50 Pokémon in a Safari Zone', new SafariCatchRequirement(50), 0.1);
        AchievementHandler.addAchievement('Strategic Chucker', 'Catch 100 Pokémon in a Safari Zone', new SafariCatchRequirement(100), 0.2);
        AchievementHandler.addAchievement('Master of the Safari', 'Catch 250 Pokémon in a Safari Zone', new SafariCatchRequirement(250), 0.4);
        AchievementHandler.addAchievement('Do Shines Cost Extra?', 'Catch a Shiny Pokémon in a Safari Zone', new SafariCatchRequirement(1, true), 0.5);
        const totalMegaStones = Object.values(ItemList).filter((i) => i instanceof MegaStoneItem).length;
        AchievementHandler.addAchievement('What a neat rock!', 'Obtain your first Mega Stone.', new TotalMegaStoneObtainedRequirement(1), 5, GameConstants.Region.kalos);
        AchievementHandler.addAchievement('Go, Go, Mega Force!', 'Obtain 25 Mega Stones.', new TotalMegaStoneObtainedRequirement(25), 7, GameConstants.Region.kalos);
        AchievementHandler.addAchievement('Y\'all got any more of them Mega Stones?', `Obtain all ${totalMegaStones} Mega Stones.`, new TotalMegaStoneObtainedRequirement(totalMegaStones), 10, GameConstants.Region.kalos);
        /*
         * REGIONAL
         */
        const addGymAchievements = (gyms, category, subregion) => {
            gyms.forEach(gym => {
                var _a, _b, _c;
                if (GymList[gym].requirements.some((req) => req instanceof DevelopmentRequirement)) {
                    return;
                }
                const elite = gym.includes('Elite') || gym.includes('Champion') || gym.includes('Supreme');
                const displayName = (_a = GymList[gym]) === null || _a === void 0 ? void 0 : _a.displayName;
                const gymRegion = subregion ? subregion : GameConstants.camelCaseToString(GameConstants.Region[GameConstants.getGymRegion(gym)]);
                // Name of person's title if elite/champion, else the gym's town name + 'Gym'
                const gymTitle = displayName !== null && displayName !== void 0 ? displayName : (!elite ? `${gym} Gym` : gym);
                const leaderName = !elite && !displayName ? `${GymList[gym].leaderName}'s` : '';
                if ((_c = (_b = GymList[gym]) === null || _b === void 0 ? void 0 : _b.flags) === null || _c === void 0 ? void 0 : _c.achievement) {
                    AchievementHandler.addAchievement(`${elite ? `${gymRegion} ` : ''}${gymTitle} Regular`, `Defeat ${leaderName} ${gymTitle} in ${gymRegion} 10 times.`, new ClearGymRequirement(GameConstants.ACHIEVEMENT_DEFEAT_GYM_VALUES[0], GameConstants.getGymIndex(gym)), 1, category);
                    AchievementHandler.addAchievement(`${elite ? `${gymRegion} ` : ''}${gymTitle} Ruler`, `Defeat ${leaderName} ${gymTitle} in ${gymRegion} 100 times.`, new ClearGymRequirement(GameConstants.ACHIEVEMENT_DEFEAT_GYM_VALUES[1], GameConstants.getGymIndex(gym)), 2, category);
                    AchievementHandler.addAchievement(`${elite ? `${gymRegion} ` : ''}${gymTitle} Owner`, `Defeat ${leaderName} ${gymTitle} in ${gymRegion} 1,000 times.`, new ClearGymRequirement(GameConstants.ACHIEVEMENT_DEFEAT_GYM_VALUES[2], GameConstants.getGymIndex(gym)), 3, category);
                }
            });
        };
        GameHelper.enumNumbers(GameConstants.Region).filter(r => r != GameConstants.Region.none && r <= GameConstants.MAX_AVAILABLE_REGION).forEach(region => {
            var _a;
            // Routes
            Routes.getRoutesByRegion(region).forEach(route => {
                var _a;
                if (((_a = SubRegions.getSubRegionById(region, route.subRegion)) === null || _a === void 0 ? void 0 : _a.requirement) instanceof NullRequirement) {
                    return;
                }
                let category = region;
                // Split bigger subregions into their own achievement pool
                if (region == GameConstants.Region.kanto && (route.subRegion == GameConstants.KantoSubRegions.Sevii123 || route.subRegion == GameConstants.KantoSubRegions.Sevii4567)) {
                    category = GameConstants.ExtraAchievementCategories.sevii;
                }
                if (region == GameConstants.Region.hoenn && route.subRegion == GameConstants.HoennSubRegions.Orre) {
                    category = GameConstants.ExtraAchievementCategories.orre;
                }
                if (region == GameConstants.Region.alola && route.subRegion == GameConstants.AlolaSubRegions.MagikarpJump) {
                    category = GameConstants.ExtraAchievementCategories.magikarpJump;
                }
                const routeName = Routes.getName(route.number, region, true);
                AchievementHandler.addAchievement(`${route.routeName} Traveler`, `Defeat 100 Pokémon on ${routeName}.`, new RouteKillRequirement(GameConstants.ACHIEVEMENT_DEFEAT_ROUTE_VALUES[0], region, route.number), 1, category);
                AchievementHandler.addAchievement(`${route.routeName} Explorer`, `Defeat 1,000 Pokémon on ${routeName}.`, new RouteKillRequirement(GameConstants.ACHIEVEMENT_DEFEAT_ROUTE_VALUES[1], region, route.number), 2, category);
                AchievementHandler.addAchievement(`${route.routeName} Conqueror`, `Defeat 10,000 Pokémon on ${routeName}.`, new RouteKillRequirement(GameConstants.ACHIEVEMENT_DEFEAT_ROUTE_VALUES[2], region, route.number), 3, category);
            });
            // Gyms
            if (GameConstants.RegionGyms[region]) {
                addGymAchievements(GameConstants.RegionGyms[region], region);
            }
            // Dungeons
            (_a = GameConstants.RegionDungeons[region]) === null || _a === void 0 ? void 0 : _a.forEach(dungeon => {
                if (TownList[dungeon].requirements.some((req) => req instanceof DevelopmentRequirement)) {
                    return;
                }
                let category = region;
                // Split bigger subregions into their own achievement pool
                if (region == GameConstants.Region.kanto && (TownList[dungeon].subRegion == GameConstants.KantoSubRegions.Sevii123 || TownList[dungeon].subRegion == GameConstants.KantoSubRegions.Sevii4567)) {
                    category = GameConstants.ExtraAchievementCategories.sevii;
                }
                if (region == GameConstants.Region.hoenn && TownList[dungeon].subRegion == GameConstants.HoennSubRegions.Orre) {
                    category = GameConstants.ExtraAchievementCategories.orre;
                }
                if (region == GameConstants.Region.alola && TownList[dungeon].subRegion == GameConstants.AlolaSubRegions.MagikarpJump) {
                    category = GameConstants.ExtraAchievementCategories.magikarpJump;
                }
                AchievementHandler.addAchievement(`${dungeon} Explorer`, `Clear ${dungeon} 10 times.`, new ClearDungeonRequirement(GameConstants.ACHIEVEMENT_DEFEAT_DUNGEON_VALUES[0], GameConstants.getDungeonIndex(dungeon)), 0.8, category);
                AchievementHandler.addAchievement(`${dungeon} Expert`, `Clear ${dungeon} 100 times.`, new ClearDungeonRequirement(GameConstants.ACHIEVEMENT_DEFEAT_DUNGEON_VALUES[1], GameConstants.getDungeonIndex(dungeon)), 1.2, category);
                AchievementHandler.addAchievement(`${dungeon} Hermit`, `Clear ${dungeon} 250 times.`, new ClearDungeonRequirement(GameConstants.ACHIEVEMENT_DEFEAT_DUNGEON_VALUES[2], GameConstants.getDungeonIndex(dungeon)), 1.6, category);
                AchievementHandler.addAchievement(`${dungeon} Dweller`, `Clear ${dungeon} 500 times.`, new ClearDungeonRequirement(GameConstants.ACHIEVEMENT_DEFEAT_DUNGEON_VALUES[3], GameConstants.getDungeonIndex(dungeon)), 2.4, category);
            });
            // Unique Pokémon
            const amt10 = Math.floor(PokemonHelper.calcUniquePokemonsByRegion(region) * .1);
            const amt50 = Math.floor(PokemonHelper.calcUniquePokemonsByRegion(region) * .5);
            const amtAll = Math.floor(PokemonHelper.calcUniquePokemonsByRegion(region));
            // Caught unique pokemon
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Trainer`, `Catch ${amt10} unique Pokémon native to the ${GameConstants.camelCaseToString(GameConstants.Region[region])} region.`, new CaughtUniquePokemonsByRegionRequirement(region, amt10), 2, region);
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Ace`, `Catch ${amt50} unique Pokémon native to the ${GameConstants.camelCaseToString(GameConstants.Region[region])} region.`, new CaughtUniquePokemonsByRegionRequirement(region, amt50), 4, region);
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Master`, `Complete the ${GameConstants.camelCaseToString(GameConstants.Region[region])} Pokédex!`, new CaughtUniquePokemonsByRegionRequirement(region, amtAll), 6, region);
            // Caught unique shiny pokemon
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Shiny Trainer`, `Catch ${amt10} unique Shiny Pokémon native to the ${GameConstants.camelCaseToString(GameConstants.Region[region])} region.`, new CaughtUniqueShinyPokemonsByRegionRequirement(region, amt10), 3, region);
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Shiny Ace`, `Catch ${amt50} unique Shiny Pokémon native to the ${GameConstants.camelCaseToString(GameConstants.Region[region])} region.`, new CaughtUniqueShinyPokemonsByRegionRequirement(region, amt50), 6, region);
            AchievementHandler.addAchievement(`${GameConstants.camelCaseToString(GameConstants.Region[region])} Shiny Master`, `Complete the ${GameConstants.camelCaseToString(GameConstants.Region[region])} Shiny Pokédex!`, new CaughtUniqueShinyPokemonsByRegionRequirement(region, amtAll), 9, region);
        });
        // Unown pokédex for Johto
        const unownID = pokemonMap['Unown (A)'].id;
        const unownDexFilter = (p) => Math.floor(p.id) === unownID;
        const unownAmount = pokemonList.reduce((count, p) => count + +(Math.floor(p.id) === unownID), 0);
        AchievementHandler.addAchievement('Alphabet Soup for Ruin Maniac', 'Catch all unique Unown forms.', new CaughtUniquePokemonByFilterRequirement(unownDexFilter, 'Catch all unique Unown forms.', unownAmount), 2, GameConstants.Region.johto);
        AchievementHandler.addAchievement('"I am the Alpha and the Omega"', 'Catch all unique Shiny Unown forms.', new CaughtUniquePokemonByFilterRequirement(unownDexFilter, 'Catch all unique Unown forms.', unownAmount, true), 3, GameConstants.Region.johto);
        // Battle Café pokédex for Galar, highly optional as this is End Game farming, so no high bonus
        const alcremieDexFilter = (p) => p.name === 'Milcery (Cheesy)' || p.name.startsWith('Alcremie');
        const alcremieAmount = pokemonList.reduce((count, p) => count + +(p.name === 'Milcery (Cheesy)' || p.name.startsWith('Alcremie')), 0);
        AchievementHandler.addAchievement('Moomoo Milk Served Right', 'Catch 32 unique Battle Café flavors.', new CaughtUniquePokemonByFilterRequirement(alcremieDexFilter, 'Catch 32 unique Alcremie flavors.', 32), 0.5, GameConstants.Region.galar);
        AchievementHandler.addAchievement('Gotta Taste \'Em All!', 'Catch all unique Battle Café flavors.', new CaughtUniquePokemonByFilterRequirement(alcremieDexFilter, 'Catch all unique Alcremie flavors.', alcremieAmount), 1, GameConstants.Region.galar);
        AchievementHandler.addAchievement('Yoshida\'s Coffees Enjoyer', 'Catch 32 unique Shiny Battle Café flavors.', new CaughtUniquePokemonByFilterRequirement(alcremieDexFilter, 'Catch 32 unique Shiny Alcremie flavors.', 32, true), 0.75, GameConstants.Region.galar);
        AchievementHandler.addAchievement('All These Flavors And You Choose To Be Cheesy', 'Catch all unique Shiny Battle Café flavors.', new CaughtUniquePokemonByFilterRequirement(alcremieDexFilter, 'Catch all unique Shiny Alcremie flavors.', alcremieAmount, true), 1.5, GameConstants.Region.galar);
        // Gigantamax pokédex for Galar
        const gigaDexFilter = (p) => p.name.startsWith('Gigantamax') || p.name.startsWith('Eternamax');
        const gigaAmount = pokemonList.reduce((count, p) => count + +(p.name.startsWith('Gigantamax') || p.name.startsWith('Eternamax')), 0);
        AchievementHandler.addAchievement('Way Too Many Bosses', 'Catch all Gigantamax Pokémon.', new CaughtUniquePokemonByFilterRequirement(gigaDexFilter, 'Catch all Gigantamax Pokémon.', gigaAmount), 2, GameConstants.Region.galar);
        AchievementHandler.addAchievement('Really Big Sparkle', 'Catch all Shiny Gigantamax Pokémon.', new CaughtUniquePokemonByFilterRequirement(gigaDexFilter, 'Catch all Shiny Gigantamax Pokémon.', gigaAmount, true), 3, GameConstants.Region.galar);
        /*
         * MINIREGIONS
         */
        addGymAchievements(GameConstants.RegionGyms[GameConstants.Region.final], GameConstants.ExtraAchievementCategories.sevii, 'Sevii Islands');
        AchievementHandler.addAchievement('Sevii Trainer', 'Catch 15 unique Pokémon native to the Sevii Islands.', new SeviiCaughtRequirement(15, false), 3, GameConstants.ExtraAchievementCategories.sevii);
        AchievementHandler.addAchievement('Sevii Master', 'Catch 34 unique Pokémon native to the Sevii Islands.', new SeviiCaughtRequirement(34, false), 6, GameConstants.ExtraAchievementCategories.sevii);
        AchievementHandler.addAchievement('Sevii Shiny Trainer', 'Catch 15 unique Shiny Pokémon native to the Sevii Islands.', new SeviiCaughtRequirement(15, true), 5, GameConstants.ExtraAchievementCategories.sevii);
        AchievementHandler.addAchievement('Sevii Shiny Master', 'Catch 34 unique Shiny Pokémon native to the Sevii Islands.', new SeviiCaughtRequirement(34, true), 9, GameConstants.ExtraAchievementCategories.sevii);
        addGymAchievements(GameConstants.RegionGyms[GameConstants.Region.final + 1], GameConstants.ExtraAchievementCategories.magikarpJump, 'Magikarp Jump');
        // Magikarp pokédex, highly optional as some forms are End Game farming, so no high bonus
        const magikarpID = pokemonMap.Magikarp.id;
        const karpDexFilter = (p) => Math.floor(p.id) === magikarpID;
        const karpAmount = pokemonList.reduce((count, p) => count + +(Math.floor(p.id) === magikarpID), 0);
        AchievementHandler.addAchievement('Do You Even Splash?', 'Catch all unique Magikarp forms.', new CaughtUniquePokemonByFilterRequirement(karpDexFilter, 'Catch all unique Magikarp forms.', karpAmount), 1, GameConstants.ExtraAchievementCategories.magikarpJump);
        AchievementHandler.addAchievement('Twenty Thousands Karps Under the Seas', 'Catch all unique Shiny Magikarp forms.', new CaughtUniquePokemonByFilterRequirement(karpDexFilter, 'Catch all unique Shiny Magikarp forms.', karpAmount, true), 1.5, GameConstants.ExtraAchievementCategories.magikarpJump);
        addGymAchievements(GameConstants.RegionGyms[GameConstants.Region.final + 2], GameConstants.ExtraAchievementCategories.orre, 'Orre');
        // Secret achievements
        AchievementHandler.addSecretAchievement('The Kids Yearn for the Mines', 'Fully mine an Underground layer.', new UndergroundLayersFullyMinedRequirement(1), 'Thorough miner');
        AchievementHandler.addSecretAchievement('Take Out The Trash', 'Capture a total of 1,000 wild Trubbish and Garbodor.', new CaptureSpecificPokemonRequirement(['Trubbish', 'Garbodor'], 1000, false), 'Clean up the streets');
        AchievementHandler.addSecretAchievement('Rats!', 'Defeated Youngster Joey.', new TemporaryBattleRequirement('Youngster Joey'), 'Take on the ultimate challenge');
        AchievementHandler.addSecretAchievement('Karpal Tunnel', 'Reach 1,000,000 attack with Magikarp.', new PokemonAttackRequirement('Magikarp', 1e6), 'The Strongest Fish');
        AchievementHandler.addSecretAchievement('You Can Stop Now', 'Acquire 1,000 Wishing Pieces.', new ItemOwnedRequirement('Wishing_Piece', 1000), 'You wish');
        AchievementHandler.addSecretAchievement('You are my best friend', 'Have a total of 100 Light Balls.', new ItemOwnedRequirement('Light_Ball', 100), 'Red is my favorite color');
        AchievementHandler.addSecretAchievement('Smell Ya Later!', 'Defeat Champion Blue 1,000,000 times.', new ClearGymRequirement(1e6, GameConstants.getGymIndex('Champion Blue')), 'Blue is my favorite color');
        AchievementHandler.addSecretAchievement('Aren\'t Dungeons Fun?', 'Clear any dungeon 10,000 times.', new ClearAnyDungeonRequirement(10000), 'Shrink me baby one more time');
        AchievementHandler.addSecretAchievement('Super Spreader', 'Reach a 2x EV bonus with any Pokémon.', new EVBonusRequirement(2), 'Some Effort required');
        AchievementHandler.addSecretAchievement('Error: Pokémon storage full', 'Reach a 3x EV bonus with any Pokémon.', new EVBonusRequirement(3), 'Too much Effort');
        AchievementHandler.addSecretAchievement('Ready For The Next Region', 'Have 1,000,000,000 Attack.', new AttackRequirement(1e9), 'Breed more');
        AchievementHandler.addSecretAchievement('Touch Grass', 'Have the game open for an entire year.', new TimePlayedRequirement(GameConstants.DAY * 365 / 1000), 'You\'ll get it eventually');
        AchievementHandler.addSecretAchievement('Park Ranger', 'Reach the max Safari level.', new SafariLevelRequirement(40), 'The most eggciting grind');
        AchievementHandler.addSecretAchievement('How did we get here?', 'Have 9 Special Events active simultaneously.', new TotalSpecialEventsActiveRequirement(9), 'Fully booked', true);
        AchievementHandler.addSecretAchievement('Ready for every encounter', 'Have at least 20 Pokéball Filters at one time.', new PokeballFilterCountRequirement(20), 'Ready for every encounter.');
        AchievementHandler.addSecretAchievement('I can do this all day', 'Complete stage 10,000 in the Battle Frontier.', new BattleFrontierHighestStageRequirement(10000), 'A million paycheck' // stage 10k awards 1m BP
        );
        AchievementHandler.addSecretAchievement('All I see is rock', 'Get at least 1 Underground Helper to level 100.', new UndergroundHelperRequirement(1, 100), 'You are my favorite for sure');
        AchievementHandler.addSecretAchievement('Have you tried lemongrass?', 'Defeat 1,000,000 pure Bug-type Pokémon.', new DefeatedPokemonTypeRequirement(PokemonType.Bug, 1e6, true), 'Pest control');
        AchievementHandler.addSecretAchievement('There is no bottle', 'Catch 111 Hoopa.', new CaptureSpecificPokemonRequirement(['Hoopa'], 111, false), 'You said a ton, right?' // Reference to the Catch 100 Hoopa quest step, 111 Hoopa weigh 999kg total, ~ 1 ton
        );
        AchievementHandler.addSecretAchievement('One-person band', 'Have all 6 Flutes active for 60 minutes.', new AllFlutesTimeActiveRequirement(60), '6-4-60', true);
        AchievementHandler.addSecretAchievement('A cat named Cat', 'Give a Pokémon a very unoriginal nickname.', new DummyRequirement(), 'Breakfast at Tiffany\'s', // This movie has a cat named "Cat"
        true);
        AchievementHandler.addSecretAchievement('Picky Quester', 'Refresh the Quest List without completing any quests.', new DummyRequirement(), 'I don\'t want to do any of these', true);
        AchievementHandler.addSecretAchievement('Lucky Loot', 'Obtain Mythic-tier loot from a debuffed dungeon. Loot that ignores debuff does not count.', new DummyRequirement(), 'Debuffed? I didn\'t notice.', true);
        AchievementHandler.addSecretAchievement('Wandering Wallets', 'Earn 1,000,000,000 Dungeon Tokens from catching Farm Wanderers.', new StatisticRequirement('farmWandererDungeonTokensObtained', 1e9), 'Money does not grow on trees');
        AchievementHandler.addSecretAchievement('Ultimate Baker', 'Have all Battle Café flavors resistant to Pokérus.', new PokerusStatusByFilterRequirement(alcremieDexFilter, alcremieAmount, GameConstants.Pokerus.Resistant), 'The cake is not a lie');
        AchievementHandler.addSecretAchievement('One column to rule them all', 'Have all movable UI modules in one column.', new CustomRequirement(ko.pureComputed(() => {
            const settings = [
                'modules.left-column', 'modules.left-column-2', 'modules.middle-top-sort-column',
                'modules.middle-bottom-sort-column', 'modules.right-column', 'modules.right-column-2',
            ];
            const usedColumns = settings.filter((setting) => {
                var _a, _b;
                const modules = (_b = (_a = Settings.getSetting(setting)) === null || _a === void 0 ? void 0 : _a.observableValue()) === null || _b === void 0 ? void 0 : _b.split('|').filter((module) => module === null || module === void 0 ? void 0 : module.trim());
                if (!(modules === null || modules === void 0 ? void 0 : modules.length)) {
                    return false;
                }
                return modules.filter((module) => $(`#${module}`).is(':visible')).length > 0;
            });
            return usedColumns.length === 1;
        }), true, ''), 'There can be only one', true);
        AchievementHandler.addSecretAchievement('Window Shopping', 'Encounter 1,000 shiny Trainer Pokémon.', new StatisticRequirement('totalShinyTrainerPokemonSeen', 1000), 'Glowing with envy');
        AchievementHandler.addSecretAchievement('A Glimmer of Luck', 'Catch a shiny Pokémon in a Safari Zone with your last ball.', new DummyRequirement(), 'One ball left, one chance to make it shine');
        // Special Furfrou forms resisted
        // TODO Uncomment when Furfrou (Heart) is obtainable
        /*const furfrouId = pokemonMap.Furfrou.id;
        const furfrouDexFilter = (p: PartyPokemon) => Math.floor(p.id) === furfrouId && p.id > furfrouId;
        const furfrouAmount = pokemonList.reduce((count, p) => count + +(Math.floor(p.id) === furfrouId && p.id > furfrouId), 0);
        AchievementHandler.addSecretAchievement(
            'Dog Breeder',
            'Have all special Furfrou forms resistant to Pokérus.',
            new PokerusStatusByFilterRequirement(furfrouDexFilter, furfrouAmount, GameConstants.Pokerus.Resistant),
            '' // need hint
        );*/
        // load filters
        this.load();
        // subscribe to filters so that when the player changes a filter it automatically refilters the list
        Object.keys(this.filter).forEach(e => this.filter[e].subscribe(() => this.filterAchievementList()));
        const multiplierSource = 'Achievements';
        multiplier.addBonus('exp', () => 1 + this.achievementBonus(), multiplierSource);
        multiplier.addBonus('money', () => 1 + this.achievementBonus(), multiplierSource);
        multiplier.addBonus('dungeonToken', () => 1 + this.achievementBonus(), multiplierSource);
        multiplier.addBonus('clickAttack', () => 1 + this.achievementBonus(), multiplierSource);
    }
    static unlockAchievement(achievementName) {
        const achievement = AchievementHandler.findByName(achievementName);
        if (!achievement) {
            console.warn(`Achievement not found: ${achievementName}`);
            return;
        }
        if (!achievement.unlocked()) {
            achievement.unlocked(true);
            achievement.notifyUnlocked();
            AchievementHandler.updateAchievementBonus();
        }
    }
    static load() {
        AchievementHandler.calculateMaxBonus();
        AchievementHandler.navigateIndex(Settings.getSetting('achievementsPage').value);
        AchievementHandler.filter.status(Settings.getSetting('achievementsStatus').value);
        AchievementHandler.filter.type(Settings.getSetting('achievementsType').value);
        AchievementHandler.filter.category(Settings.getSetting('achievementsCategory').value);
        // Cycle the pages to make sure they are upto date
        AchievementHandler.navigateRight();
        setTimeout(() => {
            AchievementHandler.navigateLeft();
        }, 1);
    }
}
AchievementHandler.achievementList = [];
AchievementHandler.navigateIndex = ko.observable(0);
AchievementHandler.achievementListFiltered = ko.observableArray([]);
AchievementHandler.numberOfTabs = ko.observable(0);
AchievementHandler._cachedAchievementBonus = ko.observable(0).extend({ numeric: 4 });
AchievementHandler.filter = {
    status: ko.observable(-2).extend({ numeric: 0 }),
    type: ko.observable(-2).extend({ numeric: 0 }),
    category: ko.observable('all'),
};
AchievementHandler.achievementSortedList = ko.pureComputed(() => {
    const achievementSortValue = Settings.getSetting('achievementSort').observableValue();
    if (DisplayObservables.modalState.achievementsModal !== 'show') {
        return AchievementHandler.cachedSortedList || AchievementHandler.achievementListFiltered();
    }
    // Checks if the user has selected the default sorting option
    if (achievementSortValue === AchievementSortOptions.default) {
        // ... in this case, returns the filtered list without sorting.
        return AchievementHandler.achievementListFiltered();
    }
    // ... otherwise, returns a copy of the filtered list sorted by provided property.
    const achievementSortedList = [...AchievementHandler.achievementListFiltered()];
    achievementSortedList.sort(AchievementHandler.compareBy(achievementSortValue, Settings.getSetting('achievementSortDirection').observableValue()));
    AchievementHandler.cachedSortedList = achievementSortedList;
    return achievementSortedList;
}).extend({ rateLimit: 100 });
AchievementHandler;
class AchievementTracker {
    constructor() {
        this.name = 'AchievementTracker';
        this.saveKey = 'achievementTracker';
        this.defaults = {
            'trackedAchievement': null,
        };
        this.trackedAchievement = ko.observable(this.defaults.trackedAchievement);
    }
    initialize() {
    }
    canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItemType.Holo_caster);
    }
    update(delta) {
    }
    nextAchievement() {
        if (!this.hasTrackedAchievement()) {
            return;
        }
        const tracked = this.trackedAchievement();
        let next = tracked;
        let max = Infinity;
        // Grabs the next tier achievement with the same custom signature.
        AchievementHandler.achievementList.forEach((current) => {
            if (`${tracked.property}` === `${current.property}` && tracked.property.requiredValue < current.property.requiredValue && current.property.requiredValue < max) {
                next = current;
                max = current.property.requiredValue;
            }
        });
        if (tracked !== next) {
            this.trackAchievement(next);
        }
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        if (!!json.trackedAchievementName) {
            const achievement = AchievementHandler.findByName(json.trackedAchievementName);
            if (!!achievement) {
                this.trackedAchievement(achievement);
            }
        }
    }
    toJSON() {
        return {
            trackedAchievementName: this.hasTrackedAchievement() ? this.trackedAchievement().name : null,
        };
    }
    trackAchievement(achievement) {
        this.trackedAchievement(achievement);
    }
    hasTrackedAchievement() {
        return this.trackedAchievement() !== null;
    }
}
///<reference path="../../declarations/requirements/AchievementRequirement.d.ts"/>
class CaughtUniquePokemonByFilterRequirement extends AchievementRequirement {
    constructor(filter, hintText, amount, shiny = false, option = GameConstants.AchievementOption.more) {
        super(amount, option, GameConstants.AchievementType[shiny ? 'Shiny Pokemon' : 'Caught Pokemon']);
        this.filter = filter;
        this.hintText = hintText;
        this.shiny = shiny;
    }
    getProgress() {
        return Math.min(App.game.party.caughtPokemon.filter(p => this.filter(p) && (p.shiny || !this.shiny)).length, this.requiredValue);
    }
    hint() {
        return this.hintText;
    }
    toString() {
        return `${super.toString()} ${this.filter} ${this.shiny}`;
    }
}
///<reference path="../../declarations/requirements/AchievementRequirement.d.ts"/>
class CaughtUniquePokemonsByRegionRequirement extends AchievementRequirement {
    constructor(region, amount = 0, option = GameConstants.AchievementOption.more) {
        super(amount || PokemonHelper.calcUniquePokemonsByRegion(region), option, GameConstants.AchievementType['Caught Pokemon']);
        this.region = region;
    }
    getProgress() {
        return Math.min(new Set(App.game.party.caughtPokemon.filter(p => p.id > 0 && PokemonHelper.calcNativeRegion(p.name) === this.region).map(p => Math.floor(p.id))).size, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} unique Pokémon need to be caught.`;
    }
    toString() {
        return `${super.toString()} ${this.region}`;
    }
}
///<reference path="../../declarations/requirements/AchievementRequirement.d.ts"/>
class CaughtUniqueShinyPokemonsByRegionRequirement extends AchievementRequirement {
    constructor(region, amount = 0, option = GameConstants.AchievementOption.more) {
        super(amount || PokemonHelper.calcUniquePokemonsByRegion(region), option, GameConstants.AchievementType['Shiny Pokemon']);
        this.region = region;
    }
    getProgress() {
        return Math.min(new Set(App.game.party.caughtPokemon.filter(p => p.id > 0 && p.shiny && PokemonHelper.calcNativeRegion(p.name) === this.region).map(p => Math.floor(p.id))).size, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} unique Pokémon need to be caught.`;
    }
    toString() {
        return `${super.toString()} ${this.region}`;
    }
}
///<reference path="../../declarations/requirements/AchievementRequirement.d.ts"/>
class PokerusStatusByFilterRequirement extends AchievementRequirement {
    constructor(filter, amount, statusRequired) {
        super(amount, GameConstants.AchievementOption.more, GameConstants.AchievementType.Pokerus);
        this.filter = filter;
        this.statusRequired = statusRequired;
    }
    getProgress() {
        return Math.min(App.game.party.caughtPokemon.filter(p => this.filter(p) && p.pokerus >= this.statusRequired).length, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Pokémon needs to be infected.`;
    }
}
class SafariLevelRequirement extends AchievementRequirement {
    constructor(levelRequired) {
        super(levelRequired, GameConstants.AchievementOption.more, GameConstants.AchievementType.Safari);
    }
    getProgress() {
        return Math.min(Safari.safariLevel(), this.requiredValue);
    }
    hint() {
        return `Needs Safari Level ${this.requiredValue}.`;
    }
}
///<reference path="../../declarations/requirements/Requirement.d.ts"/>
class StoneUnlockedRequirement extends Requirement {
    constructor(stoneType, option = GameConstants.AchievementOption.more) {
        var _a;
        const stone = ItemList[GameConstants.StoneType[stoneType]];
        const requiredRegion = (_a = stone === null || stone === void 0 ? void 0 : stone.unlockedRegion) !== null && _a !== void 0 ? _a : GameConstants.Region.none;
        super(requiredRegion, option);
        this.stone = stone;
    }
    getProgress() {
        return Math.min(player.highestRegion(), this.requiredValue);
    }
    isCompleted() {
        if (!this.stone) {
            return true;
        }
        return this.stone.unlockedRegion <= player.highestRegion();
    }
    hint() {
        if (this.requiredValue > GameConstants.MAX_AVAILABLE_REGION) {
            return 'This item is from a region that hasn\'t been released yet.';
        }
        return `You need to reach the ${GameConstants.camelCaseToString(GameConstants.Region[this.requiredValue])} region.`;
    }
}
/// <reference path="../../declarations/enums/Badges.d.ts"/>
class BadgeCaseController {
    static getDisplayableBadges() {
        const highestRegion = player.highestRegion();
        const result = {};
        GameConstants.RegionGyms.forEach((region, i) => {
            // Optional leagues
            if (i >= GameConstants.Region.final) {
                if (!region.some(gym => App.game.badgeCase.hasBadge(GymList[gym].badgeReward))) {
                    return;
                }
                const badges = this.regionToBadges(region);
                if (badges.length) {
                    result[this.optionalLeagueNames[i - GameConstants.Region.final]] = badges;
                }
                return;
            }
            // Normal leagues
            if (i > highestRegion) {
                return;
            }
            result[GameConstants.Region[i].charAt(0).toUpperCase() + GameConstants.Region[i].slice(1)] = this.regionToBadges(region);
        });
        return result;
    }
    static regionToBadges(region) {
        return region
            .map(gym => BadgeEnums[GymList[gym].badgeReward])
            .filter(b => !b.startsWith('Elite') && b != 'None');
    }
}
BadgeCaseController.optionalLeagueNames = ['Orange League', 'Magikarp Jump', 'Orre'];
class BattleFrontier {
    constructor() {
        this.name = 'BattleFrontier';
        this.saveKey = 'battleFrontier';
        this.milestones = BattleFrontierMilestones;
        this.defaults = {};
    }
    initialize() { }
    update(delta) { }
    canAccess() {
        return true;
    }
    enter() {
        BattleFrontierBattle.enemyPokemon(null);
        App.game.gameState = GameConstants.GameState.battleFrontier;
    }
    start(useCheckpoint) {
        BattleFrontierRunner.start(useCheckpoint);
    }
    leave() {
        // Put the user back in the town
        App.game.gameState = GameConstants.GameState.town;
    }
    toJSON() {
        return {
            milestones: this.milestones.milestoneRewards.filter(m => m.obtained()).map(m => [m.stage, m.description]),
            checkpoint: BattleFrontierRunner.checkpoint(),
        };
    }
    fromJSON(json) {
        var _a;
        if (json == null) {
            return;
        }
        (_a = json.milestones) === null || _a === void 0 ? void 0 : _a.forEach(([stage, description]) => {
            var _a;
            (_a = this.milestones.milestoneRewards.find(m => m.stage == stage && m.description == description)) === null || _a === void 0 ? void 0 : _a.obtained(true);
        });
        BattleFrontierRunner.checkpoint(json.checkpoint);
    }
}
class BattleFrontierBattle extends Battle {
    // Override pokemon attack method so we can ignore the region multiplier
    static pokemonAttack() {
        var _a;
        // attack twice as fast if we have defeated this stage
        this.alternateAttack = !this.alternateAttack;
        if (this.alternateAttack && BattleFrontierRunner.stage() > App.game.statistics.battleFrontierHighestStageCompleted()) {
            return;
        }
        // Limit pokemon attack speed, Only allow 1 attack per 450ms
        const now = Date.now();
        if (this.lastPokemonAttack > now - 450) {
            return;
        }
        this.lastPokemonAttack = now;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        this.enemyPokemon().damage(App.game.party.calculatePokemonAttack(this.enemyPokemon().type1, this.enemyPokemon().type2, true, GameConstants.Region.none, false, false, WeatherType.Clear));
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Award the player with exp, gems and go to the next pokemon
     */
    static defeatPokemon() {
        this.enemyPokemon().defeat(true);
        // This needs to stay as none so the stage number isn't adjusted
        App.game.breeding.progressEggsBattle(BattleFrontierRunner.stage(), GameConstants.Region.none);
        // Next pokemon
        GameHelper.incrementObservable(this.pokemonIndex);
        if (this.pokemonIndex() >= 3) {
            // Move on to next stage, reset timer
            BattleFrontierRunner.nextStage();
            this.pokemonIndex(0);
        }
        // If player still challenging Battle Frontier, keep generating Pokemon
        if (BattleFrontierRunner.started()) {
            // Create the next Pokemon to fight
            this.generateNewEnemy();
        }
        else {
            this.enemyPokemon(null);
        }
    }
    static generateNewEnemy() {
        const enemy = pokemonMap.randomRegion(player.highestRegion());
        // This needs to stay as none so the stage number isn't adjusted
        const health = PokemonFactory.routeHealth(BattleFrontierRunner.stage() + 10, GameConstants.Region.none);
        const level = Math.min(100, BattleFrontierRunner.stage());
        // Don't award money per pokemon defeated, award money at the end
        const money = 0;
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        // Give 1 extra gem per pokemon defeated after every 80 stages
        const gems = Math.ceil(BattleFrontierRunner.stage() / 80);
        const gender = PokemonFactory.generateGender(enemy.gender.femaleRatio, enemy.gender.type);
        if (shiny) {
            GameHelper.incrementObservable(App.game.statistics.totalShinyTrainerPokemonSeen);
        }
        const enemyPokemon = new BattlePokemon(enemy.name, enemy.id, enemy.type[0], enemy.type[1], health, level, 0, enemy.exp, new Amount(money, GameConstants.Currency.money), shiny, gems, gender, GameConstants.ShadowStatus.None, EncounterType.trainer);
        this.enemyPokemon(enemyPokemon);
    }
}
BattleFrontierBattle.alternateAttack = false;
BattleFrontierBattle.pokemonIndex = ko.observable(0);
BattleFrontierBattle.totalPokemons = ko.observable(3);
// Looks like we don't need this, unless we want to put a random trainer name or similar
BattleFrontierBattle.trainer = ko.observable(0);
BattleFrontierBattle.counter = 0;
class BattleFrontierMilestone {
    constructor(stage, rewardFunction, requirement, _image, _description) {
        this.stage = stage;
        this.rewardFunction = rewardFunction;
        this.requirement = requirement;
        this._image = _image;
        this._description = _description;
        this.obtained = ko.observable(false);
    }
    isUnlocked() {
        return this.requirement ? this.requirement.isCompleted() : true;
    }
    gain() {
        if (!this.obtained()) {
            this.rewardFunction();
            this.obtained(true);
        }
    }
    get image() {
        return this._image;
    }
    get description() {
        return this._description;
    }
    get displayName() {
        return this.description;
    }
}
class BattleFrontierMilestoneItem extends BattleFrontierMilestone {
    constructor(stage, itemName, amount, requirement) {
        super(stage, () => {
            if (ItemList[itemName]) {
                ItemList[itemName].gain(amount);
            }
        });
        this.requirement = requirement;
        this.itemName = itemName;
        this.amount = amount;
    }
    get image() {
        return ItemList[this.itemName].image;
    }
    get description() {
        return `${this.amount.toLocaleString('en-US')} x ${ItemList[this.itemName].displayName}`;
    }
}
class BattleFrontierMilestonePokemon extends BattleFrontierMilestone {
    constructor(stage, pokemonName, requirement, image = `assets/images/items/pokemonItem/${pokemonName}.png`) {
        super(stage, () => {
            App.game.party.gainPokemonById(pokemonMap[pokemonName].id, PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BATTLEFRONTIER));
        }, requirement, image, pokemonName);
        this.pokemonName = pokemonName;
    }
    get displayName() {
        return PokemonHelper.displayName(this.pokemonName);
    }
}
///<reference path="BattleFrontierMilestone.ts"/>
///<reference path="BattleFrontierMilestoneItem.ts"/>
class BattleFrontierMilestones {
    static addMilestone(milestone) {
        this.milestoneRewards.push(milestone);
        // Sort the milestones by lowest to highest stage incase they are added out of order
        this.milestoneRewards.sort((a, b) => a.stage - b.stage);
    }
    static nextMileStone() {
        // Get next reward that is unlocked, not obtained, and earned past the latest stage beaten in the active run.
        return this.milestoneRewards.find(r => r.isUnlocked() && !r.obtained() && (r.stage > (BattleFrontierRunner.checkpoint() - 1)));
    }
    static availableMilestones() {
        return BattleFrontierMilestones.milestoneRewards.filter(r => r.isUnlocked() && !r.obtained() && r.stage > (BattleFrontierRunner.checkpoint() - 1));
    }
    static nextMileStoneStage() {
        // Return the stage number the next reward is unlocked at
        const reward = this.nextMileStone();
        if (reward) {
            return reward.stage;
        }
        else {
            return Infinity;
        }
    }
    static nextMileStoneRewardDescription() {
        // Return the description of the next reward
        const reward = this.nextMileStone();
        if (reward) {
            return reward.description;
        }
        else {
            return 'Nothing';
        }
    }
    static gainReward(defeatedStage) {
        const reward = this.nextMileStone();
        if (reward && reward.stage == defeatedStage) {
            Notifier.notify({
                title: 'Battle Frontier',
                message: `You've successfully defeated stage ${defeatedStage.toLocaleString('en-US')} and earned:\n<span><img src="${reward.image}" height="24px"/> ${reward.description}</span>!`,
                type: NotificationConstants.NotificationOption.info,
                setting: NotificationConstants.NotificationSetting.General.battle_frontier,
                timeout: 1e4,
            });
            App.game.logbook.newLog(LogBookTypes.FRONTIER, createLogContent.gainBattleFrontierReward({
                reward: reward.description,
                stage: defeatedStage.toLocaleString('en-US'),
            }));
            reward.gain();
        }
    }
}
BattleFrontierMilestones.milestoneRewards = [];
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(5, 'Pokeball', 25));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(10, 'Pokeball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(20, 'Greatball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(30, 'Ultraball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(35, 'xClick', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(40, 'xAttack', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(50, 'SmallRestore', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(75, 'Rare_Candy', 5));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(100, 'Deoxys', new QuestLineStepCompletedRequirement('Mystery of Deoxys', 2)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(110, 'Water_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(120, 'Leaf_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(130, 'Thunder_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(140, 'Fire_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(150, 'MediumRestore', 200));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(151, 'Deoxys (Attack)', new ObtainedPokemonRequirement('Deoxys')));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(160, 'Lucky_egg', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(170, 'Lucky_incense', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(180, 'Dowsing_machine', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(190, 'Mystery_egg', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(200, 'LargeRestore', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(210, 'Water_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(220, 'Leaf_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(230, 'Thunder_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(240, 'Moon_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(250, 'Ultraball', 6400));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(251, 'Deoxys (Defense)', new ObtainedPokemonRequirement('Deoxys')));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(275, 'Rare_Candy', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(300, 'Linking_cord', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(310, 'Dragon_scale', 20));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(320, 'Sun_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(330, 'Kings_rock', 20));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(340, 'Metal_coat', 20));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(350, 'Upgrade', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(375, 'Rare_Candy', 15));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(386, 'Deoxys (Speed)', new ObtainedPokemonRequirement('Deoxys')));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(400, 'Soothe_bell', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(410, 'Deepsea_tooth', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(420, 'Shiny_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(430, 'Deepsea_scale', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(440, 'Dusk_stone', 40, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(450, 'Prism_scale', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(460, 'Dawn_stone', 40, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(470, 'Razor_claw', 10, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(480, 'Razor_fang', 10, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(490, 'Dubious_disc', 10, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(500, 'Ultraball', 10000));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(525, 'Magmarizer', 15, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(550, 'Electirizer', 15, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(575, 'Protector', 15, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(600, 'Reaper_cloth', 15, new MaxRegionRequirement(GameConstants.Region.sinnoh)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(660, 'Sachet', 15, new MaxRegionRequirement(GameConstants.Region.kalos)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(666, 'Vivillon (Poké Ball)', new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 34)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(670, 'Whipped_dream', 15, new MaxRegionRequirement(GameConstants.Region.kalos)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(690, 'Lopunnite', 1, new MultiRequirement([new MaxRegionRequirement(GameConstants.Region.kalos), new ObtainedPokemonRequirement('Lopunny')])));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(700, 'Ice_stone', 40, new MaxRegionRequirement(GameConstants.Region.alola)));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(750, 'Rare_Candy', 20));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(1000, 'Masterball', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(1500, 'Rare_Candy', 25));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestonePokemon(2000, 'Mismagius (Illusion)', new ObtainedPokemonRequirement('Mismagius')));
/// <reference path="../../declarations/GameHelper.d.ts" />
class BattleFrontierRunner {
    constructor() { }
    static tick() {
        if (!this.started()) {
            return;
        }
        if (this.timeLeft() < 0) {
            this.battleLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.GYM_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / GameConstants.GYM_TIME * 100));
    }
    static start(useCheckpoint) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!useCheckpoint && this.hasCheckpoint()) {
                if (!(yield Notifier.confirm({
                    title: 'Restart Battle Frontier?',
                    message: 'Current progress will be lost and you will restart from the first stage.',
                    type: NotificationConstants.NotificationOption.warning,
                    confirm: 'OK',
                }))) {
                    return;
                }
            }
            if (!useCheckpoint) {
                BattleFrontierRunner.battleBackground('Default');
            }
            this.started(true);
            this.stage(useCheckpoint ? this.checkpoint() : 1);
            this.highest(App.game.statistics.battleFrontierHighestStageCompleted());
            BattleFrontierBattle.pokemonIndex(0);
            BattleFrontierBattle.generateNewEnemy();
            BattleFrontierRunner.timeLeft(GameConstants.GYM_TIME);
            BattleFrontierRunner.timeLeftPercentage(100);
            App.game.gameState = GameConstants.GameState.battleFrontier;
        });
    }
    static nextStage() {
        // Gain any rewards we should have earned for defeating this stage
        BattleFrontierMilestones.gainReward(this.stage());
        if (App.game.statistics.battleFrontierHighestStageCompleted() < this.stage()) {
            // Update our highest stage
            App.game.statistics.battleFrontierHighestStageCompleted(this.stage());
        }
        // Move on to the next stage
        GameHelper.incrementObservable(this.stage);
        GameHelper.incrementObservable(App.game.statistics.battleFrontierTotalStagesCompleted);
        BattleFrontierRunner.timeLeft(GameConstants.GYM_TIME);
        BattleFrontierRunner.timeLeftPercentage(100);
        this.checkpoint(this.stage());
        if (this.stage() % 25 == 0) {
            const currentBackground = BattleFrontierRunner.battleBackground();
            const backgrounds = Object.keys(GameConstants.BattleBackgrounds).filter((key) => key !== currentBackground);
            BattleFrontierRunner.battleBackground(Rand.fromArray(backgrounds));
        }
    }
    static end() {
        BattleFrontierBattle.enemyPokemon(null);
        this.stage(1);
        this.started(false);
    }
    static battleLost() {
        // Current stage - 1 as the player didn't beat the current stage
        const stageBeaten = this.stage() - 1;
        // Give Battle Points and Money based on how far the user got
        const battleMultiplier = Math.max(stageBeaten / 100, 1);
        let battlePointsEarned = Math.round(stageBeaten * battleMultiplier);
        let moneyEarned = stageBeaten * 100 * battleMultiplier;
        // Award battle points and dollars and retrieve their computed values
        battlePointsEarned = App.game.wallet.gainBattlePoints(battlePointsEarned).amount;
        moneyEarned = App.game.wallet.gainMoney(moneyEarned, true).amount;
        Notifier.notify({
            title: 'Battle Frontier',
            message: `You managed to beat stage ${stageBeaten.toLocaleString('en-US')}.\nYou received <img src="./assets/images/currency/battlePoint.svg" height="24px"/> ${battlePointsEarned.toLocaleString('en-US')}.\nYou received <img src="./assets/images/currency/money.svg" height="24px"/> ${moneyEarned.toLocaleString('en-US')}.`,
            strippedMessage: `You managed to beat stage ${stageBeaten.toLocaleString('en-US')}.\nYou received ${battlePointsEarned.toLocaleString('en-US')} Battle Points.\nYou received ${moneyEarned.toLocaleString('en-US')} Pokédollars.`,
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.General.battle_frontier,
            sound: NotificationConstants.NotificationSound.General.battle_frontier,
            timeout: 30 * GameConstants.MINUTE,
        });
        App.game.logbook.newLog(LogBookTypes.FRONTIER, createLogContent.gainBattleFrontierPoints({
            stage: stageBeaten.toLocaleString('en-US'),
            points: battlePointsEarned.toLocaleString('en-US'),
        }));
        this.checkpoint(1);
        this.end();
    }
    static battleQuit() {
        Notifier.confirm({
            title: 'Battle Frontier',
            message: 'Are you sure you want to leave?\n\nYou can always return later and start off where you left.',
            type: NotificationConstants.NotificationOption.danger,
            confirm: 'Leave',
        }).then(confirmed => {
            if (confirmed) {
                // Don't give any points, user quit the challenge
                Notifier.notify({
                    title: 'Battle Frontier',
                    message: `Checkpoint set for stage ${this.stage()}.`,
                    type: NotificationConstants.NotificationOption.info,
                    timeout: 1 * GameConstants.MINUTE,
                });
                this.end();
            }
        });
    }
}
BattleFrontierRunner.timeLeft = ko.observable(GameConstants.GYM_TIME);
BattleFrontierRunner.timeLeftPercentage = ko.observable(100);
BattleFrontierRunner.stage = ko.observable(1); // Start at stage 1
BattleFrontierRunner.checkpoint = ko.observable(1); // Start at stage 1
BattleFrontierRunner.highest = ko.observable(1);
BattleFrontierRunner.battleBackground = ko.observable('Default');
BattleFrontierRunner.counter = 0;
BattleFrontierRunner.started = ko.observable(false);
BattleFrontierRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(BattleFrontierRunner.timeLeft() / 100) / 10).toFixed(1);
});
BattleFrontierRunner.pokemonLeftImages = ko.pureComputed(() => {
    let str = '';
    for (let i = 0; i < 3; i++) {
        str += `<img class="pokeball-smallest" src="assets/images/pokeball/Pokeball.svg"${BattleFrontierBattle.pokemonIndex() > i ? ' style="filter: saturate(0);"' : ''}>`;
    }
    return str;
});
BattleFrontierRunner.hasCheckpoint = ko.computed(() => {
    return BattleFrontierRunner.checkpoint() > 1;
});
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
/// <reference path="../../declarations/breeding/EggType.d.ts" />
class Breeding {
    constructor(multiplier) {
        this.multiplier = multiplier;
        this.name = 'Breeding';
        this.saveKey = 'breeding';
        this.defaults = {
            eggList: [ko.observable(new Egg()), ko.observable(new Egg()), ko.observable(new Egg()), ko.observable(new Egg())],
            eggSlots: 1,
            queueList: [],
            queueSlots: 0,
        };
        this.hatcheryHelpers = new HatcheryHelpers(this);
        this.hatchList = {
            [GameConstants.EggItemType.Fire_egg]: [
                ['Charmander', 'Vulpix', 'Growlithe', 'Magmar'],
                ['Cyndaquil', 'Slugma', 'Houndour', 'Magby'],
                ['Torchic', 'Numel'],
                ['Chimchar'],
                ['Tepig', 'Pansear', 'Darumaka'],
                ['Fennekin', 'Litleo'],
                ['Litten', 'Salandit'],
                ['Scorbunny', 'Sizzlipede'],
                ['Fuecoco', 'Charcadet'],
            ],
            [GameConstants.EggItemType.Water_egg]: [
                ['Squirtle', 'Lapras', 'Staryu', 'Slowpoke'],
                ['Totodile', 'Wooper', 'Marill', 'Qwilfish'],
                ['Mudkip', 'Feebas', 'Clamperl'],
                ['Piplup', 'Finneon', 'Buizel'],
                ['Oshawott', 'Panpour', 'Tympole'],
                ['Froakie', 'Clauncher', 'Skrelp'],
                ['Popplio', 'Wimpod', 'Mareanie'],
                ['Sobble', 'Chewtle', 'Arrokuda'],
                ['Quaxly'],
            ],
            [GameConstants.EggItemType.Grass_egg]: [
                ['Bulbasaur', 'Oddish', 'Tangela', 'Paras'],
                ['Chikorita', 'Hoppip', 'Sunkern'],
                ['Treecko', 'Tropius', 'Roselia'],
                ['Turtwig', 'Snover', 'Budew'],
                ['Snivy', 'Pansage', 'Maractus'],
                ['Chespin', 'Skiddo', 'Phantump'],
                ['Rowlet', 'Morelull', 'Fomantis'],
                ['Grookey', 'Gossifleur', 'Applin'],
                ['Sprigatito'],
            ],
            [GameConstants.EggItemType.Fighting_egg]: [
                ['Hitmonlee', 'Hitmonchan', 'Machop', 'Mankey'],
                ['Tyrogue', 'Heracross'],
                ['Makuhita', 'Meditite'],
                ['Riolu', 'Croagunk'],
                ['Throh', 'Sawk', 'Scraggy'],
                ['Pancham', 'Hawlucha'],
                ['Crabrawler', 'Stufful'],
                ['Falinks', 'Clobbopus', 'Galarian Farfetch\'d'],
            ],
            [GameConstants.EggItemType.Electric_egg]: [
                ['Magnemite', 'Pikachu', 'Voltorb', 'Electabuzz'],
                ['Chinchou', 'Mareep', 'Elekid'],
                ['Plusle', 'Minun', 'Electrike'],
                ['Pachirisu', 'Shinx'],
                ['Blitzle', 'Stunfisk', 'Joltik'],
                ['Helioptile', 'Dedenne'],
                ['Togedemaru'],
                ['Toxel', 'Pincurchin', 'Morpeko'],
            ],
            [GameConstants.EggItemType.Dragon_egg]: [
                ['Dratini', 'Dragonair', 'Dragonite'],
                [],
                ['Bagon', 'Shelgon', 'Salamence'],
                ['Gible', 'Gabite', 'Garchomp'],
                ['Deino', 'Zweilous', 'Hydreigon'],
                ['Goomy', 'Sliggoo', 'Goodra'],
                ['Turtonator', 'Drampa', 'Jangmo-o', 'Hakamo-o', 'Kommo-o'],
                ['Dreepy', 'Drakloak', 'Dragapult', 'Duraludon'],
                ['Frigibax', 'Arctibax', 'Baxcalibur'],
            ],
            [GameConstants.EggItemType.Mystery_egg]: [
                ['Gastly', 'Jigglypuff', 'Geodude', 'Doduo'],
                ['Yanma', 'Stantler'],
                ['Trapinch', 'Sableye', 'Spoink'],
                ['Stunky', 'Bronzor'],
                ['Vanillite', 'Drilbur'],
                ['Carbink', 'Honedge'],
                ['Mudbray', 'Rockruff'],
                ['Rolycoly', 'Milcery'],
            ],
        };
        this.usableQueueSlots = ko.pureComputed(() => {
            const queueSizeSetting = +Settings.getSetting('breedingQueueSizeSetting').observableValue();
            return queueSizeSetting > -1 ? Math.min(queueSizeSetting, this.queueSlots()) : this.queueSlots();
        });
        this._eggList = this.defaults.eggList;
        this._eggSlots = ko.observable(this.defaults.eggSlots);
        this._queueList = ko.observableArray(this.defaults.queueList);
        this.queueSlots = ko.observable(this.defaults.queueSlots);
        Settings.getSetting('breedingQueueSizeSetting').observableValue.subscribe(() => {
            this.updateQueueSizeLimit();
        });
    }
    initialize() {
        BreedingController.initialize();
    }
    update(delta) {
    }
    canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItemType.Mystery_egg);
    }
    fromJSON(json) {
        var _a, _b;
        if (json == null) {
            return;
        }
        this.eggSlots = (_a = json.eggSlots) !== null && _a !== void 0 ? _a : this.defaults.eggSlots;
        this._eggList = this.defaults.eggList;
        if (json.eggList !== null) {
            const saveEggList = json.eggList;
            for (let i = 0; i < this._eggList.length; i++) {
                if (saveEggList[i] != null) {
                    const egg = new Egg(null, null, null);
                    egg.fromJSON(saveEggList[i]);
                    this._eggList[i](egg);
                }
            }
        }
        // Uncompress queue data
        const queueData = (json.queueList || this.defaults.queueList).map(q => Array.isArray(q) ? q : [EggType.Pokemon, q]);
        this.queueSlots((_b = json.queueSlots) !== null && _b !== void 0 ? _b : this.defaults.queueSlots);
        this._queueList(queueData);
        this.hatcheryHelpers.fromJSON(json.hatcheryHelpers || []);
        this.moveEggs();
    }
    toJSON() {
        // Compress queue data by saving regular pokemon as just their ID, with EggType.Pokemon implied
        const queueData = this._queueList().map(q => q[0] === EggType.Pokemon ? q[1] : q);
        return {
            eggList: this.eggList.map(egg => egg() === null ? new Egg() : egg().toJSON()),
            eggSlots: this.eggSlots,
            queueList: queueData,
            queueSlots: this.queueSlots(),
            hatcheryHelpers: this.hatcheryHelpers.toJSON(),
        };
    }
    canBreedPokemon() {
        return App.game.party.hasMaxLevelPokemon() && (this.hasFreeEggSlot() || this.hasFreeQueueSlot());
    }
    hasFreeEggSlot(isHelper = false) {
        let counter = 0;
        for (let i = 0; i < this._eggList.length; i++) {
            if (!this._eggList[i]().isNone() || (!isHelper && this.hatcheryHelpers.hired()[i])) {
                counter++;
            }
        }
        return counter < this._eggSlots();
    }
    hasFreeQueueSlot() {
        const slots = this.usableQueueSlots();
        return slots && this._queueList().length < slots;
    }
    gainEgg(e, eggSlot = -1) {
        var _a, _b;
        if (e.isNone()) {
            return false;
        }
        if (eggSlot === -1) {
            // Throw egg in the first empty non-Helper slot
            for (let i = 0; i < this._eggList.length; i++) {
                if (this._eggList[i]().isNone() && !this.hatcheryHelpers.hired()[i]) {
                    this._eggList[i](e);
                    return true;
                }
            }
        }
        else {
            // Throw egg in the Helper slot if it's empty
            if ((_b = (_a = this._eggList)[eggSlot]) === null || _b === void 0 ? void 0 : _b.call(_a).isNone()) {
                this._eggList[eggSlot](e);
                return true;
            }
        }
        console.error(`Error: Could not place ${EggType[e.type]} Egg`);
        return false;
    }
    progressEggsBattle(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        return this.progressEggs(+Math.sqrt(route).toFixed(2));
    }
    progressEggs(amount) {
        amount *= this.getStepMultiplier();
        amount = Math.round(amount);
        let index = this.eggList.length;
        let emptySlots = 0;
        while (index-- > 0) {
            const helper = this.hatcheryHelpers.hired()[index];
            if (helper) {
                continue;
            }
            const egg = this.eggList[index]();
            if (egg.isNone() && index + 1 <= this._eggSlots()) {
                emptySlots++;
                continue;
            }
            const partyPokemon = egg.partyPokemon();
            if (!egg.isNone() && partyPokemon && partyPokemon.canCatchPokerus() && partyPokemon.pokerus == GameConstants.Pokerus.Uninfected) {
                partyPokemon.calculatePokerus(index);
            }
            egg.addSteps(amount, this.multiplier);
            if (this._queueList().length && egg.canHatch()) {
                this.hatchPokemonEgg(index, false);
                emptySlots++;
            }
        }
        this.hatcheryHelpers.addSteps(amount, this.multiplier);
        if (emptySlots) {
            // Check for any empty slots between incubating eggs, move them if a gap is found.
            // For example, if the first empty slot is index 2 but there are 3 slots with eggs then there is a gap.
            const firstEmptySlot = this._eggList.findIndex((egg, i) => egg().isNone() && !this.hatcheryHelpers.hired()[i]);
            if (firstEmptySlot > -1) {
                const slotsWithEggs = this._eggList.filter((egg, i) => !egg().isNone() && !this.hatcheryHelpers.hired()[i]).length;
                if (firstEmptySlot < slotsWithEggs) {
                    this.moveEggs();
                }
            }
            // Fill empty egg slots from queue.
            while (this._queueList().length && emptySlots--) {
                this.nextEggFromQueue();
            }
        }
    }
    getStepMultiplier() {
        return this.multiplier.getBonus('eggStep');
    }
    addPokemonToHatchery(pokemon) {
        // If they have a free eggslot, add the pokemon to the egg now
        if (this.hasFreeEggSlot()) {
            return this.gainPokemonEgg(pokemon);
        }
        // If they have a free queue, add the pokemon to the queue now
        if (this.hasFreeQueueSlot()) {
            return this.addPokemonToQueue(pokemon);
        }
        let message = 'You don\'t have any free egg slots';
        if (this.queueSlots()) {
            message += '<br/>Your queue is full';
        }
        Notifier.notify({
            message,
            type: NotificationConstants.NotificationOption.warning,
        });
        return false;
    }
    addEggItemToHatchery(eggItem) {
        if (GameConstants.EggItemType[eggItem] == undefined) {
            // Only allow hatchable items
            console.error('Undefined EggItem could not be added to the hatchery!');
            return false;
        }
        const item = ItemList[GameConstants.EggItemType[eggItem]];
        if (player.itemList[item.name]() <= 0) {
            return false;
        }
        let success = false;
        if (this.hasFreeEggSlot()) {
            // If they have a free eggslot, create an egg for this item now
            const egg = this.createItemEgg(eggItem);
            success = this.gainEgg(egg);
        }
        else if (this.hasFreeQueueSlot()) {
            // If they have a free queue, add the pokemon to the queue now
            const queueData = [EggType.EggItem, eggItem];
            success = this.addDataToQueue(queueData);
        }
        if (success) {
            player.loseItem(GameConstants.EggItemType[eggItem], 1);
            return true;
        }
        let message = 'You don\'t have any free egg slots';
        if (this.queueSlots()) {
            message += '<br/>Your queue is full';
        }
        Notifier.notify({
            message,
            type: NotificationConstants.NotificationOption.warning,
        });
        return false;
    }
    addPokemonToQueue(pokemon) {
        const success = this.addDataToQueue([EggType.Pokemon, pokemon.id]);
        if (success) {
            pokemon.breeding = true;
        }
        return success;
    }
    addDataToQueue(queueData) {
        const queueSize = this._queueList().length;
        if (queueSize < this.usableQueueSlots()) {
            this._queueList.push(queueData);
            return true;
        }
        return false;
    }
    removeFromQueue(index) {
        const queueSize = this._queueList().length;
        if (queueSize > index && index >= 0) {
            const queueData = this._queueList.splice(index, 1)[0];
            if (queueData[0] === EggType.Pokemon) {
                App.game.party.getPokemon(queueData[1]).breeding = false;
                return true;
            }
            else if (queueData[0] === EggType.EggItem) {
                player.gainItem(GameConstants.EggItemType[queueData[1]], 1);
                return true;
            }
            else {
                throw new Error(`Invalidly-typed data detected in hatchery queue: ${queueData}`);
            }
        }
        return false;
    }
    clearQueue(shouldConfirm = false) {
        if (shouldConfirm) {
            Notifier.confirm({
                title: 'Clear Queue',
                message: 'Are you sure?\n\nAll Pokémon will be removed from your breeding queue.',
                type: NotificationConstants.NotificationOption.warning,
                confirm: 'Clear',
            }).then(confirmed => {
                if (confirmed) {
                    while (this._queueList().length) {
                        this.removeFromQueue(0);
                    }
                }
            });
        }
        else {
            while (this._queueList().length) {
                this.removeFromQueue(0);
            }
        }
    }
    gainPokemonEgg(pokemon, eggSlot = -1) {
        if (eggSlot === -1 && !this.hasFreeEggSlot()) {
            // Check that an empty, non-Helper slot exists
            Notifier.notify({
                message: 'You don\'t have any free egg slots',
                type: NotificationConstants.NotificationOption.warning,
            });
            return false;
        }
        const egg = this.createEgg(pokemon.id);
        const success = this.gainEgg(egg, eggSlot);
        if (success && pokemon instanceof PartyPokemon) {
            pokemon.breeding = true;
        }
        return success;
    }
    hatchPokemonEgg(index, nextEgg = true) {
        const egg = this._eggList[index]();
        const hatched = egg.hatch();
        if (hatched) {
            this._eggList[index](new Egg());
            if (nextEgg) {
                this.moveEggs();
                if (this._queueList().length) {
                    this.nextEggFromQueue();
                }
            }
        }
    }
    nextEggFromQueue() {
        const nextInQueue = this._queueList.shift();
        let nextEgg;
        if (nextInQueue[0] === EggType.Pokemon) {
            nextEgg = this.createEgg(nextInQueue[1]);
        }
        else if (nextInQueue[0] === EggType.EggItem) {
            nextEgg = this.createItemEgg(nextInQueue[1]);
        }
        this.gainEgg(nextEgg);
        if (!this._queueList().length) {
            Notifier.notify({
                message: 'Hatchery queue is empty.',
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
                sound: NotificationConstants.NotificationSound.Hatchery.empty_queue,
                setting: NotificationConstants.NotificationSetting.Hatchery.empty_queue,
            });
        }
    }
    moveEggs() {
        const tempEggList = App.game.breeding._eggList.filter((egg, i) => egg().type != EggType.None && !this.hatcheryHelpers.hired()[i]);
        let tempEggIndex = 0;
        this._eggList.forEach((egg, index) => {
            if (this.hatcheryHelpers.hired()[index]) {
                return;
            }
            egg(tempEggList[tempEggIndex] ? tempEggList[tempEggIndex++]() : new Egg());
        });
    }
    createEgg(pokemonId, type = EggType.Pokemon) {
        const dataPokemon = PokemonHelper.getPokemonById(pokemonId);
        return new Egg(type, this.getSteps(dataPokemon.eggCycles), pokemonId);
    }
    createItemEgg(eggItem) {
        const hatchIndex = eggItem === GameConstants.EggItemType.Mystery_egg ? Rand.fromEnum(GameConstants.EggItemType) : eggItem;
        const hatchList = this.hatchList[hatchIndex];
        const hatchable = hatchList.slice(0, player.highestRegion() + 1).filter(list => list.length);
        // highest region has 1/ratio chance, next highest has 1/(ratio ^ 2), etc.
        // Leftover is given to Kanto, making Kanto and Johto equal chance
        const ratio = 2;
        const possibleHatches = GameConstants.expRandomElement(hatchable, ratio);
        const pokemonName = Rand.fromArray(possibleHatches);
        const pokemonId = PokemonHelper.getPokemonByName(pokemonName).id;
        return this.createEgg(pokemonId, EggType.EggItem);
    }
    getSteps(eggCycles) {
        if (eggCycles === undefined) {
            return 500;
        }
        else {
            return eggCycles * GameConstants.EGG_CYCLE_MULTIPLIER;
        }
    }
    calculateBaseForm(pokemonName) {
        const devolution = pokemonBabyPrevolutionMap[pokemonName];
        // Base form of Pokemon depends on which regions players unlocked
        if (!devolution || PokemonHelper.calcNativeRegion(devolution) > player.highestRegion()) {
            // No devolutions at all
            // No further devolutions in current unlocked regions
            return pokemonName;
        }
        else {
            // Recurse onto its devolution
            return devolution;
        }
    }
    getEggSlotCost(slot) {
        return 500 * slot;
    }
    buyEggSlot() {
        const cost = this.nextEggSlotCost();
        if (App.game.wallet.loseAmount(cost)) {
            this.gainEggSlot();
        }
    }
    nextEggSlotCost() {
        return new Amount(this.getEggSlotCost(this.eggSlots + 1), GameConstants.Currency.questPoint);
    }
    // Knockout getters/setters
    get eggSlots() {
        return this._eggSlots();
    }
    set eggSlots(value) {
        this._eggSlots(value);
    }
    get queueList() {
        return this._queueList;
    }
    gainEggSlot() {
        if (this.eggSlots === this.eggList.length) {
            console.error('Cannot gain another eggslot.');
            return;
        }
        this.eggSlots += 1;
    }
    gainQueueSlot(amt = 1) {
        GameHelper.incrementObservable(this.queueSlots, amt);
    }
    queueSlotsGainedFromRegion(region) {
        // bewtween 4 → 32 queue slots gained when completing a region
        return Math.min(32, Math.max(4, 4 * Math.pow(2, region - 1)));
    }
    get eggList() {
        return this._eggList;
    }
    set eggList(value) {
        this._eggList = value;
    }
    getAllCaughtStatus() {
        return GameHelper.enumNumbers(GameConstants.EggItemType).reduce((status, type) => {
            return this.hatchList[type]
                ? Math.min(status, this.getTypeCaughtStatus(type))
                : status;
        }, CaughtStatus.CaughtShiny);
    }
    getTypeCaughtStatus(type) {
        const hatchList = this.hatchList[type];
        if (!hatchList) {
            return CaughtStatus.NotCaught;
        }
        const hatchable = hatchList.slice(0, player.highestRegion() + 1).flat();
        return hatchable.reduce((status, pname) => {
            return Math.min(status, PartyController.getCaughtStatusByName(pname));
        }, CaughtStatus.CaughtShiny);
    }
    checkCloseModal() {
        if (Settings.getSetting('hideHatchery').value == 'queue' && !this.hasFreeEggSlot() && !this.hasFreeQueueSlot()) {
            $('#breedingModal').modal('hide');
        }
        if (Settings.getSetting('hideHatchery').value == 'egg' && !this.hasFreeEggSlot()) {
            $('#breedingModal').modal('hide');
        }
    }
    updateQueueSizeLimit() {
        const size = Settings.getSetting('breedingQueueSizeSetting').value;
        if (size == 0) {
            this.clearQueue();
        }
        else if (size > 0) {
            for (let i = this.queueList().length; i > this.usableQueueSlots(); i--) {
                this.removeFromQueue(i - 1);
            }
        }
    }
    fireAllButtonTooltip() {
        let str = '';
        this.hatcheryHelpers.hired().forEach(x => {
            str += `<img src="assets/images/profile/trainer-${x.trainerSprite}.png" width="20px">&nbsp; ${x.name} <img src="assets/images/currency/${GameConstants.Currency[x.cost.currency]}.svg" width="20px">&nbsp;${(x.cost.amount).toLocaleString('en-US')} <br/>`;
        });
        return str;
    }
}
///<reference path="../../declarations/globals.d.ts"/>
class PartyController {
    static getCaughtStatusByName(name) {
        return this.getCaughtStatus(PokemonHelper.getPokemonByName(name).id);
    }
    static getCaughtStatus(id) {
        if (App.game.party.alreadyCaughtPokemon(id, true)) {
            return CaughtStatus.CaughtShiny;
        }
        if (App.game.party.alreadyCaughtPokemon(id, false)) {
            return CaughtStatus.Caught;
        }
        return CaughtStatus.NotCaught;
    }
    static getEvs(id) {
        var _a, _b;
        return (_b = (_a = App.game.party.getPokemon(id)) === null || _a === void 0 ? void 0 : _a.evs()) !== null && _b !== void 0 ? _b : 0;
    }
    static getEvsByName(name) {
        return this.getEvs(PokemonHelper.getPokemonByName(name).id);
    }
    static getPokerusStatusByName(name) {
        return this.getPokerusStatus(PokemonHelper.getPokemonByName(name).id);
    }
    static getPokerusStatus(id) {
        var _a, _b;
        return (_b = (_a = App.game.party.getPokemon(id)) === null || _a === void 0 ? void 0 : _a.pokerus) !== null && _b !== void 0 ? _b : GameConstants.Pokerus.Uninfected;
    }
    static getPokemonStoneEvos(partyPokemon, evoType) {
        var _a, _b;
        return (_b = (_a = partyPokemon === null || partyPokemon === void 0 ? void 0 : partyPokemon.evolutions) === null || _a === void 0 ? void 0 : _a.filter((evo) => evo.trigger === EvoTrigger.STONE
            && evo.stone == evoType
            && PokemonHelper.calcNativeRegion(evo.evolvedPokemon) <= player.highestRegion()
            && !evo.restrictions.find(req => (req instanceof InRegionRequirement && !req.isCurrentlyPossible())
                || (req instanceof MaxRegionRequirement && !req.isCompleted())))) !== null && _b !== void 0 ? _b : [];
    }
    static getPokemonsWithEvolution(evoType) {
        return App.game.party.caughtPokemon.filter((partyPokemon) => {
            return PartyController.getPokemonStoneEvos(partyPokemon, evoType).length > 0;
        }).sort((a, b) => a.id - b.id);
    }
    static getStoneEvolutions(id, getStatus, evoType) {
        const pokemon = App.game.party.getPokemon(id);
        return PartyController.getPokemonStoneEvos(pokemon, evoType)
            .map((evo) => ({
            status: getStatus(evo),
            evs: PartyController.getEvsByName(evo.evolvedPokemon),
            locked: !EvolutionHandler.isSatisfied(evo),
            lockHint: evo.restrictions.filter(r => !r.isCompleted()).map(r => r.hint()).join('<br>'),
        }));
    }
    static getStoneEvolutionsCaughtData(id, evoType) {
        const getStatus = (evo) => this.getCaughtStatusByName(evo.evolvedPokemon);
        return this.getStoneEvolutions(id, getStatus, evoType);
    }
    static getStoneEvolutionsPokerusData(id, evoType) {
        const getStatus = (evo) => this.getPokerusStatusByName(evo.evolvedPokemon);
        return this.getStoneEvolutions(id, getStatus, evoType);
    }
    static hasMultipleStoneEvolutionsAvailable(pokemonName, evoType) {
        const pokemon = App.game.party.getPokemonByName(pokemonName);
        // We only want to check against pokemon that have multiple possible evolutions that can happen now
        return PartyController.getPokemonStoneEvos(pokemon, evoType).length > 1;
    }
    static removeVitaminFromParty(vitamin, amount = Infinity, shouldConfirm = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (shouldConfirm) {
                if (!(yield Notifier.confirm({
                    title: `Remove All ${GameConstants.VitaminType[vitamin]}?`,
                    message: `All ${GameConstants.VitaminType[vitamin]} will be removed from <u>every</u> Pokémon in your party.`,
                    type: NotificationConstants.NotificationOption.warning,
                    confirm: 'OK',
                }))) {
                    return;
                }
            }
            let arePokemonInHatchery = false;
            App.game.party.caughtPokemon.forEach((p) => {
                if (p.vitaminsUsed[vitamin]() > 0 && !p.breeding) {
                    p.removeVitamin(vitamin, amount);
                }
                if (p.breeding && !arePokemonInHatchery) {
                    arePokemonInHatchery = true;
                }
            });
            if (arePokemonInHatchery) {
                Notifier.notify({
                    message: `${GameConstants.VitaminType[vitamin]} couldn\'t be modified for Pokémon in Hatchery or Queue.`,
                    type: NotificationConstants.NotificationOption.warning,
                });
            }
        });
    }
    static removeAllVitaminsFromParty(shouldConfirm = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (shouldConfirm) {
                if (!(yield Notifier.confirm({
                    title: 'Remove All Vitamins?',
                    message: 'All vitamins will be removed from <u>every</u> Pokémon in your party.',
                    type: NotificationConstants.NotificationOption.warning,
                    confirm: 'OK',
                }))) {
                    return;
                }
            }
            const vitamins = GameHelper.enumNumbers(GameConstants.VitaminType);
            let arePokemonInHatchery = false;
            App.game.party.caughtPokemon.forEach((p) => {
                vitamins.forEach((v) => {
                    if (p.vitaminsUsed[v]() > 0 && !p.breeding) {
                        p.removeVitamin(v, Infinity);
                    }
                    if (p.breeding && !arePokemonInHatchery) {
                        arePokemonInHatchery = true;
                    }
                });
            });
            if (arePokemonInHatchery) {
                Notifier.notify({
                    message: 'Vitamins couldn\'t be modified for Pokémon in Hatchery or Queue.',
                    type: NotificationConstants.NotificationOption.warning,
                });
            }
        });
    }
    static getMaxLevelPokemonList() {
        return App.game.party.caughtPokemon.filter((partyPokemon) => {
            return !partyPokemon.breeding && partyPokemon.level >= 100;
        });
    }
    static getVitaminFilteredList() {
        return App.game.party.caughtPokemon.filter((pokemon) => {
            if (pokemon.id <= 0) {
                return false;
            }
            if (!Settings.getSetting('vitaminSearchFilter').regex().test(pokemon.displayName)) {
                return false;
            }
            if (Settings.getSetting('vitaminRegionFilter').observableValue() > -2) {
                if (PokemonHelper.calcNativeRegion(pokemon.name) !== Settings.getSetting('vitaminRegionFilter').observableValue()) {
                    return false;
                }
            }
            const type = Settings.getSetting('vitaminTypeFilter').observableValue();
            if (type > -2 && !pokemonMap[pokemon.name].type.includes(type)) {
                return false;
            }
            if (pokemon.vitaminUsesRemaining() == 0 && Settings.getSetting('vitaminHideMaxedPokemon').observableValue()) {
                return false;
            }
            if (pokemon.shiny && Settings.getSetting('vitaminHideShinyPokemon').observableValue()) {
                return false;
            }
            return true;
        });
    }
    static getHeldItemFilteredList() {
        return App.game.party.caughtPokemon.filter((pokemon) => {
            var _a, _b;
            if (pokemon.id <= 0) {
                return false;
            }
            if (!((_a = HeldItem.heldItemSelected()) === null || _a === void 0 ? void 0 : _a.canUse(pokemon))) {
                return false;
            }
            const testString = Settings.getSetting('heldItemDropdownPokemonOrItem').observableValue() === 'pokemon'
                ? pokemon.displayName : (_b = pokemon.heldItem()) === null || _b === void 0 ? void 0 : _b.displayName;
            if (!Settings.getSetting('heldItemSearchFilter').regex().test(testString)) {
                return false;
            }
            if (Settings.getSetting('heldItemRegionFilter').observableValue() > -2) {
                if (PokemonHelper.calcNativeRegion(pokemon.name) !== Settings.getSetting('heldItemRegionFilter').observableValue()) {
                    return false;
                }
            }
            const type1 = Settings.getSetting('heldItemTypeFilter').observableValue();
            const type2 = Settings.getSetting('heldItemType2Filter').observableValue();
            if (type1 !== -2 || type2 !== -2) {
                const { type: types } = pokemonMap[pokemon.name];
                if ([type1, type2].includes(PokemonType.None)) {
                    const type = (type1 == PokemonType.None) ? type2 : type1;
                    if (!BreedingController.isPureType(pokemon, type === -2 ? null : type)) {
                        return false;
                    }
                }
                else if ((type1 !== -2 && !types.includes(type1)) || (type2 !== -2 && !types.includes(type2))) {
                    return false;
                }
            }
            if (Settings.getSetting('heldItemHideHoldingPokemon').observableValue() && pokemon.heldItem()) {
                return false;
            }
            if (Settings.getSetting('heldItemHideHoldingThisItem').observableValue() && pokemon.heldItem() === HeldItem.heldItemSelected()) {
                return false;
            }
            return true;
        });
    }
    static getConsumableFilteredList() {
        return App.game.party.caughtPokemon.filter((pokemon) => {
            if (pokemon.id <= 0) {
                return false;
            }
            const consumable = ItemList[ConsumableController.currentlySelectedName()];
            if (!consumable.canUse(pokemon)) {
                return false;
            }
            if (!Settings.getSetting('consumableSearchFilter').regex().test(pokemon.displayName)) {
                return false;
            }
            if (Settings.getSetting('consumableRegionFilter').observableValue() > -2) {
                if (PokemonHelper.calcNativeRegion(pokemon.name) !== Settings.getSetting('consumableRegionFilter').observableValue()) {
                    return false;
                }
            }
            const type = Settings.getSetting('consumableTypeFilter').observableValue();
            if (type > -2 && !pokemonMap[pokemon.name].type.includes(type)) {
                return false;
            }
            if (Settings.getSetting('consumableHideShinyPokemon').observableValue() && pokemon.shiny) {
                return false;
            }
            return true;
        });
    }
    static calculateRegionalMultiplier(pokemon, region) {
        if (region > -1 && PokemonHelper.calcNativeRegion(pokemon.name) !== region) {
            return App.game.party.getRegionAttackMultiplier();
        }
        return 1.0;
    }
    static moveCategoryPokemon(fromCategory, toCategory) {
        // Category should exist
        if (!PokemonCategories.categories().some((c) => c.id === toCategory)) {
            return;
        }
        if (fromCategory === toCategory) {
            return;
        }
        App.game.party.caughtPokemon.forEach((p) => {
            if (p.category.includes(fromCategory)) {
                if (toCategory > 0) {
                    p.addCategory(toCategory);
                }
                p.removeCategory(fromCategory);
            }
        });
    }
    static addCategory(pokemonList, category, shouldConfirm = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!pokemonList.length) {
                return;
            }
            if (shouldConfirm) {
                const categoryName = PokemonCategories.categories().find((c) => c.id === category).name();
                if (!(yield Notifier.confirm({
                    title: 'Batch Add Category',
                    message: `Add the <strong>${categoryName}</strong> category to ${pokemonList.length.toLocaleString('en-US')} Pokémon?`,
                    type: NotificationConstants.NotificationOption.warning,
                    confirm: 'Yes',
                }))) {
                    return;
                }
            }
            pokemonList.forEach((p) => p.addCategory(category));
        });
    }
    static removeCategory(pokemonList, category, shouldConfirm = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!pokemonList.length) {
                return;
            }
            if (shouldConfirm) {
                const categoryName = PokemonCategories.categories().find((c) => c.id === category).name();
                if (!(yield Notifier.confirm({
                    title: 'Batch Remove Category',
                    message: `Remove the <strong>${categoryName}</strong> category from ${pokemonList.length.toLocaleString('en-US')} Pokémon?`,
                    type: NotificationConstants.NotificationOption.warning,
                    confirm: 'Yes',
                }))) {
                    return;
                }
            }
            pokemonList.forEach((p) => p.removeCategory(category));
        });
    }
    static compareBy(option, direction, region = -1) {
        return function (a, b) {
            let res, dir = (direction) ? -1 : 1;
            const config = SortOptionConfigs[option];
            let aValue = config.getValue(a);
            let bValue = config.getValue(b);
            // Apply regional debuff if needed
            if (region > -1 && [SortOptions.attack, SortOptions.breedingEfficiency, SortOptions.attackBonus].includes(option)) {
                aValue *= PartyController.calculateRegionalMultiplier(a, region);
                bValue *= PartyController.calculateRegionalMultiplier(b, region);
            }
            if (option === SortOptions.category) {
                aValue = direction ? Math.max(...aValue) : Math.min(...aValue);
                bValue = direction ? Math.max(...bValue) : Math.min(...bValue);
            }
            if (config.invert) {
                dir *= -1;
            }
            //Compare by provided property
            if (aValue == bValue) {
                //If they are equal according to provided property, sort by id
                return a.id - b.id;
            }
            else if (aValue < bValue) {
                res = -1;
            }
            else if (aValue > bValue) {
                res = 1;
            }
            else {
                res = 0;
            }
            return res * dir;
        };
    }
}
PartyController.getSortedList = ko.pureComputed(() => {
    const list = [...App.game.party.caughtPokemon];
    return list.sort(PartyController.compareBy(Settings.getSetting('partySort').observableValue(), Settings.getSetting('partySortDirection').observableValue()));
}).extend({ rateLimit: 500 });
PartyController.vitaminSortedList = [];
PartyController.getVitaminSortedList = ko.pureComputed(() => {
    // If the vitamin modal is open, we should sort it.
    if (DisplayObservables.modalState.pokemonVitaminExpandedModal === 'show') {
        PartyController.vitaminSortedList = PartyController.getVitaminFilteredList();
        return PartyController.vitaminSortedList.sort(PartyController.compareBy(Settings.getSetting('vitaminSort').observableValue(), Settings.getSetting('vitaminSortDirection').observableValue()));
    }
    return PartyController.vitaminSortedList;
}).extend({ rateLimit: 100 });
PartyController.heldItemSortedList = [];
PartyController.getHeldItemSortedList = ko.pureComputed(() => {
    // If the held item modal is open, we should sort it.
    if (DisplayObservables.modalState.heldItemModal === 'show') {
        PartyController.heldItemSortedList = PartyController.getHeldItemFilteredList();
        return PartyController.heldItemSortedList.sort(PartyController.compareBy(Settings.getSetting('heldItemSort').observableValue(), Settings.getSetting('heldItemSortDirection').observableValue()));
    }
    return PartyController.heldItemSortedList;
}).extend({ rateLimit: 100 });
PartyController.consumableSortedList = [];
PartyController.getConsumableSortedList = ko.pureComputed(() => {
    // If the consumable modal is open, we should sort it.
    if (DisplayObservables.modalState.consumableModal === 'show') {
        PartyController.consumableSortedList = PartyController.getConsumableFilteredList();
        return PartyController.consumableSortedList.sort(PartyController.compareBy(Settings.getSetting('consumableSort').observableValue(), Settings.getSetting('consumableSortDirection').observableValue()));
    }
    return PartyController.consumableSortedList;
}).extend({ rateLimit: 100 });
PartyController;
/// <reference path="../../declarations/enums/CaughtStatus.d.ts"/>
/// <reference path="../../declarations/breeding/EggType.d.ts" />
/// <reference path="../../declarations/utilities/DisplayObservables.d.ts" />
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/koExtenders.d.ts" />
/// <reference path="../party/PartyController.ts" />
class BreedingController {
    static initialize() {
        // Track view settings for hatchery list rerendering
        const hatcheryListSettings = [...breedingFilterSettingKeys, 'hatcherySort', 'hatcherySortDirection'];
        hatcheryListSettings.forEach((setting) => {
            Settings.getSetting(setting).observableValue.subscribe(() => {
                BreedingController.viewResetWaiting(true);
                BreedingController.hatcherySortedFilteredList.evaluateEarly();
            });
        });
        // Reset hatchery display upon modal close
        DisplayObservables.modalState.breedingModalObservable.subscribe((modalState) => {
            // Resetting scrolling only works before modal is fully hidden
            if (modalState === 'hide') {
                BreedingController.scrollToTop();
                BreedingController.resetFilteredListNotifier.notifySubscribers();
            }
            else if (modalState === 'hidden') {
                BreedingController.resetHatcheryView();
            }
        });
    }
    static openBreedingModal() {
        if (App.game.breeding.canAccess()) {
            $('#breedingModal').modal('show');
        }
        else {
            Notifier.notify({
                message: 'You do not have access to the Day Care yet.\n<i>Clear Route 3 first.</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static getEggCssClass(egg) {
        const animationType = Settings.getSetting('eggAnimation').observableValue();
        if (animationType === 'none') {
            return '';
        }
        if (egg.progress() >= 100) {
            return 'hatching';
        }
        return (animationType === 'almost' && egg.stepsRemaining() <= 50) ? 'hatchingSoon' : '';
    }
    static getEggSpots(pokemonName) {
        const pokemon = pokemonMap[pokemonName];
        if (EggSpots.customPattern[pokemon.name]) {
            return EggSpots.customPattern[pokemon.name];
        }
        const seed = pokemon.id * pokemon.type.reduce((a, b) => a * (b + 1), 1);
        SeededRand.seed(seed);
        SeededRand.seed(SeededRand.intBetween(0, 1000));
        return SeededRand.fromArray(EggSpots.spotTypes);
    }
    static getQueueImage([type, id]) {
        if (type == EggType.Pokemon) {
            return PokemonHelper.getImage(id);
        }
        else if (type == EggType.EggItem) {
            return `assets/images/breeding/${GameConstants.EggItemType[id]}.png`;
        }
        return '';
    }
    static getEggPokemonName(egg) {
        var _a;
        return egg.type === EggType.Pokemon ? (_a = egg.partyPokemon()) === null || _a === void 0 ? void 0 : _a.name : null;
    }
    static formatSearch(value) {
        if (/[^\d]/.test(value)) {
            // non-integer, use as name filter
            Settings.setSettingByName('breedingNameFilter', value);
            Settings.setSettingByName('breedingIDFilter', -1);
        }
        else {
            // integer, use as ID filter
            Settings.setSettingByName('breedingIDFilter', (value != '' ? +value : -1));
            Settings.setSettingByName('breedingNameFilter', '');
        }
    }
    static getSearchString() {
        const name = Settings.getSetting('breedingNameFilter').value;
        const id = Settings.getSetting('breedingIDFilter').value;
        return id == -1 ? name : id;
    }
    static getRegionFilterString() {
        const unlockedRegionsMask = (2 << player.highestRegion()) - 1;
        const showRegions = Settings.getSetting('breedingRegionFilter').observableValue() & unlockedRegionsMask;
        if (showRegions == unlockedRegionsMask) {
            return 'All';
        }
        else if (showRegions > 0) {
            const highestBit = Math.floor(Math.log2(showRegions));
            let txt = GameConstants.camelCaseToString(GameConstants.Region[highestBit]);
            if (showRegions > (1 << highestBit)) {
                txt += ' & more';
            }
            return txt;
        }
        else {
            return 'None';
        }
    }
    static isPureType(pokemon, type) {
        const pokemonData = pokemonMap[pokemon.name];
        return ((type == null || pokemonData.type[0] === type) && (pokemonData.type[1] == undefined || pokemonData.type[1] == PokemonType.None));
    }
    // Value displayed at bottom of image
    static getDisplayValue(pokemon) {
        const pokemonData = pokemonMap[pokemon.name];
        switch (Settings.getSetting('breedingDisplayTextSetting').observableValue()) {
            case 'attackBonus': return `Attack Bonus: ${Math.floor(pokemon.getBreedingAttackBonus() * BreedingController.calculateRegionalMultiplier(pokemon)).toLocaleString('en-US')}`;
            case 'baseAttack': return `Base Attack: ${pokemon.baseAttack.toLocaleString('en-US')}`;
            case 'eggSteps': return `Egg Steps: ${pokemon.getEggSteps().toLocaleString('en-US')}`;
            case 'timesHatched': return `Hatches: ${App.game.statistics.pokemonHatched[pokemonData.id]().toLocaleString('en-US')}`;
            case 'breedingEfficiency': return `Efficiency: ${(pokemon.breedingEfficiency() * BreedingController.calculateRegionalMultiplier(pokemon)).toLocaleString('en-US', { maximumFractionDigits: 3 })}`;
            case 'stepsPerAttack': return `Steps/Att: ${(pokemon.getEggSteps() / (pokemon.getBreedingAttackBonus() * BreedingController.calculateRegionalMultiplier(pokemon))).toLocaleString('en-US', { maximumFractionDigits: 3 })}`;
            case 'dexId': return `#${pokemon.id <= 0 ? '???' : Math.floor(pokemon.id).toString().padStart(3, '0')}`;
            case 'vitamins': return `Vitamins: ${pokemon.totalVitaminsUsed()}`;
            case 'evs': return `EVs: ${pokemon.evs().toLocaleString('en-US')}`;
            case 'attack':
            default:
                return `Attack: ${Math.floor(pokemon.attack * BreedingController.calculateRegionalMultiplier(pokemon)).toLocaleString('en-US')}`;
        }
    }
    static calculateRegionalMultiplier(pokemon) {
        // Check if regional debuff is active
        if (App.game.challenges.list.regionalAttackDebuff.active()) {
            // Check if regional debuff being applied for sorting
            const regionalAttackDebuff = Settings.getSetting('breedingRegionalAttackDebuffSetting').observableValue();
            if (regionalAttackDebuff > -1 && PokemonHelper.calcNativeRegion(pokemon.name) !== regionalAttackDebuff) {
                return App.game.party.getRegionAttackMultiplier();
            }
        }
        return 1.0;
    }
    static calcEggOdds(eggItem, pokemon) {
        const hatchList = App.game.breeding.hatchList[eggItem];
        const region = hatchList.findIndex(r => r.includes(pokemon));
        if (region === -1) {
            return 0;
        }
        const regionPoolCount = eggItem === GameConstants.EggItemType.Mystery_egg
            ? Object.values(App.game.breeding.hatchList).reduce((total, eggTypePool) => total += eggTypePool[region].length, 0)
            : hatchList[region].length;
        const regionDiff = 1 + (player.highestRegion() - Math.max(1, region));
        // odds of this region pool
        const odds = 1 / Math.pow(2, regionDiff);
        // odds of pokemon in this region pool
        return odds / regionPoolCount;
    }
    static resetHatcheryView() {
        BreedingController.scrollToTop();
        BreedingController.resetHatcheryFlag.notifySubscribers();
        BreedingController.viewResetWaiting(false);
        BreedingController.viewResetReady = false;
    }
    static scrollToTop() {
        document.querySelector('#breeding-pokemon-list-container .scrolling-div-breeding-list').scrollTop = 0;
    }
}
BreedingController.selectedEggItem = ko.observable(undefined);
// Queue size limit setting
BreedingController.queueSizeLimit = ko.observable(-1);
// Used to pause hatchery list until all the filteredList changes are available
// Otherwise changing the filters would render removing and adding entries at different times
BreedingController.viewResetWaiting = ko.observable(false);
BreedingController.viewResetReady = false;
// Pausable access to the sorted list for the modal, with view logic
BreedingController._cachedSortedFilteredList = [];
BreedingController.viewSortedFilteredList = ko.pureComputed(() => {
    // Pause updates while the modal is closed
    if (DisplayObservables.modalState.breedingModal === 'show') {
        BreedingController._cachedSortedFilteredList = BreedingController.hatcherySortedFilteredList();
        // Finish resetting the LazyLoader display after filters change
        if (BreedingController.viewResetReady) {
            BreedingController.resetHatcheryView();
        }
    }
    return BreedingController._cachedSortedFilteredList;
});
// Sorted list of pokemon that match hatchery filters
BreedingController.hatcherySortedFilteredList = ko.pureComputed(() => {
    const hatcheryList = Array.from(BreedingController.hatcheryFilteredList());
    // Don't adjust attack based on region if debuff is disabled
    const region = App.game.challenges.list.regionalAttackDebuff.active() ? Settings.getSetting('breedingRegionalAttackDebuffSetting').observableValue() : -1;
    hatcheryList.sort(PartyController.compareBy(Settings.getSetting('hatcherySort').observableValue(), Settings.getSetting('hatcherySortDirection').observableValue(), region));
    // If a filter or sort order just changed
    if (BreedingController.viewResetWaiting.peek()) {
        // Ready to rerender now that the list is up to date
        BreedingController.viewResetReady = true;
    }
    return hatcheryList;
}).extend({ skippableRateLimit: 500 }); // Lets us rerender immediately after filter changes
// Filters for pokemon that match hatchery filters
BreedingController.hatcheryFilteredList = ko.pureComputed(() => {
    // Subscribe to force view resets even when none of the pokemon.matchesHatcheryFilters() computeds change
    BreedingController.resetFilteredListNotifier();
    return App.game.party.caughtPokemon.filter((pokemon) => pokemon.matchesHatcheryFilters());
}).extend({ rateLimit: 100 }); // deferUpdates isn't good enough to prevent lag
// Used to reset the LazyLoaderdisplay
BreedingController.resetHatcheryFlag = ko.computed(() => DisplayObservables.modalState.breedingModal === 'hidden');
BreedingController.resetFilteredListNotifier = ko.observable(null);
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Saveable.d.ts" />
/// <reference path="../../declarations/breeding/EggType.d.ts" />
class Egg {
    constructor(type = EggType.None, totalSteps = 0, pokemon = 0, // MissingNo.
    steps = 0, shinyChance = GameConstants.SHINY_CHANCE_BREEDING, notified = false) {
        this.type = type;
        this.totalSteps = totalSteps;
        this.pokemon = pokemon;
        this.shinyChance = shinyChance;
        this.notified = notified;
        this.saveKey = 'egg';
        this.defaults = {};
        this.stepsRequired = this.totalSteps;
        this.steps = ko.observable(steps);
        this.partyPokemon = ko.observable();
        this.init();
    }
    init(initial = false) {
        this.progress = ko.pureComputed(function () {
            return this.steps() / this.stepsRequired * 100;
        }, this);
        this.progressText = ko.pureComputed(function () {
            var _a;
            return `${this.steps().toLocaleString('en-US')} / ${(_a = this.stepsRequired) === null || _a === void 0 ? void 0 : _a.toLocaleString('en-US')}`;
        }, this);
        this.stepsRemaining = ko.pureComputed(function () {
            return this.stepsRequired - this.steps();
        }, this);
        if (this.pokemon) {
            const dataPokemon = PokemonHelper.getPokemonById(this.pokemon);
            this.pokemonType1 = dataPokemon.type1;
            this.pokemonType2 = dataPokemon.type2 === PokemonType.None ? dataPokemon.type1 : dataPokemon.type2;
        }
        else {
            this.pokemonType1 = PokemonType.Normal;
            this.pokemonType2 = PokemonType.Normal;
        }
        this.setPartyPokemon();
    }
    setPartyPokemon() {
        var _a, _b;
        // Bind the party pokemon
        if (!this.partyPokemon() && ((_a = App.game) === null || _a === void 0 ? void 0 : _a.party)) {
            this.partyPokemon(this.type !== EggType.None ? App.game.party.getPokemon(PokemonHelper.getPokemonById(this.pokemon).id) : null);
        }
        if ((_b = App.game) === null || _b === void 0 ? void 0 : _b.party) {
            if (this.partyPokemon()) {
                // Reduce total steps based on amount of Carbos used
                this.stepsRequired = this.partyPokemon().getEggSteps();
            }
            else {
                // The Pokémon is not in our party - this might be a shop egg.
                this.stepsRequired = this.totalSteps;
            }
        }
    }
    isNone() {
        return this.type === EggType.None;
    }
    updateShinyChance(steps, multiplier) {
        const stepsChance = GameConstants.SHINY_CHANCE_BREEDING / multiplier.getBonus('shiny');
        const newChance = ((this.shinyChance * this.steps()) + (stepsChance * steps)) / (this.steps() + steps);
        this.shinyChance = newChance;
    }
    addSteps(amount, multiplier, helper = false) {
        // If no egg in slot, or no steps remaining, don't do anything
        if (this.isNone() || this.stepsRemaining() <= 0) {
            return;
        }
        // Need to add at least 1 step
        if (!+amount) {
            amount = 1;
        }
        // Increase our steps
        this.updateShinyChance(amount, multiplier);
        this.steps(this.steps() + amount);
        // Notify that the egg is ready to hatch
        if (this.canHatch() && !helper && !this.notified) {
            let notifMessage;
            if (this.type == EggType.Pokemon) {
                notifMessage = `${PokemonHelper.displayName(PokemonHelper.getPokemonById(this.pokemon).name)()} is ready to hatch!`;
            }
            else {
                notifMessage = 'An egg is ready to hatch!';
            }
            Notifier.notify({
                message: notifMessage,
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.Hatchery.ready_to_hatch,
                setting: NotificationConstants.NotificationSetting.Hatchery.ready_to_hatch,
            });
            this.notified = true;
        }
    }
    canHatch() {
        return !this.isNone() && this.steps() >= this.stepsRequired;
    }
    hatch(efficiency = 100, helper = false) {
        if (!this.canHatch()) {
            return false;
        }
        const shiny = PokemonFactory.generateShiny(this.shinyChance, true);
        const partyPokemon = this.partyPokemon();
        // If the party pokemon exist, increase it's damage output
        const pokemonID = PokemonHelper.getPokemonById(this.pokemon).id;
        const gender = PokemonFactory.generateGenderById(pokemonID);
        const shadow = GameConstants.ShadowStatus.None;
        if (partyPokemon) {
            // Increase attack
            const shinyMultiplier = shiny ? GameConstants.BREEDING_SHINY_ATTACK_MULTIPLIER : 1;
            partyPokemon.attackBonusPercent += Math.max(1, Math.round((GameConstants.BREEDING_ATTACK_BONUS + partyPokemon.vitaminsUsed[GameConstants.VitaminType.Calcium]()) * (efficiency / 100)) * shinyMultiplier);
            partyPokemon.attackBonusAmount += Math.max(0, Math.round(partyPokemon.vitaminsUsed[GameConstants.VitaminType.Protein]() * (efficiency / 100)) * shinyMultiplier);
            // If breeding (not store egg), reset level, reset evolution check
            if (partyPokemon.breeding) {
                partyPokemon.exp = 0;
                partyPokemon.level = 1;
                partyPokemon.breeding = false;
                partyPokemon.level = partyPokemon.calculateLevelFromExp();
            }
            // Update pokerus status
            if (partyPokemon.pokerus == GameConstants.Pokerus.Infected) {
                partyPokemon.pokerus = GameConstants.Pokerus.Contagious;
            }
        }
        if (shiny) {
            Notifier.notify({
                message: `✨ You hatched a shiny ${PokemonHelper.displayName(PokemonHelper.getPokemonById(this.pokemon).name)()}! ✨`,
                pokemonImage: PokemonHelper.getImage(PokemonHelper.getPokemonById(this.pokemon).id, shiny, gender, GameConstants.ShadowStatus.None),
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.Hatchery.hatched_shiny,
            });
            const pokemon = PokemonHelper.getPokemonById(this.pokemon).name;
            App.game.logbook.newLog(LogBookTypes.SHINY, App.game.party.alreadyCaughtPokemon(pokemonID, true)
                ? createLogContent.hatchedShinyDupe({ pokemon })
                : createLogContent.hatchedShiny({ pokemon }));
        }
        else {
            Notifier.notify({
                message: `You hatched ${GameHelper.anOrA(PokemonHelper.getPokemonById(this.pokemon).name)} ${PokemonHelper.displayName(PokemonHelper.getPokemonById(this.pokemon).name)()}!`,
                pokemonImage: PokemonHelper.getImage(PokemonHelper.getPokemonById(this.pokemon).id, shiny, gender, GameConstants.ShadowStatus.None),
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Hatchery.hatched,
            });
        }
        App.game.party.gainPokemonById(pokemonID, shiny, undefined, gender);
        // Capture base form if not already caught. This helps players get Gen2 Pokemon that are base form of Gen1
        if ((partyPokemon === null || partyPokemon === void 0 ? void 0 : partyPokemon.heldItem()) !== ItemList.Everstone) { // Everstone prevents baby forms
            const pokemonName = PokemonHelper.getPokemonById(this.pokemon).name;
            const baseFormName = App.game.breeding.calculateBaseForm(pokemonName);
            const baseForm = PokemonHelper.getPokemonByName(baseFormName);
            if (pokemonName != baseFormName && !App.game.party.alreadyCaughtPokemon(baseForm.id)) {
                const babyShiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BREEDING);
                const babyGender = PokemonFactory.generateGenderById(baseForm.id);
                Notifier.notify({
                    message: `You also found ${GameHelper.anOrA(baseFormName)} ${baseFormName} nearby!`,
                    pokemonImage: PokemonHelper.getImage(baseForm.id, babyShiny, babyGender, GameConstants.ShadowStatus.None),
                    type: NotificationConstants.NotificationOption.success,
                    sound: NotificationConstants.NotificationSound.General.new_catch,
                    setting: NotificationConstants.NotificationSetting.General.new_catch,
                });
                App.game.party.gainPokemonById(baseForm.id, babyShiny, undefined, babyGender, GameConstants.ShadowStatus.None);
            }
        }
        // Update statistics
        PokemonHelper.incrementPokemonStatistics(pokemonID, GameConstants.PokemonStatisticsType.Hatched, shiny, gender, shadow);
        App.game.oakItems.use(OakItemType.Magma_Stone);
        return true;
    }
    toJSON() {
        return {
            totalSteps: this.totalSteps,
            steps: this.steps(),
            shinyChance: this.shinyChance,
            pokemon: this.pokemon,
            type: this.type,
            notified: this.notified,
        };
    }
    fromJSON(json) {
        this.totalSteps = json.totalSteps;
        this.steps = ko.observable(json.steps);
        this.shinyChance = json.shinyChance;
        this.pokemon = json.pokemon;
        this.type = json.type;
        this.notified = json.notified;
        this.init(true);
    }
}
class EggSpots {
}
EggSpots.spotTypes = [
    `<g class="egg-spot">
            <path d="M33.5 104.3c4.4 4.9 9.3 7.3 6.7 9.6-2.6 2.4-8.3.4-12.7-4.4-4.5-4.9-6-10.8-3.4-13.2 2.6-2.3 5 3.2 9.4 8zm59.7 0c-4.5 4.9-9.4 7.3-6.8 9.6 2.6 2.4 8.4.4 12.8-4.4 4.4-4.9 6-10.8 3.3-13.2-2.6-2.3-4.9 3.2-9.3 8zm-1.6-14.8c-6.2 13.5-19 21-28.6 16.6-9.5-4.4-5-12.4 1.2-26 6.3-13.5 12-27.6 21.5-23.2 9.5 4.4 12.2 19 6 32.6zM74.29 37.558C66.497 46.286 70.6 55.4 62.4 55.4c-8.2 0-14.6-6.6-14.6-14.7S54.3 26 62.4 26c5.593.02 15.797 6.422 11.89 11.558z"/>
            <circle cx="35" cy="38" r="3"/>
            <circle cx="46" cy="23" r="1"/>
            <circle cx="40" cy="56" r="2"/>
            <circle cx="67" cy="113" r="2"/>
            <circle cx="59" cy="111" r="2"/>
            <circle cx="83" cy="30" r="3"/>
            <circle cx="93" cy="45" r="3"/>
            <circle cx="44" cy="91" r="4"/>
        </g>`,
    '<path class="egg-spot" fill-rule="evenodd" d="M46.23 117.564l-11.834-9.568-6.735 1.996-2.792-3.385-1.678-3.128 2.058-5.37-8.622-12.541 15.198.785 9.263-12.074 3.95 14.696 14.345 5.078-12.757 8.298zM94.642 78.967L87.3 82.332l-1.462 8.113-5.387-6.125-7.972 1.081 4.012-7.15-3.465-7.445 7.867 1.706 5.83-5.682.85 8.204zM64.436 58.62l-1.438 3.7 2.234 3.282-3.963-.223-2.431 3.139-1.013-3.839-3.736-1.342 3.338-2.15.121-3.967 3.076 2.51zM72.93 124.108l-12.863-7.728 15.24-6.015L78.995 94.4l10.43 12.637 12.201-1.068c-1.781 5.64-18.87 17.67-28.696 18.14zM23.89 37.914l8.54 4.054 8.181-4.736-1.217 9.375 7.032 6.317-9.291 1.74-3.835 8.64-4.526-8.3-9.402-.978 6.495-6.868zM80.06 61.697L76.364 38.23l-21.428-10.26 21.178-10.767L77.63 6.191c14.44 11.002 20.165 23.604 27.66 39.708l-8.85-1.41z"/>',
    '<path class="egg-spot" d="M40.95 26.323l5.938 11.344 5.318-11.344 5.943 11.344 5.314-11.344 5.947 11.344 5.31-11.344 5.95 11.344 5.306-11.344 5.956 11.344 5.3-11.344C93.314 22.008 77.276 1.254 62.799 1.35c-14.462.096-28.375 19.679-33.106 24.972l5.934 11.344zM85.875 115.645L79.937 104.3l-5.318 11.344-5.943-11.344-5.313 11.344-5.948-11.344-5.309 11.344-5.952-11.344-5.304 11.344-5.957-11.344-3.883 8.31 22.214 12.35 19.498-.032 23.073-11.84-4.597-8.788zM14.966 70.986l15.998-12 15.998 12 15.998-12 15.998 12 15.998-12 15.998 12 .064 15.418-16-12-16 12-16-12-16 12-16-12-16 12z"/>',
    '<path class="egg-spot" fill-rule="evenodd" d="M25.319 37.719s23.67-2.3 36.36-2.304c12.688-.003 39.727 2.239 39.727 2.239l5.453 14.088s-30.455-1.188-45.019-1.177c-14.564.01-42.364 1.242-42.364 1.242zM16.49 65.635s29.952 1.066 45.587 1.08c15.635.012 47.726-1.08 47.726-1.08l1.666 14.412s-33.12 2.575-49.154 2.575c-16.036 0-47.059-2.575-47.059-2.575zM18.827 94.849s28.351 2.626 43.196 2.637c14.845.01 45.875-2.572 45.875-2.572l-9.141 14.4s-25.023 3.322-36.917 3.329c-11.895.007-34.261-3.394-34.261-3.394zM40.886 13.262s13.83-1.689 21.343-1.7c7.513-.01 23.734 1.635 23.734 1.635l9.106 12.087s-22-1.805-32.625-1.794c-10.625.01-31.125 1.86-31.125 1.86z"/>',
    `<g class="egg-spot" transform="matrix(.23639 0 0 .224 -1.683 1.746)">
            <ellipse cx="235.48" cy="166.231" rx="14.106" ry="11.187"/>
            <ellipse cx="259.807" cy="181.801" rx="6.322" ry="5.355"/>
            <ellipse cx="200.449" cy="66.977" rx="8.268" ry="7.295"/>
            <ellipse cx="221.857" cy="79.144" rx="5.355" ry="2.919"/>
            <ellipse cx="328.405" cy="81.573" rx="8.758" ry="10.22"/>
            <ellipse cx="399.925" cy="198.343" rx="8.273" ry="7.301"/>
            <path d="M215.529 262.077c8.599 0 15.569-5.881 15.569-13.134 0-4.235-2.412-7.956-6.096-10.361-2.631-1.714-5.887-2.779-9.474-2.779-2.307 0-4.48.447-6.444 1.212-5.374 2.068-9.119 6.616-9.119 11.928-.006 7.252 6.965 13.134 15.564 13.134z"/>
            <ellipse cx="234.507" cy="275.7" rx="7.295" ry="6.812"/>
            <ellipse cx="325.487" cy="272.291" rx="12.65" ry="13.133"/>
            <ellipse cx="356.136" cy="280.075" rx="5.355" ry="4.376"/>
            <ellipse cx="306.024" cy="354.519" rx="13.623" ry="11.677"/>
            <ellipse cx="336.19" cy="376.41" rx="4.865" ry="6.328"/>
            <ellipse cx="244.238" cy="370.088" rx="7.295" ry="4.865"/>
            <ellipse cx="229.635" cy="400.254" rx="14.106" ry="12.65"/>
            <ellipse cx="121.146" cy="333.595" rx="6.812" ry="8.274"/>
            <ellipse cx="93.41" cy="333.595" rx="10.214" ry="14.106"/>
            <ellipse cx="218.448" cy="493.663" rx="14.596" ry="11.677"/>
            <ellipse cx="247.157" cy="509.722" rx="6.328" ry="5.349"/>
            <ellipse cx="335.7" cy="478.095" rx="10.221" ry="10.704"/>
            <path d="M272.53 552.049c116.903-2.87 202.886-90.113 207.546-204.955 2.416-59.518-16.62-146.823-53.094-216.254C401.308 81.977 347.556 0 276.025 0c-71.531 0-125.283 81.977-150.956 130.839-36.475 69.425-60.944 155.615-57.69 215.094 6.214 113.614 86.339 209.032 205.15 206.116zm-50.15-4.936c-.852-.22-1.727-.379-2.57-.605 5.868.855 11.976 2.037 18.365 2.57-5.47-.459-10.704-1.219-15.796-1.965zm123.297-10.408c-21.721 5.258-45.635 14.338-72.85 14.338 27.252 0 51.192-9.092 72.936-14.367a.321.321 0 00-.086.029zm17.765-6.816c-26.225 8.391-56.087 18.797-90.634 18.797-11.065 0-22.577-.6-34.51-1.604 11.933 1.004 23.444 1.488 34.51 1.488 35.557 0 66.204-10.769 92.948-19.625-.753.342-1.554.606-2.314.944zm-87.029 15.658c-10.667 0-21.108-.783-31.279-2.27 69.291-1.897 126.082-26.944 169.27-56.278-35.643 32.853-83.755 58.548-137.99 58.548zm-76.2-508.09c21.586 15.972 49.489 25.922 68.7 25.922 28.218 0 51.095-11.604 60.466-18.299 6.07-4.333 9.384-15.542 7.677-19.122 13.213 9.284 28.287 24.993 43.146 43.69-1.033 13.395-13.456 30.249-32.341 35.757a197.78 197.78 0 01-27.932 6.138c-27.615-1.273-69.175-8.256-107.841-24.866-10.349-4.449-27.368-12.98-38.47-19.98 9.28-11.175 17.924-21.897 26.596-29.24zm-35.315 40.31c.594-.79 1.188-1.615 1.781-2.386.637-.826 1.267-1.61 1.897-2.417 1.01-1.291 2.02-2.588 3.023-3.825 40.38 25.47 94.927 40.054 130.411 44.032 6.426.722 12.418 1.193 17.846 1.438 3.225.147 6.303.233 9.1.233 2.791 0 5.332-.074 7.65-.208a82.138 82.138 0 005.422-.465c6.279-.783 11.316-1.114 15.252-1.114 20.434 0 10.984 8.898-9.412 8.898a277.836 277.836 0 01-37.314 2.54c-52.265 0-106.567-18.083-147.406-44.381.588-.796 1.17-1.567 1.75-2.344zm-37.095 60.851c.569.092 7.346 1.83 7.934 1.83 6.444 0 10.512-8.12 10.512-15.103 0-2.907-6.768-7.607-8.292-9.743 3.231-5.63 7.228-9.327 10.44-14.394 41.23 29.302 100.744 54.387 167.403 54.387 31.023 0 68.843-8.126 105.777-19.271 9.92 19.205 18.121 42.515 25.89 63.28-37.149 11.304-95.962 25.049-158.618 27.864-63.342-14.816-124.934-42.624-169.677-69.21 3.155-6.811 5.259-13.086 8.63-19.64zm-28.952 69.78c.679-1.927 1.334-3.85 2.038-5.77.71-1.94 1.457-3.874 2.185-5.808 4.553-12.081 9.48-24.064 14.792-35.747 42.896 25.435 100.992 51.713 159.866 66.774a526.97 526.97 0 0021.99 5.147 504.921 504.921 0 0022.938 4.266c24.002 3.893 48.709 6.108 73.898 6.108 20.043 0 40.369-1.389 60.863-4.394 5.803 19.572 10.387 38.862 13.508 57.099-31.494 10.992-92.578 29.059-164.824 33.826-36.897-5.275-71.108-15.6-102.442-30.912 37.546 12.73 80.044 19.994 129.45 22.59.936.049 1.818.072 2.625.072 3.012 0 5.416-.324 7.16-.961 3.562-1.303 3.947-3.77 3.947-4.768 0-5.984-11.504-9.217-22.332-9.217-1.621 0-137.785-3.39-226.127-96.994.153-.441.312-.875.465-1.31zm-4.174 12.229c.208-.631.404-1.261.618-1.897.177-.532.336-1.06.514-1.591a509.278 509.278 0 011.512-4.413c84.309 88.055 211.649 97.032 227.192 97.032 18.539 0 26.482 8.824 11.225 8.824-.764 0-1.584-.023-2.467-.066-60.924-3.207-109.773-13.691-150.533-30.748a294.285 294.285 0 01-8.366-3.635 312.484 312.484 0 01-12.748-6.162c-24.413-12.461-50.851-29.614-70.196-47.234 1.034-3.366 2.135-6.732 3.249-10.11zM76.323 346.514c0-16.535-6.44-35.287-2.806-55.172.098-.525.184-1.047.282-1.572-8.058-1.359.288-1.604.288-1.604 3.22-16.873 11.037-36.578 16.44-54.43 25.968 23.415 59.353 43.69 91.507 57.153 30.674 17.854 66.904 32.033 109.665 39.762 2.252.41 4.498.826 6.787 1.201 2.484.402 5.031.74 7.559 1.102 18.744 2.654 38.611 4.174 59.822 4.174 33.115 0 69.314-3.514 108.9-11.336.348 4.15.586 8.195.734 12.148-41.365 50.361-81.941 83.637-144.17 102.584-84.823-2.504-185.466-20.049-254.396-79.113-.361-4.921-.612-9.872-.612-14.897zm53.581 82.933s-5.539 32.393 74.542 32.393c8.789 0 18.611-.393 29.578-1.256 37.864-2.986 69.646-8.646 97.228-17.006 1.525-.459 3.055-.918 4.555-1.396 1.475-.471 2.912-.967 4.363-1.449 58.066-19.5 97.039-51.941 135.459-98.146.025 1.303.1 2.656.1 3.934 0 32.027-7.705 61.965-21.385 88.307-.281.539-.557 1.076-.844 1.615-.287.545-.562 1.102-.857 1.646-7 12.863-15.471 24.799-25.184 35.668-48.996 38.732-116.632 66.636-193.64 66.636-1.48 0-2.999-.072-4.492-.084-40.839-9.223-76.839-35.965-103.381-65.041-5.314-24.291 3.958-45.821 3.958-45.821z"/>
        </g>`,
    `<g class="egg-spot" transform="matrix(.23247 0 0 .22628 -1.175 1.165)">
            <ellipse cx="235.48" cy="166.231" rx="14.106" ry="11.187"/>
            <ellipse cx="259.807" cy="181.801" rx="6.322" ry="5.355"/>
            <ellipse cx="200.449" cy="66.977" rx="8.268" ry="7.295"/>
            <ellipse cx="221.857" cy="79.144" rx="5.355" ry="2.919"/>
            <ellipse cx="328.405" cy="81.573" rx="8.758" ry="10.22"/>
            <ellipse cx="399.925" cy="198.343" rx="8.273" ry="7.301"/>
            <path d="M215.529 262.077c8.599 0 15.569-5.881 15.569-13.134 0-4.235-2.412-7.956-6.096-10.361-2.631-1.714-5.887-2.779-9.474-2.779-2.307 0-4.48.447-6.444 1.212-5.374 2.068-9.119 6.616-9.119 11.928-.006 7.252 6.965 13.134 15.564 13.134z"/>
            <ellipse cx="234.507" cy="275.7" rx="7.295" ry="6.812"/>
            <ellipse cx="325.487" cy="272.291" rx="12.65" ry="13.133"/>
            <ellipse cx="356.136" cy="280.075" rx="5.355" ry="4.376"/>
            <ellipse cx="306.024" cy="354.519" rx="13.623" ry="11.677"/>
            <ellipse cx="336.19" cy="376.41" rx="4.865" ry="6.328"/>
            <ellipse cx="244.238" cy="370.088" rx="7.295" ry="4.865"/>
            <ellipse cx="229.635" cy="400.254" rx="14.106" ry="12.65"/>
            <ellipse cx="121.146" cy="333.595" rx="6.812" ry="8.274"/>
            <ellipse cx="93.41" cy="333.595" rx="10.214" ry="14.106"/>
            <ellipse cx="218.448" cy="493.663" rx="14.596" ry="11.677"/>
            <ellipse cx="247.157" cy="509.722" rx="6.328" ry="5.349"/>
            <ellipse cx="335.7" cy="478.095" rx="10.221" ry="10.704"/>
            <path d="M274.533 549.808c118.845 0 206.087-107.5 211.94-203.176 3.639-59.455-23.017-146.361-59.491-215.792C401.308 81.977 347.556 0 276.025 0c-71.531 0-125.283 81.977-150.956 130.839-36.475 69.425-60.982 155.532-57.577 215.007 5.032 87.901 88.197 203.962 207.04 203.962zm-52.542-8.433c-.851-.221-1.726-.379-2.57-.605 5.869.855 11.977 2.037 18.366 2.57-5.471-.459-10.704-1.219-15.796-1.965zm123.686-4.67c-21.721 5.258-46.023 8.6-73.238 8.6 27.252 0 51.58-3.354 73.324-8.629a.321.321 0 00-.086.029zm17.765-6.816c-26.225 8.391-56.475 13.059-91.022 13.059-11.065 0-22.577-.6-34.511-1.604 11.934 1.004 23.445 1.488 34.511 1.488 35.557 0 66.592-5.031 93.336-13.887-.753.342-1.554.606-2.314.944zm-87.417 17.344c-10.667 0-21.797-6.556-31.968-8.044 69.291-1.896 127.159-22.856 170.347-52.19-35.643 32.853-84.143 60.234-138.379 60.234zM202.857 38.629c21.585 15.973 46.845 24.75 66.056 24.75 28.218 0 51.095-11.604 60.466-18.299 6.07-4.333 11.471-14.077 9.764-17.657 13.213 9.284 27.51 22.534 42.37 41.23-1.034 13.396-14.767 31.244-33.652 36.752a197.78 197.78 0 01-27.932 6.138c-27.615-1.273-69.175-8.256-107.841-24.866-10.349-4.449-25.113-13.446-36.215-20.447 9.279-11.175 18.312-20.257 26.984-27.6zm-35.704 38.672c.594-.79 1.188-1.616 1.78-2.387.638-.826 1.268-1.609 1.898-2.417 1.01-1.29 2.02-2.588 3.023-3.825 40.379 25.471 92.672 40.521 128.156 44.499 6.426.722 12.418 1.193 17.846 1.438 3.225.147 6.303.233 9.1.233 2.791 0 5.332-.074 7.65-.208a82.138 82.138 0 005.422-.465c6.279-.783 11.316-1.114 15.252-1.114 20.434 0 10.984 8.898-9.412 8.898a277.836 277.836 0 01-37.314 2.54c-52.265 0-104.312-18.55-145.151-44.848.588-.796 1.169-1.567 1.75-2.344zM130.77 137.09c.57.092 1.132.19 1.72.19 6.444 0 11.677-5.66 11.677-12.644 0-2.907-.942-5.557-2.466-7.693 3.231-5.63 6.289-11.134 9.502-16.2 41.23 29.301 97.938 54.853 164.597 54.853 31.023 0 72.264-5.68 109.198-16.826 9.92 19.205 18.898 39.646 26.666 60.411-37.148 11.304-86.848 38.148-162.653 26.954-63.342-14.816-123.618-42.577-168.361-69.163 3.155-6.81 6.748-13.328 10.12-19.882zm-31.09 71.524c.678-1.928 1.333-3.85 2.037-5.77.71-1.94 1.457-3.875 2.185-5.809 4.553-12.08 10.13-25.565 15.442-37.248 42.896 25.435 99.514 53 158.388 68.061a526.97 526.97 0 0021.99 5.147 504.921 504.921 0 0022.938 4.266c24.002 3.893 48.709 6.108 73.898 6.108 20.043 0 47.024-2.556 67.518-5.561 5.803 19.572 10.387 38.862 13.508 57.099-31.494 10.992-99.233 30.226-171.479 34.993-36.897-5.275-71.108-15.6-102.442-30.912 37.546 12.73 80.044 19.994 129.45 22.59.936.049 1.818.072 2.625.072 3.012 0 5.416-.324 7.16-.961 3.562-1.303 3.947-3.77 3.947-4.768 0-5.984-11.504-9.217-22.332-9.217-1.621 0-136.957-3.175-225.299-96.78.153-.44.312-.875.465-1.31zm-4.175 12.228c.208-.63.404-1.26.618-1.897.177-.532.336-1.059.514-1.59a509.278 509.278 0 011.512-4.414c84.31 88.055 210.821 96.818 226.364 96.818 18.539 0 26.482 8.824 11.225 8.824-.764 0-1.584-.023-2.467-.066-60.924-3.207-109.773-13.691-150.533-30.748a294.285 294.285 0 01-8.366-3.635 312.484 312.484 0 01-12.748-6.162c-24.413-12.461-50.023-29.4-69.368-47.02 1.034-3.366 2.135-6.732 3.25-10.11zM76.323 346.514c-.26-38.552 4.085-75.637 15.033-112.564 25.967 23.415 58.524 43.476 90.678 56.939 30.674 17.854 66.904 32.033 109.665 39.762 2.252.41 4.498.826 6.787 1.201 2.484.402 5.031.74 7.559 1.102 18.744 2.654 38.611 4.174 59.822 4.174 33.115 0 73.79-3.514 113.377-11.336.348 4.15-.677 8.195-.529 12.148-41.365 50.361-85.155 83.637-147.384 102.584-84.823-2.504-185.466-20.049-254.396-79.113-.361-4.921-.612-9.872-.612-14.897zM204.446 461.84c8.789 0 18.611-.393 29.578-1.256 37.864-2.986 69.646-8.646 97.228-17.006 1.525-.459 3.055-.918 4.555-1.396 1.475-.471 2.912-.967 4.363-1.449 58.066-19.5 100.253-51.941 138.673-98.146.025 1.303.1 2.656.1 3.934 0 32.027-10.919 61.965-24.599 88.307-.281.539-.557 1.076-.844 1.615-.287.545-.562 1.102-.857 1.646-7 12.863-15.471 24.799-25.184 35.668-48.996 38.732-117.709 62.549-194.717 62.549-1.48 0-2.999-.072-4.492-.084-40.839-9.223-75.762-31.878-102.304-60.954-2.38-29.645 73.993-13.431 78.5-13.428z"/>
        </g>`,
    `<g class="egg-spot">
            <path d="M38.755 40.315s2.728 2.396.637 4.348c-2.093 1.952-4.273-1.065-3.455-3.993.818-2.927 1.455-4.435 1.455-4.435-6.002 1.952-2.092 14.639 2.546 9.228 4.639-5.414-1.183-5.148-1.183-5.148zM79.225 38.807c-2.183-1.331-5.73.266-6.91 3.815-1.183 3.55 1.545 7.72 5.365 5.945-4.548 0-3.911-7.452-.455-8.073 3.455-.621 1.546 1.774.455 3.195 3.819-.623 3.728-3.55 1.545-4.882zM52.852 57.794c-4.82 2.396-3.912 8.963 1.727 8.874.728.089 1.727 0-.091-.976-1.82-.977-5.456-4.172-.182-5.591 5.275-1.42 4.457.976 3.82 2.395-.636 1.421-.274 2.485-.274 2.485 4.094-3.636-.18-9.58-5-7.187zM35.21 105.708c2.91-2.04 4.637-.355 4.637-.355-1.364-4.527-6.639-3.463-7.184.887-.546 4.348 3.91 5.766 5.911 4.791 2.001-.976.728-.976-.636-.798-1.365.178-5.64-2.483-2.729-4.525zM84.83 100.197c-2.002.975-.729.975.636.798 1.363-.177 5.638 2.485 2.728 4.525-2.911 2.04-4.638.355-4.638.355 1.365 4.524 6.639 3.46 7.184-.888.545-4.346-3.91-5.767-5.91-4.79z"/>
            <path d="M63.245 2.434c-16.684 0-28.671 16.657-34.66 27.777-8.507 15.8-15.209 35.886-13.673 49.356 2.077 18.224 10.936 32.017 25.464 40.416.695.353 1.399.692 2.115 1.011.165.071.332.14.497.21.441.19.885.375 1.333.554 5.916 2.355 11.978 3.834 18.834 3.834s13.193-1.663 19.109-4.018c.448-.178.892-.364 1.333-.554.166-.07.333-.138.497-.21 16.87-7.367 27.395-23.951 27.67-41.612.212-13.555-4.799-33.189-13.307-48.988C92.467 19.09 79.93 2.434 63.245 2.434zm-1.571 4.787s-.364.088-1.456.088c-1.09 0-2.82 1.685-1.273 4.346 1.546 2.664 4.91.534 5.093-.798.18-1.331 1.182-.444 1.363 0 .183 2.928-5 5.59-7.639.975-2.636-4.613 2.366-7.718 3.912-4.611zm2.364 115.435c-4.365.443-4.274-4.436-.365-4.88 0 0-.636 1.953-.91 2.485-.273.532 1.273.978 1.273.978s4.367.973.002 1.417zm22.43-5.062c-9.392-.498-17.257-8.627-26.29-8.534-13.479.137-8.88 7.755-16.67 10.212-12.938-5.582-22.557-16.812-27.685-30.06.24.048.496.068.77.052C21.2 88.983 22.48 72.136 30.825 74.1c8.347 1.965.289 21.058 17.267 25.41 16.98 4.353 25.18-10.95 36.548-9.966 7.428.642 17.128 4.1 22.959 3.443-3.55 10.57-11.135 19.28-21.13 24.606zm-55.169-47.11c-2.91.709-5.274-.178-7.003-2.485-1.727-2.306 1.546-4.614 3.002-4.88 1.456-.266 1.09.621-.636 2.485-1.73 1.863-.185 4.88 4.637 4.88zm38.923 19.342c-.818.71-4.911 1.684-6.73-1.952-1.82-3.638 4.178-8.757 7.001-4.348.91 1.419 0 1.153-1.727 0s-3.82.976-3.82 3.283 3.002 3.815 5.276 3.017zm28.231-33.413c-7.914 3.65 11.08 18.812-1.583 22.323-12.663 3.51-8.2-13.337-16.98-15.162-8.777-1.824-15.828 17.27-27.915 14.32-12.088-2.948-3.022-17.689-9.497-22.463-6.475-4.773-6.475 2.667-13.094 2.106-3.236-.275-7.606-3.04-9.156-6.738 2.247-6.614 5.077-13.241 8.335-19.29.582-1.082 1.165-2.11 1.746-3.113.222-.062.438-.108.674-.2 6.475-2.528 9.914-15.163 18.98-12.496s-6.046 12.917-3.743 24.288c2.302 11.372 19.715 11.23 20.146-1.124.433-12.353-.72-23.444 6.187-23.866 6.906-.42 6.763 19.234 16.98 19.234 2.988 0 5.066-3.063 6.41-4.695 6.118 11.368 11.94 26.766 13.959 38.291-4.123-3.049-5.137-14.327-11.449-11.415z"/>
        </g>`,
    '<path class="egg-spot" d="M63.187.81c-16.35 0-28.638 17.91-34.506 29.08-8.338 15.87-15.439 35.786-14.545 49.374 1.585 24.082 21.885 46.908 49.051 46.908s48.447-20.638 48.447-46.984c0-13.617-5.603-33.43-13.94-49.299C91.825 18.72 79.538.81 63.187.81zM43.395 119.606c-8.1-6.974-22.392-21.252-27.463-42.637.15-3.515.64-7.385 1.43-11.456 5.82 35.759 43.511 53.595 45.002 58.597.012.038.03.166.037.202a2.366 2.366 0 00-.037-.158c-6.804-.112-13.203-1.912-18.916-4.503-.018-.017-.035-.03-.053-.045zm18.842 5.528h-.025c.014-.023.023-.05.034-.074l.039-.009c-.016.027-.031.056-.048.083zm15.6-3.056c-.027.022.165-.18.138-.157-3.628 1.153-7.616 1.95-11.614 2.205-.853.516-1.757.504-2.566.504-.55 0-1.054.256-1.466.367.012-.03.021-.062.031-.095.266-.07.577-.164.905-.27h.529c.808 0 1.712-.01 2.566-.527-1.05.067-2.104.025-3.175.025 1.07 0 2.126-.046 3.175-.113 3.35-2.024 5.867-6.731-1.72-13.988C53.75 99.61 25.183 86.386 19.335 57.154c1.945-7.1 5.007-15.489 8.222-22.33.474 13.783 6.85 30.937 20.844 43.844 23.427 21.603 38.053 36.2 29.437 43.41zm20.856-13.38c-2.655 3.047-6.636 6.11-10.063 8.35 4.215-4.44 6.055-12.33-3.546-22.698-14.001-15.122-44.24-35.282-48.722-58.802-.778-4.081-1.945-8.936-1.88-12.562C38.33 16.87 42.092 12.46 45.608 9.32c-2.034 6.805-.331 16.317 6.153 25.668 14.412 20.787 54.015 48.988 46.931 73.71zm12.181-28.905c0 5.667-2.418 10.897-4.343 15.835 1.655-13.69-8.246-27.115-28.73-50.28C61.483 26.892 53.8 13.244 55.201 4.086c2.129-.912 4.052-1.39 5.711-1.606 1.33 7.816 8.03 20.74 25.57 36.987 10.764 9.97 19.361 18.978 23.042 27.21.818 4.506 1.35 9.363 1.35 13.116zM84.522 23.227C75.65 13.732 70.421 7.511 67.518 2.86 77.088 5.35 86.306 10.386 96.8 30.36c1.493 2.841 3.572 7.47 4.868 10.505-4.263-5.295-11.59-11.692-17.147-17.639z"/>',
    '<path class="egg-spot" d="M63.3 1.17c-16.811 0-29.443 18.438-35.476 29.428-8.57 15.612-13.581 34.995-13.581 48.393 0 25.923 21.13 46.336 49.059 46.336 27.928 0 47.805-20.306 47.805-46.23 0-13.397-3.757-32.888-12.328-48.499C92.744 19.608 80.111 1.17 63.3 1.17zm0 1.395c6.121 0 13.698 4.2 18.553 8.237-14.646 5.785-30.725 5.456-39.9 2.528C47.42 7.986 55.968 2.565 63.3 2.565zm47.085 64.241c.663 3.545 1.089 6.91 1.231 9.97a44.156 44.156 0 010 4.575 43.287 43.287 0 01-1.029 7.455c-.57.238-1.135.464-1.7.691a41.637 41.637 0 01-8.002 15.886c-17.289 8.375-52.141 18.235-83.214-16.063a97.862 97.862 0 01-2.018-2.297 43.634 43.634 0 01-.728-7.917c0-.755.021-1.534.06-2.331.053-1.15.155-2.347.283-3.575l.165.13c-.114 1.18-.103 2.337-.103 3.446 0 .796-.06 1.576-.06 2.33 0 .755.06 1.502.06 2.245 0 1.934.156 3.825.496 5.674.67.786 1.257 1.552 1.93 2.297-.821-3.27-1.355-6.688-1.355-10.222 0-1.53-.45-3.042-.298-4.721 15.25 11.905 45.384 34.125 92.785 15.118.565-.227.956-.453 1.526-.691.548-2.409.856-4.897.856-7.455 0-.743.06-1.49.06-2.244 0-.754-.06-1.535-.06-2.33 0-3.042-.392-6.384-1.046-9.904.052-.023.11-.046.16-.067zm.606.532c-.03.01-.05.022-.08.033.001.011.003.02.006.032-11.602 4.596-53.088 16.484-95.096-1.188a102.18 102.18 0 011.3-5.71c27.63 7.305 55.476 9.174 89.87-8.396 1.748 5.208 3.109 10.377 4 15.229zM24.594 39.5a117.77 117.77 0 013.348-6.75c16.27 3.792 40.06 4.126 67.047-6.31a102.394 102.394 0 013.213 5.45c2.267 4.13 4.323 8.536 6.13 13.02-13.997 4.945-45.311 10.116-79.738-5.41z"/>',
    `<g class="egg-spot">
            <path d="M42.381 32.138c-1.862-.684-4.343 1.02-5.541 3.807-1.2 2.786-.661 5.6 1.2 6.284 1.86.684 4.343-1.02 5.542-3.807 1.198-2.786.661-5.6-1.2-6.284zM56.099 36.168c-2.133-.303-4.292 2.04-4.823 5.23-.53 3.19.767 6.023 2.899 6.326 2.132.303 4.291-2.039 4.822-5.229.531-3.19-.767-6.023-2.898-6.327zM86.034 32.138c-1.862.684-2.4 3.498-1.201 6.284 1.199 2.787 3.68 4.491 5.542 3.807 1.862-.684 2.4-3.498 1.201-6.284-1.199-2.787-3.68-4.491-5.542-3.807zM72.317 36.168c-2.131.304-3.43 3.135-2.898 6.327.531 3.19 2.69 5.532 4.822 5.229 2.133-.303 3.43-3.135 2.898-6.327-.53-3.191-2.69-5.532-4.822-5.229zM41.069 79.936c-1.976-.217-3.96 2.03-4.434 5.02-.473 2.991.744 5.59 2.719 5.807 1.974.217 3.96-2.03 4.433-5.02.474-2.99-.742-5.59-2.718-5.807zM27.883 71.405c-1.983-.135-3.869 2.194-4.212 5.202-.344 3.007.984 5.553 2.967 5.688 1.983.134 3.868-2.195 4.212-5.202.344-3.008-.986-5.554-2.967-5.688zM56.453 84.26c-2.153.084-3.842 2.773-3.775 6.006.068 3.233 1.868 5.785 4.02 5.7 2.154-.085 3.843-2.773 3.775-6.006-.067-3.233-1.867-5.786-4.02-5.7zM87.459 79.936c-1.975.217-3.192 2.818-2.719 5.807.474 2.989 2.46 5.237 4.434 5.02 1.976-.217 3.193-2.818 2.718-5.807-.473-2.99-2.457-5.237-4.433-5.02zM97.678 77.093c.344 3.007 2.229 5.336 4.212 5.202 1.983-.135 3.311-2.68 2.967-5.688-.344-3.008-2.23-5.337-4.212-5.202-1.982.134-3.31 2.68-2.967 5.688zM72.075 84.26c-2.153-.086-3.953 2.467-4.02 5.7-.068 3.233 1.62 5.921 3.774 6.006 2.153.085 3.953-2.467 4.02-5.7.069-3.233-1.621-5.923-3.774-6.007z"/>
            <path d="M63.527 1.075c-16.46 0-28.827 18.564-34.733 29.63a121.073 121.073 0 00-3.753 7.718c-.098.082-.189.223-.255.491l-.045.179c-6.096 13.884-9.971 29.262-9.971 40.435 0 26.102 21.416 46.63 48.757 46.546 24.775-.075 48.53-21.578 48.757-46.546.122-13.488-5.486-33.258-13.874-48.974C92.506 19.487 79.987 1.075 63.527 1.075zm.151 1.475c8.983 0 18.427 7.344 24.427 14.699-5.366 4.738-15.089 8.438-24.519 8.557-9.625.12-18.953-4.651-23.986-9.825 5.94-7.135 15.306-13.43 24.078-13.43zm-.151 121.446c-19.364 0-36.096-12.163-43.23-27.998 7.829 9.72 24.715 19.52 43.279 19.52 18.324 0 34.684-8.959 42.636-18.541-6.923 15.631-23.475 27.02-42.685 27.02zm38.72-61.7l4.153-8.472c.828 2.69 1.67 5.738 2.283 8.35-1.024 1.095-1.74 3.398-1.111 5.579.431 1.494 1.427 3.034 2.456 3.972.358 2.765.888 5.69.888 8.105 0 2.825-1.26 5.274-1.774 7.937-6.299 10.95-24.583 22.795-45.566 22.795-21.08 0-39.988-12.181-46.22-23.174-.494-2.616-1.066-5.09-1.066-7.86 0-2.465.197-5.147.57-7.974 1.037-.998 2.082-2.457 2.469-3.801.634-2.199-.097-4.592-1.14-5.68.817-3.487 1.39-7.455 2.588-11.056l5.832 11.279c.255.74 1.09 1.203 1.865 1.03l6.654-1.476c.776-.172 1.749.225 2.173.886l5.502 8.572a1.404 1.404 0 001.963.407l6.716-4.452c.66-.437 1.67-.365 2.258.162l9.448 8.472c.587.527 1.544.53 2.136.009l9.614-8.488c.591-.522 1.607-.593 2.27-.16l6.805 4.464c.661.434 1.544.25 1.97-.41l5.543-8.576c.427-.66 1.401-1.056 2.176-.884l6.678 1.478c.774.168 1.61-.293 1.867-1.034zm-3.808-9.601c-.26.74-1.102 1.225-1.885 1.084l-5.323-.96c-.782-.14-1.741.293-2.145.967l-3.702 6.215a1.47 1.47 0 01-1.977.517l-5.877-3.314c-.69-.39-1.733-.284-2.329.233l-9.799 8.491c-.595.517-1.56.513-2.151-.01l-9.586-8.47c-.591-.522-1.63-.63-2.32-.242l-5.877 3.315a1.47 1.47 0 01-1.977-.519l-3.703-6.215c-.401-.674-1.361-1.107-2.144-.966l-5.323.96c-.782.14-1.626-.345-1.885-1.084l-5.444-11.778c1.3-3.074 2.788-6.235 4.296-9.125.951-.747 2.414-1.285 2.958-2.184.69-1.14.56-2.948.627-4.167a87.66 87.66 0 014.47-6.606c4.794 6.135 15.033 11.683 26.24 11.683 10.768 0 21.55-4.456 26.875-10.219 1.226 1.679 2.134 3.594 3.168 5.239-.112 1.374.277 3.272 1.124 4.672.789 1.302 2.11 2.514 3.326 3.172a124.128 124.128 0 014.346 9.419z"/>
        </g>`,
    `<g class="egg-spot" transform="matrix(.23542 0 0 .22728 -.969 1.67)">
            <ellipse cx="269.74" cy="104.67" rx="11.897" ry="16.169"/>
            <ellipse cx="109.885" cy="255.069" rx="10.067" ry="10.374"/>
            <ellipse cx="173.031" cy="270.932" rx="10.979" ry="12.203"/>
            <circle cx="256.318" cy="279.782" r="13.728"/>
            <ellipse cx="328.926" cy="275.204" rx="11.285" ry="12.204"/>
            <ellipse cx="385.365" cy="263.301" rx="10.985" ry="10.679"/>
            <ellipse cx="443.633" cy="247.138" rx="10.68" ry="12.815"/>
            <ellipse cx="116.599" cy="426.215" rx="11.897" ry="15.557"/>
            <ellipse cx="218.185" cy="446.956" rx="13.421" ry="15.558"/>
            <ellipse cx="343.571" cy="439.33" rx="11.897" ry="15.258"/>
            <ellipse cx="443.333" cy="417.672" rx="7.932" ry="11.291"/>
            <path d="M273.057 0c-70.778 0-122.373 76.64-147.771 124.982-29.056 60.924-62.074 159.143-59.872 218.029 4.08 109.096 90.066 203.115 207.649 203.115 117.584 0 204.702-115.153 206.515-204.054 1.202-58.917-27.641-146.779-57.15-212.628C397.018 81.102 343.834 0 273.057 0zM129.543 128.091c4.976-9.474 11.077-20.276 18.165-31.45-.24 1.186-.404 2.422-.404 3.726 0 7.417 4.094 13.427 9.149 13.427 5.055 0 9.149-6.01 9.149-13.427s-4.094-13.42-9.15-13.42c-1.021 0-1.988.3-2.906.758 7.289-10.826 15.465-21.75 24.456-31.965 6.07 10.251 19.063 34.946 25.544 35.809 9.149 1.224 53.69-43.317 69.554-42.705 15.863.606 45.147 39.045 56.744 36.61 11.592-2.442 8.489-45.436 14.59-49.096.478-.288 1.322-.367 2.319-.361 13.115 11.157 25 24.547 35.472 38.427-1.12-.532-2.338-.845-3.616-.845-5.393 0-9.762 5.19-9.762 11.592 0 6.4 4.369 11.59 9.762 11.59 5.392 0 9.76-5.188 9.76-11.59 0-.961-.127-1.88-.311-2.772 11.842 16.708 21.615 33.586 28.966 47.583 1.542 2.938 3.035 5.942 4.535 8.94-1.824 6.892-4.37 12.339-8.177 12.76-10.985 1.225-53.642-24.117-64.622-22.287-10.98 1.83-64.063 57.351-75.661 57.962-11.591.606-59.187-54.303-72.002-55.527-12.815-1.218-50.643 45.766-61.622 44.548-4.737-.526-15.612-15.877-20.966-25.852 3.544-7.637 7.203-15.147 11.034-22.435zm342.379 208.564c.067 2.29.17 4.615.17 6.83 0 48.084-19.089 90.753-48.343 124.003-9.302-7.771-19.284-15.061-24.345-15.35-10.979-.605-57.963 58.576-70.166 60.404-12.209 1.83-44.541-42.1-54.915-42.1-10.373 0-50.031 42.713-61.01 43.324-10.986.605-57.357-59.799-66.506-61.01-4.798-.643-14.443 6.768-23.868 15.367-25.379-28.578-43.165-64.488-47.382-104.734 6.867-8.715 15.876-17.407 20.607-17.407 9.762 0 50.031 61.016 65.894 62.234 15.863 1.217 40.882-50.645 54.915-50.037 14.033.611 64.676 55.525 78.097 56.139 13.428.605 53.69-57.969 62.234-61.018 8.543-3.047 45.147 42.1 56.133 41.488 10.979-.611 39.657-65.895 46.977-67.111 2.73-.458 7.983 4.045 11.508 8.978zm-4.634-64.883c-151.226 66.99-317.58 37.062-390.5 5.71C81.41 254.867 88.098 231 96.44 207.26c34.223 13.317 97.021 30.722 175.443 30.722 78.097 0 140.277-20.323 174.708-36.835 8.67 23.733 15.685 47.742 20.698 70.625z"/>
        </g>`,
    '<path class="egg-spot" d="M61.892 123.597c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zM107.53 98.87c-5.809 5.263-12.104 9.592-19.742 12.159-1.843.618-2.627-2.31-.8-2.926 8.99-3.02 16.267-8.508 22.483-15.45a45.794 45.794 0 01-1.94 6.217zm2.594-29.112c.75 4.411 1.16 8.57 1.16 12.273 0 1.306-.066 2.592-.168 3.868-8.319 12.886-22.583 21.18-39.21 21.264-4.843.024-4.84-7.56 0-7.585 18.545-.095 33.88-12.313 38.218-29.82zm-7.511-26.22a144.69 144.69 0 012.95 8.16c-16.047 17.408-41.682 21.95-63.335 10.126-4.262-2.327-.47-8.875 3.791-6.548 19.716 10.766 43.202 5.612 56.594-11.738zm-12.18 33.292c-3.004 0-3.004-6.068 0-6.068 4.506 0 4.506 6.068 0 6.068zm-10.515 5.057c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zm-13.52 1.516c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zm13.52-38.93c4.506 0 4.506 6.066 0 6.066-3.004 0-3.004-6.067 0-6.067zm.374-36.032a51.532 51.532 0 014.284 4.256c-2.857 2.724-6.423 4.643-10.363 5.415-3.785.742-5.399-5.105-1.597-5.85 2.965-.58 5.569-1.878 7.676-3.821zm-.374 20.863c-4.506 0-4.506-6.066 0-6.066 3.004 0 3.004 6.066 0 6.066zM50.761 5.183c.696.196 1.399.37 2.111.513 3.207.639 16.318 2.212 19.47-2.56.85.392 1.68.827 2.486 1.304-2.084 3.173-6.677 4.57-10.83 4.925-5.653.482-11.02-.308-16.122-2.08a36.332 36.332 0 012.885-2.102zM61.892 19.95c-4.506 0-4.506-6.067 0-6.067 3.005 0 3.005 6.067 0 6.067zM39.51 15.902c8.533 6.87 18.806 9.936 29.71 8.974 2.788-.246 2.765 4.306 0 4.55-11.863 1.047-23.088-2.501-32.37-9.953a78.876 78.876 0 012.66-3.57zm-5.613 8.049c14.332 10.682 32.796 13.816 49.991 8.403 2.782-.876 3.963 3.517 1.2 4.388-18.404 5.794-38.091 2.339-53.491-8.898a105.886 105.886 0 012.3-3.893zm-4.62 8.25C40.312 40.972 53.68 45.351 67.91 44.904c3.877-.121 3.865 5.946 0 6.067-15.125.475-29.417-4.173-41.3-13.203.85-1.897 1.745-3.751 2.667-5.569zm-9.47 24.081c8.081 10.025 21.692 14.659 34.08 17.295 1.895.403 1.253 3.367-.646 2.964-12.477-2.655-25.89-7.346-34.403-16.76.307-1.17.63-2.337.968-3.499zm-4.165 22.003C28.32 86.51 42.837 92.115 57.92 93.318c17.233 1.374 36.935-.255 44.503-18.59.734-1.778 3.643-1 2.898.807-6.955 16.85-23.091 21.609-39.99 21.202-17.816-.43-34.804-5.602-49.82-14.959.005-1.122.056-2.295.132-3.493zm27.813 32.91c2.59.438 2.67 3.27 1.269 4.844 2.773.652 5.578 1.201 8.4 1.726 2.046.38 1.176 3.587-.858 3.208-8.042-1.496-14.683-3.464-21.82-7.866-.427-.262-.82-.53-1.227-.796-4.75-5.365-10.392-11.288-12.237-18.466 6.58 8.788 15.15 15.434 26.473 17.35z"/>',
    '<path class="egg-spot" d="M105.568 53.032c.12.79.139 1.573.057 2.346-.148 1.372-.596 2.605-1.33 3.624-1.087 1.507-2.505 2.24-4.068 2.427a4.075 4.075 0 01-1.973-.26c-1.248-.478-2.195-1.325-2.966-2.466a7.18 7.18 0 01-1.224-3.64c-.04-.742.068-1.44.362-2.104.539-1.21 1.67-2.096 3.045-2.155.838-.034 1.648.238 2.376.867.496.427.871.97 1.138 1.596.093.22.16.445.175.683.05.748-.392 1.397-1.042 1.496-.614.094-1.24-.322-1.52-.986-.038-.09-.075-.183-.122-.267-.145-.265-.359-.396-.625-.4a.949.949 0 00-.45.101c-.425.217-.652.574-.65 1.105 0 .413.077.812.236 1.198.346.84.877 1.452 1.62 1.862.344.188.706.286 1.09.283.202-.001.396-.044.592-.097a3.297 3.297 0 001.312-.681c.656-.562 1.074-1.347 1.26-2.298.196-1.003.111-2.037-.22-3.06a6.478 6.478 0 00-.847-1.711c-.713-1.022-1.626-1.74-2.689-2.087-1.3-.422-2.504-.342-3.608.097-.32.128-.623.29-.906.483-.51.345-.932.777-1.31 1.256-.83 1.053-1.29 2.232-1.428 3.583-.118 1.146.013 2.238.323 3.348a9.94 9.94 0 00.61 1.626c.73 1.521 1.69 2.772 3.076 3.729a7.606 7.606 0 003.699 1.348c.569.052 1.147.02 1.728-.087a6.924 6.924 0 002.496-.99c1.89-1.209 3.316-3.157 3.958-5.76.05-.208.086-.42.124-.631.447 1.579.862 3.166 1.245 4.76-.377.694-.792 1.36-1.278 1.963-1.192 1.478-2.597 2.536-4.106 3.2-1.16.51-2.32.751-3.467.766a8.222 8.222 0 01-1.26-.08 9.1 9.1 0 01-1.18-.243c-.743-.207-1.446-.5-2.116-.864-1.57-.85-2.814-2.008-3.855-3.432a14.198 14.198 0 01-2.325-4.903 12.596 12.596 0 01-.284-1.438 12.575 12.575 0 01-.12-1.536 10.844 10.844 0 01.532-3.568 9.976 9.976 0 011.687-3.125c.694-.873 1.527-1.59 2.574-2.094a6.948 6.948 0 011.458-.509 7.574 7.574 0 012.823-.101 7.926 7.926 0 013.371 1.341c1.598 1.106 2.804 2.688 3.513 4.6.233.61.39 1.242.488 1.885zM48.65 7.772c.266-.6.718-1.236 1.346-1.87 3.46-2.352 6.607-3.61 9.276-4.227a23.43 23.43 0 018.17.136c2.372.462 4.368 1.268 5.86 2.248 2.758 1.841 3.191 3.704 1.836 4.426-.833.475-2.168.562-4.04.475-1.276-.057-2.645-.194-4.111-.33a18.632 18.632 0 01-1.534-.197c-1.596-.288-2.852-.796-2.824-1.423.025-.586 1.347-1.114 3.186-1.036.246.012.494.026.734.034.746.025 1.219-.057 1.436-.268.126-.125.162-.269.09-.429-.217-.486-.992-.935-2.457-1.191a14.09 14.09 0 00-3.482-.161c-2.54.202-4.403.91-5.56 1.79-.537.409-.799.814-.813 1.189-.008.198.09.37.203.54.276.415.753.758 1.454 1.05 1.17.488 2.722.77 4.563 1.075 1.941.323 3.92.631 5.982 1.029 1.236.238 2.437.493 3.619.75 2.304.502 4.264.991 5.955 1.14 2.058.188 3.45-.02 4.178-.962.208-.273.338-.61.378-1.008.034-.332-.005-.709-.102-1.112 1.994 1.807 4.058 3.992 6.169 6.63-.22.68-.583 1.198-1.059 1.544-.415.304-.907.473-1.468.539-.966.115-2.086-.076-3.387-.442-1.503-.42-3.151-1.048-5.067-1.759-2.84-1.046-5.779-2.005-9.07-2.695a61.427 61.427 0 00-3.181-.578 69.678 69.678 0 00-3.906-.476c-2.302-.218-4.432-.311-6.396-.484-2.89-.24-4.855-.654-5.865-1.861-.434-.516-.494-1.219-.113-2.085zm-5.43 3.907c.073.38.198.726.376 1.03.29.498.742.856 1.3 1.12.83.39 1.867.561 3.104.61 2.932.115 6.292-.201 10.177-.08a61.17 61.17 0 015.552.41c.879.108 1.754.24 2.626.397 1.103.198 2.189.43 3.27.718 1.391.374 2.758.832 4.092 1.37 1.052.424 2.067.893 3.047 1.332.645.288 1.28.594 1.907.918 2.325 1.193 4.318 2.495 6.15 3.4 1.693.841 3.127 1.226 4.433.96a3.874 3.874 0 001.219-.47c.429-.252.816-.615 1.155-1.098.171-.247.328-.53.47-.838a102.238 102.238 0 014.147 6.774c-.33.893-.707 1.689-1.122 2.343-.57.918-1.197 1.562-1.841 1.977-1.986.747-3.914.22-5.51-.773-1.49-1.131-2.963-2.8-4.696-4.584-1.41-1.462-2.94-2.888-4.64-4.116a35.453 35.453 0 00-4.584-2.8 26.92 26.92 0 00-5.41-2.058c-.802-.21-1.612-.39-2.428-.54a38.275 38.275 0 00-3.081-.438 41.428 41.428 0 00-2.88-.187c-3.51-.104-6.83.255-10.105.907-2.386.474-4.531 1.06-6.482 1.377-1.495.242-2.789.279-3.878-.116a3.492 3.492 0 01-1.092-.636 3.673 3.673 0 01-.579-.654c1.803-2.408 3.574-4.473 5.304-6.255zM34.52 22.85c.125.138.259.268.4.389.35.298.733.514 1.12.706a5.096 5.096 0 002.037.52 6.888 6.888 0 001.749-.143c.974-.198 1.998-.59 3.119-1.092 1.553-.698 3.204-1.565 5.01-2.321a30.323 30.323 0 014.813-1.598 19.387 19.387 0 011.793-.35c.762-.105 1.276.077 1.52.483.313.547-.075 1.271-.77 1.8a2.354 2.354 0 00-.106.088c-.202.108-.398.22-.594.34-.016.002-.033.004-.047.01a3.611 3.611 0 01-.586.193c-.712.182-1.412.404-2.098.664-2.026.767-3.961 1.904-5.772 3.298-2.13 1.628-3.949 3.5-5.729 4.962-1.427 1.171-2.778 1.73-4.171 1.974-1.07.114-1.127.101-1.7.052-.264-.068-.534-.006-.797-.078-.464-.122-.928-.29-1.382-.613-.698-.496-1.369-1.221-1.973-2.224a106.056 106.056 0 014.164-7.06zM19.112 58.372c.272-.277.508-.614.705-1.023.174-.365.284-.755.326-1.155a1.3 1.3 0 00-.19-.85c.294-1.004.493-2.058.81-3.054.69.463 1.308 1.29 1.54 2.202.175.697.192 1.403.08 2.131a7.898 7.898 0 01-.247 1.112 7.455 7.455 0 01-1.16 2.327c-.768 1.026-1.649 1.736-2.744 2.042-.014.005-.029.003-.044.006.288-1.25.596-2.497.924-3.738zm-1.46 6.214a5.663 5.663 0 002.44-.818c1.26-.76 2.196-1.868 2.966-3.275.268-.491.497-1.002.683-1.528.377-1.056.6-2.12.624-3.27.028-1.358-.233-2.586-.817-3.74-.265-.525-.572-1.01-.963-1.42a5.056 5.056 0 00-.774-.654c-.057-.037-.117-.061-.175-.095.323-.945.655-1.887.998-2.825.268.147.61.337.85.524.822.64 1.443 1.462 1.932 2.42.532 1.042.89 2.14 1.083 3.322.2 1.219.21 2.402.068 3.603-.06.506-.148 1.008-.262 1.505-.109.472-.235.934-.39 1.386-.58 1.699-1.36 3.17-2.462 4.54-1.021 1.269-2.185 2.245-3.589 2.876-.6.269-1.219.464-1.862.57a6.2 6.2 0 01-.95.076c.176-1.049.378-2.116.6-3.197zm-1.355 8.803c.105-1.076.243-2.182.403-3.307.186.005.373.011.557.005.356-.014.712-.037 1.06-.087 2.067-.3 3.76-1.343 5.277-2.88 1.153-1.166 2.045-2.475 2.794-3.939.3-.589.569-1.194.803-1.811.244-.637.455-1.285.633-1.942a17.2 17.2 0 00.636-4.745c-.013-1.88-.297-3.675-1.021-5.44a9.662 9.662 0 00-1.263-2.213 8.576 8.576 0 00-.864-.966 9.362 9.362 0 00-.886-.751 9.394 9.394 0 00-.953-.621c.37-.96.75-1.914 1.14-2.865.352.184.775.432 1.093.658.196.14.376.298.565.447.04.032.085.064.127.095.301.29.602.582.903.87.03.04.06.08.094.116.266.27.493.57.716.874.346.475.651.977.913 1.5 1.196 2.408 1.623 4.892 1.707 7.49a21.403 21.403 0 01-.564 5.602 22.643 22.643 0 01-.462 1.673 22.314 22.314 0 01-1.956 4.46c-1.524 2.609-3.508 5.033-6.165 6.55a9.555 9.555 0 01-1.816.785 8.612 8.612 0 01-1.111.27c-.215.036-.43.07-.646.108-.038.005-.074.02-.11.03l-1.002.071c-.101-.007-.202-.021-.302-.021-.1 0-.2-.012-.3-.016zm17.34 40.672c-.02.022-.06.023-.08.042a45.521 45.521 0 01-6.603-6.128c.71.118 1.511.492 2.443 1.086.83.528 1.651 1.17 2.51 1.88.3.25.587.506.852.794.829.898 1.274 1.859.877 2.326zm9.526 5.068c-.025.194-.09.375-.172.55a48.278 48.278 0 01-5.208-2.72c.004-.02.012-.034.014-.053.097-.452.039-.958-.184-1.531-.37-.955-1.093-1.93-2.015-3.006-.974-1.136-2.019-2.225-3.131-3.358a79.192 79.192 0 00-1.995-1.974c-1.303-1.238-2.478-2.276-3.677-2.946-1.31-.735-2.415-1.002-3.389-.72a43.48 43.48 0 01-3.08-5.364c.36-.237.736-.422 1.134-.502.483-.098.978-.08 1.487.032.877.19 1.756.641 2.68 1.286 1.067.745 2.117 1.694 3.247 2.84 1.674 1.691 3.262 3.443 5.046 5.282.574.588 1.142 1.176 1.719 1.76.71.718 1.412 1.42 2.107 2.122 1.24 1.251 2.393 2.413 3.374 3.606 1.452 1.746 2.235 3.236 2.043 4.696zm10.29 2.402a5.025 5.025 0 01-.666 1.313 50.407 50.407 0 01-5.63-1.535c.178-.283.315-.589.406-.908.15-.521.133-1.06.004-1.605-.192-.807-.623-1.605-1.238-2.423-1.464-1.944-3.44-3.72-5.597-5.792-1.022-.98-2.044-1.95-3.077-2.96-.485-.473-.966-.95-1.443-1.43a77.103 77.103 0 01-1.787-1.846 65.996 65.996 0 01-2.206-2.51c-.568-.676-1.116-1.354-1.684-1.988-.374-.417-.745-.837-1.112-1.26-1.368-1.57-2.598-3.04-3.906-4.162-1.21-1.038-2.402-1.673-3.669-1.83a4.928 4.928 0 00-1.255.002c-.47.06-.937.207-1.401.448a4.91 4.91 0 00-.726.469 43.185 43.185 0 01-1.604-5.854c.433-.397.873-.74 1.311-1.013.723-.458 1.43-.72 2.108-.831.437-.071.87-.114 1.27-.032.054.012.111-.001.168-.002l1.31.345c.05.028.1.061.153.087.234.114.475.205.704.339.49.289.954.656 1.402 1.083 1.163 1.112 2.165 2.602 3.224 4.272.865 1.365 1.732 2.783 2.692 4.153a149.963 149.963 0 002.499 3.46 42.515 42.515 0 002.893 3.49c.438.472.883.933 1.335 1.389a81.2 81.2 0 001.716 1.682 90.53 90.53 0 001.636 1.512c2.016 1.82 4.043 3.452 6.16 5.124 1.544 1.216 2.99 2.349 4.162 3.566.899.933 1.566 1.877 1.874 2.907.114.382.168.772.164 1.17-.006.397-.07.791-.19 1.17zm10.806.326c-.251.685-.657 1.405-1.178 2.132a53.151 53.151 0 01-5.868-.399c.647-.992.95-1.99.957-2.908a5.972 5.972 0 00-.128-1.218 6.009 6.009 0 00-.69-1.851 7.364 7.364 0 00-.946-1.303c-.6-.664-1.343-1.267-2.201-1.849-1.196-.809-2.551-1.54-3.937-2.329a54.613 54.613 0 01-3.5-2.13 21.21 21.21 0 01-1.188-.841c-.485-.376-.659-.798-.545-1.234.16-.579.824-.89 1.537-.847l.113.003c.178.045.357.087.537.125.011.009.019.017.032.021.158.062.3.142.44.233.499.327 1.01.637 1.533.928 1.541.865 3.226 1.602 4.981 2.28 2.057.8 4.08 1.48 5.826 2.375 1.399.715 2.538 1.55 3.354 2.604.07.088.161.165.243.246l.583.986c.009.047.01.096.026.137.088.24.177.48.262.719.15.422.237.876.264 1.358.045.842-.107 1.766-.507 2.762zm19.873-35.936c-.082.902-.213 1.8-.393 2.69-.547 2.703-1.504 5.215-2.922 7.5-2.477 3.985-5.803 6.712-9.974 8.166a16.44 16.44 0 01-2.805.703c-.612.098-1.225.247-1.844.26-.082.002-.164.092-.244.092H63.9c-.087 0-.172-.086-.258-.092-.388-.031-.778-.081-1.164-.128a17.877 17.877 0 01-2.464-.493 16.808 16.808 0 01-5.847-2.875c-1.462-1.11-2.734-2.45-3.863-3.962a16.113 16.113 0 01-2.286-4.268 24.412 24.412 0 01-1.38-7.482 20.572 20.572 0 01.63-5.487c.809-3.12 2.255-5.825 4.342-8.106 1.524-1.664 3.277-2.946 5.262-3.84a14.113 14.113 0 014.742-1.215 14.015 14.015 0 013.595.202 14.84 14.84 0 013.286 1.03c2.484 1.104 4.546 2.826 6.149 5.197 1.726 2.553 2.674 5.433 2.88 8.61.056.847.037 1.693-.04 2.537a16.14 16.14 0 01-.447 2.617c-.523 2.018-1.4 3.822-2.66 5.396a13.154 13.154 0 01-4.369 3.532c-1.541.784-3.155 1.213-4.852 1.252a11.192 11.192 0 01-5.802-1.483 10.33 10.33 0 01-3.352-3.027c-1.347-1.903-2.052-4.078-2.225-6.475-.055-.77-.036-1.54.041-2.308a13.13 13.13 0 01.575-2.76c.52-1.593 1.306-2.996 2.423-4.16 1.645-1.72 3.622-2.58 5.865-2.724a6.11 6.11 0 012.835.5c1.793.768 3.147 2.1 4.092 3.945a8.965 8.965 0 01.834 5.738c-.208 1.117-.645 2.105-1.35 2.942-1.294 1.534-3.305 2.23-5.169 1.768-1.138-.282-2.075-.93-2.78-1.968-.48-.705-.765-1.504-.905-2.37a2.62 2.62 0 01-.006-.912c.178-.96.963-1.69 1.9-1.67.885.018 1.654.728 1.823 1.701.024.131.044.264.08.392.108.398.352.637.716.725.216.054.442.054.658.002.666-.162 1.115-.588 1.287-1.332.133-.58.142-1.166.018-1.75-.267-1.27-.916-2.244-1.908-2.938a3.175 3.175 0 00-1.508-.569 3.542 3.542 0 00-.853.036 4.98 4.98 0 00-1.956.678c-1.014.615-1.743 1.525-2.243 2.667-.529 1.204-.74 2.48-.688 3.814.03.8.16 1.578.4 2.33.467 1.467 1.256 2.667 2.438 3.528 1.441 1.05 3.035 1.516 4.757 1.472a7.224 7.224 0 001.491-.198c.887-.211 1.715-.589 2.506-1.074 1.736-1.064 3.033-2.585 3.83-4.605.674-1.708.884-3.498.728-5.345a12.402 12.402 0 00-.539-2.725c-.81-2.558-2.22-4.606-4.29-6.066-1.67-1.18-3.511-1.8-5.483-1.963a9.843 9.843 0 00-2.47.117 10.695 10.695 0 00-3.458 1.218c-2.588 1.45-4.5 3.636-5.767 6.515a14.91 14.91 0 00-1.153 4.299c-.084.703-.12 1.41-.11 2.118.013.896.1 1.784.241 2.666.183 1.148.454 2.268.837 3.353.303.857.67 1.68 1.16 2.43.322.493.67.97 1.04 1.431 1.379 1.712 3.004 3.048 4.911 3.958 1.765.84 3.617 1.244 5.53 1.33.632.028 1.264.02 1.895-.02a14.461 14.461 0 002.096-.291c1.362-.289 2.67-.78 3.88-1.458 2.708-1.517 4.806-3.749 6.31-6.662 1.337-2.594 2-5.4 2.097-8.376a22.672 22.672 0 00-.197-3.821 21.065 21.065 0 00-.812-3.613c-.936-2.912-2.412-5.438-4.481-7.521-2.732-2.753-5.962-4.288-9.621-4.738a23.378 23.378 0 00-1.864-.14 20.186 20.186 0 00-3.047.096c-.785.085-1.56.216-2.329.41a14.465 14.465 0 00-3.532 1.393c-1.566.872-2.938 2.03-4.155 3.42-1.05 1.2-1.952 2.524-2.74 3.941-.286.513-.55 1.041-.822 1.563-.348.666-.868 1.04-1.564 1.09-.924.067-1.736-.622-1.953-1.58-.014-.045-.048-.095-.048-.145v-.746c0-.016.025-.032.028-.049.042-.226.124-.437.225-.64.355-.72.734-1.427 1.137-2.122 1.17-2.01 2.524-3.847 4.143-5.437 1.898-1.866 4.045-3.26 6.452-4.162 3.056-.938 6.07-1.64 8.43-1.44.388.029.778.157 1.166.186.682.048 1.36.19 2.034.309 1.175.21 2.327.551 3.454.978 5.168 1.958 9.34 6.044 11.738 11.477 1.32 2.994 2.014 6.173 2.144 9.496a26.51 26.51 0 01-.09 3.515zm24.524-16.533c-1.764 1.572-3.66 2.566-5.556 3.037a11.568 11.568 0 01-4.341.23c-.117-.015-.239-.016-.357-.026l-1.167-.232c-.04-.016-.082-.036-.126-.05l-.746-.21a11.642 11.642 0 01-1.27-.444 12.552 12.552 0 01-2.036-1.07c-2.93-1.934-4.958-4.659-6.422-7.493a20.984 20.984 0 01-1.739-4.745 19.406 19.406 0 01-.484-3.106c-.1-1.405-.053-2.806.19-4.283.425-2.565 1.237-4.964 2.943-7.163.378-.484.8-.934 1.26-1.344.301-.267.604-.529.951-.754.045-.03.083-.067.124-.1l1.17-.72.163-.073c.238-.117.471-.244.718-.351.545-.236 1.11-.425 1.688-.566 1.538-.378 3.24-.432 5.085-.053 1.297.267 2.603.754 3.885 1.423a139.234 139.234 0 011.85 4.652 8.684 8.684 0 00-1.12-1c-.413-.3-.842-.578-1.287-.832-1.64-.93-3.32-1.41-4.937-1.45a8.988 8.988 0 00-4.015.836c-.39.179-.769.38-1.134.603a9.258 9.258 0 00-2.897 2.815c-1.072 1.638-1.631 3.372-1.882 5.238-.224 1.663-.147 3.22.154 4.814.128.686.295 1.364.5 2.031.2.656.44 1.3.718 1.929.698 1.573 1.58 3.016 2.788 4.36 1.59 1.768 3.448 3.077 5.838 3.705.403.106.819.186 1.234.257.681.115 1.375.182 2.089.178a10.054 10.054 0 001.679-.14 9.438 9.438 0 002.725-.908c1.26-.642 2.436-1.592 3.48-2.809.481-.56.919-1.171 1.323-1.815.27 1.27.52 2.53.731 3.763a16.752 16.752 0 01-1.77 1.866z"/>',
];
EggSpots.customPattern = {
    // If you don't have the software, use https://www.svgviewer.dev/ and https://yqnn.github.io/svg-path-editor/ to edit and preview your custom patterns
    'Phione': `<g>
                <path fill="deepskyblue" d="M111.5 76.2a48.2 47.7 0 11-96.3 0c0-26.3 21.5-74.7 48.1-74.7s48.2 48.4 48.2 74.7z"/>
                <path fill="lightskyblue" d="M 63 115 C 42 115 24 99 23 77 c 0 -14 5.6 -33 14 -47 C 43 20 50 10 64 10 c 12.5 0 21 13 26 20 A 109 109 0 0 1 103 76 c -1 25 -18 39 -40 39 z M 63.3 3 C 48 3 36.3 20 30.6 30 a 105 105 0 0 0 -14 47 a 46.7 46.7 0 0 0 93.4 0 c 0 -13.5 -5.5 -32 -14 -47 C 90.5 20 78.8 3 63.4 3 z"/>
                <circle filter="url(#b)" fill="lightsalmon" fill-opacity=".7" cx="63.35" cy="75" r="30"/>
                <circle fill="crimson" cx="63.35" cy="75" r="23"/>
                <circle fill="gold" cx="63.35" cy="44" r="9"/>
                <circle fill="gold" cx="46.35" cy="49" r="9"/>
                <circle fill="gold" cx="80.35" cy="49" r="9"/>
                <circle fill="orange" cx="63.35" fill-opacity=".2" cy="44" r="9"/>
                <circle fill="orange" cx="46.35" fill-opacity=".2" cy="49" r="9"/>
                <circle fill="orange" cx="80.35" fill-opacity=".2" cy="49" r="9"/>
            </g>`,
    'Manaphy': `<g>
                <path fill="deepskyblue" d="M111.5 76.2a48.2 47.7 0 11-96.3 0c0-26.3 21.5-74.7 48.1-74.7s48.2 48.4 48.2 74.7z"/>
                <path fill="lightskyblue" d="M 63 115 C 42 115 24 99 23 77 c 0 -14 5.6 -33 14 -47 C 43 20 50 10 64 10 c 12.5 0 21 13 26 20 A 109 109 0 0 1 103 76 c -1 25 -18 39 -40 39 z M 63.3 3 C 48 3 36.3 20 30.6 30 a 105 105 0 0 0 -14 47 a 46.7 46.7 0 0 0 93.4 0 c 0 -13.5 -5.5 -32 -14 -47 C 90.5 20 78.8 3 63.4 3 z"/>
                <circle filter="url(#b)" fill="lightsalmon" fill-opacity=".7" cx="63.35" cy="75" r="30"/>
                <circle fill="crimson" cx="63.35" cy="75" r="25"/>
                <circle fill="gold" cx="33" cy="44" r="7"/>
                <circle fill="gold" cx="46" cy="54" r="7"/>
                <circle fill="gold" cx="63.35" cy="58" r="7"/>
                <circle fill="gold" cx="80.7" cy="54" r="7"/>
                <circle fill="gold" cx="93.7" cy="44" r="7"/>
                <circle fill-opacity=".7" fill="gold" cx="83" cy="32" r="7"/>
                <circle fill-opacity=".7" fill="gold" cx="63.35" cy="28" r="7"/>
                <circle fill-opacity=".7" fill="gold" cx="44" cy="32" r="7"/>
            </g>`,
};
const HatcheryHelperSkills = [
    'energy',
    'efficiency',
    'accuracy',
    'cost',
];
const HatcheryHelperCalcHatchBonus = (hatched) => Math.min(50, Math.floor(Math.sqrt(hatched / 50) * 10) / 10);
const HatcheryHelperMinBonusMap = {};
// Generate our bonus amounts map
(() => {
    let bonus = -1;
    for (let hatched = 0; bonus < 50; hatched++) {
        const b = HatcheryHelperCalcHatchBonus(hatched);
        if (b > bonus) {
            HatcheryHelperMinBonusMap[b] = hatched;
            bonus = b;
        }
    }
})();
class HatcheryHelper {
    // public level: number;
    // public experience: number;
    constructor(name, cost, stepEfficiencyBase, // 1 - 200
    attackEfficiencyBase, unlockRequirement) {
        this.name = name;
        this.cost = cost;
        this.stepEfficiencyBase = stepEfficiencyBase;
        this.attackEfficiencyBase = attackEfficiencyBase;
        this.unlockRequirement = unlockRequirement;
        this.trainerSprite = 0;
        this.hired = ko.observable(false).extend({ boolean: null });
        this.sortOption = ko.observable(SortOptions.id).extend({ numeric: 0 });
        this.sortDirection = ko.observable(false).extend({ boolean: null });
        this.hatched = ko.observable(0).extend({ numeric: 0 });
        this.hatchBonus = ko.observable(0).extend({ numeric: 1 });
        this.stepEfficiency = ko.observable(0).extend({ numeric: 1 });
        this.attackEfficiency = ko.observable(0).extend({ numeric: 1 });
        this.prevBonus = ko.observable(0).extend({ numeric: 0 });
        this.nextBonus = ko.observable(1).extend({ numeric: 0 });
        this.categories = ko.observableArray([]);
        this.useHatcheryFilters = ko.observable(true);
        SeededRand.seed(parseInt(this.name, 36));
        this.trainerSprite = SeededRand.intBetween(0, 118);
        this.tooltip = ko.pureComputed(() => `<strong>${this.name}</strong><br/>
            Cost: <img src="assets/images/currency/${GameConstants.Currency[this.cost.currency]}.svg" width="20px">&nbsp;${(this.cost.amount).toLocaleString('en-US')}/hatch<br/>
            Step Efficiency: ${this.stepEfficiency()}%<br/>
            Attack Efficiency: ${this.attackEfficiency()}%<br/>
            Hatched: ${this.hatched().toLocaleString('en-US')}<br/>`);
        // Update our bonus values
        this.updateBonus();
        // Update our bonus values whenever our hatched amount changes
        this.hatched.subscribe((hatched) => {
            if (hatched >= this.nextBonus() || hatched <= this.prevBonus()) {
                this.updateBonus();
            }
        });
    }
    updateBonus() {
        this.hatchBonus(HatcheryHelperCalcHatchBonus(this.hatched()));
        this.stepEfficiency(this.stepEfficiencyBase + this.hatchBonus());
        this.attackEfficiency(this.attackEfficiencyBase + this.hatchBonus());
        this.prevBonus(HatcheryHelperMinBonusMap[this.hatchBonus()] || 0);
        this.nextBonus(HatcheryHelperMinBonusMap[((this.hatchBonus() * 10) + 1) / 10] || 1);
    }
    isUnlocked() {
        var _a, _b;
        return (_b = (_a = this.unlockRequirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    // String for currency in Notifications and Logs
    currencyString() {
        switch (GameConstants.Currency[this.cost.currency]) {
            case 'money':
                return 'Pokédollars';
            default:
                return `${GameConstants.camelCaseToString(GameConstants.Currency[this.cost.currency])}s`;
        }
    }
    hire() {
        // Check the player has enough Currency to hire this Hatchery Helper
        if (!App.game.wallet.hasAmount(this.cost)) {
            Notifier.notify({
                title: `[HATCHERY HELPER] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
                message: `You don't have enough ${this.currencyString()} to hire me...\nCost: <img src="./assets/images/currency/${GameConstants.Currency[this.cost.currency]}.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
                type: NotificationConstants.NotificationOption.warning,
                timeout: 30 * GameConstants.SECOND,
            });
            return;
        }
        // Hatchery helper is hired
        this.hired(true);
        Notifier.notify({
            title: `[HATCHERY HELPER] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: 'Thanks for hiring me,\nI won\'t let you down!',
            type: NotificationConstants.NotificationOption.success,
            timeout: 30 * GameConstants.SECOND,
            setting: NotificationConstants.NotificationSetting.Hatchery.hatchery_helper,
        });
    }
    fire() {
        Notifier.notify({
            title: `[HATCHERY HELPER] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: 'Thanks for the work.\nLet me know when you\'re hiring again!',
            type: NotificationConstants.NotificationOption.info,
            timeout: 30 * GameConstants.SECOND,
            setting: NotificationConstants.NotificationSetting.Hatchery.hatchery_helper,
        });
        this.hired(false);
        return;
    }
    charge() {
        // Charge the player if they can afford it, otherwise notify that they cannot
        if (!App.game.wallet.loseAmount(this.cost)) {
            Notifier.notify({
                title: `[HATCHERY HELPER] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
                message: `It looks like you are a little short on ${this.currencyString()} right now...\nLet me know when you're hiring again!\nCost: <img src="./assets/images/currency/${GameConstants.Currency[this.cost.currency]}.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
                type: NotificationConstants.NotificationOption.danger,
                timeout: 30 * GameConstants.MINUTE,
            });
            this.hired(false);
            App.game.logbook.newLog(LogBookTypes.OTHER, createLogContent.unableToPayHatcheryHelper({
                currency: this.currencyString(),
                name: this.name,
            }));
            return;
        }
    }
    toJSON() {
        return {
            name: this.name,
            hired: this.hired(),
            sortOption: this.sortOption(),
            sortDirection: this.sortDirection(),
            hatched: this.hatched(),
            categories: this.categories(),
            useHatcheryFilters: this.useHatcheryFilters(),
        };
    }
    fromJSON(json) {
        var _a;
        if (!json) {
            return;
        }
        this.hired(json.hired || false);
        this.sortOption(json.sortOption || 0);
        this.sortDirection(json.sortDirection || false);
        this.hatched(json.hatched || 0);
        this.categories(json.categories || []);
        this.useHatcheryFilters((_a = json.useHatcheryFilters) !== null && _a !== void 0 ? _a : true);
    }
}
class HatcheryHelpers {
    static add(helper) {
        this.list.push(helper);
    }
    constructor(hatchery) {
        this.hatchery = hatchery;
        this.MAX_HIRES = 3;
        this.requirement = new HatchRequirement(100);
        this.available = ko.pureComputed(() => HatcheryHelpers.list.filter(f => f.isUnlocked()));
        this.hired = ko.pureComputed(() => HatcheryHelpers.list.filter(f => f.hired()));
        this.canHire = ko.pureComputed(() => this.hired().length < Math.min(this.MAX_HIRES, this.hatchery.eggSlots));
    }
    isUnlocked() {
        return this.requirement.isCompleted();
    }
    addSteps(amount, multiplier) {
        // Add steps and attack based on efficiency
        this.hired().forEach((helper, index) => {
            // Calculate how many steps should be applied
            const steps = Math.max(1, Math.round(amount * (helper.stepEfficiency() / 100)));
            // Add steps to the egg we are managing
            let egg = this.hatchery.eggList[index]();
            egg.addSteps(steps, multiplier, true);
            // Check if the egg is ready to hatch
            if (egg.canHatch()) {
                const hatched = egg.hatch(helper.attackEfficiency(), true);
                if (hatched) {
                    // Reset egg
                    this.hatchery.eggList[index](new Egg());
                    egg = this.hatchery.eggList[index]();
                }
            }
            // Check if egg slot empty
            if (egg.isNone()) {
                // Check if there's a pokemon we can chuck into an egg
                const regionalAttackDebuff = App.game.challenges.list.regionalAttackDebuff.active() ? Settings.getSetting('breedingRegionalAttackDebuffSetting').value : GameConstants.Region.none;
                const compare = PartyController.compareBy(helper.sortOption(), helper.sortDirection(), regionalAttackDebuff);
                const categories = helper.categories();
                const useHatcheryFilters = helper.useHatcheryFilters();
                const pokemon = App.game.party.caughtPokemon.reduce((best, pokemon) => {
                    if (useHatcheryFilters && !pokemon.isHatchableFiltered()) {
                        return best;
                    }
                    if (!pokemon.isHatchable()) {
                        return best;
                    }
                    if (categories.length && !categories.some((cat) => pokemon.category.includes(cat))) {
                        return best;
                    }
                    if (best === null) {
                        return pokemon;
                    }
                    return compare(best, pokemon) <= 0 ? best : pokemon;
                }, null);
                if (pokemon) {
                    this.hatchery.gainPokemonEgg(pokemon, index);
                    // Charge the player when we put a pokemon in the hatchery
                    helper.charge();
                    // Increment our hatched counter
                    GameHelper.incrementObservable(helper.hatched, 1);
                }
            }
        });
    }
    toJSON() {
        return this.available().map(f => f.toJSON());
    }
    fromJSON(json) {
        if (!json || !json.length) {
            return;
        }
        HatcheryHelpers.list.forEach(f => {
            const data = json === null || json === void 0 ? void 0 : json.find(_f => _f.name == f.name);
            if (data) {
                f.fromJSON(data);
            }
        });
    }
}
HatcheryHelpers.list = [];
// Note: Mostly Gender-neutral names used as the trainer sprite is (seeded) randomly generated, or check the sprite
HatcheryHelpers.add(new HatcheryHelper('Sam', new Amount(1000, GameConstants.Currency.money), 10, 10, new HatchRequirement(100)));
HatcheryHelpers.add(new HatcheryHelper('Blake', new Amount(10000, GameConstants.Currency.money), 10, 20, new HatchRequirement(500)));
HatcheryHelpers.add(new HatcheryHelper('Jasmine', new Amount(50000, GameConstants.Currency.money), 15, 50, new UniqueItemOwnedRequirement('HatcheryHelperJasmine', 'purchase', 'Purchased in the Hoenn region.')));
HatcheryHelpers.add(new HatcheryHelper('Leslie', new Amount(777777, GameConstants.Currency.money), 150, 50, new UniqueItemOwnedRequirement('HatcheryHelperLeslie', 'purchase', 'Obtain and redeem a code from the PokéClicker Discord server.')));
HatcheryHelpers.add(new HatcheryHelper('Parker', new Amount(1000, GameConstants.Currency.dungeonToken), 15, 25, new HatchRequirement(1000)));
HatcheryHelpers.add(new HatcheryHelper('Dakota', new Amount(10000, GameConstants.Currency.dungeonToken), 50, 50, new UniqueItemOwnedRequirement('HatcheryHelperDakota', 'purchase', 'Purchased in the Johto region.')));
HatcheryHelpers.add(new HatcheryHelper('Cameron', new Amount(75, GameConstants.Currency.farmPoint), 75, 75, new UniqueItemOwnedRequirement('HatcheryHelperCameron', 'purchase', 'Purchased in the Hoenn region.')));
HatcheryHelpers.add(new HatcheryHelper('Justice', new Amount(10, GameConstants.Currency.questPoint), 100, 50, new QuestRequirement(200)));
HatcheryHelpers.add(new HatcheryHelper('Carey', new Amount(20, GameConstants.Currency.questPoint), 50, 125, new UniqueItemOwnedRequirement('HatcheryHelperCarey', 'purchase', 'Purchased in the Hoenn region.')));
HatcheryHelpers.add(new HatcheryHelper('Aiden', new Amount(20, GameConstants.Currency.diamond), 100, 100, new UndergroundLayersMinedRequirement(100)));
HatcheryHelpers.add(new HatcheryHelper('Kris', new Amount(40, GameConstants.Currency.diamond), 100, 150, new UniqueItemOwnedRequirement('HatcheryHelperKris', 'purchase', 'Purchased in the Kanto region.')));
HatcheryHelpers.add(new HatcheryHelper('Noel', new Amount(25, GameConstants.Currency.battlePoint), 100, 200, new UniqueItemOwnedRequirement('HatcheryHelperNoel', 'purchase', 'Purchased in the Hoenn region.')));
class Discord {
    get enabled() {
        // This was done like this so es/tslint doesn't throw errors
        try {
            return !!JSON.parse('true');
        }
        catch (e) {
            return false;
        }
    }
    constructor() {
        this.saveKey = 'discord';
        this.defaults = {
            ID: null,
        };
        this.ID = ko.observable(null);
        this.codes = [
            new DiscordPokemonCode(pokemonMap['Unown (D)'], 700, 'An alternate form of Unown.'),
            new DiscordPokemonCode(pokemonMap['Unown (I)'], 700, 'An alternate form of Unown.'),
            new DiscordPokemonCode(pokemonMap['Unown (S)'], 700, 'An alternate form of Unown.'),
            new DiscordPokemonCode(pokemonMap['Unown (C)'], 700, 'An alternate form of Unown.'),
            new DiscordPokemonCode(pokemonMap['Unown (O)'], 700, 'An alternate form of Unown.'),
            new DiscordPokemonCode(pokemonMap['Unown (R)'], 700, 'An alternate form of Unown.'),
            new DiscordPokemonCode(pokemonMap['Surfing Pikachu'], 1500, 'It\'s a Pikachu on a surfboard!'),
            new DiscordPokemonCode(pokemonMap['Rotom (Discord)'], 10000, 'A Discord-style Rotom!'),
            new DiscordItemCode('HatcheryHelperLeslie', 'Someone to hire in your Daycare.'),
        ];
        // Check if code provided by Discord, which means the user has logged in, and we need to get their details
        const search = new URLSearchParams(location.search);
        const discordID = search.get('discordID');
        if (discordID) {
            this.ID(discordID);
            Notifier.notify({
                message: 'Successfully logged in to Discord!',
                type: NotificationConstants.NotificationOption.success,
                timeout: GameConstants.MINUTE,
            });
            window.history.replaceState('', '', `${location.origin + location.pathname}`);
        }
    }
    login() {
        // This will be updated from our config values
        location.href = `https://discord.pokeclicker.com/proxy?action=login&redirect_uri=${encodeURIComponent(location.origin + location.pathname)}`;
    }
    logout(shouldConfirm = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (shouldConfirm) {
                if (!(yield Notifier.confirm({
                    title: 'Unlink Discord?',
                    message: 'Are you sure?',
                    type: NotificationConstants.NotificationOption.warning,
                    confirm: 'Continue',
                }))) {
                    return;
                }
            }
            this.ID(this.defaults.id);
            // Save now
            Save.store(player);
        });
    }
    calcCode(code) {
        const discordID = +this.ID() || false;
        if (!discordID) {
            return;
        }
        // reverse the string (for names that are similar - forms)
        const codeSeed = code.name.split('').reverse()
            // map to the character code
            .map(l => l.charCodeAt(0))
            // multiply the numbers (should be random enough)
            .reduce((s, b) => s * (b / 10), 1);
        SeededRand.seed(discordID + codeSeed);
        const arr = [];
        for (let i = 0; i < 14; i++) {
            let int;
            while (int == undefined || int.length != 1) {
                int = SeededRand.intBetween(0, 35).toString(36);
            }
            arr.push(int);
        }
        arr[4] = '-';
        arr[9] = '-';
        return arr.join('').toUpperCase();
    }
    findCodeMatch(enteredCode) {
        return this.codes.find(code => enteredCode.toUpperCase() == this.calcCode(code));
    }
    enterCode(enteredCode) {
        // Discord integration disabled
        // Unless dev, so we can enter codes anyway
        if (!this.enabled && !GameHelper.isDevelopmentBuild()) {
            Notifier.notify({
                message: 'Discord integration not enabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // User not logged in to Discord
        if (!this.ID()) {
            Notifier.notify({
                message: 'You must sign in to Discord before attempting to use this code',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // Try find a matching code
        const code = this.findCodeMatch(enteredCode);
        // No code found
        if (!code) {
            Notifier.notify({
                message: `Invalid code ${enteredCode}`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // Claim the code
        code.claim();
        return true;
    }
    loadCodes(codes) {
        codes.forEach(code => {
            const c = this.codes.find(c => c.name == code.name);
            if (c) {
                c.claimed = code.claimed;
            }
        });
    }
    fromJSON(json) {
        if (!json || !json.ID) {
            return;
        }
        this.ID(json.ID || this.defaults.ID);
        this.loadCodes(json.codes || []);
    }
    toJSON() {
        return {
            ID: this.ID(),
            codes: this.codes.filter(c => c.claimed),
        };
    }
}
class DiscordCode {
    // Image, Price and Description fields are not currently used on the website,
    // the data is there so the Discord bot and website can share the same dataset
    constructor(name, image, price, description, claimFunction = () => true) {
        this.name = name;
        this.image = image;
        this.price = price;
        this.description = description;
        this.claimFunction = claimFunction;
        this.claimed = false;
    }
    claim() {
        if (this.claimed) {
            Notifier.notify({
                title: `[Discord Code] ${this.name}`,
                message: 'Already claimed!',
                type: NotificationConstants.NotificationOption.warning,
            });
            return;
        }
        if (this.claimFunction()) {
            this.claimed = true;
            Notifier.notify({
                title: `[Discord Code] ${this.name}`,
                message: 'Successfully claimed!',
                type: NotificationConstants.NotificationOption.success,
            });
        }
    }
    toJSON() {
        return {
            name: this.name,
            image: this.image,
            price: this.price,
            description: this.description,
            claimed: this.claimed,
        };
    }
}
class DiscordItemCode extends DiscordCode {
    constructor(itemName, description, amount = 1) {
        const item = ItemList[itemName];
        const claimFunction = () => {
            item.gain(amount);
            // Notify that the code was activated successfully
            Notifier.notify({
                message: `You obtained ${amount > 1 ? `${amount}×` : ''}${item.displayName}!`,
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
            });
            return true;
        };
        super(item.displayName, item.image, item.basePrice, description, claimFunction);
    }
}
class DiscordPokemonCode extends DiscordCode {
    constructor(pokemon, price, description) {
        const image = `assets/images/pokemon/${pokemon.id}.png`;
        const claimFunction = () => {
            if (pokemon.nativeRegion > player.highestRegion()) {
                Notifier.notify({
                    message: 'You need to progress further to unlock this pokemon.',
                    type: NotificationConstants.NotificationOption.warning,
                });
                return false;
            }
            const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SHOP);
            App.game.party.gainPokemonById(pokemon.id, shiny, true);
            // Notify that the code was activated successfully
            Notifier.notify({
                message: `You obtained a${shiny ? ' shiny' : ''} ${pokemon.name}!`,
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
            });
            return true;
        };
        super(pokemon.name, image, price, description, claimFunction);
    }
}
class DiscordRichPresence {
    static replaceDiscordText(input) {
        let output = input;
        this.outputOptions.forEach((option) => {
            try {
                let value = option.value();
                if (typeof value == 'number') {
                    value = value.toLocaleString('en-US');
                }
                output = output.replace(new RegExp(`{${option.key}}`, 'g'), value);
            }
            catch (e) {
                output = output.replace(new RegExp(`{${option.key}}`, 'g'), option.default);
            }
        });
        return output.replace(/<\/?br>/g, ' ');
    }
    static getRichPresenceData() {
        var _a, _b, _c, _d;
        let nextArea;
        if (player == undefined) {
            nextArea = 'Loading Game';
        }
        else if (player.route) {
            nextArea = Routes.getName(player.route, player.region);
        }
        else if (player.town) {
            nextArea = player.town.name;
        }
        else {
            nextArea = 'Unknown Area';
        }
        const discordRPCValues = {
            enabled: (player != undefined ? Settings.getSetting('discord-rp.enabled').observableValue() : false),
            line1: this.replaceDiscordText(Settings.getSetting('discord-rp.line-1').value || '  '),
            line2: this.replaceDiscordText(Settings.getSetting('discord-rp.line-2').value || '  '),
        };
        // Reset timer if area has changed
        if (Settings.getSetting('discord-rp.timer-reset').observableValue() && this.currentArea != nextArea) {
            this.startTimestamp = Date.now();
        }
        this.currentArea = nextArea;
        // Set our "start" timestamp
        if (Settings.getSetting('discord-rp.timer').observableValue()) {
            discordRPCValues.startTimestamp = this.startTimestamp;
        }
        // Our Discord images
        switch (Settings.getSetting('discord-rp.large-image').observableValue()) {
            case 'current-environment':
                discordRPCValues.largeImageKey = `background-${(_a = MapHelper.calculateBattleCssClass()) !== null && _a !== void 0 ? _a : 'grass'}`;
                break;
            default:
                discordRPCValues.largeImageKey = Settings.getSetting('discord-rp.large-image').observableValue();
        }
        discordRPCValues.largeImageText = this.currentArea;
        let smallImage = Settings.getSetting('discord-rp.small-image').observableValue();
        if (smallImage === 'cycle') {
            smallImage = this.cycleOptions[++this.cycleSmallImageIndex % this.cycleOptions.length];
        }
        if (App.game != undefined) {
            switch (smallImage) {
                case 'trainer':
                    discordRPCValues.smallImageKey = `trainer-${App.game.profile.trainer()}`;
                    discordRPCValues.smallImageText = this.replaceDiscordText('Total Attack: {attack}');
                    break;
                case 'egg':
                    discordRPCValues.smallImageKey = smallImage;
                    discordRPCValues.smallImageText = this.replaceDiscordText('Total Hatched: {hatched}');
                    break;
                case 'pokeball':
                    discordRPCValues.smallImageKey = smallImage;
                    discordRPCValues.smallImageText = this.replaceDiscordText('Shinies: {caught_shiny}/{caught} ✨');
                    break;
                default:
                    discordRPCValues.smallImageKey = smallImage.toLowerCase();
                    discordRPCValues.smallImageText = `${GameConstants.camelCaseToString(smallImage)}: ${(_d = (_c = (_b = App.game.wallet.currencies)[GameConstants.Currency[smallImage]]) === null || _c === void 0 ? void 0 : _c.call(_b).toLocaleString('en-US')) !== null && _d !== void 0 ? _d : '0'}`;
            }
        }
        else {
            discordRPCValues.smallImageKey = smallImage;
            discordRPCValues.smallImageText = '';
        }
        return discordRPCValues;
    }
}
DiscordRichPresence.focusedElement = document.createElement('input');
DiscordRichPresence.clientVersion = '';
DiscordRichPresence.startTimestamp = Date.now();
DiscordRichPresence.currentArea = '';
DiscordRichPresence.cycleSmallImageIndex = 0;
DiscordRichPresence.cycleOptions = [
    'money',
    'dungeonToken',
    'questPoint',
    'farmPoint',
    'diamond',
    'battlePoint',
    'trainer',
    'egg',
    'pokeball',
];
DiscordRichPresence.outputOptions = [
    {
        key: 'caught',
        value: () => App.game.party.caughtPokemon.length,
        default: 0,
    },
    {
        key: 'caught_shiny',
        value: () => App.game.party.caughtPokemon.filter(p => p.shiny).length,
        default: 0,
    },
    {
        key: 'hatched',
        value: () => App.game.statistics.totalPokemonHatched(),
        default: 0,
    },
    {
        key: 'hatched_shiny',
        value: () => App.game.statistics.totalShinyPokemonHatched(),
        default: 0,
    },
    {
        key: 'sparkle',
        value: () => '✨',
        default: '✨',
    },
    {
        key: 'pokerus',
        value: () => App.game.party.caughtPokemon.filter(p => p.pokerus).length,
        default: 0,
    },
    {
        key: 'pokerus_resistant',
        value: () => App.game.party.caughtPokemon.filter(p => p.pokerus >= 3).length,
        default: 0,
    },
    {
        key: 'attack',
        value: () => App.game.party.calculatePokemonAttack(PokemonType.None, PokemonType.None, true, undefined, true, false, WeatherType.Clear, true, true),
        default: 0,
    },
    {
        key: 'regional_attack',
        value: () => App.game.party.calculatePokemonAttack(),
        default: 0,
    },
    {
        key: 'current_region',
        value: () => GameConstants.camelCaseToString(GameConstants.Region[player.region]),
        default: 'Unknown Region',
    },
    {
        key: 'current_subregion',
        value: () => { var _a; return (_a = SubRegions.getSubRegionById(player.region, player.subregion)) === null || _a === void 0 ? void 0 : _a.name; },
        default: 'Unknown Subregion',
    },
    {
        key: 'current_route',
        value: () => player.route ? Routes.getName(player.route, player.region) : player.town ? player.town.name : 'Unknown Area',
        default: 'Unknown Area',
    },
    {
        key: 'current_area',
        value: () => player.route ? Routes.getName(player.route, player.region) : player.town ? player.town.name : 'Unknown Area',
        default: 'Unknown Area',
    },
    {
        key: 'current_route_stats',
        value: () => player.route ? App.game.statistics.routeKills[player.region][player.route]() : player.town.dungeon ? App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(player.town.name)]() : player.town.gym ? App.game.statistics.gymsDefeated[GameConstants.getGymIndex(player.town.name)]() : 0,
        default: 0,
    },
    {
        key: 'current_area_stats',
        value: () => player.route ? App.game.statistics.routeKills[player.region][player.route]() : player.town.dungeon ? App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(player.town.name)]() : player.town.gym ? App.game.statistics.gymsDefeated[GameConstants.getGymIndex(player.town.name)]() : 0,
        default: 0,
    },
    {
        key: 'money',
        value: () => App.game.wallet.currencies[GameConstants.Currency.money](),
        default: 0,
    },
    {
        key: 'dungeon_tokens',
        value: () => App.game.wallet.currencies[GameConstants.Currency.dungeonToken](),
        default: 0,
    },
    {
        key: 'diamonds',
        value: () => App.game.wallet.currencies[GameConstants.Currency.diamond](),
        default: 0,
    },
    {
        key: 'farm_points',
        value: () => App.game.wallet.currencies[GameConstants.Currency.farmPoint](),
        default: 0,
    },
    {
        key: 'quest_points',
        value: () => App.game.wallet.currencies[GameConstants.Currency.questPoint](),
        default: 0,
    },
    {
        key: 'battle_points',
        value: () => App.game.wallet.currencies[GameConstants.Currency.battlePoint](),
        default: 0,
    },
    {
        key: 'achievement_bonus',
        value: () => AchievementHandler.achievementBonusPercent(),
        default: '0%',
    },
    {
        key: 'clicks',
        value: () => App.game.statistics.clickAttacks(),
        default: 0,
    },
    {
        key: 'time_played',
        value: () => GameConstants.formatSecondsToTime(App.game.statistics.secondsPlayed()),
        default: '0 Seconds',
    },
    {
        key: 'underground_levels_cleared',
        value: () => App.game.statistics.undergroundLayersMined(),
        default: 0,
    },
    {
        key: 'underground_items_found',
        value: () => App.game.statistics.undergroundItemsFound(),
        default: 0,
    },
    {
        key: 'underground_trades',
        value: () => App.game.statistics.undergroundTrades(),
        default: 0,
    },
    {
        key: 'quests_completed',
        value: () => App.game.statistics.questsCompleted(),
        default: 0,
    },
    {
        key: 'frontier_stages_cleared',
        value: () => App.game.statistics.battleFrontierTotalStagesCompleted(),
        default: 0,
    },
    {
        key: 'frontier_highest_cleared',
        value: () => App.game.statistics.battleFrontierHighestStageCompleted(),
        default: 0,
    },
    {
        key: 'total_berries_obtained',
        value: () => App.game.statistics.totalBerriesObtained(),
        default: 0,
    },
    {
        key: 'total_manual_harvests',
        value: () => App.game.statistics.totalManualHarvests(),
        default: 0,
    },
    {
        key: 'total_berries_harvested',
        value: () => App.game.statistics.totalBerriesHarvested(),
        default: 0,
    },
    {
        key: 'total_berries_replanted',
        value: () => App.game.statistics.totalBerriesReplanted(),
        default: 0,
    },
    {
        key: 'total_berries_mutated',
        value: () => App.game.statistics.totalBerriesMutated(),
        default: 0,
    },
    {
        key: 'total_mulches_used',
        value: () => App.game.statistics.totalMulchesUsed(),
        default: 0,
    },
    {
        key: 'total_shovels_used',
        value: () => App.game.statistics.totalShovelsUsed(),
        default: 0,
    },
    {
        key: 'berry_daily_deal_trades',
        value: () => App.game.statistics.berryDailyDealTrades(),
        default: 0,
    },
];
class DungeonBossPokemon {
    constructor(name, baseHealth, level, options) {
        this.name = name;
        this.baseHealth = baseHealth;
        this.level = level;
        this.options = options;
    }
}
class DungeonTrainer extends Trainer {
    constructor(trainerClass, team, options, name, subTrainerClass) {
        super(trainerClass, team, name, subTrainerClass);
        this.options = options;
    }
}
///<reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="DungeonBossPokemon.ts"/>
///<reference path="../../declarations/requirements/GymBadgeRequirement.d.ts"/>
///<reference path="../../declarations/requirements/MultiRequirement.d.ts"/>
///<reference path="../../declarations/requirements/OneFromManyRequirement.d.ts"/>
///<reference path="../../declarations/requirements/SeededDateRequirement.d.ts"/>
///<reference path="../../declarations/requirements/DayOfWeekRequirement.d.ts"/>
///<reference path="../../declarations/requirements/ObtainedPokemonRequirement.d.ts"/>
///<reference path="../../declarations/utilities/SeededDateRand.d.ts"/>
///<reference path="./DungeonTrainer.ts"/>
// These should add up to 1 if you want to keep it easy to judge chances
const baseLootTierChance = {
    common: 0.75,
    rare: 0.2,
    epic: 0.04,
    legendary: 0.0099,
    mythic: 0.0001,
};
const nerfedLootTierChance = {
    common: 0.75,
    rare: 0.24,
    epic: 0.009,
    legendary: 0.00099,
    mythic: 0.00001,
};
// Should sum to 0
const lootRedistribution = {
    common: -1,
    rare: 0.33,
    epic: 0.4,
    legendary: 0.2,
    mythic: 0.07,
};
// Max amount to take from common and redistibute @ 500 clears
const lootRedistibuteAmount = 0.15;
// Gain a gym badge after first completion of a dungeon
// Used for trials pre 10.16, could be useful for something else?
const DungeonGainGymBadge = (gym) => {
    // Check that the player hasn't already obtained the badge
    if (!App.game.badgeCase.hasBadge(gym.badgeReward)) {
        // Set the set to our expected gym
        // This updates our modal values
        GymRunner.gymObservable(gym);
        GymBattle.gym = gym;
        // Give the player the badge
        gym.firstWinReward();
    }
};
class Dungeon {
    constructor(name, enemyList, lootTable, baseHealth, bossList, tokenCost, difficultyRoute, // Closest route in terms of difficulty, used for egg steps, dungeon tokens etc.
    rewardFunction = () => { }, optionalParameters = {}) {
        this.name = name;
        this.enemyList = enemyList;
        this.lootTable = lootTable;
        this.baseHealth = baseHealth;
        this.bossList = bossList;
        this.tokenCost = tokenCost;
        this.difficultyRoute = difficultyRoute;
        this.rewardFunction = rewardFunction;
        this.optionalParameters = optionalParameters;
        this.mimicList = [];
        this.lootFilter = (loot, onlyDebuffable) => ((!loot.requirement || loot.requirement.isCompleted()) && (!ItemList[loot.loot] || (ItemList[loot.loot].isAvailable() && !ItemList[loot.loot].isSoldOut()))) && !(onlyDebuffable && loot.ignoreDebuff);
        this.isThereQuestAtLocation = ko.pureComputed(() => {
            return App.game.quests.currentQuests().some(q => q instanceof DefeatDungeonQuest && q.dungeon == this.name);
        });
        // Keep a list of mimics to use with getCaughtMimics()
        Object.entries(this.lootTable).forEach(([_, itemList]) => {
            itemList.forEach((loot) => {
                const mimic = pokemonMap[loot.loot].name;
                if (mimic != 'MissingNo.') {
                    this.mimicList.push(mimic);
                }
            });
        });
    }
    isUnlocked() {
        // Player requires the Dungeon Ticket to access the dungeons
        if (!App.game.keyItems.hasKeyItem(KeyItemType.Dungeon_ticket)) {
            return false;
        }
        // Player may not meet the requirements to start the dungeon
        const dungeonTown = TownList[this.name];
        const dungeonRequirement = this.optionalParameters.requirement;
        // Use dungeonRequirement if it exists, else default to dungeonTown status
        if (dungeonRequirement ? !dungeonRequirement.isCompleted() : !dungeonTown.isUnlocked()) {
            return false;
        }
        return true;
    }
    getRequirementHints() {
        var _a;
        const dungeonTown = TownList[this.name];
        const reqsList = [];
        (_a = dungeonTown.requirements) === null || _a === void 0 ? void 0 : _a.forEach(req => {
            if (!req.isCompleted()) {
                reqsList.push(req.hint());
            }
        });
        if (this.optionalParameters.requirement ? !this.optionalParameters.requirement.isCompleted() : false) {
            reqsList.push(this.optionalParameters.requirement.hint());
        }
        return reqsList;
    }
    /**
     * Finds the possible Bosses in the dungeon
     * @param includeTrainers Whether to include Trainer Bosses. Defaults to true
     * @param ignoreRequirement Whether to check if requirements are met. Defaults to false
     */
    availableBosses(includeTrainers = true, ignoreRequirement = false) {
        // TODO: We need this check as this method is called somewhere during initialization when App isn't initialized yet
        // the requirement.isCompleted call can sometimes use the App object, which will cause this to crash
        // Once App is moved to modules, this check might be able to be removed.
        if (!App.game) {
            return [];
        }
        if (includeTrainers) {
            return this.bossList.filter(boss => {
                var _a;
                return (!ignoreRequirement && ((_a = boss.options) === null || _a === void 0 ? void 0 : _a.requirement)) ? boss.options.requirement.isCompleted() : true;
            });
        }
        else {
            return this.bossList.filter(b => {
                var _a;
                if (b instanceof DungeonBossPokemon) {
                    return (!ignoreRequirement && ((_a = b.options) === null || _a === void 0 ? void 0 : _a.requirement)) ? b.options.requirement.isCompleted() : true;
                }
                return false;
            }).map(b => b);
        }
    }
    hasUnlockedBoss() {
        return this.bossList.some(boss => { var _a, _b, _c; return (_c = (_b = (_a = boss.options) === null || _a === void 0 ? void 0 : _a.requirement) === null || _b === void 0 ? void 0 : _b.isCompleted()) !== null && _c !== void 0 ? _c : true; });
    }
    /**
     * Retreives the weights for all the possible bosses
     */
    get bossWeightList() {
        return this.availableBosses().map((boss) => {
            var _a, _b;
            return (_b = (_a = boss.options) === null || _a === void 0 ? void 0 : _a.weight) !== null && _b !== void 0 ? _b : 1;
        });
    }
    /**
     * Returns the possible enemies in the dungeon.
     * @param ignoreRequirement Whether to check if requirements are met. Defaults to false
     */
    availableMinions(ignoreRequirement = false) {
        return this.enemyList.filter((enemy) => {
            var _a;
            if (typeof enemy === 'string') {
                return true;
            }
            else {
                return (!ignoreRequirement && ((_a = enemy.options) === null || _a === void 0 ? void 0 : _a.requirement)) ? enemy.options.requirement.isCompleted() : true;
            }
        });
    }
    /**
     * Gets all available Pokemon in the dungeon
     */
    allAvailablePokemon() {
        const encounterInfo = this.allAvailableShadowPokemon();
        // Handling minions
        this.enemyList.forEach((enemy) => {
            var _a;
            // Handling Pokemon
            if (typeof enemy === 'string' || enemy.hasOwnProperty('pokemon')) {
                let pokemonName;
                if (enemy.hasOwnProperty('pokemon')) {
                    // Check if requirements have been met
                    if ((_a = enemy.options) === null || _a === void 0 ? void 0 : _a.requirement) {
                        if (!enemy.options.requirement.isCompleted()) {
                            return;
                        }
                    }
                    pokemonName = enemy.pokemon;
                }
                else {
                    pokemonName = enemy;
                }
                encounterInfo.push(pokemonName);
                // Handling Trainers
            }
            else { /* We don't include Trainers */ }
        });
        // Handling Bosses
        this.bossList.forEach((boss) => {
            var _a;
            // Handling Pokemon
            if (boss instanceof DungeonBossPokemon) {
                if ((_a = boss.options) === null || _a === void 0 ? void 0 : _a.requirement) {
                    if (!boss.options.requirement.isCompleted()) {
                        return;
                    }
                }
                const pokemonName = boss.name;
                encounterInfo.push(pokemonName);
                // Handling Trainer
            }
            else { /* We don't include Trainers */ }
        });
        this.getCaughtMimics().forEach((mimic) => encounterInfo.push(mimic));
        return encounterInfo;
    }
    allShadowPokemon() {
        const encounterInfo = this.normalEncounterList.filter(e => e.shadow).map(e => e.pokemonName);
        encounterInfo.push(...this.bossEncounterList.filter(e => e.shadow).map(e => e.pokemonName));
        return encounterInfo;
    }
    allAvailableShadowPokemon() {
        const encounterInfo = this.normalEncounterList.filter(e => e.shadow && !e.hide).map(e => e.pokemonName);
        encounterInfo.push(...this.bossEncounterList.filter(e => e.shadow && !e.hide).map(e => e.pokemonName));
        return encounterInfo;
    }
    getCaughtMimics() {
        return this.mimicList.filter(p => App.game.party.alreadyCaughtPokemonByName(p));
    }
    getRandomLootTier(clears, debuffed = false, onlyDebuffable = false) {
        const tierWeights = this.getLootTierWeights(clears, debuffed, onlyDebuffable);
        return Rand.fromWeightedArray(Object.keys(tierWeights), Object.values(tierWeights));
    }
    getRandomLoot(tier, onlyDebuffable = false) {
        const lootTable = this.lootTable[tier].filter((loot) => this.lootFilter(loot, onlyDebuffable));
        return Rand.fromWeightedArray(lootTable, lootTable.map((loot) => { var _a; return (_a = loot.weight) !== null && _a !== void 0 ? _a : 1; }));
    }
    getLootTierWeights(clears, debuffed, onlyDebuffable = false) {
        if (debuffed) {
            return Object.entries(nerfedLootTierChance).reduce((chances, [tier, chance]) => {
                if (tier in this.lootTable &&
                    this.lootTable[tier].some((loot) => this.lootFilter(loot, onlyDebuffable))) {
                    chances[tier] = chance;
                }
                return chances;
            }, {});
        }
        const timesCleared = Math.min(500, Math.max(1, clears));
        const redist = lootRedistibuteAmount * timesCleared / 500;
        const updatedChances = Object.entries(baseLootTierChance).reduce((chances, [tier, chance]) => {
            if (tier in this.lootTable &&
                this.lootTable[tier].some((loot) => !loot.requirement || loot.requirement.isCompleted())) {
                chances[tier] = chance + (redist * lootRedistribution[tier]);
            }
            return chances;
        }, {});
        return updatedChances;
    }
    /**
     * Retrieves the weights for all the possible enemies
     */
    get weightList() {
        return this.availableMinions().map((enemy) => {
            var _a, _b, _c;
            if (typeof enemy === 'string') {
                return 1;
            }
            else if (enemy.hasOwnProperty('pokemon')) {
                return (_a = enemy.options.weight) !== null && _a !== void 0 ? _a : 1;
            }
            else {
                return (_c = (_b = enemy.options) === null || _b === void 0 ? void 0 : _b.weight) !== null && _c !== void 0 ? _c : 1;
            }
        });
    }
    /**
     * Returns the possible minion Pokemon in the dungeon.
     * Filters out Trainers and collapses DetailedPokemon
     */
    get pokemonList() {
        // Filtering out Trainers
        return this.enemyList.filter((enemy) => {
            return !enemy.hasOwnProperty('name');
        }).map((enemy) => {
            // Collapsing DetailedPokemon
            if (typeof enemy === 'string') {
                return enemy;
            }
            else if (enemy.hasOwnProperty('pokemon')) {
                return enemy.pokemon;
            }
        });
    }
    /**
     * Returns the possible boss Pokemon in the dungeon.
     * Filters out Trainers
     */
    get bossPokemonList() {
        // Filtering out Trainers
        return this.bossList.filter((enemy) => {
            return enemy instanceof DungeonBossPokemon;
        }).map((enemy) => {
            return enemy.name;
        });
    }
    /**
     * Gets all possible Pokemon in the dungeon
     */
    get allPokemon() {
        return this.pokemonList.concat(this.bossPokemonList, this.getCaughtMimics());
    }
    getEncounterInfo(pokemonName, mimicData, hideEncounter = false, shadow = false) {
        var _a;
        const partyPokemon = App.game.party.getPokemonByName(pokemonName);
        const pokerus = partyPokemon === null || partyPokemon === void 0 ? void 0 : partyPokemon.pokerus;
        const caught = App.game.party.alreadyCaughtPokemonByName(pokemonName);
        const shinyCaught = App.game.party.alreadyCaughtPokemonByName(pokemonName, true);
        const shadowCaught = (partyPokemon === null || partyPokemon === void 0 ? void 0 : partyPokemon.shadow) >= GameConstants.ShadowStatus.Shadow;
        const purified = (partyPokemon === null || partyPokemon === void 0 ? void 0 : partyPokemon.shadow) >= GameConstants.ShadowStatus.Purified;
        const encounter = {
            pokemonName,
            image: `assets/images/${shinyCaught ? 'shiny' : ''}${shadow && shadowCaught ? 'shadow' : ''}pokemon/${pokemonMap[pokemonName].id}.png`,
            shadowBackground: shadow && !shadowCaught ? `assets/images/shadowpokemon/${pokemonMap[pokemonName].id}.png` : '',
            pkrsImage: pokerus > GameConstants.Pokerus.Uninfected ? `assets/images/breeding/pokerus/${GameConstants.Pokerus[pokerus]}.png` : '',
            EVs: pokerus >= GameConstants.Pokerus.Contagious ? `EVs: ${partyPokemon.evs().toLocaleString('en-US')}` : '',
            shiny: shinyCaught,
            hide: hideEncounter,
            uncaught: !caught,
            lock: !!(mimicData === null || mimicData === void 0 ? void 0 : mimicData.lockedMessage),
            lockMessage: (_a = mimicData === null || mimicData === void 0 ? void 0 : mimicData.lockedMessage) !== null && _a !== void 0 ? _a : '',
            mimic: !!mimicData,
            mimicTier: mimicData === null || mimicData === void 0 ? void 0 : mimicData.tier,
            shadow,
            shadowCaught,
            purified,
        };
        return encounter;
    }
    /**
     * Gets all non-boss Pokemon encounters in the dungeon
     * Used for generating the dungeon encounter list view
     */
    get normalEncounterList() {
        const encounterInfo = [];
        // Handling minions
        this.enemyList.forEach((enemy) => {
            var _a, _b, _c, _d, _e;
            // Handling Pokemon
            if (typeof enemy === 'string' || enemy.hasOwnProperty('pokemon')) {
                let pokemonName;
                let hideEncounter = false;
                if (enemy.hasOwnProperty('pokemon')) {
                    const pokemon = enemy;
                    pokemonName = pokemon.pokemon;
                    hideEncounter = ((_a = pokemon.options) === null || _a === void 0 ? void 0 : _a.hide) ? (((_b = pokemon.options) === null || _b === void 0 ? void 0 : _b.requirement) ? !((_c = pokemon.options) === null || _c === void 0 ? void 0 : _c.requirement.isCompleted()) : (_d = pokemon.options) === null || _d === void 0 ? void 0 : _d.hide) : false;
                }
                else {
                    pokemonName = enemy;
                }
                encounterInfo.push(this.getEncounterInfo(pokemonName, null, hideEncounter));
                // Handling Trainers (only those with shadow Pokemon)
            }
            else if (enemy instanceof DungeonTrainer) {
                const hideEncounter = (((_e = enemy.options) === null || _e === void 0 ? void 0 : _e.requirement) && !enemy.options.requirement.isCompleted());
                const shadowPokemon = enemy.getTeam().filter(p => p.shadow == GameConstants.ShadowStatus.Shadow);
                if (shadowPokemon.length) {
                    const shadowEncounters = shadowPokemon.map(p => this.getEncounterInfo(p.name, null, hideEncounter, true));
                    const trainerEncounter = {
                        image: enemy.image,
                        EVs: '',
                        hide: hideEncounter,
                        lockMessage: '',
                        shadowTrainer: true,
                    };
                    encounterInfo.push(...shadowEncounters);
                    encounterInfo.push(trainerEncounter);
                }
            }
        });
        // Handling Mimics
        this.getCaughtMimics().forEach(enemy => {
            const pokemonName = enemy;
            encounterInfo.push(this.getEncounterInfo(pokemonName, this.getMimicData(pokemonName)));
        });
        return encounterInfo;
    }
    /**
     * Gets all boss encounters in the dungeon
     * Used for generating the dungeon encounter list view
     */
    get bossEncounterList() {
        const encounterInfo = [];
        // Handling Bosses
        this.bossList.forEach((boss) => {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const hideEncounter = ((_a = boss.options) === null || _a === void 0 ? void 0 : _a.hide) ? (((_b = boss.options) === null || _b === void 0 ? void 0 : _b.requirement) ? !((_c = boss.options) === null || _c === void 0 ? void 0 : _c.requirement.isCompleted()) : (_d = boss.options) === null || _d === void 0 ? void 0 : _d.hide) : false;
            const lock = ((_e = boss.options) === null || _e === void 0 ? void 0 : _e.requirement) ? !((_f = boss.options) === null || _f === void 0 ? void 0 : _f.requirement.isCompleted()) : false;
            const lockMessage = ((_g = boss.options) === null || _g === void 0 ? void 0 : _g.requirement) ? (_h = boss.options) === null || _h === void 0 ? void 0 : _h.requirement.hint() : '';
            // Handling Pokemon
            if (boss instanceof DungeonBossPokemon) {
                const encounter = this.getEncounterInfo(boss.name, null, hideEncounter);
                encounter.lock = lock;
                encounter.lockMessage = lockMessage;
                encounterInfo.push(encounter);
                // Handling Trainer
            }
            else {
                // Check for Shadow Pokemon
                const shadowPokemon = boss.getTeam().filter(p => p.shadow == GameConstants.ShadowStatus.Shadow);
                const shadowEncounter = shadowPokemon.length > 0;
                if (shadowEncounter) {
                    const shadowEncounters = shadowPokemon.map(p => this.getEncounterInfo(p.name, null, hideEncounter, true));
                    encounterInfo.push(...shadowEncounters);
                }
                const encounter = {
                    image: boss.image,
                    EVs: '',
                    shiny: false,
                    hide: hideEncounter,
                    uncaught: false,
                    lock,
                    lockMessage,
                    shadowTrainer: shadowEncounter,
                };
                encounterInfo.push(encounter);
            }
        });
        return encounterInfo;
    }
    get difficulty() {
        var _a, _b;
        return (_b = (_a = this.optionalParameters) === null || _a === void 0 ? void 0 : _a.dungeonRegionalDifficulty) !== null && _b !== void 0 ? _b : GameConstants.getDungeonRegion(this.name);
    }
    getMimicData(pokemonName) {
        let res;
        Object.keys(this.lootTable).forEach(tier => {
            this.lootTable[tier].forEach(loot => {
                var _a, _b;
                if (loot.loot === pokemonName) {
                    res = { tier: tier, lockedMessage: ((_b = (_a = loot.requirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true) ? '' : loot.requirement.hint() };
                }
            });
        });
        return res;
    }
}
/**
 * Data list that contains all dungeons, accessible by name.
 */
const dungeonList = {};
// Kanto Dungeons
dungeonList['Viridian Forest'] = new Dungeon('Viridian Forest', [
    { pokemon: 'Caterpie', options: { weight: 4 } },
    { pokemon: 'Metapod', options: { weight: 4 } },
    { pokemon: 'Weedle', options: { weight: 4 } },
    { pokemon: 'Kakuna', options: { weight: 4 } },
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Weedle', 50, 6),
        new GymPokemon('Caterpie', 50, 6),
    ], { weight: 1 }, 'Rick'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Weedle', 50, 7),
        new GymPokemon('Kakuna', 50, 7),
        new GymPokemon('Weedle', 50, 7),
    ], { weight: 1 }, 'Doug'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Caterpie', 50, 7),
        new GymPokemon('Caterpie', 50, 8),
    ], { weight: 1 }, 'Anthony'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Metapod', 50, 7),
        new GymPokemon('Caterpie', 50, 7),
        new GymPokemon('Metapod', 50, 7),
    ], { weight: 1 }, 'Charlie'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Pecha' },
    ],
    epic: [{ loot: 'Pokeball' }],
    mythic: [{ loot: 'SmallRestore' }],
}, 102, [
    new DungeonBossPokemon('Pikachu', 510, 7),
    new DungeonTrainer('Bug Catcher', [new GymPokemon('Weedle', 510, 9)], { weight: 1 }, 'Sammy'),
    new DungeonTrainer('Egg Hunter', [new GymPokemon('Togepi (Flowering Crown)', 300000, 100)], {
        hide: true,
        weight: 2,
        requirement: new MultiRequirement([
            new QuestLineStartedRequirement('Egg Hunt'),
            new QuestLineStepCompletedRequirement('Egg Hunt', 0, GameConstants.AchievementOption.less),
        ]),
    }),
    new DungeonBossPokemon('Pikachu (Easter)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Pikachu (Easter)', 0, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 50, 1);
dungeonList['Mt. Moon'] = new Dungeon('Mt. Moon', [
    { pokemon: 'Clefairy', options: { weight: 11 } },
    { pokemon: 'Zubat', options: { weight: 11 } },
    { pokemon: 'Paras', options: { weight: 11 } },
    { pokemon: 'Geodude', options: { weight: 11 } },
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Weedle', 75, 11),
        new GymPokemon('Kakuna', 75, 11),
    ], { weight: 1 }, 'Kent'),
    new DungeonTrainer('Lass', [new GymPokemon('Clefairy', 75, 14)], { weight: 1 }, 'Iris'),
    new DungeonTrainer('Super Nerd', [
        new GymPokemon('Magnemite', 75, 11),
        new GymPokemon('Voltorb', 75, 11),
    ], { weight: 1 }, 'Jovan'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Caterpie', 75, 10),
        new GymPokemon('Metapod', 75, 10),
        new GymPokemon('Caterpie', 75, 10),
    ], { weight: 1 }, 'Robby'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Oddish', 75, 11),
        new GymPokemon('Bellsprout', 75, 11),
    ], { weight: 1 }, 'Miriam'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Rattata', 75, 10),
        new GymPokemon('Rattata', 75, 10),
        new GymPokemon('Zubat', 75, 10),
    ], { weight: 1 }, 'Josh'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geodude', 75, 10),
        new GymPokemon('Geodude', 75, 10),
        new GymPokemon('Onix', 75, 10),
    ], { weight: 1 }, 'Marcos'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Sandshrew', 75, 11),
        new GymPokemon('Rattata', 75, 11),
        new GymPokemon('Zubat', 75, 11),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 75, 13),
        new GymPokemon('Ekans', 75, 13),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 75, 13),
        new GymPokemon('Sandshrew', 75, 13),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 75, 13),
        new GymPokemon('Zubat', 75, 13),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Dowsing_machine' },
    ],
    mythic: [
        { loot: 'Greatball', weight: 2 },
        { loot: 'SmallRestore' },
        { loot: 'Star Piece' },
    ],
}, 834, [
    new DungeonTrainer('Super Nerd', [
        new GymPokemon('Grimer', 2780, 12),
        new GymPokemon('Voltorb', 2780, 12),
        new GymPokemon('Koffing', 2780, 12),
    ], { weight: 1 }, 'Miguel'),
    new DungeonBossPokemon('Vivillon (High Plains)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 28),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 29, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (High Plains)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 75, 4, () => {
    const item = Rand.boolean() ? 'Dome Fossil' : 'Helix Fossil';
    UndergroundController.gainMineItem(UndergroundItems.getByName(item).id, 1);
    Notifier.notify({
        message: `You were awarded a ${GameConstants.humanifyString(item)} for defeating the Super Nerd!`,
        type: NotificationConstants.NotificationOption.success,
        setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
    });
});
dungeonList['Diglett\'s Cave'] = new Dungeon('Diglett\'s Cave', ['Diglett'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    mythic: [
        { loot: 'Wiki', weight: 2 },
        { loot: 'Max Revive' },
    ],
}, 2962, [
    new DungeonBossPokemon('Dugtrio', 16040, 31),
    new DungeonBossPokemon('Pikachu (Easter)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Pikachu (Easter)', 1, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 250, 11);
dungeonList['Rock Tunnel'] = new Dungeon('Rock Tunnel', [
    { pokemon: 'Zubat', options: { weight: 14 } },
    { pokemon: 'Mankey', options: { weight: 14 } },
    { pokemon: 'Geodude', options: { weight: 14 } },
    { pokemon: 'Machop', options: { weight: 14 } },
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Cubone', 500, 23),
        new GymPokemon('Slowpoke', 500, 23),
    ], { weight: 1 }, 'Ashton'),
    new DungeonTrainer('PokéManiac', [new GymPokemon('Slowpoke', 500, 25)], { weight: 1 }, 'Winston'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Oddish', 500, 22),
        new GymPokemon('Bulbasaur', 500, 22),
    ], { weight: 1 }, 'Martha'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Charmander', 500, 22),
        new GymPokemon('Cubone', 500, 22),
    ], { weight: 1 }, 'Steve'),
    new DungeonTrainer('Hiker', [new GymPokemon('Geodude', 500, 25)], { weight: 1 }, 'Allen'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Machop', 500, 20),
        new GymPokemon('Onix', 500, 20),
    ], { weight: 1 }, 'Eric'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geodude', 500, 19),
        new GymPokemon('Machop', 500, 19),
        new GymPokemon('Geodude', 500, 19),
        new GymPokemon('Geodude', 500, 19),
    ], { weight: 1 }, 'Lenny'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Onix', 500, 20),
        new GymPokemon('Onix', 500, 20),
        new GymPokemon('Geodude', 500, 20),
    ], { weight: 1 }, 'Oliver'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geodude', 500, 21),
        new GymPokemon('Graveler', 500, 21),
    ], { weight: 1 }, 'Lucas'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Jigglypuff', 500, 21),
        new GymPokemon('Pidgey', 500, 21),
        new GymPokemon('Meowth', 500, 21),
    ], { weight: 1 }, 'Sofia'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geodude', 500, 21),
        new GymPokemon('Geodude', 500, 21),
        new GymPokemon('Graveler', 500, 21),
    ], { weight: 1 }, 'Dudley'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Slowpoke', 500, 20),
        new GymPokemon('Slowpoke', 500, 20),
        new GymPokemon('Slowpoke', 500, 20),
    ], { weight: 1 }, 'Cooper'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Bellsprout', 500, 22),
        new GymPokemon('Clefairy', 500, 22),
    ], { weight: 1 }, 'Leah'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Meowth', 500, 20),
        new GymPokemon('Oddish', 500, 20),
        new GymPokemon('Pidgey', 500, 20),
    ], { weight: 1 }, 'Dana'),
], {
    common: [
        { loot: 'xClick', weight: 2 },
        { loot: 'Leppa', weight: 2 },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Geodude' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    legendary: [
        { loot: 'Greatball' },
        { loot: 'MediumRestore' },
        { loot: 'Oval Stone' },
        { loot: 'Revive' },
    ],
    mythic: [
        { loot: 'Star Piece', weight: 1.5 },
        { loot: 'Heart Scale' },
    ],
}, 4117, [
    new DungeonBossPokemon('Onix', 20585, 17),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Pidgey', 5147, 19),
        new GymPokemon('Rattata', 5147, 19),
        new GymPokemon('Rattata', 5147, 19),
        new GymPokemon('Bellsprout', 5147, 19),
    ], { weight: 1 }, 'Ariana'),
], 500, 9);
dungeonList['Rocket Game Corner'] = new Dungeon('Rocket Game Corner', [
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Drowzee', 2910, 21),
        new GymPokemon('Machop', 2910, 21),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Raticate', 2910, 21),
        new GymPokemon('Raticate', 2910, 21),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 1455, 19),
        new GymPokemon('Raticate', 1455, 19),
        new GymPokemon('Raticate', 1455, 19),
        new GymPokemon('Rattata', 1455, 19),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Grimer', 1940, 20),
        new GymPokemon('Koffing', 1940, 20),
        new GymPokemon('Koffing', 1940, 20),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Grimer', 2910, 22),
        new GymPokemon('Koffing', 2910, 22),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 1164, 17),
        new GymPokemon('Koffing', 1164, 17),
        new GymPokemon('Grimer', 1164, 17),
        new GymPokemon('Zubat', 1164, 17),
        new GymPokemon('Raticate', 1164, 17),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Machop', 2910, 21),
        new GymPokemon('Machop', 2910, 21),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 1940, 20),
        new GymPokemon('Raticate', 1940, 20),
        new GymPokemon('Drowzee', 1940, 20),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Koffing', 2910, 21),
        new GymPokemon('Zubat', 2910, 21),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Sandshrew', 1940, 23),
        new GymPokemon('Ekans', 1940, 23),
        new GymPokemon('Sandslash', 1940, 23),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Ekans', 1940, 23),
        new GymPokemon('Sandshrew', 1940, 23),
        new GymPokemon('Arbok', 1940, 23),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Pokeball' }],
    legendary: [
        { loot: 'Greatball', weight: 2 },
        { loot: 'Revive' },
        { loot: 'Nestball' },
    ],
    mythic: [
        { loot: 'LargeRestore' },
        { loot: 'Max Revive' },
        { loot: 'Star Piece' },
    ],
}, 5820, [
    new DungeonTrainer('Team Rocket Boss', [
        new GymPokemon('Onix', 9501, 25),
        new GymPokemon('Rhyhorn', 9501, 24),
        new GymPokemon('Kangaskhan', 10101, 29),
    ], { weight: 1 }, 'Giovanni', 'Giovanni'),
], 625, 7);
dungeonList['Pokémon Tower'] = new Dungeon('Pokémon Tower', [
    { pokemon: 'Gastly', options: { weight: 21.3 } },
    { pokemon: 'Haunter', options: { weight: 21.3 } },
    { pokemon: 'Cubone', options: { weight: 21.3 } },
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 23)], { weight: 1 }, 'Hope'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 22)], { weight: 1 }, 'Patricia'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Carly'),
    new DungeonTrainer('Channeler', [
        new GymPokemon('Gastly', 750, 23),
        new GymPokemon('Gastly', 750, 23),
    ], { weight: 1 }, 'Laurel'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 22)], { weight: 1 }, 'Jody'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Paula'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 22)], { weight: 1 }, 'Ruth'),
    new DungeonTrainer('Channeler', [new GymPokemon('Haunter', 750, 23)], { weight: 1 }, 'Tammy'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Karina'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 22)], { weight: 1 }, 'Janae'),
    new DungeonTrainer('Channeler', [
        new GymPokemon('Gastly', 750, 22),
        new GymPokemon('Gastly', 750, 22),
        new GymPokemon('Gastly', 750, 22),
    ], { weight: 1 }, 'Angelica'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Jennifer'),
    new DungeonTrainer('Channeler', [new GymPokemon('Gastly', 750, 24)], { weight: 1 }, 'Emilia'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 750, 25),
        new GymPokemon('Zubat', 750, 25),
        new GymPokemon('Golbat', 750, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Koffing', 750, 26),
        new GymPokemon('Drowzee', 750, 26),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 750, 23),
        new GymPokemon('Rattata', 750, 23),
        new GymPokemon('Raticate', 750, 23),
        new GymPokemon('Zubat', 750, 23),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Chesto' },
    ],
    rare: [{ loot: 'Green Shard' }],
    legendary: [
        { loot: 'Greatball' },
        { loot: 'MediumRestore' },
        { loot: 'Star Piece' },
        { loot: 'Revive' },
    ],
    mythic: [
        { loot: 'Rare Bone' },
        { loot: 'Ultraball' },
        { loot: 'LargeRestore' },
    ],
}, 7523, [
    new DungeonBossPokemon('Marowak', 37615, 30),
    new DungeonBossPokemon('Pikachu (Easter)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Pikachu (Easter)', 2, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 750, 7);
dungeonList['Silph Co.'] = new Dungeon('Silph Co.', [
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Golbat', 2103, 25),
        new GymPokemon('Zubat', 2103, 25),
        new GymPokemon('Zubat', 2103, 25),
        new GymPokemon('Raticate', 2103, 25),
        new GymPokemon('Zubat', 2103, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magnemite', 3505, 28),
        new GymPokemon('Voltorb', 3505, 28),
        new GymPokemon('Magneton', 3505, 28),
    ], { weight: 1 }, 'Jerry', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Cubone', 5258, 29),
        new GymPokemon('Zubat', 5258, 29),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Grimer', 2629, 26),
        new GymPokemon('Weezing', 2629, 26),
        new GymPokemon('Koffing', 2629, 26),
        new GymPokemon('Weezing', 2629, 26),
    ], { weight: 1 }, 'Connor', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Raticate', 3505, 28),
        new GymPokemon('Hypno', 3505, 28),
        new GymPokemon('Raticate', 3505, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Electrode', 5258, 29),
        new GymPokemon('Weezing', 5258, 29),
    ], { weight: 1 }, 'Jose', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Ekans', 3505, 28),
        new GymPokemon('Zubat', 3505, 28),
        new GymPokemon('Cubone', 3505, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Machop', 5258, 29),
        new GymPokemon('Drowzee', 5258, 29),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Electrode', 10515, 33)], { weight: 1 }, 'Rodney', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Hypno', 10515, 33)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Juggler', [
        new GymPokemon('Kadabra', 5258, 29),
        new GymPokemon('Mr. Mime', 5258, 29),
    ], { weight: 1 }, 'Dalton'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magneton', 2629, 26),
        new GymPokemon('Magnemite', 2629, 26),
        new GymPokemon('Koffing', 2629, 26),
        new GymPokemon('Weezing', 2629, 26),
    ], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Team Rocket', 2) }, 'Beau', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Arbok', 10515, 33)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Machop', 5258, 29),
        new GymPokemon('Machoke', 5258, 29),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 3505, 28),
        new GymPokemon('Zubat', 3505, 28),
        new GymPokemon('Golbat', 3505, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Voltorb', 2103, 25),
        new GymPokemon('Koffing', 2103, 25),
        new GymPokemon('Magneton', 2103, 25),
        new GymPokemon('Magnemite', 2103, 25),
        new GymPokemon('Koffing', 2103, 25),
    ], { weight: 1 }, 'Taylor', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Cubone', 5258, 29),
        new GymPokemon('Cubone', 5258, 29),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Raticate', 2629, 26),
        new GymPokemon('Zubat', 2629, 26),
        new GymPokemon('Golbat', 2629, 26),
        new GymPokemon('Rattata', 2629, 26),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Electrode', 5258, 29),
        new GymPokemon('Muk', 5258, 29),
    ], { weight: 1 }, 'Joshua', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Sandshrew', 5258, 29),
        new GymPokemon('Sandslash', 5258, 29),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Raticate', 2629, 26),
        new GymPokemon('Golbat', 2629, 26),
        new GymPokemon('Arbok', 2629, 26),
        new GymPokemon('Koffing', 2629, 26),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Weezing', 3505, 28),
        new GymPokemon('Golbat', 3505, 28),
        new GymPokemon('Koffing', 3505, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Grimer', 5258, 29),
        new GymPokemon('Electrode', 5258, 29),
    ], { weight: 1 }, 'Parker', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Golbat', 3505, 28),
        new GymPokemon('Drowzee', 3505, 28),
        new GymPokemon('Hypno', 3505, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Drowzee', 3505, 28),
        new GymPokemon('Grimer', 3505, 28),
        new GymPokemon('Machop', 3505, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Voltorb', 3505, 28),
        new GymPokemon('Magneton', 3505, 28),
        new GymPokemon('Koffing', 3505, 28),
    ], { weight: 1 }, 'Ed', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Machoke', 10515, 33)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magnemite', 5258, 29),
        new GymPokemon('Koffing', 5258, 29),
    ], { weight: 1 }, 'Travis', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 2103, 25),
        new GymPokemon('Zubat', 2103, 25),
        new GymPokemon('Ekans', 2103, 25),
        new GymPokemon('Rattata', 2103, 25),
        new GymPokemon('Rattata', 2103, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Cubone', 3505, 32),
        new GymPokemon('Drowzee', 3505, 32),
        new GymPokemon('Marowak', 3505, 32),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'Dowsing_machine', weight: 3 },
        { loot: 'Lucky_incense', weight: 2 },
        { loot: 'Pokeball' },
        { loot: 'Electrode' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Red Shard' },
    ],
    legendary: [{ loot: 'Greatball' }],
    mythic: [{ loot: 'Ultraball' }],
}, 10515, [
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magneton', 10322, 26),
        new GymPokemon('Magnemite', 10322, 26),
        new GymPokemon('Koffing', 10322, 26),
        new GymPokemon('Weezing', 12915, 26),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Team Rocket', 2, GameConstants.AchievementOption.less) }, 'Beau', '(male)'),
    new DungeonTrainer('Team Rocket Boss', [
        new GymPokemon('Nidorino', 12144, 37),
        new GymPokemon('Rhyhorn', 12144, 37),
        new GymPokemon('Kangaskhan', 12144, 35),
        new GymPokemon('Nidoqueen', 16144, 41),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Team Rocket', 2) }, 'Giovanni', 'Giovanni'),
], 875, 7);
dungeonList['Power Plant'] = new Dungeon('Power Plant', ['Pikachu', 'Magnemite', 'Magneton', 'Voltorb', 'Electrode'], {
    common: [
        { loot: 'Lucky_incense', weight: 4 },
        { loot: 'Cheri', weight: 2 },
        { loot: 'Electrode' },
    ],
    rare: [{ loot: 'Yellow Shard' }],
    mythic: [{ loot: 'Max Revive' }],
}, 13507, [
    new DungeonBossPokemon('Electabuzz', 67535, 35),
    new DungeonBossPokemon('Zapdos', 101302, 50),
    new DungeonBossPokemon('Pikachu (Easter)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Pikachu (Easter)', 3, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 1000, 18);
dungeonList['Seafoam Islands'] = new Dungeon('Seafoam Islands', ['Zubat', 'Golbat', 'Psyduck', 'Golduck', 'Slowpoke', 'Slowbro', 'Krabby', 'Horsea', 'Magikarp'], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Aspear' },
    ],
    rare: [{ loot: 'Blue Shard' }],
    epic: [{ loot: 'Snorlax (Snowman)', ignoreDebuff: true, requirement: new SpecialEventRequirement('Merry Christmas!') }],
    legendary: [{ loot: 'Revive' }],
    mythic: [{ loot: 'Ultraball' }],
}, 17226, [
    new DungeonBossPokemon('Seel', 86130, 35),
    new DungeonBossPokemon('Articuno', 129195, 50),
    new DungeonBossPokemon('Pikachu (Easter)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Pikachu (Easter)', 4, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 1250, 19);
dungeonList['Pokémon Mansion'] = new Dungeon('Pokémon Mansion', [
    { pokemon: 'Rattata', options: { weight: 3.11 } },
    { pokemon: 'Raticate', options: { weight: 3.11 } },
    { pokemon: 'Vulpix', options: { weight: 3.11 } },
    { pokemon: 'Growlithe', options: { weight: 3.11 } },
    { pokemon: 'Grimer', options: { weight: 3.11 } },
    { pokemon: 'Muk', options: { weight: 3.11 } },
    { pokemon: 'Koffing', options: { weight: 3.11 } },
    { pokemon: 'Weezing', options: { weight: 3.11 } },
    { pokemon: 'Ditto', options: { weight: 3.11 } },
    new DungeonTrainer('Youngster', [
        new GymPokemon('Ekans', 1500, 33),
        new GymPokemon('Ekans', 1500, 33),
        new GymPokemon('Raticate', 1500, 34),
    ], { weight: 1 }, 'Johnson'),
    new DungeonTrainer('Burglar', [
        new GymPokemon('Charmander', 1500, 34),
        new GymPokemon('Charmeleon', 1500, 34),
    ], { weight: 1 }, 'Arnie'),
    new DungeonTrainer('Burglar', [new GymPokemon('Ninetales', 1500, 38)], { weight: 1 }, 'Simon'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magnemite', 1500, 33),
        new GymPokemon('Magneton', 1500, 33),
        new GymPokemon('Voltorb', 1500, 33),
    ], { weight: 1 }, 'Braydon', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Electrode', 1500, 29),
        new GymPokemon('Weezing', 1500, 29),
    ], { weight: 1 }, 'Ted', '(male)'),
    new DungeonTrainer('Burglar', [
        new GymPokemon('Growlithe', 1500, 34),
        new GymPokemon('Ponyta', 1500, 34),
    ], { weight: 1 }, 'Lewis'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magnemite', 1500, 34),
        new GymPokemon('Electrode', 1500, 34),
    ], { weight: 1 }, 'Ivan', '(male)'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Rawst' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
    ],
    epic: [{ loot: 'Figy' }],
    legendary: [{ loot: 'Ultraball' }],
    mythic: [{ loot: 'Max Revive' }],
}, 17760, [new DungeonBossPokemon('Magmar', 88800, 40)], 1500, 20);
dungeonList['Mt. Ember Summit'] = new Dungeon('Mt. Ember Summit', [
    { pokemon: 'Spearow', options: { weight: 1.5 } },
    { pokemon: 'Fearow', options: { weight: 1.5 } },
    { pokemon: 'Machop', options: { weight: 1.5 } },
    { pokemon: 'Machoke', options: { weight: 1.5 } },
    { pokemon: 'Geodude', options: { weight: 1.5 } },
    { pokemon: 'Graveler', options: { weight: 1.5 } },
    { pokemon: 'Ponyta', options: { weight: 1.5 } },
    { pokemon: 'Rapidash', options: { weight: 1.5 } },
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Bellsprout', 18120, 38),
        new GymPokemon('Gloom', 18120, 38),
        new GymPokemon('Gloom', 18120, 38),
    ], { weight: 1 }, 'Beth', '(female)'),
    new DungeonTrainer('Crush Girl', [
        new GymPokemon('Hitmonchan', 18120, 38),
        new GymPokemon('Hitmonchan', 18120, 38),
    ], { weight: 1 }, 'Jocelyn'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Exeggcute', 18120, 37),
        new GymPokemon('Exeggutor', 18120, 40),
    ], { weight: 1 }, 'Logan', '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Token_collector' },
    ],
    rare: [{ loot: 'Red Shard' }],
    legendary: [{ loot: 'Ultraball' }],
}, 18120, [
    new DungeonBossPokemon('Magmar', 101427, 40),
    new DungeonBossPokemon('Moltres', 184462, 50),
], 1750, 27);
dungeonList['Berry Forest'] = new Dungeon('Berry Forest', ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Psyduck', 'Golduck', 'Poliwag', 'Bellsprout', 'Weepinbell', 'Slowpoke', 'Slowbro', 'Drowzee', 'Exeggcute', 'Goldeen', 'Magikarp'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Cheri' },
        { loot: 'Chesto' },
        { loot: 'Pecha' },
        { loot: 'Rawst' },
        { loot: 'Aspear' },
        { loot: 'Leppa' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Razz' },
        { loot: 'Persim' },
        { loot: 'Bluk' },
        { loot: 'Nanab' },
        { loot: 'Wepear' },
        { loot: 'Iapapa' },
    ],
    mythic: [{ loot: 'Lum', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Berry Forest')) }],
}, 18120, [
    new DungeonBossPokemon('Venomoth', 101427, 30),
    new DungeonBossPokemon('Hypno', 101427, 30),
], 1750, 29);
dungeonList['New Island'] = new Dungeon('New Island', [
    new DungeonTrainer('Armored Mewtwo', [
        new GymPokemon('Tentacruel', 18500, 40),
        new GymPokemon('Gyarados', 18500, 40),
    ], { weight: 1 }, ''),
    new DungeonTrainer('Armored Mewtwo', [
        new GymPokemon('Sandslash', 18500, 40),
        new GymPokemon('Vaporeon', 18500, 40),
        new GymPokemon('Golduck', 18500, 40),
    ], { weight: 1 }, ''),
    new DungeonTrainer('Armored Mewtwo', [
        new GymPokemon('Nidoqueen', 18500, 40),
        new GymPokemon('Ninetales', 18500, 40),
    ], { weight: 1 }, ''),
    new DungeonTrainer('Armored Mewtwo', [new GymPokemon('Blastoise (Clone)', 20000, 50)], { weight: 2 }, ''),
    new DungeonTrainer('Armored Mewtwo', [new GymPokemon('Venusaur (Clone)', 20000, 50)], { weight: 2 }, ''),
    new DungeonTrainer('Armored Mewtwo', [new GymPokemon('Charmander (Clone)', 20000, 50)], { weight: 2 }, ''),
    new DungeonTrainer('Armored Mewtwo', [
        new GymPokemon('Vulpix', 18500, 40),
        new GymPokemon('Vileplume', 18500, 40),
    ], { weight: 1 }, ''),
    new DungeonTrainer('Armored Mewtwo', [
        new GymPokemon('Wigglytuff', 18500, 40),
        new GymPokemon('Rapidash', 18500, 40),
    ], { weight: 1 }, ''),
    new DungeonTrainer('Armored Mewtwo', [new GymPokemon('Rhydon', 18500, 40)], { weight: 1 }, ''),
    new DungeonTrainer('Jessie and James', [new GymPokemon('Meowth', 150, 10)], { weight: 1 }, ''),
], {
    common: [{ loot: 'xClick' }],
    rare: [{ loot: 'Yellow Shard' }],
    mythic: [{ loot: 'Heart Scale' }],
}, 18500, [new DungeonBossPokemon('Armored Mewtwo', 131500, 70)], 1800, 40);
dungeonList['Victory Road'] = new Dungeon('Victory Road', [
    { pokemon: 'Arbok', options: { weight: 4.88 } },
    { pokemon: 'Sandslash', options: { weight: 4.88 } },
    { pokemon: 'Zubat', options: { weight: 4.88 } },
    { pokemon: 'Golbat', options: { weight: 4.88 } },
    { pokemon: 'Primeape', options: { weight: 4.88 } },
    { pokemon: 'Machop', options: { weight: 4.88 } },
    { pokemon: 'Geodude', options: { weight: 4.88 } },
    { pokemon: 'Onix', options: { weight: 4.88 } },
    { pokemon: 'Marowak', options: { weight: 4.88 } },
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Persian', 2000, 42),
        new GymPokemon('Ponyta', 2000, 42),
        new GymPokemon('Rapidash', 2000, 42),
        new GymPokemon('Vulpix', 2000, 42),
        new GymPokemon('Ninetales', 2000, 42),
    ], { weight: 1 }, 'Naomi', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Raticate', 2000, 42),
        new GymPokemon('Ivysaur', 2000, 42),
        new GymPokemon('Wartortle', 2000, 42),
        new GymPokemon('Charmeleon', 2000, 42),
        new GymPokemon('Charizard', 2000, 42),
    ], { weight: 1 }, 'Rolando', '(male)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Machoke', 2000, 43),
        new GymPokemon('Machop', 2000, 43),
        new GymPokemon('Machoke', 2000, 43),
    ], { weight: 1 }, 'Daisuke'),
    new DungeonTrainer('Juggler', [
        new GymPokemon('Drowzee', 2000, 41),
        new GymPokemon('Hypno', 2000, 41),
        new GymPokemon('Kadabra', 2000, 41),
        new GymPokemon('Kadabra', 2000, 41),
    ], { weight: 1 }, 'Nelson'),
    new DungeonTrainer('Tamer', [
        new GymPokemon('Persian', 2000, 44),
        new GymPokemon('Golduck', 2000, 44),
    ], { weight: 1 }, 'Vincent'),
    new DungeonTrainer('Juggler', [new GymPokemon('Mr. Mime', 2000, 48)], { weight: 1 }, 'Gregory'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Exeggutor', 2000, 42),
        new GymPokemon('Sandslash', 2000, 42),
        new GymPokemon('Cloyster', 2000, 42),
        new GymPokemon('Electrode', 2000, 42),
        new GymPokemon('Arcanine', 2000, 42),
    ], { weight: 1 }, 'George', '(male)'),
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Charmeleon', 2000, 40),
        new GymPokemon('Lapras', 2000, 40),
        new GymPokemon('Lickitung', 2000, 40),
    ], { weight: 1 }, 'Dawson'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Clefairy', 2000, 42),
        new GymPokemon('Jigglypuff', 2000, 42),
        new GymPokemon('Persian', 2000, 42),
        new GymPokemon('Dewgong', 2000, 42),
        new GymPokemon('Chansey', 2000, 42),
    ], { weight: 1 }, 'Alexa', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Kingler', 2000, 41),
        new GymPokemon('Poliwhirl', 2000, 42),
        new GymPokemon('Tentacruel', 2000, 42),
        new GymPokemon('Seadra', 2000, 42),
        new GymPokemon('Blastoise', 2000, 42),
    ], { weight: 1 }, 'Colby', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Bellsprout', 2000, 42),
        new GymPokemon('Weepinbell', 2000, 42),
        new GymPokemon('Victreebel', 2000, 42),
        new GymPokemon('Paras', 2000, 42),
        new GymPokemon('Parasect', 2000, 42),
    ], { weight: 1 }, 'Caroline', '(female)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    legendary: [
        { loot: 'Ultraball' },
        { loot: 'SmallRestore' },
    ],
    mythic: [
        { loot: 'Max Revive', weight: 2 },
        { loot: 'Star Piece' },
        { loot: 'Heart Scale' },
    ],
}, 24595, [
    new DungeonBossPokemon('Machoke', 122975, 42),
    new DungeonTrainer('Cool Couple', [
        new GymPokemon('Nidoking', 61488, 45),
        new GymPokemon('Nidoqueen', 61488, 45),
    ], { weight: 1 }, 'Ray & Tyra'),
    new DungeonBossPokemon('Pikachu (Easter)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Pikachu (Easter)', 5, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 2000, 23);
dungeonList['Cerulean Cave'] = new Dungeon('Cerulean Cave', ['Golbat', 'Parasect', 'Psyduck', 'Golduck', 'Primeape', 'Poliwag', 'Machoke', 'Slowpoke', 'Slowbro', 'Magneton', 'Electrode', 'Goldeen', 'Magikarp', 'Ditto'], {
    common: [
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Token_collector', weight: 2 },
        { loot: 'Lucky_incense', weight: 2 },
        { loot: 'Graveler' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Greatball' }],
    legendary: [{ loot: 'Ultraball' }],
    mythic: [
        { loot: 'LargeRestore' },
        { loot: 'Max Revive', weight: 2 },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(500, GameConstants.getDungeonIndex('Cerulean Cave')) },
    ],
}, 28735, [
    new DungeonBossPokemon('Kadabra', 183675, 60),
    new DungeonBossPokemon('Mewtwo', 255512, 100),
    new DungeonBossPokemon('Vivillon (Modern)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 2),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 3, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Modern)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 2500, 23);
dungeonList['Ruby Path'] = new Dungeon('Ruby Path', ['Geodude', 'Graveler', 'Machop', 'Machoke', 'Slugma'], {
    common: [
        { loot: 'xAttack', weight: 3 },
        { loot: 'Rawst', weight: 3 },
        { loot: 'Geodude' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Grey Shard' },
    ],
}, 720600, [new DungeonBossPokemon('Magcargo', 3703000, 20)], 43000, 30, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
dungeonList['Icefall Cave'] = new Dungeon('Icefall Cave', ['Zubat', 'Golbat', 'Seel', 'Psyduck', 'Slowpoke', 'Swinub', 'Delibird', 'Sneasel', 'Wooper', 'Marill', 'Magikarp', 'Poliwag', 'Goldeen', 'Poliwhirl', 'Tentacool', 'Tentacruel', 'Horsea', 'Krabby', 'Shellder', 'Staryu', 'Seadra', 'Kingler', 'Dewgong', 'Gyarados', 'Lapras'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'xClick' },
        { loot: 'Aspear' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Purple Shard' },
    ],
    epic: [
        { loot: 'Ultraball' },
        { loot: 'Splash Plate' },
        { loot: 'Icicle Plate' },
    ],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Never_Melt_Ice' },
    ],
}, 720600, [
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 250000, 20),
        new GymPokemon('Zubat', 250000, 20),
        new GymPokemon('Golbat', 250000, 20),
    ], { weight: 1 }, undefined, '(male)'),
], 43000, 30, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
dungeonList['Sunburst Island'] = new Dungeon('Sunburst Island', ['Hoppip', 'Tentacool', 'Tentacruel', 'Magikarp', 'Horsea', 'Krabby', 'Qwilfish', 'Remoraid', 'Gyarados', 'Seadra', 'Kingler', 'Psyduck', 'Slowpoke'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Red Shard' },
    ],
    epic: [
        { loot: 'Splash Plate' },
        { loot: 'Flame Plate' },
    ],
    legendary: [
        { loot: 'Heat Rock' },
        { loot: 'Icy Rock' },
    ],
}, 720600, [new DungeonBossPokemon('Crystal Onix', 4500000, 20)], 43000, 31, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
dungeonList['Lost Cave'] = new Dungeon('Lost Cave', [
    'Gastly', 'Haunter', 'Zubat', 'Golbat', 'Murkrow', 'Misdreavus',
    new DungeonTrainer('Ruin Maniac', [
        new GymPokemon('Onix', 200600, 20),
        new GymPokemon('Graveler', 200600, 20),
        new GymPokemon('Marowak', 200600, 20),
    ], { weight: 0.75 }, 'Lawson'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Natu', 200600, 20),
        new GymPokemon('Natu', 200600, 20),
        new GymPokemon('Xatu', 200600, 20),
    ], { weight: 0.75 }, 'Laura', '(female)'),
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Purple Shard' },
        { loot: 'Grey Shard' },
    ],
    epic: [
        { loot: 'Toxic Plate' },
        { loot: 'Spooky Plate' },
    ],
    legendary: [
        { loot: 'Max Revive' },
        { loot: 'Silk_Scarf' },
    ],
}, 720600, [
    new DungeonTrainer('Lady', [
        new GymPokemon('Persian', 1800000, 49),
        new GymPokemon('Persian', 1800000, 49),
    ], { weight: 1 }, 'Selphy'),
], 36000, 33, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
dungeonList['Pattern Bush'] = new Dungeon('Pattern Bush', [
    'Spinarak', 'Ledyba', 'Caterpie', 'Weedle', 'Metapod', 'Kakuna',
    new DungeonTrainer('Youngster', [
        new GymPokemon('Farfetch\'d', 720600, 20),
        new GymPokemon('Farfetch\'d', 720600, 20),
    ], { weight: 0.125 }, 'Cordell'),
    new DungeonTrainer('Pokémon Breeder', [new GymPokemon('Chansey', 720600, 20)], { weight: 0.125 }, 'Bethany', '(female)'),
    new DungeonTrainer('Bug Catcher', [new GymPokemon('Heracross', 720600, 20)], { weight: 0.125 }, 'Garett'),
    new DungeonTrainer('Lass', [new GymPokemon('Snubbull', 720600, 20)], { weight: 0.125 }, 'Joanna'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Weepinbell', 200000, 20),
        new GymPokemon('Weepinbell', 200000, 20),
        new GymPokemon('Victreebel', 200000, 20),
    ], { weight: 0.125 }, 'Nash'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Venonat', 200000, 20),
        new GymPokemon('Venomoth', 200000, 20),
    ], { weight: 0.125 }, 'Vance'),
    new DungeonTrainer('Ruin Maniac', [
        new GymPokemon('Sandslash', 200000, 20),
        new GymPokemon('Onix', 200000, 20),
        new GymPokemon('Sandslash', 200000, 20),
    ], { weight: 0.125 }, 'Layton'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Paras', 200000, 20),
        new GymPokemon('Paras', 200000, 20),
        new GymPokemon('Parasect', 200000, 20),
    ], { weight: 0.125 }, 'Marcy'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Yanma', 200000, 20),
        new GymPokemon('Beedrill', 200000, 20),
        new GymPokemon('Yanma', 200000, 20),
        new GymPokemon('Beedrill', 200000, 20),
    ], { weight: 0.125 }, 'Jonah'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Hoppip', 200000, 20),
        new GymPokemon('Hoppip', 200000, 20),
        new GymPokemon('Skiploom', 200000, 20),
        new GymPokemon('Skiploom', 200000, 20),
    ], { weight: 0.125 }, 'Dalia'),
    new DungeonTrainer('Pokémon Breeder', [
        new GymPokemon('Clefairy', 200000, 20),
        new GymPokemon('Clefairy', 200000, 20),
        new GymPokemon('Clefable', 200000, 20),
    ], { weight: 0.125 }, 'Allison', '(female)'),
    new DungeonTrainer('Camper', [
        new GymPokemon('Pinsir', 200000, 20),
        new GymPokemon('Heracross', 200000, 20),
    ], { weight: 0.125 }, 'Riley'),
], {
    common: [
        { loot: 'Cheri' },
        { loot: 'Chesto' },
        { loot: 'Pecha' },
        { loot: 'Rawst' },
        { loot: 'Aspear' },
        { loot: 'Leppa' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Persim' },
        { loot: 'Razz' },
        { loot: 'Bluk' },
        { loot: 'Nanab' },
        { loot: 'Wepear' },
        { loot: 'Pinap' },
        { loot: 'Figy' },
        { loot: 'Wiki' },
        { loot: 'Mago' },
        { loot: 'Aguav' },
        { loot: 'Iapapa' },
    ],
    mythic: [{ loot: 'Lum', requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Pattern Bush')) }],
}, 720600, [new DungeonBossPokemon('Heracross', 3703000, 20)], 43000, 35, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
dungeonList['Altering Cave'] = new Dungeon('Altering Cave', ['Zubat', 'Mareep', 'Pineco', 'Houndour', 'Teddiursa', 'Aipom', 'Shuckle'], {
    common: [
        { loot: 'xAttack' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Grey Shard' },
        { loot: 'Ochre Shard' },
    ],
    legendary: [
        { loot: 'SmallRestore', weight: 3 },
        { loot: 'MediumRestore', weight: 2 },
        { loot: 'LargeRestore' },
    ],
}, 720600, [
    new DungeonBossPokemon('Stantler', 3703000, 20),
    new DungeonBossPokemon('Smeargle', 3703000, 20),
], 43000, 36, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
// All Unown except "EFHP"
const TanobyUnownList = 'ABCDGIJKLMNOQRSTUVWXYZ!?'.split('');
const UnownHint = 'Unown appear at random everyday one at a time. An additional Unown will spawn after 100 and 250 clears of the ruins.';
dungeonList['Tanoby Ruins'] = new Dungeon('Tanoby Ruins', [
    'Tentacool', 'Tentacruel', 'Mantine', 'Magikarp', 'Horsea', 'Krabby', 'Qwilfish', 'Remoraid', 'Gyarados', 'Seadra', 'Psyduck', 'Kingler',
    new DungeonTrainer('Ruin Maniac', [new GymPokemon('Onix', 1940, 20)], { weight: 0.75 }, 'Brandon'),
    new DungeonTrainer('Gentleman', [
        new GymPokemon('Marowak', 200000, 20),
        new GymPokemon('Golduck', 200000, 20),
    ], { weight: 0.75 }, 'Clifford'),
    new DungeonTrainer('Painter', [new GymPokemon('Smeargle', 200000, 20)], { weight: 0.75 }, 'Allison'),
    new DungeonTrainer('Ruin Maniac', [
        new GymPokemon('Geodude', 200000, 20),
        new GymPokemon('Graveler', 200000, 20),
        new GymPokemon('Graveler', 200000, 20),
    ], { weight: 0.75 }, 'Benjamin'),
], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
    rare: [{ loot: 'Grey Shard' }],
    epic: [{ loot: 'Mind Plate' }],
    mythic: [{ loot: 'Heart Scale' }],
}, 720600, [
    ...TanobyUnownList.map((char, index) => {
        const req = new OneFromManyRequirement([
            new SeededDateSelectNRequirement(index, TanobyUnownList.length, 1),
            new MultiRequirement([new SeededDateSelectNRequirement(index, TanobyUnownList.length, 2), new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Tanoby Ruins'))]),
            new MultiRequirement([new SeededDateSelectNRequirement(index, TanobyUnownList.length, 3), new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Tanoby Ruins'))]),
        ]);
        return new DungeonBossPokemon(`Unown (${char})`, 4100000, 30, {
            hide: true,
            requirement: new CustomRequirement(ko.pureComputed(() => req.isCompleted()), true, UnownHint),
        });
    }),
], 43000, 39, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
dungeonList['Pinkan Mountain'] = new Dungeon('Pinkan Mountain', ['Pinkan Rattata', 'Pinkan Nidoran(M)', 'Pinkan Nidoran(F)', 'Pinkan Mankey', 'Pinkan Rhyhorn'], {
    common: [
        { loot: 'Pecha', weight: 6 },
        { loot: 'Persim' },
        { loot: 'Nanab' },
        { loot: 'Mago' },
    ],
    rare: [
        { loot: 'Purple Shard' },
        { loot: 'Pink Shard', requirement: new MaxRegionRequirement(GameConstants.Region.kalos) },
    ],
    epic: [
        { loot: 'Pinkan Pikachu', ignoreDebuff: true, requirement: new TemporaryBattleRequirement('Ash Ketchum Pinkan'), weight: 2 },
        { loot: 'Qualot' },
        { loot: 'Magost' },
        { loot: 'Watmel' },
    ],
    legendary: [{ loot: 'Fairy_Feather' }],
    mythic: [{ loot: 'Heart Scale' }],
}, 1503000, [
    new DungeonBossPokemon('Pinkan Primeape', 7000000, 40),
    new DungeonBossPokemon('Pinkan Rhydon', 7000000, 40),
    new DungeonBossPokemon('Pinkan Nidoking', 7000000, 40),
], 89500, 42, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.hoenn });
// Johto Dungeons
dungeonList['Sprout Tower'] = new Dungeon('Sprout Tower', [
    { pokemon: 'Rattata', options: { weight: 8 } },
    { pokemon: 'Gastly', options: { weight: 8 } },
    { pokemon: 'Hoothoot', options: { weight: 8 } },
    new DungeonTrainer('Sage', [
        new GymPokemon('Bellsprout', 2500, 3),
        new GymPokemon('Bellsprout', 2500, 3),
        new GymPokemon('Bellsprout', 2500, 3),
    ], { weight: 1 }, 'Nico'),
    new DungeonTrainer('Sage', [
        new GymPokemon('Bellsprout', 2500, 3),
        new GymPokemon('Bellsprout', 2500, 3),
        new GymPokemon('Bellsprout', 2500, 3),
    ], { weight: 1 }, 'Chow'),
    new DungeonTrainer('Sage', [
        new GymPokemon('Bellsprout', 2500, 3),
        new GymPokemon('Bellsprout', 2500, 3),
        new GymPokemon('Bellsprout', 2500, 3),
    ], { weight: 1 }, 'Edmond'),
    new DungeonTrainer('Sage', [new GymPokemon('Bellsprout', 2500, 6)], { weight: 1 }, 'Jin'),
    new DungeonTrainer('Sage', [new GymPokemon('Bellsprout', 2500, 6)], { weight: 1 }, 'Neal'),
    new DungeonTrainer('Sage', [
        new GymPokemon('Bellsprout', 2500, 7),
        new GymPokemon('Hoothoot', 2500, 7),
    ], { weight: 1 }, 'Troy'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_incense' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    legendary: [
        { loot: 'Meadow Plate', weight: 2 },
        { loot: 'SmallRestore' },
        { loot: 'Miracle_Seed' },
    ],
}, 56735, [
    new DungeonTrainer('Sage', [
        new GymPokemon('Bellsprout', 86000, 7),
        new GymPokemon('Bellsprout', 86000, 7),
        new GymPokemon('Hoothoot', 87000, 10),
    ], { weight: 1 }, 'Li'),
    new DungeonBossPokemon('Vivillon (Archipelago)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 12),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 13, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Archipelago)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 2500, 31);
// All Unown except "E?!"
const AlphUnownList = 'ABCDFGHIJKLMNOPQRSTUVWXYZ'.split('');
dungeonList['Ruins of Alph'] = new Dungeon('Ruins of Alph', [
    { pokemon: 'Poliwag', options: { weight: 0.6 } },
    { pokemon: 'Poliwhirl', options: { weight: 0.6 } },
    { pokemon: 'Magikarp', options: { weight: 0.6 } },
    { pokemon: 'Natu', options: { weight: 0.6 } },
    { pokemon: 'Wooper', options: { weight: 0.6 } },
    { pokemon: 'Quagsire', options: { weight: 0.6 } },
    { pokemon: 'Smeargle', options: { weight: 0.6 } },
    new DungeonTrainer('Psychic', [new GymPokemon('Girafarig', 3000, 26)], { weight: 1 }, 'Nathan', '(male)'),
], {
    common: [
        { loot: 'Oran', weight: 2 },
        { loot: 'Greatball' },
        { loot: 'Pecha' },
        { loot: 'Sitrus' },
        { loot: 'Leppa' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
    ],
    legendary: [
        { loot: 'SmallRestore', weight: 2 },
        { loot: 'Star Piece' },
        { loot: 'Twisted_Spoon' },
    ],
    mythic: [
        { loot: 'LargeRestore' },
        { loot: 'Max Revive' },
    ],
}, 60600, [
    ...AlphUnownList.map((char, index) => {
        const req = new OneFromManyRequirement([
            new SeededDateSelectNRequirement(index, AlphUnownList.length, 1),
            new MultiRequirement([new SeededDateSelectNRequirement(index, AlphUnownList.length, 2), new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Ruins of Alph'))]),
            new MultiRequirement([new SeededDateSelectNRequirement(index, AlphUnownList.length, 3), new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Ruins of Alph'))]),
        ]);
        return new DungeonBossPokemon(`Unown (${char})`, 280000, 14, {
            hide: true,
            requirement: new CustomRequirement(ko.pureComputed(() => req.isCompleted()), true, UnownHint),
        });
    }),
    new DungeonBossPokemon('Togepi (Flowering Crown)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Togepi (Flowering Crown)', 0, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 3000, 32);
dungeonList['Union Cave'] = new Dungeon('Union Cave', [
    { pokemon: 'Rattata', options: { weight: 1.5 } },
    { pokemon: 'Sandshrew', options: { weight: 1.5 } },
    { pokemon: 'Zubat', options: { weight: 1.5 } },
    { pokemon: 'Geodude', options: { weight: 1.5 } },
    { pokemon: 'Onix', options: { weight: 1.5 } },
    { pokemon: 'Goldeen', options: { weight: 1.5 } },
    { pokemon: 'Magikarp', options: { weight: 1.5 } },
    { pokemon: 'Wooper', options: { weight: 1.5 } },
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geodude', 2000, 4),
        new GymPokemon('Geodude', 3000, 6),
        new GymPokemon('Geodude', 4000, 8),
    ], { weight: 1 }, 'Russell'),
    new DungeonTrainer('Firebreather', [
        new GymPokemon('Koffing', 3000, 6),
        new GymPokemon('Koffing', 3000, 6),
    ], { weight: 1 }, 'Bill'),
    new DungeonTrainer('PokéManiac', [new GymPokemon('Slowpoke', 3000, 10)], { weight: 1 }, 'Larry'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'xClick', weight: 2 },
        { loot: 'Geodude' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Greatball' }],
    legendary: [
        { loot: 'SmallRestore' },
        { loot: 'Revive' },
        { loot: 'Soft_Sand', weight: 3 },
    ],
    mythic: [
        { loot: 'Ultraball' },
        { loot: 'LargeRestore' },
    ],
}, 63600, [
    new DungeonTrainer('Hiker', [new GymPokemon('Onix', 300000, 11)], { weight: 1 }, 'Daniel'),
    new DungeonTrainer('Firebreather', [new GymPokemon('Vulpix', 300000, 9)], { weight: 1 }, 'Ray'),
    new DungeonBossPokemon('Lapras', 450000, 20, {
        hide: true,
        requirement: new MultiRequirement([
            new GymBadgeRequirement(BadgeEnums.Fog),
            new DayOfWeekRequirement(GameConstants.DayOfWeek.Friday),
        ])
    }),
], 3000, 32);
dungeonList['Slowpoke Well'] = new Dungeon('Slowpoke Well', [
    { pokemon: 'Zubat', options: { weight: 6 } },
    { pokemon: 'Slowpoke', options: { weight: 6 } },
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 3500, 9),
        new GymPokemon('Rattata', 3500, 9),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 3500, 9),
        new GymPokemon('Ekans', 3500, 11),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 3500, 7),
        new GymPokemon('Zubat', 3500, 9),
        new GymPokemon('Zubat', 3500, 9),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'Token_collector', weight: 2 },
        { loot: 'Dowsing_machine' },
    ],
    rare: [{ loot: 'Grey Shard' }],
    epic: [
        { loot: 'Greatball' },
        { loot: 'Lureball' },
    ],
    legendary: [
        { loot: 'Splash Plate', weight: 2 },
        { loot: 'MediumRestore' },
        { loot: 'Poison_Barb' },
    ],
}, 67900, [
    new DungeonTrainer('Rocket Executive', [new GymPokemon('Koffing', 320000, 14)], { weight: 1 }, 'Proton', '(proton)'),
    new DungeonBossPokemon('Togepi (Flowering Crown)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Togepi (Flowering Crown)', 1, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 3500, 33);
dungeonList['Ilex Forest'] = new Dungeon('Ilex Forest', [
    { pokemon: 'Caterpie', options: { weight: 0.5 } },
    { pokemon: 'Metapod', options: { weight: 0.5 } },
    { pokemon: 'Weedle', options: { weight: 0.5 } },
    { pokemon: 'Kakuna', options: { weight: 0.5 } },
    { pokemon: 'Zubat', options: { weight: 0.5 } },
    { pokemon: 'Oddish', options: { weight: 0.5 } },
    { pokemon: 'Paras', options: { weight: 0.5 } },
    { pokemon: 'Hoothoot', options: { weight: 0.5 } },
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Ledyba', 4000, 8),
        new GymPokemon('Paras', 4000, 10),
    ], { weight: 1 }, 'Wayne'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Lucky_egg' },
    ],
    rare: [{ loot: 'Green Shard' }],
    epic: [{ loot: 'Spiky-eared Pichu', ignoreDebuff: true, requirement: new QuestLineStepCompletedRequirement('Unfinished Business', 7) }],
    legendary: [
        { loot: 'Revive' },
        { loot: 'Insect Plate' },
        { loot: 'MediumRestore' },
        { loot: 'Silver_Powder' },
    ],
    mythic: [{ loot: 'Zap Plate' }],
}, 82200, [
    new DungeonBossPokemon('Noctowl', 340000, 30),
    new DungeonBossPokemon('Beedrill', 340000, 30),
    new DungeonBossPokemon('Butterfree', 340000, 30),
    new DungeonBossPokemon('Celebi', 800000, 50, { requirement: new QuestLineStepCompletedRequirement('Unfinished Business', 12) }),
    new DungeonBossPokemon('Grinch Celebi', 1600000, 100, {
        hide: true,
        requirement: new MultiRequirement([
            new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion),
            new SpecialEventRequirement('Merry Christmas!'),
        ])
    }),
    new DungeonTrainer('Egg Hunter', [new GymPokemon('Togepi (Flowering Crown)', 900000, 100)], {
        hide: true,
        weight: 2,
        requirement: new MultiRequirement([
            new QuestLineStepCompletedRequirement('Egg Hunt', 0),
            new QuestLineStepCompletedRequirement('Egg Hunt', 1, GameConstants.AchievementOption.less),
        ]),
    }),
    new DungeonBossPokemon('Togepi (Flowering Crown)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Togepi (Flowering Crown)', 2, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 4000, 34);
dungeonList['Burned Tower'] = new Dungeon('Burned Tower', ['Rattata', 'Raticate', 'Zubat', 'Koffing'], {
    common: [
        { loot: 'Dowsing_machine', weight: 2 },
        { loot: 'xAttack' },
    ],
    rare: [{ loot: 'Red Shard' }],
    legendary: [
        { loot: 'Revive' },
        { loot: 'Flame Plate' },
        { loot: 'Ultraball' },
        { loot: 'Charcoal' },
    ],
}, 88500, [new DungeonBossPokemon('Golbat', 360000, 35), new DungeonBossPokemon('Weezing', 320000, 35), new DungeonBossPokemon('Shuckle', 610000, 50)], 4500, 37);
dungeonList['Olivine Lighthouse'] = new Dungeon('Olivine Lighthouse', [
    new DungeonTrainer('Gentleman', [new GymPokemon('Noctowl', 4550, 22)], { weight: 1 }, 'Alfred'),
    new DungeonTrainer('Sailor', [
        new GymPokemon('Poliwag', 4550, 18),
        new GymPokemon('Poliwhirl', 4550, 20),
    ], { weight: 1 }, 'Huey'),
    new DungeonTrainer('Bird Keeper', [
        new GymPokemon('Pidgey', 4200, 17),
        new GymPokemon('Pidgey', 4200, 15),
        new GymPokemon('Pidgey', 4200, 19),
        new GymPokemon('Pidgey', 4200, 15),
        new GymPokemon('Pidgey', 4200, 15),
    ], { weight: 1 }, 'Theo'),
    new DungeonTrainer('Sailor', [
        new GymPokemon('Krabby', 4550, 18),
        new GymPokemon('Krabby', 4550, 20),
    ], { weight: 1 }, 'Kent'),
    new DungeonTrainer('Bird Keeper', [
        new GymPokemon('Spearow', 4550, 18),
        new GymPokemon('Fearow', 4550, 20),
        new GymPokemon('Spearow', 4550, 18),
    ], { weight: 1 }, 'Denis'),
    new DungeonTrainer('Gentleman', [
        new GymPokemon('Growlithe', 4550, 18),
        new GymPokemon('Growlithe', 4550, 18),
    ], { weight: 1 }, 'Preston'),
    new DungeonTrainer('Lass', [new GymPokemon('Marill', 4550, 21)], { weight: 1 }, 'Connie'),
    new DungeonTrainer('Sailor', [new GymPokemon('Poliwhirl', 4550, 20)], { weight: 1 }, 'Terell'),
], {
    common: [
        { loot: 'Lucky_incense', weight: 2 },
        { loot: 'Dowsing_machine' },
    ],
    rare: [{ loot: 'Yellow Shard' }],
    epic: [{ loot: 'Greatball' }],
    legendary: [
        { loot: 'Zap Plate' },
        { loot: 'MediumRestore' },
    ],
    mythic: [
        { loot: 'Ultraball' },
        { loot: 'LargeRestore' },
    ],
}, 88500, [
    new DungeonTrainer('Sailor', [
        new GymPokemon('Machop', 125000, 18),
        new GymPokemon('Machop', 125000, 18),
        new GymPokemon('Poliwhirl', 125000, 18),
    ], { weight: 1 }, 'Roberto'),
], 4500, 40);
dungeonList['Tin Tower'] = new Dungeon('Tin Tower', ['Rattata', 'Gastly'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Grey Shard' },
    ],
    legendary: [
        { loot: 'MediumRestore' },
        { loot: 'Ultraball' },
        { loot: 'Flame Plate' },
        { loot: 'Spooky Plate' },
        { loot: 'Sky Plate' },
        { loot: 'Sharp_Beak' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 88500, [
    new DungeonBossPokemon('Raticate', 380000, 35),
    new DungeonBossPokemon('Haunter', 380000, 35),
    new DungeonBossPokemon('Ho-Oh', 1410000, 100, { requirement: new QuestLineStepCompletedRequirement('Rainbow Guardian', 1) }),
    new DungeonBossPokemon('Togepi (Flowering Crown)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Togepi (Flowering Crown)', 4, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 4500, 37);
dungeonList['Whirl Islands'] = new Dungeon('Whirl Islands', ['Zubat', 'Golbat', 'Seel', 'Krabby', 'Horsea'], {
    common: [
        { loot: 'Lucky_incense' },
        { loot: 'Token_collector' },
    ],
    rare: [{ loot: 'Blue Shard' }],
    epic: [{ loot: 'Moonball' }],
    legendary: [
        { loot: 'Revive' },
        { loot: 'Mind Plate' },
        { loot: 'Sky Plate' },
        { loot: 'Mystic_Water' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 92800, [
    new DungeonBossPokemon('Dewgong', 400000, 40),
    new DungeonBossPokemon('Kingler', 400000, 40),
    new DungeonBossPokemon('Lugia', 1410000, 100, { requirement: new QuestLineStepCompletedRequirement('Whirl Guardian', 9) }),
    new DungeonBossPokemon('Togepi (Flowering Crown)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Togepi (Flowering Crown)', 3, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 5000, 41);
dungeonList['Mt. Mortar'] = new Dungeon('Mt. Mortar', [
    { pokemon: 'Rattata', options: { weight: 0.5 } },
    { pokemon: 'Raticate', options: { weight: 0.5 } },
    { pokemon: 'Zubat', options: { weight: 0.5 } },
    { pokemon: 'Golbat', options: { weight: 0.5 } },
    { pokemon: 'Geodude', options: { weight: 0.5 } },
    { pokemon: 'Graveler', options: { weight: 0.5 } },
    { pokemon: 'Marill', options: { weight: 0.5 } },
    new DungeonTrainer('PokéManiac', [
        new GymPokemon('Nidoking', 5500, 17),
        new GymPokemon('Nidoqueen', 5500, 17),
    ], { weight: 1 }, 'Miller'),
    new DungeonTrainer('Super Nerd', [new GymPokemon('Slowpoke', 5500, 19)], { weight: 1 }, 'Markus'),
    new DungeonTrainer('Super Nerd', [new GymPokemon('Seadra', 5500, 39)], { weight: 1 }, 'Hugh'),
], {
    common: [
        { loot: 'xAttack', weight: 6 },
        { loot: 'Graveler' },
    ],
    rare: [{ loot: 'Grey Shard' }],
    epic: [
        { loot: 'Iron Plate' },
        { loot: 'Stone Plate' },
        { loot: 'Earth Plate' },
        { loot: 'Draco Plate' },
    ],
    legendary: [
        { loot: 'Ultraball' },
        { loot: 'LargeRestore' },
        { loot: 'Revive' },
        { loot: 'Black_Belt' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 104100, [
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Hitmonlee', 210000, 34),
        new GymPokemon('Hitmonchan', 210000, 34),
    ], { weight: 1 }, 'Kiyo'),
    new DungeonBossPokemon('Tyrogue', 420000, 45, { hide: true, requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Mortar')) }),
], 5500, 42, () => {
    BagHandler.gainItem({ type: ItemType.item, id: 'Fighting_egg' }, 1);
    Notifier.notify({
        message: 'You were awarded a Fighting Egg for defeating Black Belt Kiyo.',
        type: NotificationConstants.NotificationOption.success,
        setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
    });
});
dungeonList['Team Rocket\'s Hideout'] = new Dungeon('Team Rocket\'s Hideout', [
    { pokemon: 'Geodude', options: { weight: 0.5 } },
    { pokemon: 'Voltorb', options: { weight: 0.5 } },
    { pokemon: 'Electrode', options: { weight: 0.5 } },
    { pokemon: 'Koffing', options: { weight: 0.5 } },
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 5500, 16),
        new GymPokemon('Rattata', 5500, 16),
        new GymPokemon('Rattata', 5500, 16),
        new GymPokemon('Rattata', 5500, 16),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magnemite', 5500, 20),
        new GymPokemon('Magnemite', 5500, 20),
        new GymPokemon('Magnemite', 5500, 20),
    ], { weight: 1 }, 'Jed', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Drowzee', 5500, 17),
        new GymPokemon('Zubat', 5500, 19),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 5500, 16),
        new GymPokemon('Grimer', 5500, 17),
        new GymPokemon('Rattata', 5500, 18),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Venonat', 5500, 18),
        new GymPokemon('Venonat', 5500, 18),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Golbat', 5500, 18)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 5500, 17),
        new GymPokemon('Zubat', 5500, 17),
        new GymPokemon('Rattata', 5500, 17),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Ekans', 5500, 18),
        new GymPokemon('Gloom', 5500, 18),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Raticate', 5500, 19)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Koffing', 5500, 22),
        new GymPokemon('Koffing', 5500, 22),
    ], { weight: 1 }, 'Ross', '(male)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Ditto', 5500, 24)], { weight: 1 }, 'Mitch', '(male)'),
], {
    common: [
        { loot: 'xAttack', weight: 3 },
        { loot: 'Token_collector', weight: 3 },
        { loot: 'Electrode' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
    ],
    legendary: [
        { loot: 'Ultraball', weight: 2 },
        { loot: 'Revive', weight: 2 },
        { loot: 'LargeRestore' },
        { loot: 'Dread Plate' },
        { loot: 'Splash Plate' },
        { loot: 'Black_Glasses' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Team Rocket\'s Hideout')) }],
}, 104100, [
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Zubat', 140000, 22),
        new GymPokemon('Koffing', 140000, 22),
        new GymPokemon('Raticate', 140000, 24),
    ], { weight: 1 }, 'Petrel', '(petrel)'),
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Arbok', 140000, 23),
        new GymPokemon('Gloom', 140000, 23),
        new GymPokemon('Murkrow', 140000, 25),
    ], { weight: 1 }, 'Ariana', '(ariana)'),
], 5500, 43);
dungeonList['Radio Tower'] = new Dungeon('Radio Tower', [
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Rattata', 5750, 27)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Muk', 5750, 23),
        new GymPokemon('Koffing', 5750, 23),
        new GymPokemon('Rattata', 5750, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Koffing', 5750, 24),
        new GymPokemon('Muk', 5750, 24),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Burglar', [
        new GymPokemon('Growlithe', 5500, 26),
        new GymPokemon('Koffing', 5500, 24),
    ], { weight: 1 }, 'Eddie'),
    new DungeonTrainer('Burglar', [
        new GymPokemon('Koffing', 5500, 23),
        new GymPokemon('Magmar', 5500, 25),
        new GymPokemon('Koffing', 5500, 23),
    ], { weight: 1 }, 'Duncan'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Gloom', 5750, 25),
        new GymPokemon('Gloom', 5750, 25),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Raticate', 5750, 24),
        new GymPokemon('Golbat', 5750, 24),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Grimer', 5750, 26),
        new GymPokemon('Weezing', 5750, 23),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Koffing', 5750, 25),
        new GymPokemon('Koffing', 5750, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Raticate', 5750, 24),
        new GymPokemon('Raticate', 5750, 24),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Arbok', 5750, 26)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Rattata', 5750, 21),
        new GymPokemon('Rattata', 5750, 21),
        new GymPokemon('Rattata', 5750, 21),
        new GymPokemon('Rattata', 5750, 21),
        new GymPokemon('Rattata', 5750, 21),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Grimer', 5750, 23),
        new GymPokemon('Grimer', 5750, 23),
        new GymPokemon('Muk', 5750, 25),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 5750, 26),
        new GymPokemon('Zubat', 5750, 26),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Koffing', 5750, 23),
        new GymPokemon('Zubat', 5750, 23),
        new GymPokemon('Rattata', 5750, 23),
        new GymPokemon('Grimer', 5750, 23),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magnemite', 5500, 27),
        new GymPokemon('Magnemite', 5500, 27),
        new GymPokemon('Magnemite', 5500, 27),
    ], { weight: 1 }, 'Marc', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [new GymPokemon('Weezing', 5750, 26)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Raticate', 5750, 24),
        new GymPokemon('Koffing', 5750, 26),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Zubat', 5750, 22),
        new GymPokemon('Golbat', 5750, 24),
        new GymPokemon('Grimer', 5750, 22),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Porygon', 5750, 30)], { weight: 1 }, 'Rich', '(male)'),
    new DungeonTrainer('Team Rocket Grunt', [
        new GymPokemon('Ekans', 5750, 21),
        new GymPokemon('Oddish', 5750, 23),
        new GymPokemon('Ekans', 5750, 21),
        new GymPokemon('Gloom', 5750, 24),
    ], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_egg' },
    ],
    rare: [{ loot: 'Yellow Shard' }],
    epic: [
        { loot: 'Persim' },
        { loot: 'Razz' },
        { loot: 'Bluk' },
        { loot: 'Nanab' },
        { loot: 'Wepear' },
        { loot: 'Pinap' },
        { loot: 'Figy' },
        { loot: 'Wiki' },
        { loot: 'Mago' },
        { loot: 'Aguav' },
        { loot: 'Iapapa' },
    ],
    legendary: [
        { loot: 'Metal_Powder' },
        { loot: 'Magnet' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Radio Tower')) },
    ],
}, 112000, [
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Houndour', 143000, 33),
        new GymPokemon('Koffing', 143000, 32),
        new GymPokemon('Houndoom', 144000, 35),
    ], { weight: 1 }, 'Archer', '(archer)'),
    new DungeonTrainer('Rocket Executive', [new GymPokemon('Golbat', 430000, 36)], { weight: 1 }, 'Proton', '(proton)'),
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Koffing', 71000, 30),
        new GymPokemon('Koffing', 71000, 30),
        new GymPokemon('Koffing', 71000, 30),
        new GymPokemon('Koffing', 71000, 30),
        new GymPokemon('Weezing', 72000, 32),
        new GymPokemon('Koffing', 71000, 30),
    ], { weight: 1 }, 'Petrel', '(petrel)'),
    new DungeonTrainer('Rocket Executive', [
        new GymPokemon('Arbok', 143000, 32),
        new GymPokemon('Gloom', 143000, 32),
        new GymPokemon('Murkrow', 144000, 32),
    ], { weight: 1 }, 'Ariana', '(ariana)'),
], 5750, 43);
dungeonList['Ice Path'] = new Dungeon('Ice Path', ['Zubat', 'Jynx', 'Swinub'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_egg' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Purple Shard' },
    ],
    legendary: [
        { loot: 'Icicle Plate' },
        { loot: 'Revive' },
        { loot: 'Never_Melt_Ice' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(450, GameConstants.getDungeonIndex('Ice Path')) }],
}, 120400, [
    new DungeonBossPokemon('Delibird', 440000, 50),
    new DungeonBossPokemon('Togepi (Flowering Crown)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Togepi (Flowering Crown)', 5, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 6000, 44);
dungeonList['Dark Cave'] = new Dungeon('Dark Cave', ['Zubat', 'Golbat', 'Geodude', 'Graveler', 'Wobbuffet'], {
    common: [
        { loot: 'Pokeball' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [{ loot: 'Purple Shard' }],
    legendary: [
        { loot: 'Dread Plate', weight: 2 },
        { loot: 'Revive' },
        { loot: 'Star Piece' },
        { loot: 'SmallRestore' },
        { loot: 'Silk_Scarf' },
    ],
    mythic: [
        { loot: 'Heart Scale' },
        { loot: 'Max Revive' },
    ],
}, 127000, [
    new DungeonBossPokemon('Dunsparce', 460000, 55),
    new DungeonBossPokemon('Vivillon (Monsoon)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 6),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 7, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Monsoon)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 6500, 45);
dungeonList['Tohjo Falls'] = new Dungeon('Tohjo Falls', ['Rattata', 'Raticate', 'Zubat', 'Slowpoke', 'Goldeen', 'Magikarp'], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
    ],
    legendary: [
        { loot: 'Hard Stone' },
        { loot: 'SmallRestore' },
        { loot: 'Fairy_Feather' },
        { loot: 'Rock_Incense' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 127750, [
    new DungeonBossPokemon('Golbat', 480000, 55),
    new DungeonBossPokemon('Seaking', 480000, 55),
], 6750, 45);
dungeonList['Victory Road Johto'] = new Dungeon('Victory Road Johto', ['Golbat', 'Graveler', 'Onix', 'Rhyhorn'], {
    common: [
        { loot: 'Dowsing_machine', weight: 6 },
        { loot: 'Graveler' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
    ],
    legendary: [
        { loot: 'Earth Plate', weight: 2 },
        { loot: 'Ultraball', weight: 2 },
        { loot: 'SmallRestore', weight: 2 },
        { loot: 'LargeRestore' },
        { loot: 'Dragon_Fang' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 128500, [
    new DungeonBossPokemon('Sandslash', 500000, 55),
    new DungeonBossPokemon('Rhydon', 500000, 55),
], 7000, 26);
dungeonList['Mt. Silver'] = new Dungeon('Mt. Silver', ['Ponyta', 'Doduo', 'Tangela', 'Sneasel', 'Ursaring', 'Donphan', 'Teddiursa', 'Phanpy', 'Quagsire', 'Misdreavus'], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
    ],
    legendary: [
        { loot: 'Fist Plate', weight: 2 },
        { loot: 'Zap Plate', weight: 2 },
        { loot: 'Ultraball', weight: 2 },
        { loot: 'LargeRestore' },
        { loot: 'Revive' },
        { loot: 'Star Piece' },
        { loot: 'Spell_Tag' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Heart Scale' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(450, GameConstants.getDungeonIndex('Mt. Silver')) },
    ],
}, 130500, [new DungeonBossPokemon('Larvitar', 840000, 60)], 10000, 28);
// Hoenn Dungeons
dungeonList['Petalburg Woods'] = new Dungeon('Petalburg Woods', [
    { pokemon: 'Poochyena', options: { weight: 1.33 } },
    { pokemon: 'Wurmple', options: { weight: 1.33 } },
    { pokemon: 'Silcoon', options: { weight: 1.33 } },
    { pokemon: 'Cascoon', options: { weight: 1.33 } },
    { pokemon: 'Taillow', options: { weight: 1.33 } },
    { pokemon: 'Shroomish', options: { weight: 1.33 } },
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Wurmple', 12000, 3),
        new GymPokemon('Wurmple', 12000, 3),
        new GymPokemon('Wurmple', 12000, 3),
        new GymPokemon('Wurmple', 12000, 3),
    ], { weight: 1 }, 'Lyle'),
    new DungeonTrainer('Bug Catcher', [
        new GymPokemon('Nincada', 12000, 6),
        new GymPokemon('Nincada', 12000, 6),
    ], { weight: 1 }, 'James'),
], {
    common: [
        { loot: 'Pokeball' },
        { loot: 'Token_collector' },
    ],
    rare: [{ loot: 'Green Shard' }],
    epic: [
        { loot: 'Meadow Plate' },
        { loot: 'Insect Plate' },
        { loot: 'Iron Plate' },
        { loot: 'Greatball' },
    ],
    legendary: [
        { loot: 'SmallRestore' },
        { loot: 'Miracle_Seed' },
    ],
}, 380000, [
    new DungeonBossPokemon('Slakoth', 860000, 10, { hide: true, requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Petalburg Woods')) }),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 860000, 9)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Egg Hunter', [new GymPokemon('Togepi (Flowering Crown)', 2700000, 100)], {
        hide: true,
        weight: 0.34,
        requirement: new MultiRequirement([
            new QuestLineStepCompletedRequirement('Egg Hunt', 1),
            new QuestLineStepCompletedRequirement('Egg Hunt', 2, GameConstants.AchievementOption.less),
        ]),
    }),
    new DungeonBossPokemon('Torchic (Egg)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Torchic (Egg)', 0, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 12000, 101);
dungeonList['Rusturf Tunnel'] = new Dungeon('Rusturf Tunnel', [
    { pokemon: 'Whismur', options: { weight: 4 } },
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geodude', 14000, 16),
        new GymPokemon('Geodude', 14000, 16),
        new GymPokemon('Machop', 14000, 16),
    ], { weight: 1 }, 'Mike'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Pokeball' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    legendary: [
        { loot: 'Stone Plate', weight: 2 },
        { loot: 'Iron Plate', weight: 2 },
        { loot: 'Earth Plate', weight: 2 },
        { loot: 'Revive' },
        { loot: 'Star Piece' },
        { loot: 'Hard Stone' },
        { loot: 'Aggronite', ignoreDebuff: true, requirement: new MaxRegionRequirement(GameConstants.Region.kalos) },
    ],
    mythic: [{ loot: 'Heart Scale' }],
}, 400000, [
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 900000, 11)], { weight: 1 }, undefined, '(male)'),
    new DungeonBossPokemon('Torchic (Egg)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Torchic (Egg)', 1, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 14000, 101);
dungeonList['Granite Cave'] = new Dungeon('Granite Cave', ['Zubat', 'Abra', 'Geodude', 'Makuhita', 'Aron', 'Sableye'], {
    common: [
        { loot: 'Pokeball' },
        { loot: 'xAttack' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Iron Plate' },
        { loot: 'Earth Plate' },
        { loot: 'Everstone' },
        { loot: 'Revive' },
    ],
    legendary: [
        { loot: 'MediumRestore' },
        { loot: 'Star Piece', ignoreDebuff: true },
        { loot: 'Rock_Incense' },
    ],
    mythic: [{ loot: 'Heart Scale' }],
}, 410000, [
    new DungeonBossPokemon('Mawile', 960000, 20),
    new DungeonBossPokemon('Nosepass', 660000, 20),
    new DungeonTrainer('Lorekeeper', [
        new GymPokemon('Tyrantrum', 4073950, 57),
        new GymPokemon('Altaria', 4073950, 57),
        new GymPokemon('Salamence', 4073950, 57),
        new GymPokemon('Whismur', 4073950, 57),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('The Delta Episode', 9) }, 'Zinnia'),
], 16000, 101);
dungeonList['Fiery Path'] = new Dungeon('Fiery Path', ['Machop', 'Grimer', 'Koffing', 'Slugma', 'Numel'], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [{ loot: 'Red Shard' }],
    legendary: [
        { loot: 'Flame Plate' },
        { loot: 'Draco Plate' },
    ],
}, 424000, [new DungeonBossPokemon('Torkoal', 1200000, 20)], 17000, 101);
dungeonList['Meteor Falls'] = new Dungeon('Meteor Falls', [
    { pokemon: 'Zubat', options: { weight: 0.8 } },
    { pokemon: 'Golbat', options: { weight: 0.8 } },
    { pokemon: 'Goldeen', options: { weight: 0.8 } },
    { pokemon: 'Magikarp', options: { weight: 0.8 } },
    { pokemon: 'Barboach', options: { weight: 0.8 } },
    { pokemon: 'Bagon', options: { weight: 0.8, hide: true, requirement: new ObtainedPokemonRequirement('Bagon') } },
    new DungeonTrainer('Old Couple', [
        new GymPokemon('Medicham', 18000, 39),
        new GymPokemon('Hariyama', 18000, 39),
    ], { weight: 1 }, 'John and Jay'),
], {
    common: [
        { loot: 'Lucky_incense', weight: 6 },
        { loot: 'Pokeball', weight: 4 },
        { loot: 'Greatball' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [
        { loot: 'Stone Plate' },
        { loot: 'Sky Plate' },
        { loot: 'Draco Plate' },
        { loot: 'Moonball' },
    ],
    mythic: [{ loot: 'Star Piece' }],
}, 443000, [
    new DungeonBossPokemon('Solrock', 1240000, 20),
    new DungeonBossPokemon('Lunatone', 1240000, 20),
    new DungeonTrainer('Dragon Tamer', [
        new GymPokemon('Altaria', 640000, 37),
        new GymPokemon('Altaria', 640000, 37),
    ], { weight: 1 }, 'Nicolas'),
    new DungeonTrainer('Draconid Elder', [
        new GymPokemon('Dragonite', 4073950, 57),
        new GymPokemon('Flygon', 4073950, 57),
        new GymPokemon('Haxorus', 4073950, 57),
        new GymPokemon('Garchomp', 4073950, 57),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('The Delta Episode', 16) }),
    new DungeonBossPokemon('Torchic (Egg)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Torchic (Egg)', 2, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 18000, 101);
dungeonList['Mt. Chimney Crater'] = new Dungeon('Mt. Chimney Crater', [
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Numel', 20000, 20)], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Zubat', 20000, 20)], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Magma Admin', [
        new GymPokemon('Numel', 18000, 18),
        new GymPokemon('Poochyena', 20000, 20),
        new GymPokemon('Numel', 22000, 22),
        new GymPokemon('Zubat', 22000, 22),
    ], { weight: 1 }, 'Tabitha'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
    ],
    legendary: [{ loot: 'Flame Plate' }],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Mt. Chimney Crater')) }],
}, 460000, [
    new DungeonTrainer('Magma Leader', [
        new GymPokemon('Mightyena', 450000, 24),
        new GymPokemon('Zubat', 450000, 24),
        new GymPokemon('Camerupt', 470000, 25),
    ], { weight: 2, hide: true, requirement: new QuestLineCompletedRequirement('The Delta Episode', GameConstants.AchievementOption.less) }, 'Maxie'),
    new DungeonTrainer('Magma Leader', [
        new GymPokemon('Mightyena', 4500000, 54),
        new GymPokemon('Zubat', 4500000, 54),
        new GymPokemon('Mega Camerupt', 4700000, 55),
    ], { weight: 2, hide: true, requirement: new QuestLineCompletedRequirement('The Delta Episode') }, 'Maxie'),
    new DungeonBossPokemon('Meta Groudon', 1820000, 20, { hide: true, requirement: new QuestLineStepCompletedRequirement('A Meta Discovery', 3) }),
    new DungeonBossPokemon('Vivillon (Sun)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 10),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 11, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Sun)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 20000, 101);
dungeonList['Jagged Pass'] = new Dungeon('Jagged Pass', [
    { pokemon: 'Machop', options: { weight: 0.8 } },
    { pokemon: 'Numel', options: { weight: 0.8 } },
    { pokemon: 'Spoink', options: { weight: 0.8 } },
    new DungeonTrainer('Hiker', [
        new GymPokemon('Geodude', 22000, 20),
        new GymPokemon('Baltoy', 22000, 20),
    ], { weight: 1 }, 'Eric'),
    new DungeonTrainer('Picnicker', [
        new GymPokemon('Shroomish', 22000, 19),
        new GymPokemon('Oddish', 22000, 19),
        new GymPokemon('Swablu', 22000, 19),
    ], { weight: 1 }, 'Diana'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Shroomish', 22000, 21)], { weight: 1 }, 'Autumn'),
    new DungeonTrainer('Triathlete', [new GymPokemon('Magnemite', 22000, 21)], { weight: 1 }, 'Julio', '(malecycling)'),
    new DungeonTrainer('Camper', [
        new GymPokemon('Zigzagoon', 22000, 20),
        new GymPokemon('Taillow', 22000, 20),
    ], { weight: 1 }, 'Ethan'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [{ loot: 'Greatball' }],
    legendary: [
        { loot: 'Dread Plate' },
        { loot: 'Stone Plate' },
    ],
}, 460000, [
    new DungeonTrainer('Team Magma Grunt', [
        new GymPokemon('Mightyena', 700000, 22),
        new GymPokemon('Zubat', 700000, 22),
    ], { weight: 1 }, undefined, '(male)'),
], 22000, 101);
dungeonList['New Mauville'] = new Dungeon('New Mauville', ['Magnemite', 'Voltorb'], {
    common: [
        { loot: 'Lucky_incense', weight: 3 },
        { loot: 'Cheri', weight: 3 },
        { loot: 'Voltorb' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
    ],
    epic: [
        { loot: 'Razz' },
        { loot: 'Ultraball' },
    ],
    legendary: [{ loot: 'Zap Plate' }],
}, 460000, [
    new DungeonBossPokemon('Magneton', 1650000, 20),
    new DungeonBossPokemon('Electrode', 1650000, 20),
    new DungeonBossPokemon('Vivillon (Continental)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 18),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 19, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Continental)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
    new DungeonBossPokemon('Torchic (Egg)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Torchic (Egg)', 3, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 24000, 101);
dungeonList['Weather Institute'] = new Dungeon('Weather Institute', [
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 39000, 28)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Zubat', 39000, 27),
        new GymPokemon('Poochyena', 39000, 27),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Poochyena', 39000, 27),
        new GymPokemon('Carvanha', 39000, 27),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Zubat', 39000, 27),
        new GymPokemon('Poochyena', 39000, 27),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Poochyena', 39000, 26),
        new GymPokemon('Zubat', 39000, 26),
        new GymPokemon('Carvanha', 39000, 26),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Damp Rock' },
        { loot: 'Smooth Rock' },
        { loot: 'Heat Rock' },
        { loot: 'Icy Rock' },
    ],
    legendary: [
        { loot: 'Splash Plate' },
        { loot: 'Mystic_Water' },
    ],
}, 470000, [
    new DungeonTrainer('Aqua Admin', [
        new GymPokemon('Carvanha', 910000, 28),
        new GymPokemon('Mightyena', 910000, 28),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 9, GameConstants.AchievementOption.less) }, 'Shelly', '(shelly)'),
    new DungeonTrainer('Aqua Admin', [
        new GymPokemon('Carvanha', 4500000, 58),
        new GymPokemon('Mightyena', 4500000, 58),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 9) }, 'Shelly', '(shelly)'),
    new DungeonBossPokemon('Castform', 1820000, 20, { hide: true, requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Weather Institute')) }),
    new DungeonBossPokemon('Castform (Sunny)', 1820000, 20, { hide: true, requirement: new MultiRequirement([new ObtainedPokemonRequirement('Castform'), new WeatherRequirement([WeatherType.Harsh_Sunlight])]) }),
    new DungeonBossPokemon('Castform (Rainy)', 1820000, 20, { hide: true, requirement: new MultiRequirement([new ObtainedPokemonRequirement('Castform'), new WeatherRequirement([WeatherType.Rain, WeatherType.Thunderstorm])]) }),
    new DungeonBossPokemon('Castform (Snowy)', 1820000, 20, { hide: true, requirement: new MultiRequirement([new ObtainedPokemonRequirement('Castform'), new WeatherRequirement([WeatherType.Snow, WeatherType.Blizzard, WeatherType.Hail])]) }),
], 26000, 101);
dungeonList['Mt. Pyre'] = new Dungeon('Mt. Pyre', [
    { pokemon: 'Shuppet', options: { weight: 12 } },
    { pokemon: 'Duskull', options: { weight: 12 } },
    { pokemon: 'Vulpix', options: { weight: 12 } },
    { pokemon: 'Wingull', options: { weight: 12 } },
    { pokemon: 'Meditite', options: { weight: 12 } },
    new DungeonTrainer('PokéManiac', [new GymPokemon('Rhyhorn', 28000, 31)], { weight: 1 }, 'Mark'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Spoink', 28000, 31)], { weight: 1 }, 'Leah'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Hariyama', 28000, 31)], { weight: 1 }, 'Zander'),
    new DungeonTrainer('Young Couple', [
        new GymPokemon('Delcatty', 28000, 31),
        new GymPokemon('Manectric', 28000, 31),
    ], { weight: 1 }, 'Dez & Luke'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Wobbuffet', 28000, 26),
        new GymPokemon('Natu', 28000, 26),
        new GymPokemon('Kadabra', 28000, 26),
    ], { weight: 1 }, 'Kayla', '(female)'),
    new DungeonTrainer('Pokémon Breeder', [
        new GymPokemon('Skitty', 15000, 26),
        new GymPokemon('Poochyena', 15000, 26),
        new GymPokemon('Zigzagoon', 15000, 26),
        new GymPokemon('Lotad', 15000, 26),
        new GymPokemon('Seedot', 15000, 26),
        new GymPokemon('Taillow', 15000, 26),
    ], { weight: 1 }, 'Gabrielle', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Ralts', 28000, 26),
        new GymPokemon('Ralts', 28000, 26),
        new GymPokemon('Kirlia', 28000, 26),
    ], { weight: 1 }, 'William', '(male)'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Shuppet', 28000, 32)], { weight: 1 }, 'Tasha'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Hariyama', 28000, 32)], { weight: 1 }, 'Atsushi'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Sableye', 28000, 32)], { weight: 1 }, 'Valerie'),
    new DungeonTrainer('Psychic', [new GymPokemon('Wobbuffet', 28000, 32)], { weight: 1 }, 'Cedric', '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 28000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 28000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Poochyena', 28000, 30),
        new GymPokemon('Carvanha', 28000, 30),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Wailmer', 28000, 30),
        new GymPokemon('Zubat', 28000, 30),
    ], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_incense' },
    ],
    rare: [{ loot: 'Purple Shard' }],
    epic: [{ loot: 'Ultraball' }],
    legendary: [
        { loot: 'Spooky Plate' },
        { loot: 'Fist Plate' },
        { loot: 'Mind Plate' },
        { loot: 'Black_Belt' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Mt. Pyre')) }],
}, 480000, [
    new DungeonBossPokemon('Shuppet', 1880000, 20),
    new DungeonBossPokemon('Duskull', 1890000, 20),
    new DungeonBossPokemon('Chimecho', 1880000, 20),
], 28000, 101);
dungeonList['Magma Hideout'] = new Dungeon('Magma Hideout', [
    { pokemon: 'Geodude', options: { weight: 12 } },
    { pokemon: 'Graveler', options: { weight: 12 } },
    { pokemon: 'Torkoal', options: { weight: 12 } },
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Poochyena', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Numel', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Mightyena', 29000, 29)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [
        new GymPokemon('Baltoy', 29000, 28),
        new GymPokemon('Numel', 29000, 28),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Zubat', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Numel', 29000, 29)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Mightyena', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Baltoy', 29000, 29)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Magma Grunt', [new GymPokemon('Baltoy', 29000, 29)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Magma Admin', [
        new GymPokemon('Numel', 6000, 26),
        new GymPokemon('Mightyena', 8000, 28),
        new GymPokemon('Zubat', 10000, 30),
        new GymPokemon('Camerupt', 13000, 33),
    ], { weight: 1 }, 'Tabitha'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Figy', weight: 2 },
        { loot: 'Pinap' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    legendary: [
        { loot: 'Flame Plate' },
        { loot: 'Dread Plate' },
        { loot: 'Nestball' },
    ],
}, 490000, [
    new DungeonTrainer('Magma Leader', [
        new GymPokemon('Mightyena', 630000, 37),
        new GymPokemon('Crobat', 640000, 38),
        new GymPokemon('Camerupt', 650000, 39),
    ], { weight: 1, hide: true, requirement: new QuestLineCompletedRequirement('The Delta Episode', GameConstants.AchievementOption.less) }, 'Maxie'),
    new DungeonTrainer('Magma Leader', [
        new GymPokemon('Mightyena', 6300000, 37),
        new GymPokemon('Crobat', 6400000, 38),
        new GymPokemon('Mega Camerupt', 6500000, 39),
    ], { weight: 1, hide: true, requirement: new QuestLineCompletedRequirement('The Delta Episode') }, 'Maxie'),
], 29000, 101);
dungeonList['Aqua Hideout'] = new Dungeon('Aqua Hideout', [
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 30000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 30000, 32)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Zubat', 30000, 31),
        new GymPokemon('Carvanha', 30000, 31),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Poochyena', 30000, 31),
        new GymPokemon('Zubat', 30000, 31),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 30000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 30000, 32)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 30000, 32)], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'Token_collector', weight: 4 },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Electrode' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Lureball' },
        { loot: 'Diveball' },
    ],
    legendary: [
        { loot: 'Dread Plate', weight: 2 },
        { loot: 'Splash Plate', weight: 2 },
        { loot: 'Duskball' },
        { loot: 'Nestball' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 490000, [
    new DungeonTrainer('Aqua Admin', [
        new GymPokemon('Mightyena', 900000, 34),
        new GymPokemon('Golbat', 900000, 34),
    ], { weight: 1 }, 'Matt', '(matt)'),
], 30000, 101);
dungeonList['Shoal Cave'] = new Dungeon('Shoal Cave', ['Zubat', 'Golbat', 'Spheal', 'Tentacool', 'Magikarp', 'Wailmer'], {
    common: [
        { loot: 'xClick', weight: 2 },
        { loot: 'Lucky_incense' },
    ],
    rare: [{ loot: 'Ochre Shard' }],
    legendary: [
        { loot: 'Icicle Plate', weight: 2 },
        { loot: 'Star Piece' },
        { loot: 'Revive' },
        { loot: 'Never_Melt_Ice' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Heart Scale' },
    ],
}, 490000, [
    new DungeonBossPokemon('Snorunt', 1900000, 20),
    new DungeonBossPokemon('Glalie', 61614300, 60, { hide: true, requirement: new TemporaryBattleRequirement('Icy Boulder') }),
], 30000, 101);
dungeonList['Cave of Origin'] = new Dungeon('Cave of Origin', ['Zubat', 'Golbat', 'Sableye', 'Mawile'], {
    common: [{ loot: 'xAttack' }],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Ochre Shard' },
    ],
    legendary: [{ loot: 'Revive' }],
    mythic: [
        { loot: 'Protein', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Cave of Origin')) },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Cave of Origin')) },
    ],
}, 590000, [
    new DungeonBossPokemon('Exploud', 2000000, 50),
    new DungeonBossPokemon('Kyogre', 4700000, 100, { requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion), new QuestLineStepCompletedRequirement('The Weather Trio', 5)]) }),
    new DungeonBossPokemon('Groudon', 4700000, 100, { requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion), new QuestLineStepCompletedRequirement('The Weather Trio', 5)]) }),
    new DungeonBossPokemon('Primal Kyogre', 95743340, 80, { hide: true, requirement: new MultiRequirement([new QuestLineCompletedRequirement('Primal Reversion'), new WeatherRequirement([WeatherType.Rain])]) }),
    new DungeonBossPokemon('Primal Groudon', 95743340, 80, { hide: true, requirement: new MultiRequirement([new QuestLineCompletedRequirement('Primal Reversion'), new WeatherRequirement([WeatherType.Harsh_Sunlight])]) }),
], 34000, 101);
dungeonList['Seafloor Cavern'] = new Dungeon('Seafloor Cavern', [
    { pokemon: 'Zubat', options: { weight: 4.8 } },
    { pokemon: 'Golbat', options: { weight: 4.8 } },
    { pokemon: 'Tentacool', options: { weight: 4.8 } },
    { pokemon: 'Magikarp', options: { weight: 4.8 } },
    { pokemon: 'Wailmer', options: { weight: 4.8 } },
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 32000, 36)], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 7, GameConstants.AchievementOption.less) }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 32000, 36)], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 7, GameConstants.AchievementOption.less) }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 32000, 36)], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 7, GameConstants.AchievementOption.less) }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 32000, 36)], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 7, GameConstants.AchievementOption.less) }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Mightyena', 32000, 35),
        new GymPokemon('Golbat', 32000, 35),
    ], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 7, GameConstants.AchievementOption.less) }, undefined, '(male)'),
    new DungeonTrainer('Aqua Admin', [
        new GymPokemon('Sharpedo', 32000, 37),
        new GymPokemon('Mightyena', 32000, 37),
    ], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 7, GameConstants.AchievementOption.less) }, 'Shelly', '(shelly)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Poochyena', 3200000, 36)], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 7) }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 3200000, 36)], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 7) }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Zubat', 3200000, 36)], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 7) }, undefined, '(male)'),
    new DungeonTrainer('Team Aqua Grunt', [new GymPokemon('Carvanha', 3200000, 36)], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 7) }, undefined, '(female)'),
    new DungeonTrainer('Team Aqua Grunt', [
        new GymPokemon('Mightyena', 3200000, 35),
        new GymPokemon('Golbat', 3200000, 35),
    ], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 7) }, undefined, '(male)'),
    new DungeonTrainer('Aqua Admin', [
        new GymPokemon('Sharpedo', 3200000, 37),
        new GymPokemon('Mightyena', 3200000, 37),
    ], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 7) }, 'Shelly', '(shelly)'),
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Hard Stone', requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 7) },
        { loot: 'SmallRestore', requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 7) },
    ],
    epic: [{ loot: 'Bluk' }],
    legendary: [
        { loot: 'Splash Plate' },
        { loot: 'Earth Plate' },
    ],
    mythic: [{ loot: 'Heart Scale' }],
}, 530000, [
    new DungeonTrainer('Aqua Leader', [
        new GymPokemon('Mightyena', 700000, 41),
        new GymPokemon('Crobat', 700000, 41),
        new GymPokemon('Sharpedo', 900000, 43),
    ], { weight: 1, hide: true, requirement: new QuestLineCompletedRequirement('The Delta Episode', GameConstants.AchievementOption.less) }, 'Archie'),
    new DungeonTrainer('Aqua Leader', [
        new GymPokemon('Mightyena', 7000000, 61),
        new GymPokemon('Crobat', 7000000, 61),
        new GymPokemon('Mega Sharpedo', 9000000, 63),
    ], { weight: 1, hide: true, requirement: new QuestLineCompletedRequirement('The Delta Episode') }, 'Archie'),
], 32000, 101);
dungeonList['Sky Pillar'] = new Dungeon('Sky Pillar', ['Golbat', 'Sableye', 'Ariados', 'Banette', 'Mawile', 'Swablu'], {
    common: [
        { loot: 'xAttack', weight: 4 },
        { loot: 'Greatball' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [{ loot: 'Ultraball' }],
    legendary: [
        { loot: 'Sky Plate' },
        { loot: 'Mind Plate' },
        { loot: 'Draco Plate' },
        { loot: 'Sharp_Beak' },
    ],
}, 720000, [
    new DungeonBossPokemon('Claydol', 3200000, 20),
    new DungeonBossPokemon('Altaria', 3200000, 20),
    new DungeonBossPokemon('Dusclops', 3200000, 20),
    new DungeonBossPokemon('Rayquaza', 5824002, 100, { requirement: new QuestLineStepCompletedRequirement('The Weather Trio', 5) }),
    new DungeonBossPokemon('Vivillon (Polar)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 22),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 23, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Polar)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
    new DungeonBossPokemon('Torchic (Egg)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Torchic (Egg)', 5, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 34000, 101);
dungeonList['Sealed Chamber'] = new Dungeon('Sealed Chamber', ['Zubat', 'Magikarp', 'Tentacool', 'Wailmer', 'Horsea'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Greatball' },
        { loot: 'Diveball' },
    ],
    legendary: [
        { loot: 'Stone Plate', weight: 2 },
        { loot: 'Icicle Plate', weight: 2 },
        { loot: 'Iron Plate', weight: 2 },
        { loot: 'Hard Stone' },
    ],
}, 500000, [
    new DungeonBossPokemon('Golbat', 4500000, 20, { weight: 0.25 }),
    new DungeonBossPokemon('Regirock', 4500000, 20, { requirement: new QuestLineStepCompletedRequirement('The Three Golems', 8) }),
    new DungeonBossPokemon('Regice', 4500000, 20, { requirement: new QuestLineStepCompletedRequirement('The Three Golems', 8) }),
    new DungeonBossPokemon('Registeel', 4500000, 20, { requirement: new QuestLineStepCompletedRequirement('The Three Golems', 8) }),
    new DungeonBossPokemon('Torchic (Egg)', 2700000, 23, {
        requirement: new MultiRequirement([
            new PokemonDefeatedSelectNRequirement('Torchic (Egg)', 4, 6, 1),
            new SpecialEventRequirement('Easter'),
            new QuestLineCompletedRequirement('Egg Hunt'),
        ]),
        hide: true,
    }),
], 36000, 101);
dungeonList['Victory Road Hoenn'] = new Dungeon('Victory Road Hoenn', [
    { pokemon: 'Zubat', options: { weight: 4 } },
    { pokemon: 'Golbat', options: { weight: 4 } },
    { pokemon: 'Goldeen', options: { weight: 4 } },
    { pokemon: 'Magikarp', options: { weight: 4 } },
    { pokemon: 'Whismur', options: { weight: 4 } },
    { pokemon: 'Loudred', options: { weight: 4 } },
    { pokemon: 'Makuhita', options: { weight: 4 } },
    { pokemon: 'Aron', options: { weight: 4 } },
    { pokemon: 'Lairon', options: { weight: 4 } },
    { pokemon: 'Mawile', options: { weight: 4 } },
    { pokemon: 'Meditite', options: { weight: 4 } },
    { pokemon: 'Medicham', options: { weight: 4 } },
    { pokemon: 'Barboach', options: { weight: 4 } },
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Magneton', 37000, 43),
        new GymPokemon('Muk', 37000, 43),
    ], { weight: 1 }, 'Albert', '(male)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Roselia', 37000, 45)], { weight: 1 }, 'Hope', '(female)'),
    new DungeonTrainer('Cooltrainer', [new GymPokemon('Claydol', 37000, 45)], { weight: 1 }, 'Shannon', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Swellow', 37000, 42),
        new GymPokemon('Mawile', 37000, 42),
        new GymPokemon('Kadabra', 37000, 42),
    ], { weight: 1 }, 'Samuel', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Sandslash', 37000, 42),
        new GymPokemon('Ninetales', 37000, 42),
        new GymPokemon('Tropius', 37000, 42),
    ], { weight: 1 }, 'Julie', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Claydol', 37000, 43),
        new GymPokemon('Lanturn', 37000, 43),
    ], { weight: 1 }, 'Dianne', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Medicham', 37000, 43),
        new GymPokemon('Claydol', 37000, 43),
    ], { weight: 1 }, 'Felix', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Skarmory', 37000, 43),
        new GymPokemon('Sableye', 37000, 43),
    ], { weight: 1 }, 'Caroline', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Dodrio', 30000, 42),
        new GymPokemon('Kadabra', 30000, 42),
        new GymPokemon('Electrode', 30000, 42),
        new GymPokemon('Shiftry', 30000, 42),
    ], { weight: 1 }, 'Vito', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Torkoal', 37000, 42),
        new GymPokemon('Medicham', 37000, 42),
        new GymPokemon('Ludicolo', 37000, 42),
    ], { weight: 1 }, 'Michelle', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Lunatone', 37000, 43),
        new GymPokemon('Solrock', 37000, 43),
    ], { weight: 1 }, 'Mitchell', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Sableye', 37000, 43),
        new GymPokemon('Absol', 37000, 43),
    ], { weight: 1 }, 'Halle', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Cacturne', 37000, 43),
        new GymPokemon('Pelipper', 37000, 43),
    ], { weight: 1 }, 'Edgar', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Gardevoir', 37000, 43),
        new GymPokemon('Slaking', 37000, 43),
    ], { weight: 1 }, 'Katelynn', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Slaking', 37000, 43),
        new GymPokemon('Dusclops', 37000, 43),
    ], { weight: 1 }, 'Quincy', '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [{ loot: 'Ultraball' }],
    legendary: [
        { loot: 'Mind Plate' },
        { loot: 'Flame Plate' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Victory Road Hoenn')) }],
}, 560000, [
    new DungeonBossPokemon('Whiscash', 3003000, 14),
    new DungeonBossPokemon('Hariyama', 3003000, 14),
], 37000, 101);
dungeonList['Near Space'] = new Dungeon('Near Space', ['Solrock', 'Lunatone', 'Elgyem', 'Beheeyem'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Pink Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Duskball' },
        { loot: 'Moonball' },
        { loot: 'Star Piece' },
    ],
    legendary: [
        { loot: 'Stone Plate' },
        { loot: 'Mind Plate' },
        { loot: 'Iron Plate' },
    ],
    mythic: [{ loot: 'Carbos', requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Near Space')) }],
}, 9000000, [
    new DungeonBossPokemon('Deoxys', 95743340, 80),
    new DungeonBossPokemon('Deoxys (Attack)', 95743340, 80, { hide: true, requirement: new ObtainedPokemonRequirement('Deoxys (Attack)') }),
    new DungeonBossPokemon('Deoxys (Defense)', 95743340, 80, { hide: true, requirement: new ObtainedPokemonRequirement('Deoxys (Defense)') }),
    new DungeonBossPokemon('Deoxys (Speed)', 95743340, 80, { hide: true, requirement: new ObtainedPokemonRequirement('Deoxys (Speed)') }),
], 700000, 131, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.kalos });
// Orre
dungeonList['Phenac City Battles'] = new Dungeon('Phenac City Battles', [
    new DungeonTrainer('Miror B. Peon', [
        new GymPokemon('Whismur', 38000, 24),
        new GymPokemon('Whismur', 38000, 25),
    ], { weight: 1, requirement: new ClearDungeonRequirement(25, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less) }, 'Folly', '(folly)'),
    new DungeonTrainer('Team Snagem', [
        new GymPokemon('Corphish', 38000, 25),
        new GymPokemon('Koffing', 38000, 27),
    ], { weight: 1, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less) }, 'Wakin'),
    new DungeonTrainer('Miror B. Peon', [
        new GymPokemon('Whismur', 38000, 26),
        new GymPokemon('Lotad', 38000, 25),
    ], { weight: 1, requirement: new ClearDungeonRequirement(75, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less) }, 'Folly', '(folly)'),
    new DungeonTrainer('Mystery Troop Green', [
        new GymPokemon('Grimer', 38000, 26),
        new GymPokemon('Spoink', 38000, 24),
        new GymPokemon('Bayleef', 38000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Verde'),
    new DungeonTrainer('Mystery Troop Red', [
        new GymPokemon('Grimer', 38000, 26),
        new GymPokemon('Spoink', 38000, 24),
        new GymPokemon('Quilava', 38000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Rosso'),
    new DungeonTrainer('Mystery Troop Blue', [
        new GymPokemon('Grimer', 38000, 26),
        new GymPokemon('Spoink', 38000, 24),
        new GymPokemon('Croconaw', 38000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Bluno'),
    new DungeonTrainer('Miror B. Peon', [
        new GymPokemon('Exploud', 38000, 53),
        new GymPokemon('Ludicolo', 38000, 55),
    ], { weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less) }, 'Folly', '(folly)'),
    new DungeonTrainer('Miror B. Peon', [
        new GymPokemon('Dusclops', 38000, 54),
        new GymPokemon('Spinarak', 38000, 53),
        new GymPokemon('Machoke', 38000, 53),
    ], { weight: 1, requirement: new ClearDungeonRequirement(125, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less) }, 'Trudly', '(trudly)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Seviper', 38000, 20),
        new GymPokemon('Snorunt', 38000, 20, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Golbat', 38000, 22),
        new GymPokemon('Mightyena', 38000, 21),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 12) }, 'Exinn', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Murkrow', 38000, 22),
        new GymPokemon('Pineco', 38000, 20, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Ariados', 38000, 22),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 12) }, 'Gonrag', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Poochyena', 38000, 22),
        new GymPokemon('Magnemite', 38000, 21),
        new GymPokemon('Staryu', 38000, 21),
        new GymPokemon('Absol', 38000, 21),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 12)]) }, 'Ertlig', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Duskull', 38000, 21),
        new GymPokemon('Corphish', 38000, 20),
        new GymPokemon('Qwilfish', 38000, 21),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(175, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 12)]) }, 'Forgs', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Sudowoodo', 38000, 20),
        new GymPokemon('Clamperl', 38000, 21),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 12)]) }, 'Pellim', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Mightyena', 38000, 21),
        new GymPokemon('Goldeen', 38000, 21),
        new GymPokemon('Carvanha', 38000, 21),
        new GymPokemon('Koffing', 38000, 21),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(225, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 12)]) }, 'Fenton', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Shuppet', 38000, 21),
        new GymPokemon('Teddiursa', 38000, 21),
        new GymPokemon('Corsola', 38000, 21),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 12)]) }, 'Ezoor', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Volbeat', 38000, 20),
        new GymPokemon('Illumise', 38000, 20),
        new GymPokemon('Spoink', 38000, 21),
        new GymPokemon('Seviper', 38000, 21),
        new GymPokemon('Wailmer', 38000, 22),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(275, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 12)]) }, 'Kepen', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Nuzleaf', 38000, 23),
        new GymPokemon('Torkoal', 38000, 22),
        new GymPokemon('Swinub', 38000, 22, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 12) }, 'Greck', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Slugma', 38000, 20),
        new GymPokemon('Numel', 38000, 20),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 12)]) }, 'Resix', 'Resix'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Horsea', 38000, 21),
        new GymPokemon('Goldeen', 38000, 20),
        new GymPokemon('Beldum', 38000, 19),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(325, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 12)]) }, 'Blusix', 'Blusix'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Noctowl', 38000, 20),
        new GymPokemon('Vigoroth', 38000, 20),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 12)]) }, 'Browsix', 'Browsix'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Chinchou', 38000, 20),
        new GymPokemon('Electrike', 38000, 20),
        new GymPokemon('Magnemite', 38000, 20),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(375, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 12)]) }, 'Yellosix', 'Yellosix'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Grimer', 38000, 20),
        new GymPokemon('Koffing', 38000, 20),
        new GymPokemon('Tentacool', 38000, 20),
        new GymPokemon('Zubat', 38000, 20),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 12)]) }, 'Purpsix', 'Purpsix'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Lotad', 38000, 19),
        new GymPokemon('Oddish', 38000, 18),
        new GymPokemon('Cacnea', 38000, 18),
        new GymPokemon('Shroomish', 38000, 19),
        new GymPokemon('Pineco', 38000, 20),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(425, GameConstants.getDungeonIndex('Phenac City Battles'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 12)]) }, 'Greesix', 'Greesix'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    epic: [
        { loot: 'Flame Plate' },
        { loot: 'Splash Plate' },
        { loot: 'Meadow Plate' },
    ],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Revive' },
        { loot: 'Charcoal' },
        { loot: 'Miracle_Seed' },
        { loot: 'Mystic_Water' },
        { loot: 'Excite_Scent', ignoreDebuff: true },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Phenac City Battles')) }],
}, 570000, [
    new DungeonTrainer('Miror B. Peon', [
        new GymPokemon('Duskull', 870000, 25),
        new GymPokemon('Spinarak', 870000, 25),
        new GymPokemon('Makuhita', 870000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Trudly', '(trudly)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Kirlia', 23925000, 22),
        new GymPokemon('Linoone', 23925000, 20),
        new GymPokemon('Natu', 23925000, 22, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 12) }, 'Eloin', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Remoraid', 23925000, 22),
        new GymPokemon('Golbat', 23925000, 20),
        new GymPokemon('Roselia', 23925000, 22, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 12) }, 'Fasin', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Kadabra', 21125000, 22),
        new GymPokemon('Sneasel', 21125000, 22),
        new GymPokemon('Misdreavus', 21125000, 22),
        new GymPokemon('Meowth', 21125000, 22, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 12) }, 'Fostin', 'XD (male)'),
], 38000, 110);
dungeonList['Pyrite Town Battles'] = new Dungeon('Pyrite Town Battles', [
    new DungeonTrainer('Chaser', [
        new GymPokemon('Sentret', 41000, 25),
        new GymPokemon('Taillow', 41000, 25),
        new GymPokemon('Slaking', 41000, 26),
    ], { weight: 1, requirement: new ClearDungeonRequirement(25, GameConstants.getDungeonIndex('Pyrite Town Battles'), GameConstants.AchievementOption.less) }, 'Calda', '(male)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Gulpin', 41000, 27),
        new GymPokemon('Zubat', 41000, 27),
    ], { weight: 1, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Pyrite Town Battles'), GameConstants.AchievementOption.less) }, 'Emok', '(female)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Skitty', 41000, 28),
        new GymPokemon('Zigzagoon', 41000, 28),
        new GymPokemon('Misdreavus', 41000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Vant', '(male)'),
    new DungeonTrainer('Bandana Guy', [
        new GymPokemon('Psyduck', 41000, 29),
        new GymPokemon('Quagsire', 41000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Divel'),
    new DungeonTrainer('Roller Boy', [
        new GymPokemon('Igglybuff', 41000, 28),
        new GymPokemon('Azurill', 41000, 27),
        new GymPokemon('Swablu', 41000, 27),
        new GymPokemon('Slugma', 41000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Lon'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Ledyba', 41000, 27),
        new GymPokemon('Wingull', 41000, 27),
        new GymPokemon('Noctowl', 41000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Nover', '(male)'),
    new DungeonTrainer('Street Performer', [
        new GymPokemon('Shroomish', 41000, 29),
        new GymPokemon('Flaaffy', 41000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Diogo'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Oddish', 41000, 26),
        new GymPokemon('Dustox', 41000, 26),
        new GymPokemon('Skiploom', 41000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Leba', '(female)'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Beldum', 41000, 34),
        new GymPokemon('Aron', 41000, 35),
    ], { weight: 1, requirement: new ClearDungeonRequirement(75, GameConstants.getDungeonIndex('Pyrite Town Battles'), GameConstants.AchievementOption.less) }, 'Hadar', '(male)'),
    new DungeonTrainer('Rogue', [
        new GymPokemon('Snubbull', 41000, 35),
        new GymPokemon('Kirlia', 41000, 35),
        new GymPokemon('Nuzleaf', 41000, 35),
        new GymPokemon('Machop', 41000, 35),
    ], { weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Pyrite Town Battles'), GameConstants.AchievementOption.less) }, 'Cail', 'Cail'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Furret', 41000, 35),
        new GymPokemon('Taillow', 41000, 32),
        new GymPokemon('Slakoth', 41000, 21),
    ], { weight: 1, requirement: new ClearDungeonRequirement(125, GameConstants.getDungeonIndex('Pyrite Town Battles'), GameConstants.AchievementOption.less) }, 'Calda', '(male)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Gulpin', 41000, 36),
        new GymPokemon('Golbat', 41000, 36),
    ], { weight: 1, requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Pyrite Town Battles'), GameConstants.AchievementOption.less) }, 'Emok', '(female)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Skitty', 41000, 28),
        new GymPokemon('Zigzagoon', 41000, 28),
        new GymPokemon('Shuppet', 41000, 29),
    ], { weight: 1, requirement: new ClearDungeonRequirement(175, GameConstants.getDungeonIndex('Pyrite Town Battles'), GameConstants.AchievementOption.less) }, 'Vant', '(male)'),
    new DungeonTrainer('Bandana Guy', [
        new GymPokemon('Psyduck', 41000, 29),
        new GymPokemon('Horsea', 41000, 30),
    ], { weight: 1, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Pyrite Town Battles'), GameConstants.AchievementOption.less) }, 'Divel'),
    new DungeonTrainer('Roller Boy', [
        new GymPokemon('Igglybuff', 41000, 28),
        new GymPokemon('Numel', 41000, 25),
        new GymPokemon('Azurill', 41000, 27),
        new GymPokemon('Swablu', 41000, 27),
    ], { weight: 1, requirement: new ClearDungeonRequirement(225, GameConstants.getDungeonIndex('Pyrite Town Battles'), GameConstants.AchievementOption.less) }, 'Lon'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Doduo', 41000, 26),
        new GymPokemon('Ledyba', 41000, 27),
        new GymPokemon('Wingull', 41000, 27),
    ], { weight: 1, requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Pyrite Town Battles'), GameConstants.AchievementOption.less) }, 'Nover', '(male)'),
    new DungeonTrainer('Street Performer', [
        new GymPokemon('Pichu', 41000, 27),
        new GymPokemon('Shroomish', 41000, 26),
    ], { weight: 1, requirement: new ClearDungeonRequirement(275, GameConstants.getDungeonIndex('Pyrite Town Battles'), GameConstants.AchievementOption.less) }, 'Diogo'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Sunkern', 41000, 28),
        new GymPokemon('Oddish', 41000, 26),
        new GymPokemon('Dustox', 41000, 26),
    ], { weight: 1, requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Pyrite Town Battles'), GameConstants.AchievementOption.less) }, 'Leba', '(female)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Purple Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Joy_Scent', ignoreDebuff: true },
        { loot: 'Toxic Plate' },
        { loot: 'Spooky Plate' },
    ],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Revive' },
        { loot: 'Spell_Tag' },
        { loot: 'Excite_Scent', ignoreDebuff: true },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Pyrite Town Battles')) }],
}, 580000, [
    new DungeonTrainer('Rogue', [
        new GymPokemon('Machop', 900000, 29),
        new GymPokemon('Seedot', 900000, 29),
        new GymPokemon('Ralts', 900000, 29),
        new GymPokemon('Furret', 900000, 33, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Cail', 'Cail'),
], 41000, 116);
dungeonList['Pyrite Colosseum'] = new Dungeon('Pyrite Colosseum', [
    new DungeonTrainer('Hunter', [
        new GymPokemon('Barboach', 43000, 30),
        new GymPokemon('Sandshrew', 43000, 31),
    ], { weight: 1 }, 'Hoks', '(male)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Natu', 43000, 30),
        new GymPokemon('Meditite', 43000, 30),
    ], { weight: 1 }, 'Tisler', '(female)'),
    new DungeonTrainer('Bandana Guy', [
        new GymPokemon('Electrike', 43000, 30),
        new GymPokemon('Cacnea', 43000, 31),
        new GymPokemon('Vulpix', 43000, 31),
    ], { weight: 1 }, 'Vilch'),
], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Grey Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Joy_Scent', ignoreDebuff: true },
        { loot: 'Icicle Plate' },
        { loot: 'Zap Plate' },
    ],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Revive' },
        { loot: 'Excite_Scent', ignoreDebuff: true },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Pyrite Colosseum')) }],
}, 620000, [
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Bagon', 940000, 32),
        new GymPokemon('Goldeen', 940000, 32),
        new GymPokemon('Magnemite', 940000, 31),
        new GymPokemon('Delibird', 940000, 34),
    ], { weight: 0.25 }, 'Mirez', '(male)'),
], 43000, 121);
dungeonList['Pyrite Building'] = new Dungeon('Pyrite Building', [
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Yanma', 45000, 33, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Pineco', 45000, 32),
        new GymPokemon('Nincada', 45000, 31),
        new GymPokemon('Surskit', 45000, 32),
    ], { weight: 0.5 }, 'Nore', '(male)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Phanpy', 45000, 31),
        new GymPokemon('Trapinch', 45000, 32),
    ], { weight: 1, requirement: new ClearDungeonRequirement(25, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less) }, 'Kai', '(female)'),
    new DungeonTrainer('Roller Boy', [
        new GymPokemon('Taillow', 45000, 33),
        new GymPokemon('Hoothoot', 45000, 34),
    ], { weight: 1, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less) }, 'Pike'),
    new DungeonTrainer('Bandana Guy', [
        new GymPokemon('Larvitar', 45000, 31),
        new GymPokemon('Barboach', 45000, 32),
        new GymPokemon('Carvanha', 45000, 32),
    ], { weight: 1, requirement: new ClearDungeonRequirement(75, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less) }, 'Geats'),
    new DungeonTrainer('Bandana Guy', [
        new GymPokemon('Wingull', 45000, 32),
        new GymPokemon('Wooper', 45000, 33),
    ], { weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less) }, 'Loba'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Electrike', 45000, 31),
        new GymPokemon('Voltorb', 45000, 31),
    ], { weight: 1, requirement: new ClearDungeonRequirement(125, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less) }, 'Akmen', '(male)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Doduo', 45000, 32),
        new GymPokemon('Ledyba', 45000, 32),
        new GymPokemon('Swablu', 45000, 31),
    ], { weight: 1, requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less) }, 'Raleen', '(female)'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Spheal', 45000, 31),
        new GymPokemon('Snorunt', 45000, 32),
    ], { weight: 1, requirement: new ClearDungeonRequirement(175, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less) }, 'Tura', '(male)'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Horsea', 45000, 31),
        new GymPokemon('Oddish', 45000, 32),
        new GymPokemon('Sandshrew', 45000, 32),
    ], { weight: 1, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less) }, 'Toti', '(female)'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Cacnea', 45000, 32),
        new GymPokemon('Tentacool', 45000, 33),
    ], { weight: 1, requirement: new ClearDungeonRequirement(225, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less) }, 'Elidi', '(female)'),
    new DungeonTrainer('Miror B. Peon', [
        new GymPokemon('Remoraid', 45000, 33, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Spinarak', 45000, 33),
        new GymPokemon('Luvdisc', 45000, 32),
    ], { weight: 0.5 }, 'Reath', '(reath)'),
    new DungeonTrainer('Miror B. Peon', [
        new GymPokemon('Mantine', 45000, 28, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Aipom', 45000, 28),
        new GymPokemon('Furret', 45000, 28),
        new GymPokemon('Yanma', 45000, 28),
    ], { weight: 0.5 }, 'Ferma', '(ferma)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Carvanha', 45000, 18),
        new GymPokemon('Barboach', 45000, 17),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 10)]) }, 'Rett', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Corphish', 45000, 18),
        new GymPokemon('Electrike', 45000, 17),
        new GymPokemon('Grimer', 45000, 18),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(275, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 10)]) }, 'Mocor', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Kecleon', 45000, 19),
        new GymPokemon('Surskit', 45000, 21),
        new GymPokemon('Makuhita', 45000, 18, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 10) }, 'Torkin', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Doduo', 45000, 20),
        new GymPokemon('Tentacool', 45000, 18),
        new GymPokemon('Chimecho', 45000, 20),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 10)]) }, 'Elox', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Qwilfish', 45000, 19),
        new GymPokemon('Rhyhorn', 45000, 20),
        new GymPokemon('Chinchou', 45000, 20),
        new GymPokemon('Koffing', 45000, 20),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(325, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 10)]) }, 'Rixor', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Spinarak', 45000, 20),
        new GymPokemon('Beautifly', 45000, 19),
        new GymPokemon('Dustox', 45000, 20),
        new GymPokemon('Vulpix', 45000, 18, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 10) }, 'Mesin', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Gulpin', 45000, 19),
        new GymPokemon('Mareep', 45000, 18),
        new GymPokemon('Luvdisc', 45000, 20),
        new GymPokemon('Bellossom', 45000, 21),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 10)]) }, 'Dilly', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Furret', 45000, 19),
        new GymPokemon('Zigzagoon', 45000, 20),
        new GymPokemon('Togetic', 45000, 19),
        new GymPokemon('Delibird', 45000, 21),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(375, GameConstants.getDungeonIndex('Pyrite Building'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 10)]) }, 'Edlos', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Sneasel', 45000, 20),
        new GymPokemon('Yanma', 45000, 19),
        new GymPokemon('Misdreavus', 45000, 20),
        new GymPokemon('Duskull', 45000, 18, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 10) }, 'Lobar', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Kadabra', 45000, 20),
        new GymPokemon('Flaaffy', 45000, 19),
        new GymPokemon('Vigoroth', 45000, 20),
        new GymPokemon('Ralts', 45000, 18, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 10) }, 'Feldas', 'XD (male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    epic: [{ loot: 'Fastball' }],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Revive' },
        { loot: 'Excite_Scent', ignoreDebuff: true },
    ],
    mythic: [
        { loot: 'Protein', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Pyrite Building')) },
        { loot: 'Vivid_Scent', ignoreDebuff: true },
    ],
}, 630000, [
    new DungeonTrainer('Hunter', [
        new GymPokemon('Qwilfish', 950000, 33, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Goldeen', 950000, 33),
        new GymPokemon('Linoone', 950000, 33),
    ], { weight: 1 }, 'Doken', '(male)'),
    new DungeonTrainer('Cipher', [
        new GymPokemon('Loudred', 21750000, 23),
        new GymPokemon('Girafarig', 21750000, 23),
        new GymPokemon('Mawile', 21750000, 22, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Raichu', 21750000, 23),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 10) }, 'Commander Exol', '(commander)'),
], 45000, 126);
dungeonList['Pyrite Cave'] = new Dungeon('Pyrite Cave', [
    new DungeonTrainer('Street Performer', [
        new GymPokemon('Anorith', 46000, 32),
        new GymPokemon('Lotad', 46000, 32),
    ], { weight: 1, requirement: new ClearDungeonRequirement(25, GameConstants.getDungeonIndex('Pyrite Cave'), GameConstants.AchievementOption.less) }, 'Simes'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Koffing', 46000, 32),
        new GymPokemon('Ralts', 46000, 31),
        new GymPokemon('Shroomish', 46000, 32),
    ], { weight: 1, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Pyrite Cave'), GameConstants.AchievementOption.less) }, 'Maiz', '(male)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Meditite', 46000, 33, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Bagon', 46000, 33),
        new GymPokemon('Numel', 46000, 32),
    ], { weight: 0.5 }, 'Twan', '(male)'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Lotad', 46000, 32),
        new GymPokemon('Whismur', 46000, 33),
        new GymPokemon('Slakoth', 46000, 32),
    ], { weight: 1, requirement: new ClearDungeonRequirement(75, GameConstants.getDungeonIndex('Pyrite Cave'), GameConstants.AchievementOption.less) }, 'Valen', '(male)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Geodude', 46000, 32),
        new GymPokemon('Lotad', 46000, 31),
        new GymPokemon('Snorunt', 46000, 32),
        new GymPokemon('Slakoth', 46000, 31),
    ], { weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Pyrite Cave'), GameConstants.AchievementOption.less) }, 'Rehan', '(female)'),
    new DungeonTrainer('Bandana Guy', [
        new GymPokemon('Lotad', 46000, 32),
        new GymPokemon('Lotad', 46000, 33),
        new GymPokemon('Lotad', 46000, 33),
        new GymPokemon('Lotad', 46000, 33),
    ], { weight: 1, requirement: new ClearDungeonRequirement(125, GameConstants.getDungeonIndex('Pyrite Cave'), GameConstants.AchievementOption.less) }, 'Noxy'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Dunsparce', 46000, 33, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Mareep', 46000, 34),
        new GymPokemon('Cacnea', 46000, 34),
    ], { weight: 0.5 }, 'Sosh', '(female)'),
    new DungeonTrainer('Roller Boy', [
        new GymPokemon('Lotad', 46000, 32),
        new GymPokemon('Lombre', 46000, 33),
    ], { weight: 1, requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Pyrite Cave'), GameConstants.AchievementOption.less) }, 'Evat'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Swablu', 46000, 33, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Lotad', 46000, 31),
        new GymPokemon('Beldum', 46000, 32),
        new GymPokemon('Lombre', 46000, 32),
    ], { weight: 0.5 }, 'Zalo', '(male)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Shuppet', 46000, 33),
        new GymPokemon('Pineco', 46000, 30),
        new GymPokemon('Koffing', 46000, 30),
    ], { weight: 1, requirement: new ClearDungeonRequirement(175, GameConstants.getDungeonIndex('Pyrite Cave'), GameConstants.AchievementOption.less) }, 'Derid', '(male)'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Zigzagoon', 46000, 32),
        new GymPokemon('Zigzagoon', 46000, 32),
        new GymPokemon('Linoone', 46000, 33),
    ], { weight: 1, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Pyrite Cave'), GameConstants.AchievementOption.less) }, 'Meli', '(female)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Natu', 46000, 33),
        new GymPokemon('Tentacool', 46000, 32),
        new GymPokemon('Teddiursa', 46000, 32),
    ], { weight: 1, requirement: new ClearDungeonRequirement(225, GameConstants.getDungeonIndex('Pyrite Cave'), GameConstants.AchievementOption.less) }, 'Mela', '(female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Lileep', 46000, 32),
        new GymPokemon('Spheal', 46000, 34),
        new GymPokemon('Dustox', 46000, 33),
    ], { weight: 1, requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Pyrite Cave'), GameConstants.AchievementOption.less) }, 'Sema', '(female)'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Lombre', 46000, 17),
        new GymPokemon('Lombre', 46000, 17),
        new GymPokemon('Lombre', 46000, 17),
        new GymPokemon('Voltorb', 46000, 19, undefined, undefined, GameConstants.ShadowStatus.Shadow), // Located here as make-up if missed in Temp Battle
    ], { weight: 0.25, requirement: new QuestLineCompletedRequirement('Gale of Darkness') }, 'Miror B.', 'Miror B'),
], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Fastball' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    legendary: [
        { loot: 'Twisted_Spoon' },
        { loot: 'Macho_Brace' },
        { loot: 'Excite_Scent', ignoreDebuff: true },
    ],
    mythic: [
        { loot: 'Protein', requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Pyrite Cave')) },
        { loot: 'Carbos', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Pyrite Cave')) },
    ],
}, 650000, [
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Ludicolo', 950000, 28),
        new GymPokemon('Ludicolo', 950000, 29),
        new GymPokemon('Ludicolo', 950000, 31),
        new GymPokemon('Ludicolo', 950000, 30),
        new GymPokemon('Sudowoodo', 950000, 35, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Miror B.', 'Miror B'),
    new DungeonTrainer('Peon', [
        new GymPokemon('Seaking', 950000, 39),
        new GymPokemon('Ludicolo', 950000, 39),
        new GymPokemon('Ludicolo', 950000, 39),
        new GymPokemon('Ludicolo', 950000, 39),
        new GymPokemon('Sudowoodo', 950000, 39),
    ], { weight: 1, hide: true, requirement: new QuestLineCompletedRequirement('Shadows in the Desert') }, 'Mirakle B.', '(mirakle b)'),
], 46000, 131);
dungeonList['Relic Cave'] = new Dungeon('Relic Cave', [
    new DungeonTrainer('Old Man', [
        new GymPokemon('Machop', 48000, 34),
        new GymPokemon('Beldum', 48000, 35),
        new GymPokemon('Lombre', 48000, 34),
    ], { weight: 1 }, 'Skof'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Swellow', 48000, 39),
        new GymPokemon('Rhyhorn', 48000, 39),
        new GymPokemon('Sunflora', 48000, 40),
    ], { weight: 1 }, 'Dury', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Spheal', 48000, 33),
        new GymPokemon('Carvanha', 48000, 34),
    ], { weight: 1 }, 'Doven', '(female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Shroomish', 48000, 34),
        new GymPokemon('Cacnea', 48000, 34),
    ], { weight: 1 }, 'Silton', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Baltoy', 48000, 35),
        new GymPokemon('Ralts', 48000, 35),
        new GymPokemon('Kirlia', 48000, 35),
    ], { weight: 1 }, 'Kass', '(female)'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Lombre', 48000, 39),
        new GymPokemon('Lombre', 48000, 39),
        new GymPokemon('Lombre', 48000, 39),
        new GymPokemon('Voltorb', 48000, 39, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25, requirement: new QuestLineCompletedRequirement('Gale of Darkness') }, 'Miror B.', 'Miror B'),
], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Fist Plate' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    legendary: [
        { loot: 'Silver_Powder' },
        { loot: 'Silk_Scarf' },
    ],
    mythic: [
        { loot: 'Lum' },
        { loot: 'Vivid_Scent', ignoreDebuff: true },
    ],
}, 665000, [
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Wynaut', 960000, 37),
        new GymPokemon('Clamperl', 960000, 38),
        new GymPokemon('Geodude', 960000, 38),
        new GymPokemon('Hitmontop', 960000, 38, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Skrub', '(male)'),
], 48000, 131);
dungeonList['Mt. Battle'] = new Dungeon('Mt. Battle', [
    new DungeonTrainer('Rider', [
        new GymPokemon('Trapinch', 52000, 35),
        new GymPokemon('Numel', 52000, 34),
        new GymPokemon('Sandshrew', 52000, 35),
    ], { weight: 1 }, 'Turo', '(male)'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Swinub', 52000, 35),
        new GymPokemon('Baltoy', 52000, 36),
        new GymPokemon('Larvitar', 52000, 37),
    ], { weight: 1 }, 'Drovic', '(male)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Sandshrew', 52000, 37),
        new GymPokemon('Geodude', 52000, 36),
        new GymPokemon('Numel', 52000, 36),
    ], { weight: 1 }, 'Kimit', '(female)'),
    new DungeonTrainer('Athlete', [
        new GymPokemon('Pikachu', 52000, 40),
        new GymPokemon('Vulpix', 52000, 39),
        new GymPokemon('Abra', 52000, 38),
    ], { weight: 1 }, 'Aidel', '(female)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Pineco', 52000, 35),
        new GymPokemon('Baltoy', 52000, 35),
        new GymPokemon('Houndour', 52000, 37),
        new GymPokemon('Graveler', 52000, 37),
    ], { weight: 1 }, 'Riden', '(male)'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Trapinch', 52000, 38),
        new GymPokemon('Barboach', 52000, 36),
        new GymPokemon('Trapinch', 52000, 38),
        new GymPokemon('Lileep', 52000, 36),
    ], { weight: 1 }, 'Telia', '(female)'),
    new DungeonTrainer('Street Performer', [
        new GymPokemon('Cacnea', 52000, 37),
        new GymPokemon('Spinda', 52000, 3),
        new GymPokemon('Kadabra', 52000, 37),
    ], { weight: 1 }, 'Nortz'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Graveler', 52000, 36),
        new GymPokemon('Sandslash', 52000, 37),
        new GymPokemon('Vibrava', 52000, 37),
    ], { weight: 1 }, 'Weeg', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Houndour', 52000, 37),
        new GymPokemon('Duskull', 52000, 36),
        new GymPokemon('Koffing', 52000, 37),
        new GymPokemon('Kirlia', 52000, 36),
    ], { weight: 1 }, 'Kison', '(female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Geodude', 52000, 36),
        new GymPokemon('Geodude', 52000, 36),
        new GymPokemon('Sandslash', 52000, 38),
    ], { weight: 1 }, 'Berin', '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Grey Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'LargeRestore' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    legendary: [
        { loot: 'Charcoal' },
        { loot: 'Excite_Scent', ignoreDebuff: true },
    ],
    mythic: [
        { loot: 'Protein', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Mt. Battle')) },
        { loot: 'Carbos', requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Mt. Battle')) },
    ],
}, 680000, [
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Metang', 999000, 37),
        new GymPokemon('Golem', 999000, 38),
        new GymPokemon('Marshtomp', 999000, 38),
        new GymPokemon('Camerupt', 999000, 38),
        new GymPokemon('Entei', 999000, 38, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Dakim', 'Dakim'),
], 52000, 131);
dungeonList['The Under'] = new Dungeon('The Under', [
    new DungeonTrainer('Hunter', [
        new GymPokemon('Skitty', 57000, 35),
        new GymPokemon('Oddish', 57000, 34),
    ], { weight: 1, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('The Under'), GameConstants.AchievementOption.less) }, 'Zada', '(female)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Magikarp', 57000, 36),
        new GymPokemon('Wailord', 57000, 40),
    ], { weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('The Under'), GameConstants.AchievementOption.less) }, 'Gurks', '(male)'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Skitty', 57000, 35),
        new GymPokemon('Oddish', 57000, 34),
    ], { weight: 1, requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('The Under'), GameConstants.AchievementOption.less) }, 'Zada', '(female)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Feebas', 57000, 36),
        new GymPokemon('Wailord', 57000, 40),
    ], { weight: 1, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('The Under'), GameConstants.AchievementOption.less) }, 'Gurks', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Ledian', 57000, 40, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Volbeat', 57000, 38),
        new GymPokemon('Spinarak', 57000, 39),
    ], { weight: 0.25 }, 'Kloak', '(female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Ariados', 57000, 38),
        new GymPokemon('Illumise', 57000, 40),
    ], { weight: 1, requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('The Under'), GameConstants.AchievementOption.less) }, 'Dagur', '(female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Gloom', 57000, 39),
        new GymPokemon('Illumise', 57000, 40),
    ], { weight: 1, requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('The Under'), GameConstants.AchievementOption.less) }, 'Dagur', '(female)'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Shroomish', 57000, 35),
        new GymPokemon('Jigglypuff', 57000, 38),
        new GymPokemon('Teddiursa', 57000, 37),
        new GymPokemon('Gligar', 57000, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Frena', '(female)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Kirlia', 57000, 37),
        new GymPokemon('Gloom', 57000, 38),
        new GymPokemon('Roselia', 57000, 38),
        new GymPokemon('Stantler', 57000, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Liaks', '(female)'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Octillery', 57000, 38),
        new GymPokemon('Dunsparce', 57000, 39),
        new GymPokemon('Masquerain', 57000, 38),
        new GymPokemon('Piloswine', 57000, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Lonia', '(female)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Loudred', 57000, 41),
        new GymPokemon('Seviper', 57000, 40),
        new GymPokemon('Corsola', 57000, 41),
        new GymPokemon('Sneasel', 57000, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Nelis', '(female)'),
], {
    common: [
        { loot: 'Lucky_incense' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'LargeRestore' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    legendary: [
        { loot: 'Black_Glasses' },
        { loot: 'Timerball' },
        { loot: 'Soft_Sand' },
    ],
    mythic: [
        { loot: 'Carbos', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('The Under')) },
        { loot: 'Vivid_Scent', ignoreDebuff: true },
    ],
}, 740000, [
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Delcatty', 1010000, 45),
        new GymPokemon('Steelix', 1010000, 45),
        new GymPokemon('Banette', 1010000, 45),
        new GymPokemon('Vileplume', 1010000, 44),
        new GymPokemon('Suicune', 1010000, 40, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Venus', 'Venus'),
], 57000, 131);
dungeonList['Cipher Lab'] = new Dungeon('Cipher Lab', [
    new DungeonTrainer('Scientist', [
        new GymPokemon('Voltorb', 62000, 38),
        new GymPokemon('Voltorb', 62000, 38),
    ], { weight: 1 }, 'Myron', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Furret', 62000, 37),
        new GymPokemon('Remoraid', 62000, 39),
        new GymPokemon('Castform', 62000, 41),
        new GymPokemon('Aipom', 62000, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Cole', '(female)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Electrode', 62000, 39),
        new GymPokemon('Magneton', 62000, 39),
    ], { weight: 1, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less) }, 'Odlow', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magnemite', 62000, 39),
        new GymPokemon('Magneton', 62000, 40),
    ], { weight: 1, requirement: new ClearDungeonRequirement(75, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less) }, 'Coren', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Chinchou', 62000, 38),
        new GymPokemon('Magnemite', 62000, 37),
    ], { weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less) }, 'Lethco', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Electrode', 62000, 39),
        new GymPokemon('Magnemite', 62000, 38),
    ], { weight: 1, requirement: new ClearDungeonRequirement(125, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less) }, 'Odlow', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Electrode', 62000, 40),
        new GymPokemon('Magneton', 62000, 40),
    ], { weight: 1, requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less) }, 'Coren', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Chinchou', 62000, 38),
        new GymPokemon('Electrike', 62000, 39),
    ], { weight: 1, requirement: new ClearDungeonRequirement(175, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less) }, 'Lethco', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Nuzleaf', 62000, 38),
        new GymPokemon('Carvanha', 62000, 38),
        new GymPokemon('Houndour', 62000, 38),
        new GymPokemon('Murkrow', 62000, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Lare', '(female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Pupitar', 62000, 40),
        new GymPokemon('Zubat', 62000, 40),
        new GymPokemon('Swablu', 62000, 40),
        new GymPokemon('Forretress', 62000, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Vana', '(female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Rhyhorn', 62000, 40),
        new GymPokemon('Grovyle', 62000, 40),
        new GymPokemon('Ariados', 62000, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Lesar', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Linoone', 62000, 38),
        new GymPokemon('Vigoroth', 62000, 39),
        new GymPokemon('Granbull', 62000, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Tanie', '(female)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Electrode', 62000, 37),
        new GymPokemon('Electrode', 62000, 37),
    ], { weight: 1, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less) }, 'Dubik', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Magneton', 62000, 40),
        new GymPokemon('Ampharos', 62000, 41),
    ], { weight: 1, requirement: new ClearDungeonRequirement(225, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less) }, 'Kotan', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Electrode', 62000, 42),
        new GymPokemon('Ampharos', 62000, 41),
    ], { weight: 1, requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less) }, 'Kotan', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Kadabra', 62000, 42),
        new GymPokemon('Swellow', 62000, 42),
        new GymPokemon('Kecleon', 62000, 43),
        new GymPokemon('Vibrava', 62000, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Remil', '(female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Slugma', 62000, 14),
        new GymPokemon('Houndour', 62000, 17, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 6) }, 'Resix', 'Resix'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Horsea', 62000, 11),
        new GymPokemon('Goldeen', 62000, 12),
        new GymPokemon('Spheal', 62000, 17, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 6) }, 'Blusix', 'Blusix'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Hoothoot', 62000, 14),
        new GymPokemon('Baltoy', 62000, 17, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 6) }, 'Browsix', 'Browsix'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Chinchou', 62000, 11),
        new GymPokemon('Electrike', 62000, 12),
        new GymPokemon('Mareep', 62000, 17, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 6) }, 'Yellosix', 'Yellosix'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Grimer', 62000, 11),
        new GymPokemon('Koffing', 62000, 10),
        new GymPokemon('Tentacool', 62000, 10),
        new GymPokemon('Gulpin', 62000, 17, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 6) }, 'Purpsix', 'Purpsix'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Lotad', 62000, 11),
        new GymPokemon('Oddish', 62000, 10),
        new GymPokemon('Cacnea', 62000, 10),
        new GymPokemon('Shroomish', 62000, 10),
        new GymPokemon('Pineco', 62000, 10),
        new GymPokemon('Seedot', 62000, 17, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 6) }, 'Greesix', 'Greesix'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Duskull', 62000, 14),
        new GymPokemon('Skitty', 62000, 14),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(275, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 6)]) }, 'Corla', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Doduo', 62000, 13),
        new GymPokemon('Taillow', 62000, 14),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 6)]) }, 'Javion', 'XD (female)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Lileep', 62000, 13),
        new GymPokemon('Anorith', 62000, 13),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(325, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 6)]) }, 'Mesak', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Swinub', 62000, 14),
        new GymPokemon('Shuppet', 62000, 13),
        new GymPokemon('Spinarak', 62000, 14, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 6) }, 'Nexir', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Ralts', 62000, 14),
        new GymPokemon('Voltorb', 62000, 13),
        new GymPokemon('Bagon', 62000, 13),
        new GymPokemon('Numel', 62000, 14, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 6) }, 'Solox', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Snorunt', 62000, 14),
        new GymPokemon('Barboach', 62000, 14),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 6)]) }, 'Crink', 'XD (male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Spoink', 62000, 16),
        new GymPokemon('Lotad', 62000, 14),
        new GymPokemon('Staryu', 62000, 14),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(375, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 6)]) }, 'Morbit', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Natu', 62000, 16),
        new GymPokemon('Nincada', 62000, 14),
        new GymPokemon('Wailmer', 62000, 15),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 6)]) }, 'Meda', 'XD (female)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Swablu', 62000, 17),
        new GymPokemon('Wynaut', 62000, 16),
        new GymPokemon('Corsola', 62000, 15),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(425, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 6)]) }, 'Elrok', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Dustox', 62000, 14),
        new GymPokemon('Wingull', 62000, 17),
        new GymPokemon('Pineco', 62000, 16),
        new GymPokemon('Qwilfish', 62000, 15),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(450, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 6)]) }, 'Coffy', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Abra', 62000, 17),
        new GymPokemon('Machop', 62000, 16),
        new GymPokemon('Feebas', 62000, 16),
        new GymPokemon('Makuhita', 62000, 16),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(475, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 6)]) }, 'Digor', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Carvanha', 62000, 15, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Magnemite', 62000, 15),
        new GymPokemon('Psyduck', 62000, 15),
        new GymPokemon('Remoraid', 62000, 16),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 6) }, 'Cabol', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Jigglypuff', 62000, 15),
        new GymPokemon('Chimecho', 62000, 17),
        new GymPokemon('Dunsparce', 62000, 16),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(500, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 6)]) }, 'Nopia', 'XD (female)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Shroomish', 62000, 15, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Snubbull', 62000, 16),
        new GymPokemon('Kecleon', 62000, 16),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 6) }, 'Klots', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Clamperl', 62000, 13),
        new GymPokemon('Corphish', 62000, 14),
        new GymPokemon('Zubat', 62000, 15),
    ], { weight: 1, requirement: new MultiRequirement([new ClearDungeonRequirement(525, GameConstants.getDungeonIndex('Cipher Lab'), GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Gale of Darkness', 6)]) }, 'Tekot', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Beldum', 62000, 18),
        new GymPokemon('Murkrow', 62000, 18),
        new GymPokemon('Teddiursa', 62000, 18, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Rhyhorn', 62000, 18),
    ], { weight: 0.25, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 6) }, 'Naps', '(yellow)'),
], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Diveball' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    legendary: [
        { loot: 'Revive' },
        { loot: 'Dragon_Fang' },
        { loot: 'Silver_Powder' },
        { loot: 'Excite_Scent', ignoreDebuff: true },
    ],
    mythic: [
        { loot: 'Protein', requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Cipher Lab')) },
        { loot: 'Carbos', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Cipher Lab')) },
    ],
}, 800000, [
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Golbat', 1060000, 48),
        new GymPokemon('Huntail', 1060000, 47),
        new GymPokemon('Lanturn', 1060000, 47),
        new GymPokemon('Altaria', 1060000, 46),
        new GymPokemon('Raikou', 1060000, 40, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Ein', 'Ein'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Luvdisc', 17400000, 20),
        new GymPokemon('Beautifly', 17400000, 19),
        new GymPokemon('Roselia', 17400000, 19),
        new GymPokemon('Delcatty', 17400000, 18, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 6) }, 'Lovrina', 'Lovrina'),
], 62000, 131);
dungeonList['Realgam Tower Battles'] = new Dungeon('Realgam Tower Battles', [
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Grimer', 70000, 39),
        new GymPokemon('Seviper', 70000, 40),
    ], { weight: 1, requirement: new ClearDungeonRequirement(25, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Bopen', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Dustox', 70000, 38),
        new GymPokemon('Seviper', 70000, 40),
    ], { weight: 1, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Bopen', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Delibird', 70000, 45, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Piloswine', 70000, 42),
        new GymPokemon('Glalie', 70000, 42),
    ], { weight: 0.5 }, 'Arton', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Sunflora', 70000, 45, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Jumpluff', 70000, 42),
        new GymPokemon('Gloom', 70000, 41),
    ], { weight: 0.5 }, 'Baila', '(female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Masquerain', 70000, 42),
        new GymPokemon('Ariados', 70000, 41),
        new GymPokemon('Heracross', 70000, 45, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.5 }, 'Dioge', '(male)'),
    new DungeonTrainer('Mystery Troop Green', [
        new GymPokemon('Muk', 70000, 45),
        new GymPokemon('Grumpig', 70000, 44),
    ], { weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Verde'),
    new DungeonTrainer('Mystery Troop Red', [
        new GymPokemon('Muk', 70000, 45),
        new GymPokemon('Grumpig', 70000, 44),
    ], { weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Rosso'),
    new DungeonTrainer('Mystery Troop Blue', [
        new GymPokemon('Muk', 70000, 45),
        new GymPokemon('Grumpig', 70000, 44),
    ], { weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Bluno'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Shelgon', 70000, 40),
        new GymPokemon('Vigoroth', 70000, 41),
    ], { weight: 1, requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Rugen', '(male)'),
    new DungeonTrainer('Bandana Guy', [
        new GymPokemon('Hariyama', 70000, 41),
        new GymPokemon('Lombre', 70000, 42),
    ], { weight: 1, requirement: new ClearDungeonRequirement(175, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Klest'),
    new DungeonTrainer('Bandana Guy', [
        new GymPokemon('Nuzleaf', 70000, 39),
        new GymPokemon('Graveler', 70000, 42),
    ], { weight: 1, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Klest'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Metang', 70000, 39),
        new GymPokemon('Mawile', 70000, 40),
        new GymPokemon('Lairon', 70000, 41),
    ], { weight: 1, requirement: new ClearDungeonRequirement(225, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Aline', '(female)'),
    new DungeonTrainer('Street Performer', [
        new GymPokemon('Seadra', 70000, 39),
        new GymPokemon('Feraligatr', 70000, 40),
    ], { weight: 1, requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Luper'),
    new DungeonTrainer('Street Performer', [
        new GymPokemon('Qwilfish', 70000, 40),
        new GymPokemon('Octillery', 70000, 39),
    ], { weight: 1, requirement: new ClearDungeonRequirement(275, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Luper'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Loudred', 70000, 45),
        new GymPokemon('Wigglytuff', 70000, 43),
    ], { weight: 1, requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Givern', '(male)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Ninetales', 70000, 40),
        new GymPokemon('Machoke', 70000, 40),
    ], { weight: 1, requirement: new ClearDungeonRequirement(325, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Trus', '(male)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Swellow', 70000, 40),
        new GymPokemon('Magneton', 70000, 40),
    ], { weight: 1, requirement: new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Trus', '(male)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Quagsire', 70000, 41),
        new GymPokemon('Donphan', 70000, 40),
        new GymPokemon('Sandslash', 70000, 40),
    ], { weight: 1, requirement: new ClearDungeonRequirement(375, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Kevel', '(male)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Swalot', 70000, 40),
        new GymPokemon('Chimecho', 70000, 41),
    ], { weight: 1, requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Elose', '(female)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Cradily', 70000, 41),
        new GymPokemon('Noctowl', 70000, 41),
    ], { weight: 1, requirement: new ClearDungeonRequirement(425, GameConstants.getDungeonIndex('Realgam Tower Battles'), GameConstants.AchievementOption.less) }, 'Elose', '(female)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Purple Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    epic: [{ loot: 'Lureball' }],
    legendary: [
        { loot: 'Never_Melt_Ice' },
        { loot: 'Sharp_Beak' },
    ],
    mythic: [
        { loot: 'Protein', requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Realgam Tower Battles')) },
        { loot: 'Carbos', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Realgam Tower Battles')) },
        { loot: 'Vivid_Scent', ignoreDebuff: true },
    ],
}, 850000, [
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Crobat', 1100000, 48),
        new GymPokemon('Pelipper', 1100000, 49),
        new GymPokemon('Rhydon', 1100000, 50),
        new GymPokemon('Starmie', 1100000, 49),
        new GymPokemon('Manectric', 1100000, 50),
    ], { weight: 1, hide: true, requirement: new QuestLineCompletedRequirement('Shadows in the Desert', GameConstants.AchievementOption.less) }, 'Ein', 'Ein'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Ludicolo', 1100000, 44),
        new GymPokemon('Ludicolo', 1100000, 45),
        new GymPokemon('Loudred', 1100000, 46),
        new GymPokemon('Golduck', 1100000, 45),
        new GymPokemon('Armaldo', 1100000, 43),
    ], { weight: 1, hide: true, requirement: new QuestLineCompletedRequirement('Shadows in the Desert', GameConstants.AchievementOption.less) }, 'Miror B.', 'Miror B'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Claydol', 1100000, 46),
        new GymPokemon('Forretress', 1100000, 45),
        new GymPokemon('Flygon', 1100000, 46),
        new GymPokemon('Whiscash', 1100000, 46),
        new GymPokemon('Houndoom', 1100000, 47),
    ], { weight: 1, hide: true, requirement: new QuestLineCompletedRequirement('Shadows in the Desert', GameConstants.AchievementOption.less) }, 'Dakim', 'Dakim'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Bellossom', 1100000, 47),
        new GymPokemon('Misdreavus', 1100000, 47),
        new GymPokemon('Raichu', 1100000, 48),
        new GymPokemon('Wigglytuff', 1100000, 48),
        new GymPokemon('Milotic', 1100000, 48),
    ], { weight: 1, hide: true, requirement: new QuestLineCompletedRequirement('Shadows in the Desert', GameConstants.AchievementOption.less) }, 'Venus', 'Venus'),
    new DungeonTrainer('Snagem Head', [
        new GymPokemon('Crawdaunt', 1100000, 47),
        new GymPokemon('Shiftry', 1100000, 47),
        new GymPokemon('Pinsir', 1100000, 48),
        new GymPokemon('Hariyama', 1100000, 48),
        new GymPokemon('Skarmory', 1100000, 48, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Gonzap', '(gonzap)'),
], 70000, 131);
dungeonList['Realgam Colosseum'] = new Dungeon('Realgam Colosseum', [
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Porygon2', 75200, 45),
        new GymPokemon('Zangoose', 75200, 45),
        new GymPokemon('Miltank', 75200, 48, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.5 }, 'Jomas', '(female)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Mightyena', 75200, 46),
        new GymPokemon('Sharpedo', 75200, 47),
        new GymPokemon('Absol', 75200, 48, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.5 }, 'Delan', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Torkoal', 75200, 47),
        new GymPokemon('Magcargo', 75200, 46),
        new GymPokemon('Houndoom', 75200, 48, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.5 }, 'Nella', '(female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Cradily', 75200, 48),
        new GymPokemon('Vileplume', 75200, 48),
        new GymPokemon('Cacturne', 75200, 49),
        new GymPokemon('Tropius', 75200, 49, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.5 }, 'Ston', '(male)'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Lombre', 75200, 48),
        new GymPokemon('Lombre', 75200, 48),
        new GymPokemon('Lombre', 75200, 49),
        new GymPokemon('Nosepass', 75200, 49, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Ludicolo', 75200, 49),
    ], { weight: 0.5, requirement: new QuestLineCompletedRequirement('Gale of Darkness') }, 'Miror B.', 'Miror B'),
], {
    common: [
        { loot: 'Lucky_incense' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    epic: [{ loot: 'Ultraball' }],
    legendary: [
        { loot: 'Macho_Brace' },
        { loot: 'Excite_Scent', ignoreDebuff: true },
    ],
    mythic: [
        { loot: 'Protein', requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Realgam Colosseum')) },
        { loot: 'Carbos', requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Realgam Colosseum')) },
    ],
}, 1010000, [
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Dusclops', 1280000, 55),
        new GymPokemon('Gardevoir', 1280000, 55),
        new GymPokemon('Blaziken', 1280000, 54),
        new GymPokemon('Xatu', 1280000, 54),
        new GymPokemon('Walrein', 1280000, 56),
        new GymPokemon('Metagross', 1280000, 50, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Nascour', '(nascour)'),
    new DungeonTrainer('Cipher Head', [
        new GymPokemon('Slowking', 1280000, 61),
        new GymPokemon('Scizor', 1280000, 60),
        new GymPokemon('Machamp', 1280000, 61),
        new GymPokemon('Salamence', 1280000, 60),
        new GymPokemon('Slaking', 1280000, 60),
        new GymPokemon('Tyranitar', 1280000, 55, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Evice', '(evice)'),
], 75200, 134);
dungeonList['Snagem Hideout'] = new Dungeon('Snagem Hideout', [
    new DungeonTrainer('Team Snagem', [
        new GymPokemon('Lanturn', 80200, 50),
        new GymPokemon('Starmie', 80200, 52),
    ], { weight: 1, requirement: new ClearDungeonRequirement(25, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Driton'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Shelgon', 80200, 54),
        new GymPokemon('Carvanha', 80200, 51),
    ], { weight: 1, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Colas', '(male)'),
    new DungeonTrainer('Bandana Guy', [
        new GymPokemon('Weezing', 80200, 52),
        new GymPokemon('Swalot', 80200, 51),
    ], { weight: 1, requirement: new ClearDungeonRequirement(75, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Crudo'),
    new DungeonTrainer('Team Snagem', [
        new GymPokemon('Vigoroth', 80200, 52),
        new GymPokemon('Zangoose', 80200, 53),
    ], { weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Niver'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Mightyena', 80200, 50),
        new GymPokemon('Linoone', 80200, 53),
    ], { weight: 1, requirement: new ClearDungeonRequirement(125, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Rions', '(male)'),
    new DungeonTrainer('Team Snagem', [
        new GymPokemon('Swellow', 80200, 54),
        new GymPokemon('Golbat', 80200, 53),
    ], { weight: 1, requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Fuston'),
    new DungeonTrainer('Team Snagem', [
        new GymPokemon('Seadra', 80200, 55),
        new GymPokemon('Pelipper', 80200, 53),
    ], { weight: 1, requirement: new ClearDungeonRequirement(175, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Driton'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Pupitar', 80200, 54),
        new GymPokemon('Spinda', 80200, 51),
    ], { weight: 1, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Colas', '(male)'),
    new DungeonTrainer('Bandana Guy', [
        new GymPokemon('Sandslash', 80200, 53),
        new GymPokemon('Linoone', 80200, 55),
    ], { weight: 1, requirement: new ClearDungeonRequirement(225, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Crudo'),
    new DungeonTrainer('Team Snagem', [
        new GymPokemon('Grovyle', 80200, 52),
        new GymPokemon('Rhyhorn', 80200, 52),
    ], { weight: 1, requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Niver'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Poochyena', 80200, 54),
        new GymPokemon('Kadabra', 80200, 53),
    ], { weight: 1, requirement: new ClearDungeonRequirement(275, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Rions', '(male)'),
    new DungeonTrainer('Team Snagem', [
        new GymPokemon('Beautifly', 80200, 53),
        new GymPokemon('Delibird', 80200, 54),
    ], { weight: 1, requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Fuston'),
    new DungeonTrainer('Mystery Troop Green', [
        new GymPokemon('Muk', 80200, 55),
        new GymPokemon('Grumpig', 80200, 54),
        new GymPokemon('Sharpedo', 80200, 53),
        new GymPokemon('Bayleef', 80200, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Verde'),
    new DungeonTrainer('Mystery Troop Red', [
        new GymPokemon('Muk', 80200, 55),
        new GymPokemon('Grumpig', 80200, 54),
        new GymPokemon('Breloom', 80200, 53),
        new GymPokemon('Quilava', 80200, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Rosso'),
    new DungeonTrainer('Mystery Troop Blue', [
        new GymPokemon('Muk', 80200, 55),
        new GymPokemon('Grumpig', 80200, 54),
        new GymPokemon('Camerupt', 80200, 53),
        new GymPokemon('Croconaw', 80200, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Bluno'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Octillery', 80200, 54),
        new GymPokemon('Walrein', 80200, 52),
    ], { weight: 1, requirement: new ClearDungeonRequirement(325, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Lonia', '(female)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Seviper', 80200, 52),
        new GymPokemon('Sharpedo', 80200, 50),
    ], { weight: 1, requirement: new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Nelis', '(female)'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Mawile', 80200, 53),
        new GymPokemon('Donphan', 80200, 51),
    ], { weight: 1, requirement: new ClearDungeonRequirement(375, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Frena', '(female)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Jumpluff', 80200, 53),
        new GymPokemon('Noctowl', 80200, 52),
    ], { weight: 1, requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Liaks', '(female)'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Flaaffy', 80200, 55),
        new GymPokemon('Dunsparce', 80200, 51),
    ], { weight: 1, requirement: new ClearDungeonRequirement(425, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Lonia', '(female)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Corsola', 80200, 51),
        new GymPokemon('Loudred', 80200, 54),
    ], { weight: 1, requirement: new ClearDungeonRequirement(450, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Nelis', '(female)'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Jigglypuff', 80200, 52),
        new GymPokemon('Shroomish', 80200, 53),
    ], { weight: 1, requirement: new ClearDungeonRequirement(475, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Frena', '(female)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Gloom', 80200, 53),
        new GymPokemon('Golduck', 80200, 53),
    ], { weight: 1, requirement: new ClearDungeonRequirement(500, GameConstants.getDungeonIndex('Snagem Hideout'), GameConstants.AchievementOption.less) }, 'Liaks', '(female)'),
    new DungeonTrainer('Team Snagem', [
        new GymPokemon('Smeargle', 80200, 52),
        new GymPokemon('Smeargle', 80200, 51),
        new GymPokemon('Smeargle', 80200, 50),
        new GymPokemon('Smeargle', 80200, 45, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Biden'),
    new DungeonTrainer('Team Snagem', [
        new GymPokemon('Marshtomp', 80200, 55),
        new GymPokemon('Machoke', 80200, 52),
        new GymPokemon('Shiftry', 80200, 50),
        new GymPokemon('Ursaring', 80200, 45, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Agrev'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Red Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    epic: [{ loot: 'Timerball' }],
    legendary: [
        { loot: 'Max Revive' },
        { loot: 'Miracle_Seed' },
        { loot: 'Mystic_Water' },
        { loot: 'Charcoal' },
    ],
    mythic: [
        { loot: 'Protein', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Snagem Hideout')) },
        { loot: 'Carbos', requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Snagem Hideout')) },
        { loot: 'Vivid_Scent', ignoreDebuff: true },
    ],
}, 1310000, [
    new DungeonTrainer('Snagem Head', [
        new GymPokemon('Breloom', 1500000, 64),
        new GymPokemon('Crawdaunt', 1500000, 64),
        new GymPokemon('Granbull', 1500000, 64),
        new GymPokemon('Armaldo', 1500000, 64),
        new GymPokemon('Machamp', 1500000, 64),
        new GymPokemon('Skarmory', 1500000, 64, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Gonzap', '(gonzap)'),
], 80200, 134);
dungeonList['Deep Colosseum'] = new Dungeon('Deep Colosseum', [
    new DungeonTrainer('Hunter', [
        new GymPokemon('Tropius', 88800, 61),
        new GymPokemon('Zangoose', 88800, 60),
        new GymPokemon('Nuzleaf', 88800, 60),
    ], { weight: 1 }, 'Dewig', '(male)'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Typhlosion', 88800, 61),
        new GymPokemon('Vigoroth', 88800, 61),
        new GymPokemon('Hariyama', 88800, 62),
    ], { weight: 1 }, 'Palen', '(female)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Houndour', 88800, 62),
        new GymPokemon('Dodrio', 88800, 62),
    ], { weight: 1 }, 'Toway', '(male)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Ledian', 88800, 63),
        new GymPokemon('Girafarig', 88800, 62),
    ], { weight: 1 }, 'Toway', '(male)'),
    new DungeonTrainer('Street Performer', [
        new GymPokemon('Jumpluff', 88800, 61),
        new GymPokemon('Sneasel', 88800, 60),
        new GymPokemon('Electrode', 88800, 60),
    ], { weight: 1 }, 'Regol'),
    new DungeonTrainer('Old Man', [
        new GymPokemon('Delibird', 88800, 62),
        new GymPokemon('Marshtomp', 88800, 61),
        new GymPokemon('Walrein', 88800, 61),
    ], { weight: 1 }, 'Gorbel'),
    new DungeonTrainer('Bandana Guy', [
        new GymPokemon('Linoone', 88800, 63),
        new GymPokemon('Xatu', 88800, 62),
    ], { weight: 1 }, 'Lobert'),
    new DungeonTrainer('Bandana Guy', [
        new GymPokemon('Medicham', 88800, 62),
        new GymPokemon('Azumarill', 88800, 62),
    ], { weight: 1 }, 'Lobert'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Machop', 88800, 60),
        new GymPokemon('Ursaring', 88800, 61),
        new GymPokemon('Machoke', 88800, 60),
    ], { weight: 1 }, 'Varug', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Spinda', 88800, 62),
        new GymPokemon('Granbull', 88800, 62),
        new GymPokemon('Delcatty', 88800, 62),
    ], { weight: 1 }, 'Zogo', '(male)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Wigglytuff', 88800, 62),
        new GymPokemon('Donphan', 88800, 61),
    ], { weight: 1 }, 'Shatol', '(female)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Volbeat', 88800, 60),
        new GymPokemon('Beautifly', 88800, 60),
    ], { weight: 1 }, 'Drook', '(male)'),
    new DungeonTrainer('Roller Boy', [
        new GymPokemon('Octillery', 88800, 61),
        new GymPokemon('Exploud', 88800, 61),
    ], { weight: 1 }, 'Dult'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Wailmer', 88800, 63),
        new GymPokemon('Graveler', 88800, 61),
    ], { weight: 1 }, 'Shatol', '(female)'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Nuzleaf', 88800, 60),
        new GymPokemon('Jumpluff', 88800, 61),
    ], { weight: 1 }, 'Drook', '(male)'),
    new DungeonTrainer('Roller Boy', [
        new GymPokemon('Lanturn', 88800, 60),
        new GymPokemon('Lairon', 88800, 60),
    ], { weight: 1 }, 'Dult'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Marshtomp', 88800, 63),
        new GymPokemon('Swellow', 88800, 62),
        new GymPokemon('Crawdaunt', 88800, 62),
    ], { weight: 1 }, 'Ophel', '(female)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Nincada', 88800, 64),
        new GymPokemon('Horsea', 88800, 63),
        new GymPokemon('Shuppet', 88800, 63),
    ], { weight: 1 }, 'Nelon', '(female)'),
    new DungeonTrainer('Athlete', [
        new GymPokemon('Misdreavus', 88800, 64),
        new GymPokemon('Kadabra', 88800, 64),
        new GymPokemon('Seadra', 88800, 65),
        new GymPokemon('Kecleon', 88800, 65),
    ], { weight: 1 }, 'Lorge', '(male)'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Mawile', 88800, 66),
        new GymPokemon('Relicanth', 88800, 67),
        new GymPokemon('Murkrow', 88800, 66),
    ], { weight: 1 }, 'Grons', '(male)'),
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Grey Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Stone Plate' },
        { loot: 'Earth Plate' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    legendary: [{ loot: 'Max Revive' }],
    mythic: [
        { loot: 'Protein', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Deep Colosseum')) },
        { loot: 'Carbos', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Deep Colosseum')) },
        { loot: 'Vivid_Scent', ignoreDebuff: true },
    ],
}, 1403000, [
    new DungeonTrainer('Deep King', [
        new GymPokemon('Skarmory', 1750000, 66),
        new GymPokemon('Girafarig', 1750000, 68),
        new GymPokemon('Sableye', 1750000, 69),
        new GymPokemon('Kingdra', 1750000, 70),
        new GymPokemon('Shedinja', 1750000, 68),
        new GymPokemon('Shuckle', 1750000, 45, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Agnol', '(angol)'),
], 88800, 134);
dungeonList['Phenac Stadium'] = new Dungeon('Phenac Stadium', [
    new DungeonTrainer('School Kid', [
        new GymPokemon('Azurill', 89500, 40),
        new GymPokemon('Sentret', 89500, 40),
    ], { weight: 1 }, 'Flitz', '(male)'),
    new DungeonTrainer('Roller Boy', [
        new GymPokemon('Tentacool', 89500, 40),
        new GymPokemon('Doduo', 89500, 40),
    ], { weight: 1 }, 'Greb'),
    new DungeonTrainer('Athlete', [
        new GymPokemon('Psyduck', 89500, 41),
        new GymPokemon('Pineco', 89500, 41),
    ], { weight: 1 }, 'Adel', '(female)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Mudkip', 89500, 42),
        new GymPokemon('Zubat', 89500, 41),
        new GymPokemon('Cacnea', 89500, 41),
    ], { weight: 1 }, 'Rewin', '(male)'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Wingull', 89500, 40),
        new GymPokemon('Igglybuff', 89500, 40),
    ], { weight: 1 }, 'Lang', '(male)'),
    new DungeonTrainer('Athlete', [
        new GymPokemon('Snorunt', 89500, 40),
        new GymPokemon('Taillow', 89500, 40),
    ], { weight: 1 }, 'Bilal', '(male)'),
    new DungeonTrainer('Old Lady', [
        new GymPokemon('Horsea', 89500, 41),
        new GymPokemon('Snubbull', 89500, 41),
    ], { weight: 1 }, 'Oris'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Luvdisc', 89500, 41),
        new GymPokemon('Hoothoot', 89500, 41),
        new GymPokemon('Treecko', 89500, 42),
    ], { weight: 1 }, 'Buna', '(female)'),
    new DungeonTrainer('Lady', [
        new GymPokemon('Remoraid', 89500, 40),
        new GymPokemon('Skitty', 89500, 40),
    ], { weight: 1 }, 'Rima'),
    new DungeonTrainer('Old Man', [
        new GymPokemon('Spheal', 89500, 40),
        new GymPokemon('Machop', 89500, 40),
    ], { weight: 1 }, 'Varl'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Wooper', 89500, 41),
        new GymPokemon('Sandshrew', 89500, 41),
    ], { weight: 1 }, 'Emia', '(female)'),
    new DungeonTrainer('Teacher', [
        new GymPokemon('Clamperl', 89500, 41),
        new GymPokemon('Torchic', 89500, 41),
        new GymPokemon('Mareep', 89500, 42),
    ], { weight: 1 }, 'Holen'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Goldeen', 89500, 40),
        new GymPokemon('Wurmple', 89500, 40),
    ], { weight: 1 }, 'Harl', '(male)'),
    new DungeonTrainer('Lady', [
        new GymPokemon('Bagon', 89500, 40),
        new GymPokemon('Swablu', 89500, 40),
    ], { weight: 1 }, 'Brin'),
    new DungeonTrainer('Cooltrainer', [
        new GymPokemon('Barboach', 89500, 41),
        new GymPokemon('Seedot', 89500, 41),
    ], { weight: 1 }, 'Tock', '(male)'),
    new DungeonTrainer('Teacher', [
        new GymPokemon('Staryu', 89500, 41),
        new GymPokemon('Ledyba', 89500, 41),
        new GymPokemon('Pichu', 89500, 42),
    ], { weight: 1 }, 'Glais'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Pelipper', 89500, 23),
        new GymPokemon('Electrike', 89500, 22),
        new GymPokemon('Spearow', 89500, 22, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 13) }, 'Ezin', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Chimecho', 89500, 23),
        new GymPokemon('Stantler', 89500, 23),
        new GymPokemon('Grimer', 89500, 23, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 13) }, 'Faltly', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Hoothoot', 89500, 25),
        new GymPokemon('Graveler', 89500, 26),
        new GymPokemon('Gulpin', 89500, 26),
        new GymPokemon('Seel', 89500, 23, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 13) }, 'Egrog', '(yellow)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Splash Plate' },
        { loot: 'Diveball' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    legendary: [
        { loot: 'Silk_Scarf' },
        { loot: 'Excite_Scent', ignoreDebuff: true },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Phenac Stadium')) }],
}, 1503000, [
    new DungeonTrainer('Chaser', [
        new GymPokemon('Sableye', 2000000, 40),
        new GymPokemon('Grimer', 2000000, 41),
        new GymPokemon('Gulpin', 2000000, 40),
        new GymPokemon('Togepi', 2000000, 20, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Crelf', '(male)'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Skitty', 2000000, 51),
        new GymPokemon('Qwilfish', 2000000, 50),
        new GymPokemon('Duskull', 2000000, 50),
        new GymPokemon('Mareep', 2000000, 37, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Harle', '(female)'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Murkrow', 2000000, 60),
        new GymPokemon('Claydol', 2000000, 60),
        new GymPokemon('Steelix', 2000000, 60),
        new GymPokemon('Scizor', 2000000, 50, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Bodhi', '(male)'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Lanturn', 15790500, 26),
        new GymPokemon('Quagsire', 15790500, 26),
        new GymPokemon('Lunatone', 15790500, 25, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Castform', 15790500, 27),
        new GymPokemon('Metang', 15790500, 28),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Gale of Darkness', 13) }, 'Snattle', 'Snattle'),
], 89500, 134);
dungeonList['Under Colosseum'] = new Dungeon('Under Colosseum', [
    new DungeonTrainer('School Kid', [
        new GymPokemon('Rhyhorn', 91500, 50),
        new GymPokemon('Grovyle', 91500, 50),
        new GymPokemon('Masquerain', 91500, 50),
    ], { weight: 1 }, 'Sainz', '(male)'),
    new DungeonTrainer('Teacher', [
        new GymPokemon('Mawile', 91500, 50),
        new GymPokemon('Luvdisc', 91500, 50),
        new GymPokemon('Kirlia', 91500, 50),
    ], { weight: 1 }, 'Foshe'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Wailord', 91500, 50),
        new GymPokemon('Piloswine', 91500, 50),
        new GymPokemon('Illumise', 91500, 50),
    ], { weight: 1 }, 'Glya', '(female)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Azumarill', 91500, 50),
        new GymPokemon('Breloom', 91500, 50),
        new GymPokemon('Wobbuffet', 91500, 50),
    ], { weight: 1 }, 'Fokil', '(male)'),
    new DungeonTrainer('Reporter', [
        new GymPokemon('Jumpluff', 91500, 50),
        new GymPokemon('Sealeo', 91500, 50),
        new GymPokemon('Lanturn', 91500, 50),
    ], { weight: 1 }, 'Sclim'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Sandslash', 91500, 50),
        new GymPokemon('Camerupt', 91500, 50),
        new GymPokemon('Magcargo', 91500, 50),
    ], { weight: 1 }, 'Rina', '(female)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Zangoose', 91500, 50),
        new GymPokemon('Grumpig', 91500, 50),
        new GymPokemon('Absol', 91500, 50),
    ], { weight: 1 }, 'Kou', '(female)'),
    new DungeonTrainer('Bandana Guy', [
        new GymPokemon('Rhydon', 91500, 50),
        new GymPokemon('Tropius', 91500, 50),
        new GymPokemon('Seviper', 91500, 50),
    ], { weight: 1 }, 'Roblin'),
    new DungeonTrainer('School Kid', [
        new GymPokemon('Dustox', 91500, 50),
        new GymPokemon('Yanma', 91500, 50),
        new GymPokemon('Ariados', 91500, 50),
    ], { weight: 1 }, 'Sainz', '(male)'),
    new DungeonTrainer('Teacher', [
        new GymPokemon('Delcatty', 91500, 50),
        new GymPokemon('Beautifly', 91500, 50),
        new GymPokemon('Roselia', 91500, 50),
    ], { weight: 1 }, 'Foshe'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Lunatone', 91500, 50),
        new GymPokemon('Metang', 91500, 50),
        new GymPokemon('Electrode', 91500, 50),
    ], { weight: 1 }, 'Glya', '(female)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Shuckle', 91500, 50),
        new GymPokemon('Murkrow', 91500, 50),
        new GymPokemon('Misdreavus', 91500, 50),
    ], { weight: 1 }, 'Fokil', '(male)'),
    new DungeonTrainer('Reporter', [
        new GymPokemon('Castform', 91500, 50),
        new GymPokemon('Torkoal', 91500, 50),
        new GymPokemon('Glalie', 91500, 50),
    ], { weight: 1 }, 'Sclim'),
    new DungeonTrainer('Hunter', [
        new GymPokemon('Forretress', 91500, 50),
        new GymPokemon('Cacturne', 91500, 50),
        new GymPokemon('Skarmory', 91500, 50),
    ], { weight: 1 }, 'Rina', '(female)'),
    new DungeonTrainer('Rider', [
        new GymPokemon('Tentacruel', 91500, 50),
        new GymPokemon('Cradily', 91500, 50),
        new GymPokemon('Hariyama', 91500, 50),
    ], { weight: 1 }, 'Kou', '(female)'),
    new DungeonTrainer('Bandana Guy', [
        new GymPokemon('Armaldo', 91500, 50),
        new GymPokemon('Exploud', 91500, 50),
        new GymPokemon('Aggron', 91500, 50),
    ], { weight: 1 }, 'Roblin'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Pokeball' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Purple Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Persim' },
        { loot: 'Sitrus' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    legendary: [
        { loot: 'Lum', requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Under Colosseum')) },
        { loot: 'Excite_Scent', ignoreDebuff: true },
    ],
    mythic: [
        { loot: 'Muscle_Band', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Under Colosseum')) },
        { loot: 'Vivid_Scent', ignoreDebuff: true },
    ],
}, 1603000, [
    new DungeonTrainer('Shady Guy', [
        new GymPokemon('Armaldo', 2100000, 68),
        new GymPokemon('Milotic', 2100000, 68),
        new GymPokemon('Manectric', 2100000, 68),
        new GymPokemon('Houndoom', 2100000, 68),
        new GymPokemon('Gyarados', 2100000, 68),
        new GymPokemon('Togetic', 2100000, 70, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Fein', '(wes)'),
], 91500, 134);
dungeonList['Gateon Port Battles'] = new Dungeon('Gateon Port Battles', [
    new DungeonTrainer('Chaser', [
        new GymPokemon('Swablu', 6002000, 6),
        new GymPokemon('Feebas', 6002000, 6),
    ], { weight: 1, requirement: new ClearDungeonRequirement(25, GameConstants.getDungeonIndex('Gateon Port Battles'), GameConstants.AchievementOption.less) }, 'Laken', '(female)'),
    new DungeonTrainer('Sailor', [
        new GymPokemon('Wingull', 6002000, 6),
        new GymPokemon('Lotad', 6002000, 6),
    ], { weight: 1, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Gateon Port Battles'), GameConstants.AchievementOption.less) }, 'Berk'),
    new DungeonTrainer('Sailor', [
        new GymPokemon('Whismur', 6002000, 6),
        new GymPokemon('Marill', 6002000, 6),
    ], { weight: 1, requirement: new ClearDungeonRequirement(75, GameConstants.getDungeonIndex('Gateon Port Battles'), GameConstants.AchievementOption.less) }, 'Bost'),
    new DungeonTrainer('Old Man', [
        new GymPokemon('Taillow', 80200, 6),
        new GymPokemon('Ledyba', 80200, 10, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Cyle'),
    new DungeonTrainer('Bodybuilder', [
        new GymPokemon('Zubat', 80200, 6),
        new GymPokemon('Poochyena', 80200, 10, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Kilen', '(female)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Pokeball' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Crimson Shard' },
    ],
    epic: [
        { loot: 'Splash Plate' },
        { loot: 'Insect Plate' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    legendary: [
        { loot: 'Mystic_Water' },
        { loot: 'Excite_Scent', ignoreDebuff: true },
    ],
    mythic: [{ loot: 'Heart Scale' }],
}, 6002000, [
    new DungeonTrainer('Thug', [new GymPokemon('Zangoose', 58000000, 28, undefined, undefined, GameConstants.ShadowStatus.Shadow)], { weight: 1 }, 'Zook'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Ludicolo', 14000000, 57),
        new GymPokemon('Ludicolo', 14000000, 57),
        new GymPokemon('Ludicolo', 14000000, 57),
        new GymPokemon('Ludicolo', 14000000, 57),
        new GymPokemon('Ludicolo', 14000000, 57),
        new GymPokemon('Dragonite', 14000000, 55, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1, hide: true, requirement: new QuestLineCompletedRequirement('Gale of Darkness') }, 'Miror B.', 'Miror B'),
], 443500, 134, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.unova });
dungeonList['Cipher Key Lair'] = new Dungeon('Cipher Key Lair', [
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Lanturn', 6708000, 31),
        new GymPokemon('Relicanth', 6708000, 32),
    ], { weight: 1, requirement: new ClearDungeonRequirement(25, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Kollo', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Ledian', 6708000, 28),
        new GymPokemon('Illumise', 6708000, 31),
    ], { weight: 1, requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Grezle', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Clamperl', 6708000, 31),
        new GymPokemon('Octillery', 6708000, 31),
    ], { weight: 1, requirement: new ClearDungeonRequirement(75, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Kollo', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Minun', 6708000, 30),
        new GymPokemon('Beautifly', 6708000, 30),
    ], { weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Grezle', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Seviper', 6708000, 29),
        new GymPokemon('Murkrow', 6708000, 29),
        new GymPokemon('Paras', 6708000, 28, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Growlithe', 6708000, 28, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Humah', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Xatu', 6708000, 31),
        new GymPokemon('Volbeat', 6708000, 31),
    ], { weight: 1, requirement: new ClearDungeonRequirement(125, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Ibsol', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Masquerain', 6708000, 31),
        new GymPokemon('Bellossom', 6708000, 32),
    ], { weight: 1, requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Jelstin', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Plusle', 6708000, 30),
        new GymPokemon('Dustox', 6708000, 30),
    ], { weight: 1, requirement: new ClearDungeonRequirement(175, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Ibsol', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Roselia', 6708000, 32),
        new GymPokemon('Hoppip', 6708000, 32),
    ], { weight: 1, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Jelstin', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Shellder', 6708000, 29, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Rhyhorn', 6708000, 29),
        new GymPokemon('Swalot', 6708000, 29),
        new GymPokemon('Golbat', 6708000, 29),
        new GymPokemon('Sharpedo', 6708000, 30),
    ], { weight: 0.25 }, 'Gorog', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Beedrill', 6708000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Furret', 6708000, 30),
        new GymPokemon('Togetic', 6708000, 31),
        new GymPokemon('Pidgeotto', 6708000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Lok', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Donphan', 6708000, 30),
        new GymPokemon('Ampharos', 6708000, 31),
        new GymPokemon('Tentacruel', 6708000, 31),
    ], { weight: 1, requirement: new ClearDungeonRequirement(225, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Kleto', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Noctowl', 6708000, 30),
        new GymPokemon('Mightyena', 6708000, 29),
    ], { weight: 1, requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Flipis', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Absol', 6708000, 30),
        new GymPokemon('Smeargle', 6708000, 31),
        new GymPokemon('Tentacruel', 6708000, 31),
    ], { weight: 1, requirement: new ClearDungeonRequirement(275, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Kleto', 'XD (female)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Chimecho', 6708000, 31),
        new GymPokemon('Kecleon', 6708000, 30),
    ], { weight: 1, requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Flipis', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Ninetales', 6708000, 30),
        new GymPokemon('Jumpluff', 6708000, 30),
        new GymPokemon('Azumarill', 6708000, 32),
        new GymPokemon('Tangela', 6708000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Butterfree', 6708000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Targ', 'XD (female)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Vileplume', 6708000, 31),
        new GymPokemon('Stantler', 6708000, 31),
        new GymPokemon('Granbull', 6708000, 31),
    ], { weight: 1, requirement: new ClearDungeonRequirement(325, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Hospel', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Ariados', 6708000, 30),
        new GymPokemon('Girafarig', 6708000, 29),
        new GymPokemon('Granbull', 6708000, 31),
    ], { weight: 1, requirement: new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Hospel', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Shedinja', 6708000, 31),
        new GymPokemon('Wobbuffet', 6708000, 30),
        new GymPokemon('Vibrava', 6708000, 35),
        new GymPokemon('Magneton', 6708000, 30, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Snidle', 'XD (male)'),
    new DungeonTrainer('Cipher', [
        new GymPokemon('Forretress', 6708000, 31),
        new GymPokemon('Mantine', 6708000, 32),
        new GymPokemon('Crobat', 6708000, 31),
    ], { weight: 1, requirement: new ClearDungeonRequirement(375, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Peon Fudler', '(commander)'),
    new DungeonTrainer('Cipher', [
        new GymPokemon('Machoke', 6708000, 31),
        new GymPokemon('Golem', 6708000, 31),
        new GymPokemon('Forretress', 6708000, 31),
    ], { weight: 1, requirement: new ClearDungeonRequirement(400, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Peon Fudler', '(commander)'),
    new DungeonTrainer('Cipher', [
        new GymPokemon('Golduck', 6708000, 33),
        new GymPokemon('Hitmontop', 6708000, 33),
        new GymPokemon('Hariyama', 6708000, 34),
        new GymPokemon('Venomoth', 6708000, 32, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Weepinbell', 6708000, 32, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Peon Angic', '(commander)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Camerupt', 6708000, 35),
        new GymPokemon('Seaking', 6708000, 34),
        new GymPokemon('Piloswine', 6708000, 34),
    ], { weight: 1, requirement: new ClearDungeonRequirement(425, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Acrod', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Grumpig', 6708000, 34),
        new GymPokemon('Seadra', 6708000, 34),
        new GymPokemon('Camerupt', 6708000, 35),
    ], { weight: 1, requirement: new ClearDungeonRequirement(450, GameConstants.getDungeonIndex('Cipher Key Lair'), GameConstants.AchievementOption.less) }, 'Acrod', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Huntail', 6708000, 33),
        new GymPokemon('Cacturne', 6708000, 33),
        new GymPokemon('Weezing', 6708000, 34),
        new GymPokemon('Ursaring', 6708000, 34),
        new GymPokemon('Arbok', 6708000, 32, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Smarton', '(yellow)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Pokeball' },
    ],
    rare: [
        { loot: 'Purple Shard' },
        { loot: 'Lime Shard' },
    ],
    epic: [
        { loot: 'Earth Plate' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    legendary: [
        { loot: 'Max Revive' },
        { loot: 'Poison_Barb' },
        { loot: 'Excite_Scent', ignoreDebuff: true },
    ],
    mythic: [{ loot: 'Calcium' }],
}, 6708000, [
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Lairon', 10574965, 36),
        new GymPokemon('Sealeo', 10565837, 36),
        new GymPokemon('Slowking', 10538602, 36),
        new GymPokemon('Ursaring', 10565784, 36),
        new GymPokemon('Primeape', 10538602, 34, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Hypno', 10538602, 34, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Gorigan', 'Gorigan'),
], 513600, 134, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.unova });
dungeonList['Citadark Isle'] = new Dungeon('Citadark Isle', [
    new DungeonTrainer('Sailor', [
        new GymPokemon('Mantine', 7409000, 33),
        new GymPokemon('Golduck', 7409000, 33, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Sableye', 7409000, 33, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Abson'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Dodrio', 7409000, 34, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Whiscash', 7409000, 33),
        new GymPokemon('Raticate', 7409000, 34, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Furgy', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Claydol', 7409000, 36),
        new GymPokemon('Kangaskhan', 7409000, 35, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Banette', 7409000, 37, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Litnar', 'XD (male)'),
    new DungeonTrainer('Cipher', [
        new GymPokemon('Vileplume', 7409000, 34),
        new GymPokemon('Magmar', 7409000, 36, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Pinsir', 7409000, 35, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Peon Grupel', '(commander)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Muk', 7409000, 38),
        new GymPokemon('Rapidash', 7409000, 40, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Magcargo', 7409000, 38, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Kolest', 'XD (male)'),
    new DungeonTrainer('Cipher', [
        new GymPokemon('Xatu', 7409000, 38),
        new GymPokemon('Hitmonchan', 7409000, 38, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Peon Karbon', '(commander)'),
    new DungeonTrainer('Cipher', [
        new GymPokemon('Metang', 7409000, 39),
        new GymPokemon('Hariyama', 7409000, 39),
        new GymPokemon('Hitmonlee', 7409000, 38, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Peon Petro', '(commander)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Magneton', 7409000, 41),
        new GymPokemon('Lickitung', 7409000, 38, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Geftal', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Exploud', 7409000, 41),
        new GymPokemon('Scyther', 7409000, 38, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Chansey', 7409000, 38, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Leden', 'XD (female)'),
    new DungeonTrainer('Sailor', [
        new GymPokemon('Crawdaunt', 7409000, 33),
        new GymPokemon('Pelipper', 7409000, 33),
        new GymPokemon('Golduck', 7409000, 33, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Sableye', 7409000, 33, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Abson'),
    new DungeonTrainer('Chaser', [
        new GymPokemon('Xatu', 7409000, 34),
        new GymPokemon('Dodrio', 7409000, 34, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Raticate', 7409000, 34, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Furgy', '(male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Electrode', 7409000, 34),
        new GymPokemon('Misdreavus', 7409000, 34),
        new GymPokemon('Kangaskhan', 7409000, 35, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Banette', 7409000, 37, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Litnar', 'XD (male)'),
    new DungeonTrainer('Cipher', [
        new GymPokemon('Houndoom', 7409000, 37),
        new GymPokemon('Ninetales', 7409000, 37),
        new GymPokemon('Magmar', 7409000, 36, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Pinsir', 7409000, 35, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Peon Grupel', '(commander)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Camerupt', 7409000, 37),
        new GymPokemon('Weezing', 7409000, 37),
        new GymPokemon('Rapidash', 7409000, 40, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Magcargo', 7409000, 38, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Kolest', 'XD (male)'),
    new DungeonTrainer('Cipher', [
        new GymPokemon('Medicham', 7409000, 38),
        new GymPokemon('Golem', 7409000, 38),
        new GymPokemon('Hitmonchan', 7409000, 38, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Peon Karbon', '(commander)'),
    new DungeonTrainer('Cipher', [
        new GymPokemon('Grumpig', 7409000, 39),
        new GymPokemon('Skarmory', 7409000, 39),
        new GymPokemon('Hitmonlee', 7409000, 38, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Peon Petro', '(commander)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Lanturn', 7409000, 41),
        new GymPokemon('Lickitung', 7409000, 38, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Geftal', 'XD (male)'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Stantler', 7409000, 41),
        new GymPokemon('Scyther', 7409000, 38, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Chansey', 7409000, 38, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Leden', 'XD (female)'),
], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Black Shard' },
    ],
    epic: [
        { loot: 'Duskball' },
        { loot: 'Flame Plate' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    legendary: [
        { loot: 'Timerball' },
        { loot: 'Charcoal' },
        { loot: 'Dragon_Fang' },
        { loot: 'Excite_Scent', ignoreDebuff: true },
    ],
    mythic: [
        { loot: 'Calcium' },
        { loot: 'Carbos' },
    ],
}, 7409000, [
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Gardevoir', 13958953, 36),
        new GymPokemon('Gorebyss', 13958953, 36),
        new GymPokemon('Roselia', 13958953, 37),
        new GymPokemon('Farfetch\'d', 13958953, 36, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Altaria', 13958953, 36, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1 }, 'Lovrina', 'Lovrina'),
], 577700, 134, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.unova });
dungeonList['Citadark Isle Dome'] = new Dungeon('Citadark Isle Dome', // Difficulty comperable to Pokéball Factory
[
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Scizor', 8173950, 42),
        new GymPokemon('Solrock', 8173950, 41, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Castform', 8173950, 42),
        new GymPokemon('Starmie', 8173950, 41, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Snattle', 'Snattle'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Swellow', 8173950, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Heracross', 8173950, 44),
        new GymPokemon('Electabuzz', 8173950, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Snorlax', 8173950, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Ardos', 'Ardos'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Aggron', 7409000, 43),
        new GymPokemon('Walrein', 7409000, 44),
        new GymPokemon('Poliwrath', 7409000, 42, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Mr. Mime', 7409000, 42, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Gorigan', 'Gorigan'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Breloom', 7409000, 42),
        new GymPokemon('Donphan', 7409000, 44),
        new GymPokemon('Dugtrio', 7409000, 40, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Kolax', 'XD (male)'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Manectric', 8173950, 44, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Salamence', 8173950, 50, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Flygon', 8173950, 45),
        new GymPokemon('Marowak', 8173950, 44, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Lapras', 8173950, 44, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Eldes', 'Eldes'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Miltank', 8173950, 44),
        new GymPokemon('Armaldo', 8173950, 41),
        new GymPokemon('Slaking', 8173950, 43),
    ], { weight: 1, requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Citadark Isle Dome'), GameConstants.AchievementOption.less) }, 'Loket', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Cradily', 8173950, 44),
        new GymPokemon('Milotic', 8173950, 44),
        new GymPokemon('Gyarados', 8173950, 42),
    ], { weight: 1, requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Citadark Isle Dome'), GameConstants.AchievementOption.less) }, 'Kaller', '(male)'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Metang', 8173950, 42),
        new GymPokemon('Quagsire', 8173950, 42),
        new GymPokemon('Solrock', 8173950, 41, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Starmie', 8173950, 41, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Snattle', 'Snattle'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Swellow', 8173950, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Alakazam', 8173950, 44),
        new GymPokemon('Kingdra', 8173950, 44),
        new GymPokemon('Electabuzz', 8173950, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Snorlax', 8173950, 43, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Ardos', 'Ardos'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Slowking', 7409000, 42),
        new GymPokemon('Ursaring', 7409000, 43),
        new GymPokemon('Poliwrath', 7409000, 42, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Mr. Mime', 7409000, 42, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Gorigan', 'Gorigan'),
    new DungeonTrainer('Cipher Peon', [
        new GymPokemon('Glalie', 7409000, 41),
        new GymPokemon('Ampharos', 7409000, 44),
        new GymPokemon('Dugtrio', 7409000, 40, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Kolax', 'XD (male)'),
    new DungeonTrainer('Cipher Admin', [
        new GymPokemon('Ninjask', 8173950, 45),
        new GymPokemon('Manectric', 8173950, 44, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Salamence', 8173950, 50, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Marowak', 8173950, 44, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Lapras', 8173950, 44, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 0.25 }, 'Eldes', 'Eldes'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Shiftry', 8173950, 44),
        new GymPokemon('Granbull', 8173950, 44),
        new GymPokemon('Slaking', 8173950, 43),
    ], { weight: 1, requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Citadark Isle Dome'), GameConstants.AchievementOption.less) }, 'Loket', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Corsola', 8173950, 44),
        new GymPokemon('Tentacruel', 8173950, 44),
        new GymPokemon('Gyarados', 8173950, 42),
    ], { weight: 1, requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Citadark Isle Dome'), GameConstants.AchievementOption.less) }, 'Kaller', '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Black Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Revive' },
        { loot: 'Joy_Scent', ignoreDebuff: true },
    ],
    legendary: [
        { loot: 'Sharp_Beak' },
        { loot: 'Soft_Sand' },
        { loot: 'Excite_Scent', ignoreDebuff: true },
    ],
    mythic: [{ loot: 'Vivid_Scent', ignoreDebuff: true }],
}, 8173950, [
    new DungeonTrainer('Grand Master', [new GymPokemon('XD001', 83753718, 50, undefined, undefined, GameConstants.ShadowStatus.Shadow)], { weight: 1 }, 'Greevil', 'Greevil'),
    new DungeonTrainer('Grand Master', [
        new GymPokemon('Rhydon', 13958953, 46, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Moltres', 13958953, 50, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Exeggutor', 13958953, 46, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Tauros', 13958953, 46, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Articuno', 13958953, 50, undefined, undefined, GameConstants.ShadowStatus.Shadow),
        new GymPokemon('Zapdos', 13958953, 50, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    ], { weight: 1, requirement: new QuestLineCompletedRequirement('Gale of Darkness') }, 'Greevil', 'Greevil'),
], 615000, 134, () => { }, { dungeonRegionalDifficulty: GameConstants.Region.unova });
// Sinnoh
// Sinnoh Dungeons
dungeonList['Oreburgh Gate'] = new Dungeon('Oreburgh Gate', [
    { pokemon: 'Zubat', options: { weight: 1.1 } },
    { pokemon: 'Golbat', options: { weight: 1.1 } },
    { pokemon: 'Psyduck', options: { weight: 1.1 } },
    { pokemon: 'Golduck', options: { weight: 1.1 } },
    { pokemon: 'Geodude', options: { weight: 1.1 } },
    { pokemon: 'Magikarp', options: { weight: 1.1 } },
    { pokemon: 'Barboach', options: { weight: 1.1 } },
    new DungeonTrainer('Camper', [
        new GymPokemon('Starly', 720600, 7),
        new GymPokemon('Shinx', 720600, 7),
    ], { weight: 1 }, 'Curtis'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Bidoof', 720600, 9)], { weight: 1 }, 'Diana'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [
        { loot: 'Earth Plate' },
        { loot: 'Fist Plate' },
    ],
}, 720600, [
    new DungeonBossPokemon('Gyarados', 3703000, 14),
    new DungeonBossPokemon('Whiscash', 3703000, 14),
], 39000, 203);
dungeonList['Valley Windworks'] = new Dungeon('Valley Windworks', [
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Glameow', 756000, 13)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Zubat', 756000, 13)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Glameow', 756000, 11),
        new GymPokemon('Stunky', 756000, 11),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Stunky', 756000, 13)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Zubat', 756000, 11),
        new GymPokemon('Zubat', 756000, 11),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'Lucky_incense' },
        { loot: 'Ultraball' },
    ],
    rare: [{ loot: 'Yellow Shard' }],
    epic: [{ loot: 'Zap Plate' }],
    legendary: [{ loot: 'SmallRestore' }],
}, 756000, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Zubat', 1901500, 15),
        new GymPokemon('Purugly', 1901500, 17),
    ], { weight: 1 }, 'Mars', '(mars)'),
    new DungeonBossPokemon('Drifloon', 3803000, 14, { hide: true, requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Valley Windworks')) }),
], 43000, 204);
dungeonList['Eterna Forest'] = new Dungeon('Eterna Forest', [
    { pokemon: 'Gastly', options: { weight: 1.8 } },
    { pokemon: 'Hoothoot', options: { weight: 1.8 } },
    { pokemon: 'Wurmple', options: { weight: 1.8 } },
    { pokemon: 'Silcoon', options: { weight: 1.8 } },
    { pokemon: 'Cascoon', options: { weight: 1.8 } },
    { pokemon: 'Bidoof', options: { weight: 1.8 } },
    { pokemon: 'Kricketot', options: { weight: 1.8 } },
    { pokemon: 'Budew', options: { weight: 1.8 } },
    { pokemon: 'Buneary', options: { weight: 1.8 } },
    new DungeonTrainer('Bookworms', [
        new GymPokemon('Wurmple', 812000, 9),
        new GymPokemon('Silcoon', 812000, 11),
        new GymPokemon('Beautifly', 812000, 13),
        new GymPokemon('Pachirisu', 812000, 14),
    ], { weight: 1 }, 'Jack & Briana'),
    new DungeonTrainer('Melded Minds', [
        new GymPokemon('Abra', 812000, 15),
        new GymPokemon('Abra', 812000, 15),
    ], { weight: 1 }, 'Linsey & Elijah', '(both)'),
    new DungeonTrainer('Bug Buds', [
        new GymPokemon('Wurmple', 812000, 9),
        new GymPokemon('Cascoon', 812000, 11),
        new GymPokemon('Dustox', 812000, 13),
        new GymPokemon('Burmy (Plant)', 812000, 12),
        new GymPokemon('Kricketune', 812000, 12),
    ], { weight: 1 }, 'Philip & Donald'),
    new DungeonTrainer('Melded Minds', [
        new GymPokemon('Meditite', 812000, 15),
        new GymPokemon('Psyduck', 812000, 15),
    ], { weight: 1 }, 'Kody & Rachael', '(both)'),
], {
    common: [
        { loot: 'Cheri' },
        { loot: 'Oran' },
        { loot: 'Razz' },
        { loot: 'Bluk' },
        { loot: 'Greatball' },
    ],
    rare: [{ loot: 'Lime Shard' }],
    epic: [
        { loot: 'Insect Plate' },
        { loot: 'Meadow Plate' },
    ],
    legendary: [
        { loot: 'SmallRestore' },
        { loot: 'Silver_Powder' },
    ],
}, 812000, [
    new DungeonBossPokemon('Beautifly', 3950000, 30),
    new DungeonBossPokemon('Dustox', 3950000, 30),
    new DungeonBossPokemon('Parasect', 4500000, 30, { hide: true, requirement: new MultiRequirement([
            new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 8, GameConstants.AchievementOption.less),
            new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 7),
        ]) }),
    new DungeonBossPokemon('Vivillon (River)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 20),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 21, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (River)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 48000, 205);
dungeonList['Old Chateau'] = new Dungeon('Old Chateau', ['Gastly', 'Haunter', 'Gengar'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Purple Shard' },
    ],
    epic: [
        { loot: 'Dread Plate' },
        { loot: 'Spooky Plate' },
        { loot: 'Zap Plate' },
    ],
    legendary: [
        { loot: 'Odd Keystone' },
        { loot: 'Spell_Tag' },
    ],
}, 853000, [new DungeonBossPokemon('Rotom', 4200000, 100)], 52500, 205);
dungeonList['Team Galactic Eterna Building'] = new Dungeon('Team Galactic Eterna Building', [
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Zubat', 877000, 17),
        new GymPokemon('Stunky', 877000, 17),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Zubat', 877000, 16),
        new GymPokemon('Glameow', 877000, 18),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Glameow', 877000, 19)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Croagunk', 877000, 19)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Stunky', 877000, 16),
        new GymPokemon('Croagunk', 877000, 16),
        new GymPokemon('Glameow', 877000, 16),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Kadabra', 877000, 20)], { weight: 1 }, 'Travon', '(male)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Purple Shard' },
    ],
    epic: [{ loot: 'Toxic Plate' }],
    legendary: [{ loot: 'Revive' }],
}, 877000, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Zubat', 2150000, 21),
        new GymPokemon('Skuntank', 2150000, 23),
    ], { weight: 1 }, 'Jupiter', '(jupiter)'),
    new DungeonBossPokemon('Rotom (Heat)', 4300000, 100, { hide: true, requirement: new MultiRequirement([
            new ObtainedPokemonRequirement('Rotom'),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
    new DungeonBossPokemon('Rotom (Wash)', 4300000, 100, { hide: true, requirement: new MultiRequirement([
            new ObtainedPokemonRequirement('Rotom'),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
    new DungeonBossPokemon('Rotom (Frost)', 4300000, 100, { hide: true, requirement: new MultiRequirement([
            new ObtainedPokemonRequirement('Rotom'),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
    new DungeonBossPokemon('Rotom (Fan)', 4300000, 100, { hide: true, requirement: new MultiRequirement([
            new ObtainedPokemonRequirement('Rotom'),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
    new DungeonBossPokemon('Rotom (Mow)', 4300000, 100, { hide: true, requirement: new MultiRequirement([
            new ObtainedPokemonRequirement('Rotom'),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
    new DungeonBossPokemon('Rotom (Discord)', 4300000, 100, { hide: true, requirement: new MultiRequirement([
            new ObtainedPokemonRequirement('Rotom'),
            new ObtainedPokemonRequirement('Rotom (Discord)'),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic Eterna Building')),
        ]) }),
], 54250, 205);
dungeonList['Wayward Cave'] = new Dungeon('Wayward Cave', [
    { pokemon: 'Zubat', options: { weight: 6.7 } },
    { pokemon: 'Geodude', options: { weight: 6.7 } },
    { pokemon: 'Onix', options: { weight: 6.7 } },
    { pokemon: 'Gible', options: { weight: 6.7, hide: true, requirement: new ObtainedPokemonRequirement('Gible') } },
    new DungeonTrainer('Mountain Men', [
        new GymPokemon('Geodude', 903000, 20),
        new GymPokemon('Geodude', 903000, 20),
        new GymPokemon('Onix', 903000, 22),
    ], { weight: 1 }, 'Reginald & Lorenzo'),
    new DungeonTrainer('Siblings', [
        new GymPokemon('Buneary', 903000, 22),
        new GymPokemon('Staravia', 903000, 17),
        new GymPokemon('Ponyta', 903000, 20),
        new GymPokemon('Shellos (West)', 903000, 20),
    ], { weight: 1 }, 'Cassidy & Wayne'),
    new DungeonTrainer('Nature Friends', [
        new GymPokemon('Psyduck', 903000, 22),
        new GymPokemon('Aipom', 903000, 22),
    ], { weight: 1 }, 'Tori & Diego'),
    new DungeonTrainer('Nature Friends', [
        new GymPokemon('Hoothoot', 903000, 22),
        new GymPokemon('Buizel', 903000, 20),
        new GymPokemon('Shinx', 903000, 20),
    ], { weight: 1 }, 'Ana & Parker'),
    new DungeonTrainer('Amateur Archaeologists', [
        new GymPokemon('Gible', 903000, 22),
        new GymPokemon('Geodude', 903000, 19),
        new GymPokemon('Bronzor', 903000, 21),
    ], { weight: 1 }, 'Terry & Gerald'),
], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Rawst', weight: 2 },
        { loot: 'Razz' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Grey Shard' },
    ],
    epic: [
        { loot: 'Earth Plate' },
        { loot: 'Draco Plate' },
    ],
    legendary: [
        { loot: 'Revive', weight: 2 },
        { loot: 'MediumRestore' },
    ],
}, 903000, [new DungeonBossPokemon('Bronzor', 4400000, 100)], 56500, 206);
dungeonList['Mt. Coronet South'] = new Dungeon('Mt. Coronet South', ['Clefairy', 'Zubat', 'Machop', 'Geodude', 'Magikarp', 'Cleffa', 'Barboach', 'Chingling'], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Stone Plate' }],
    legendary: [{ loot: 'Revive', weight: 2 }],
}, 951500, [
    new DungeonBossPokemon('Nosepass', 4000000, 35),
    new DungeonBossPokemon('Meditite', 4000000, 50),
    new DungeonBossPokemon('Bronzor', 4000000, 50),
], 60500, 207);
// All Unown except "FHP?!"
const SolaceonUnownList = 'ABCDEGIJKLMNOQRSTUVWXYZ'.split('');
dungeonList['Solaceon Ruins'] = new Dungeon('Solaceon Ruins', [
    { pokemon: 'Zubat', options: { weight: 0.8 } },
    { pokemon: 'Geodude', options: { weight: 0.8 } },
    { pokemon: 'Natu', options: { weight: 0.8 } },
    { pokemon: 'Bronzor', options: { weight: 0.8 } },
    { pokemon: 'Hippopotas', options: { weight: 0.8 } },
    new DungeonTrainer('Ruin Maniac', [
        new GymPokemon('Geodude', 960000, 19),
        new GymPokemon('Geodude', 960000, 21),
        new GymPokemon('Bronzor', 960000, 23),
    ], { weight: 1 }, 'Karl'),
], {
    common: [
        { loot: 'Lucky_incense', weight: 2 },
        { loot: 'Persim' },
    ],
    rare: [{ loot: 'Crimson Shard' }],
    epic: [
        { loot: 'Mind Plate' },
        { loot: 'Sky Plate' },
    ],
}, 960000, [
    ...SolaceonUnownList.map((char, index) => {
        const req = new OneFromManyRequirement([
            new SeededDateSelectNRequirement(index, SolaceonUnownList.length, 1),
            new MultiRequirement([new SeededDateSelectNRequirement(index, SolaceonUnownList.length, 2), new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Solaceon Ruins'))]),
            new MultiRequirement([new SeededDateSelectNRequirement(index, SolaceonUnownList.length, 3), new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Solaceon Ruins'))]),
        ]);
        return new DungeonBossPokemon(`Unown (${char})`, 4100000, 30, {
            hide: true,
            requirement: new CustomRequirement(ko.pureComputed(() => req.isCompleted()), true, UnownHint),
        });
    }),
], 62500, 209);
dungeonList['Iron Island'] = new Dungeon('Iron Island', [
    { pokemon: 'Zubat', options: { weight: 3.3 } },
    { pokemon: 'Golbat', options: { weight: 3.3 } },
    { pokemon: 'Tentacool', options: { weight: 3.3 } },
    { pokemon: 'Tentacruel', options: { weight: 3.3 } },
    { pokemon: 'Geodude', options: { weight: 3.3 } },
    { pokemon: 'Graveler', options: { weight: 3.3 } },
    { pokemon: 'Onix', options: { weight: 3.3 } },
    { pokemon: 'Steelix', options: { weight: 3.3 } },
    { pokemon: 'Wingull', options: { weight: 3.3 } },
    { pokemon: 'Pelipper', options: { weight: 3.3 } },
    { pokemon: 'Finneon', options: { weight: 3.3 } },
    new DungeonTrainer('Camper', [
        new GymPokemon('Aipom', 983000, 34),
        new GymPokemon('Floatzel', 983000, 36),
    ], { weight: 1 }, 'Lawrence'),
    new DungeonTrainer('Picnicker', [new GymPokemon('Raichu', 983000, 37)], { weight: 1 }, 'Summer'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Magnemite', 983000, 34),
        new GymPokemon('Magnemite', 983000, 36),
    ], { weight: 1 }, 'Noel', '(male)'),
    new DungeonTrainer('Worker', [new GymPokemon('Steelix', 983000, 37)], { weight: 1 }, 'Braden', '(male)'),
    new DungeonTrainer('Mountain Men', [
        new GymPokemon('Nosepass', 983000, 35),
        new GymPokemon('Onix', 983000, 33),
        new GymPokemon('Steelix', 983000, 34),
        new GymPokemon('Graveler', 983000, 35),
        new GymPokemon('Rhyhorn', 983000, 35),
    ], { weight: 1 }, 'Damon & Maurice'),
    new DungeonTrainer('Crush Kin', [
        new GymPokemon('Toxicroak', 983000, 38),
        new GymPokemon('Medicham', 983000, 38),
    ], { weight: 1 }, 'Kendal & Tyler'),
    new DungeonTrainer('Co-workers', [
        new GymPokemon('Geodude', 983000, 33),
        new GymPokemon('Geodude', 983000, 33),
        new GymPokemon('Machoke', 983000, 36),
        new GymPokemon('Magnemite', 983000, 34),
        new GymPokemon('Graveler', 983000, 34),
        new GymPokemon('Machop', 983000, 34),
    ], { weight: 1 }, 'Brendon & Quentin'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Quagsire', 983000, 35),
        new GymPokemon('Staraptor', 983000, 36),
        new GymPokemon('Hippopotas', 983000, 38),
        new GymPokemon('Lopunny', 983000, 38),
        new GymPokemon('Medicham', 983000, 35),
        new GymPokemon('Kirlia', 983000, 36),
    ], { weight: 1 }, 'Jonah & Brenda'),
], {
    common: [
        { loot: 'Dowsing_machine', weight: 2 },
        { loot: 'Ultraball' },
    ],
    rare: [{ loot: 'Grey Shard' }],
    epic: [
        { loot: 'Iron Plate', weight: 2 },
        { loot: 'Duskball' },
    ],
    legendary: [
        { loot: 'Star Piece' },
        { loot: 'Magnet' },
    ],
}, 983000, [
    new DungeonTrainer('Galactic Grunts', [
        new GymPokemon('Zubat', 701667, 34),
        new GymPokemon('Houndour', 701667, 34),
        new GymPokemon('Golbat', 701667, 34),
        new GymPokemon('Glameow', 701667, 34),
        new GymPokemon('Croagunk', 701667, 34),
        new GymPokemon('Stunky', 701667, 34),
    ], { weight: 1 }, undefined, '(male)'),
], 66500, 218, () => {
    BagHandler.gainItem({ type: ItemType.item, id: 'Fighting_egg' }, 1);
    Notifier.notify({
        message: 'You were awarded a Fighting Egg for defeating the Galactic Grunts.',
        type: NotificationConstants.NotificationOption.success,
        setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
    });
});
dungeonList['Lake Valor'] = new Dungeon('Lake Valor', [
    { pokemon: 'Psyduck', options: { weight: 2 } },
    { pokemon: 'Golduck', options: { weight: 2 } },
    { pokemon: 'Goldeen', options: { weight: 2 } },
    { pokemon: 'Magikarp', options: { weight: 2 } },
    { pokemon: 'Staravia', options: { weight: 2 } },
    { pokemon: 'Bibarel', options: { weight: 2 } },
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Glameow', 1015000, 35),
        new GymPokemon('Murkrow', 1015000, 35),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Golbat', 1015000, 37)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Croagunk', 1015000, 33),
        new GymPokemon('Houndour', 1015000, 33),
        new GymPokemon('Stunky', 1015000, 33),
        new GymPokemon('Glameow', 1015000, 33),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'Token_collector', weight: 2 },
        { loot: 'Sitrus' },
    ],
    rare: [{ loot: 'Blue Shard' }],
    epic: [
        { loot: 'Mind Plate' },
        { loot: 'Lureball' },
    ],
}, 1015000, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Golbat', 1533334, 38),
        new GymPokemon('Bronzor', 1533334, 38),
        new GymPokemon('Toxicroak', 1533334, 40),
    ], { weight: 2 }, 'Saturn', '(saturn)'),
    new DungeonBossPokemon('Azelf', 10060000, 50, { requirement: new QuestLineCompletedRequirement('A New World') }),
    new DungeonBossPokemon('Vivillon (Marine)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 0),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 1, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Marine)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 69500, 218);
dungeonList['Lake Verity'] = new Dungeon('Lake Verity', [
    { pokemon: 'Psyduck', options: { weight: 2.7 } },
    { pokemon: 'Golduck', options: { weight: 2.7 } },
    { pokemon: 'Goldeen', options: { weight: 2.7 } },
    { pokemon: 'Magikarp', options: { weight: 2.7 } },
    { pokemon: 'Starly', options: { weight: 2.7 } },
    { pokemon: 'Bidoof', options: { weight: 2.7 } },
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Glameow', 1068735, 33),
        new GymPokemon('Golbat', 1068735, 33),
        new GymPokemon('Murkrow', 1068735, 36),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Croagunk', 1068735, 37)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Stunky', 1068735, 35),
        new GymPokemon('Houndour', 1068735, 35),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Houndour', 1068735, 34),
        new GymPokemon('Glameow', 1068735, 36),
    ], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Sitrus' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Crimson Shard' },
    ],
    epic: [{ loot: 'Mind Plate' }],
}, 1068735, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Golbat', 1606667, 38),
        new GymPokemon('Bronzor', 1606667, 38),
        new GymPokemon('Purugly', 1606667, 40),
    ], { weight: 1 }, 'Mars', '(mars)'),
    new DungeonBossPokemon('Vivillon (Marine)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 0),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 1, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Marine)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 72500, 218);
dungeonList['Mt. Coronet North'] = new Dungeon('Mt. Coronet North', ['Clefairy', 'Zubat', 'Machop', 'Geodude', 'Magikarp', 'Noctowl', 'Meditite', 'Barboach', 'Chingling', 'Bronzor', 'Snover'], {
    common: [
        { loot: 'xClick', weight: 2 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Crimson Shard' },
    ],
    epic: [
        { loot: 'Stone Plate' },
        { loot: 'Draco Plate' },
    ],
    legendary: [
        { loot: 'LargeRestore', weight: 2 },
        { loot: 'Star Piece' },
        { loot: 'Soft_Sand' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Mt. Coronet North')) },
    ],
}, 1111500, [
    new DungeonBossPokemon('Graveler', 4960000, 35),
    new DungeonBossPokemon('Feebas', 4960000, 50),
    new DungeonBossPokemon('Medicham', 4960000, 50),
], 74500, 218);
dungeonList['Lake Acuity'] = new Dungeon('Lake Acuity', ['Psyduck', 'Golduck', 'Goldeen', 'Magikarp', 'Gyarados', 'Sneasel', 'Snorunt', 'Bibarel', 'Snover'], {
    common: [
        { loot: 'Lucky_egg', weight: 2 },
        { loot: 'Sitrus' },
    ],
    rare: [{ loot: 'Yellow Shard' }],
    epic: [
        { loot: 'Mind Plate' },
        { loot: 'Icicle Plate' },
    ],
}, 1261800, [
    new DungeonTrainer('Commander', [
        new GymPokemon('Golbat', 1690000, 38),
        new GymPokemon('Bronzor', 1690000, 38),
        new GymPokemon('Skuntank', 1690000, 40),
    ], { weight: 2 }, 'Jupiter', '(jupiter)'),
    new DungeonBossPokemon('Uxie', 10070000, 50, { requirement: new QuestLineCompletedRequirement('A New World') }),
    new DungeonBossPokemon('Vivillon (Marine)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 0),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 1, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Marine)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 78000, 217);
dungeonList['Team Galactic HQ'] = new Dungeon('Team Galactic HQ', [
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Glameow', 1295400, 41)], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Glameow', 1295400, 37),
        new GymPokemon('Murkrow', 1295400, 38),
        new GymPokemon('Croagunk', 1295400, 39),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Kirlia', 1295400, 40),
        new GymPokemon('Kadabra', 1295400, 40),
    ], { weight: 2 }, 'Frederick', '(male)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Stunky', 1295400, 41)], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Murkrow', 1295400, 41),
        new GymPokemon('Stunky', 1295400, 41),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Golbat', 1295400, 40),
        new GymPokemon('Golbat', 1295400, 38),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Golbat', 1295400, 39),
        new GymPokemon('Houndour', 1295400, 39),
    ], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Porygon2', 1295400, 42)], { weight: 2 }, 'Darrius', '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Stunky', 1295400, 38),
        new GymPokemon('Croagunk', 1295400, 40),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Croagunk', 1295400, 38),
        new GymPokemon('Stunky', 1295400, 38),
        new GymPokemon('Glameow', 1295400, 38),
    ], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Commander', [
        new GymPokemon('Golbat', 1295400, 42),
        new GymPokemon('Bronzor', 1295400, 42),
        new GymPokemon('Toxicroak', 1295400, 42),
    ], { weight: 1 }, 'Saturn', '(saturn)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
    ],
    epic: [{ loot: 'Sky Plate' }],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Poison_Barb' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Team Galactic HQ')) },
    ],
}, 1295400, [
    new DungeonTrainer('Galactic Boss', [
        new GymPokemon('Sneasel', 1725000, 44),
        new GymPokemon('Crobat', 1725000, 44),
        new GymPokemon('Honchkrow', 1725000, 46),
    ], { weight: 1 }, 'Cyrus', '(cyrus)'),
], 82500, 217);
dungeonList['Spear Pillar'] = new Dungeon('Spear Pillar', [
    { pokemon: 'Clefairy', options: { weight: 3 } },
    { pokemon: 'Golbat', options: { weight: 3 } },
    { pokemon: 'Machoke', options: { weight: 3 } },
    { pokemon: 'Graveler', options: { weight: 3 } },
    { pokemon: 'Nosepass', options: { weight: 3 } },
    { pokemon: 'Noctowl', options: { weight: 3 } },
    { pokemon: 'Medicham', options: { weight: 3 } },
    { pokemon: 'Chimecho', options: { weight: 3 } },
    { pokemon: 'Absol', options: { weight: 3 } },
    { pokemon: 'Chingling', options: { weight: 3 } },
    { pokemon: 'Bronzong', options: { weight: 3 } },
    { pokemon: 'Snover', options: { weight: 3 } },
    { pokemon: 'Abomasnow', options: { weight: 3 } },
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Stunky', 1322100, 43)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Murkrow', 1322100, 43)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Houndour', 1322100, 40),
        new GymPokemon('Golbat', 1322100, 40),
        new GymPokemon('Houndour', 1322100, 40),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Stunky', 1322100, 42),
        new GymPokemon('Golbat', 1322100, 40),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [new GymPokemon('Golbat', 1322100, 43)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Murkrow', 1322100, 39),
        new GymPokemon('Glameow', 1322100, 42),
        new GymPokemon('Murkrow', 1322100, 39),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Croagunk', 1322100, 38),
        new GymPokemon('Croagunk', 1322100, 42),
        new GymPokemon('Stunky', 1322100, 40),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Houndour', 1322100, 40),
        new GymPokemon('Glameow', 1322100, 42),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Glameow', 1322100, 41),
        new GymPokemon('Golbat', 1322100, 41),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Galactic Grunt', [
        new GymPokemon('Golbat', 1322100, 39),
        new GymPokemon('Croagunk', 1322100, 40),
        new GymPokemon('Murkrow', 1322100, 41),
    ], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Crimson Shard' },
    ],
    epic: [
        { loot: 'Iron Plate' },
        { loot: 'Draco Plate' },
        { loot: 'Splash Plate' },
    ],
}, 1322100, [
    new DungeonTrainer('Commanders', [
        new GymPokemon('Bronzor', 880000, 44),
        new GymPokemon('Golbat', 880000, 44),
        new GymPokemon('Purugly', 880000, 46),
        new GymPokemon('Bronzor', 880000, 44),
        new GymPokemon('Golbat', 880000, 44),
        new GymPokemon('Skuntank', 880000, 46),
    ], { weight: 1 }, 'Mars & Jupiter', '(marsjupiter)'),
    new DungeonBossPokemon('Palkia', 11880000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion) }),
    new DungeonBossPokemon('Dialga', 11880000, 100, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion) }),
], 84500, 217);
dungeonList['Distortion World'] = new Dungeon('Distortion World', ['Golbat', 'Gastly', 'Duskull', 'Dusclops', 'Chimecho', 'Chingling', 'Bronzor', 'Bronzong'], {
    common: [
        { loot: 'xClick', weight: 4 },
        { loot: 'Lucky_incense', weight: 2 },
        { loot: 'Banette' },
    ],
    rare: [
        { loot: 'Purple Shard' },
        { loot: 'Crimson Shard' },
    ],
    legendary: [
        { loot: 'Rare Bone' },
        { loot: 'Odd Keystone' },
    ],
}, 1350400, [
    new DungeonTrainer('Galactic Boss', [
        new GymPokemon('Houndoom', 1128000, 45),
        new GymPokemon('Honchkrow', 1128000, 47),
        new GymPokemon('Crobat', 1128000, 46),
        new GymPokemon('Gyarados', 1128000, 46),
        new GymPokemon('Weavile', 1128000, 47),
    ], { weight: 2 }, 'Cyrus', '(cyrus)'),
    new DungeonBossPokemon('Giratina (Altered)', 11880000, 45, { requirement: new QuestLineStepCompletedRequirement('Zero\'s Ambition', 13) }),
], 86500, 217);
dungeonList['Victory Road Sinnoh'] = new Dungeon('Victory Road Sinnoh', [
    { pokemon: 'Golbat', options: { weight: 9.3 } },
    { pokemon: 'Graveler', options: { weight: 9.3 } },
    { pokemon: 'Onix', options: { weight: 9.3 } },
    { pokemon: 'Rhyhorn', options: { weight: 9.3 } },
    { pokemon: 'Magneton', options: { weight: 9.3 } },
    { pokemon: 'Floatzel', options: { weight: 9.3 } },
    { pokemon: 'Gabite', options: { weight: 9.3, hide: true, requirement: new ObtainedPokemonRequirement('Gabite') } },
    new DungeonTrainer('Psychic', [
        new GymPokemon('Haunter', 1503000, 43),
        new GymPokemon('Gengar', 1503000, 46),
        new GymPokemon('Gardevoir', 1503000, 46),
    ], { weight: 1 }, 'Bryce', '(male)'),
    new DungeonTrainer('Bird Keeper', [
        new GymPokemon('Noctowl', 1503000, 45),
        new GymPokemon('Togetic', 1503000, 47),
    ], { weight: 1 }, 'Hana'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Blissey', 1503000, 45),
        new GymPokemon('Glalie', 1503000, 46),
        new GymPokemon('Magnezone', 1503000, 48),
    ], { weight: 1 }, 'Mariah', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Mamoswine', 1503000, 45),
        new GymPokemon('Mothim', 1503000, 46),
        new GymPokemon('Rampardos', 1503000, 48),
    ], { weight: 1 }, 'Omar', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Clefable', 1503000, 47),
        new GymPokemon('Torterra', 1503000, 48),
    ], { weight: 1 }, 'Sydney', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Staraptor', 1503000, 47),
        new GymPokemon('Lickilicky', 1503000, 47),
    ], { weight: 1 }, 'Clayton', '(male)'),
    new DungeonTrainer('Double Team', [
        new GymPokemon('Staraptor', 1503000, 50),
        new GymPokemon('Ambipom', 1503000, 50),
    ], { weight: 1 }, 'Al & Kay'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Machamp', 1503000, 48)], { weight: 1 }, 'Miles'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Chimecho', 1503000, 44),
        new GymPokemon('Absol', 1503000, 45),
        new GymPokemon('Dusknoir', 1503000, 46),
    ], { weight: 1 }, 'Valencia', '(female)'),
    new DungeonTrainer('Double Team', [
        new GymPokemon('Lumineon', 1503000, 50),
        new GymPokemon('Rapidash', 1503000, 50),
    ], { weight: 1 }, 'Pat & Jo'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Rhydon', 1503000, 47),
        new GymPokemon('Carnivine', 1503000, 48),
    ], { weight: 1 }, 'Henry', '(male)'),
    new DungeonTrainer('Dragon Tamer', [
        new GymPokemon('Altaria', 1503000, 45),
        new GymPokemon('Gabite', 1503000, 47),
    ], { weight: 1 }, 'Ondrej'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Porygon-Z', 1503000, 46),
        new GymPokemon('Tangrowth', 1503000, 46),
        new GymPokemon('Empoleon', 1503000, 46),
    ], { weight: 1 }, 'Edgar', '(male)'),
    new DungeonTrainer('Dragon Tamer', [
        new GymPokemon('Gible', 1503000, 43),
        new GymPokemon('Swablu', 1503000, 45),
        new GymPokemon('Gabite', 1503000, 47),
    ], { weight: 1 }, 'Clinton'),
], {
    common: [
        { loot: 'Lucky_incense', weight: 3 },
        { loot: 'Oran', weight: 3 },
        { loot: 'Graveler' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
        { loot: 'Black Shard' },
        { loot: 'White Shard' },
    ],
    legendary: [{ loot: 'Repeatball' }],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Heart Scale' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Victory Road Sinnoh')) },
    ],
}, 1503000, [
    new DungeonBossPokemon('Rhydon', 7000000, 100),
    new DungeonBossPokemon('Steelix', 7000000, 100),
], 89500, 223);
dungeonList['Sendoff Spring'] = new Dungeon('Sendoff Spring', ['Golbat', 'Golduck', 'Graveler', 'Goldeen', 'Magikarp', 'Staravia', 'Bibarel', 'Chingling'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'White Shard' },
        { loot: 'Black Shard' },
    ],
    epic: [
        { loot: 'Spooky Plate' },
        { loot: 'Draco Plate' },
    ],
}, 2603000, [
    new DungeonBossPokemon('Seaking', 10000000, 100),
    new DungeonBossPokemon('Gyarados', 10000000, 100),
    new DungeonBossPokemon('Dusclops', 10000000, 100),
], 96500, 230);
dungeonList['Hall of Origin'] = new Dungeon('Hall of Origin', ['Slowpoke', 'Spearow', 'Garchomp', 'Slakoth', 'Eevee', 'Breloom', 'Absol'], {
    common: [
        { loot: 'Dowsing_machine', weight: 4 },
        { loot: 'Cheri', weight: 2 },
        { loot: 'Ditto' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
        { loot: 'White Shard' },
        { loot: 'Black Shard' },
    ],
    epic: [
        { loot: 'Blank Plate' },
        { loot: 'Draco Plate' },
        { loot: 'Dread Plate' },
        { loot: 'Earth Plate' },
        { loot: 'Fist Plate' },
        { loot: 'Flame Plate' },
        { loot: 'Icicle Plate' },
        { loot: 'Insect Plate' },
        { loot: 'Iron Plate' },
        { loot: 'Meadow Plate' },
        { loot: 'Mind Plate' },
        { loot: 'Pixie Plate' },
        { loot: 'Sky Plate' },
        { loot: 'Splash Plate' },
        { loot: 'Spooky Plate' },
        { loot: 'Stone Plate' },
        { loot: 'Toxic Plate' },
        { loot: 'Zap Plate' },
    ],
}, 2653000, [
    new DungeonBossPokemon('Slaking', 10000000, 100),
    new DungeonBossPokemon('Snorlax', 10000000, 100),
    new DungeonBossPokemon('Blissey', 10000000, 100),
    new DungeonBossPokemon('Staraptor', 10000000, 100),
    new DungeonBossPokemon('Arceus (Normal)', 13000000, 100),
], 106500, 230);
const cresseliaDungeonMoonReq = new MoonCyclePhaseRequirement([MoonCyclePhase.NewMoon, MoonCyclePhase.WaxingCrescent, MoonCyclePhase.WaningCrescent]);
const darkraiDungeonMoonReq = new MoonCyclePhaseRequirement([MoonCyclePhase.FullMoon, MoonCyclePhase.WaxingGibbous, MoonCyclePhase.WaningGibbous, MoonCyclePhase.FirstQuarter, MoonCyclePhase.ThirdQuarter]);
dungeonList['Fullmoon Island'] = new Dungeon('Fullmoon Island', ['Illumise', 'Minun', 'Hypno', 'Luvdisc'], {
    common: [
        { loot: 'xClick', weight: 2 },
        { loot: 'Nanab' },
    ],
    rare: [{ loot: 'White Shard' }],
    epic: [
        { loot: 'Mind Plate' },
        { loot: 'Moonball' },
    ],
}, 2603000, [
    new DungeonBossPokemon('Lunatone', 11000000, 100),
    new DungeonBossPokemon('Clefable', 11000000, 100),
    new DungeonBossPokemon('Cresselia', 11000000, 100, { requirement: new MultiRequirement([
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Fullmoon Island')),
            new CustomRequirement(ko.pureComputed(() => cresseliaDungeonMoonReq.isCompleted()), true, 'Cresselia lives on the island around New Moon, and roams Sinnoh during other moon phases.'),
        ]) }),
], 96500, 230);
dungeonList['Newmoon Island'] = new Dungeon('Newmoon Island', ['Volbeat', 'Plusle', 'Sneasel', 'Luvdisc'], {
    common: [
        { loot: 'Lucky_egg', weight: 2 },
        { loot: 'Nanab' },
    ],
    rare: [{ loot: 'Black Shard' }],
    epic: [
        { loot: 'Dread Plate' },
        { loot: 'Moonball' },
    ],
    legendary: [{ loot: 'Black_Glasses' }],
}, 2603000, [
    new DungeonBossPokemon('Lunatone', 9900000, 100),
    new DungeonBossPokemon('Absol', 9900000, 100),
    new DungeonBossPokemon('Darkrai', 11000000, 100, { requirement: new MultiRequirement([
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Newmoon Island')),
            new CustomRequirement(ko.pureComputed(() => darkraiDungeonMoonReq.isCompleted()), true, 'Darkrai roams Sinnoh around New Moon, and lives on the island during other moon phases.'),
        ]) }),
], 96500, 230);
dungeonList['Flower Paradise'] = new Dungeon('Flower Paradise', ['Gloom', 'Bellsprout', 'Tangela', 'Skiploom', 'Jumpluff', 'Lombre', 'Seedot', 'Roselia'], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Mago' },
        { loot: 'Aguav' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [
        { loot: 'Meadow Plate' },
        { loot: 'Sky Plate' },
    ],
}, 2603000, [
    new DungeonBossPokemon('Parasect', 9900000, 50),
    new DungeonBossPokemon('Breloom', 9900000, 50),
    new DungeonBossPokemon('Shaymin (Land)', 11000000, 50),
    new DungeonBossPokemon('Shaymin (Sky)', 11000000, 50, { hide: true, requirement: new ObtainedPokemonRequirement('Shaymin (Sky)') }),
    new DungeonBossPokemon('Bulbasaur (Rose)', 16000000, 100, {
        hide: true,
        requirement: new MultiRequirement([
            new ClearDungeonRequirement(10, GameConstants.getDungeonIndex('Flower Paradise')),
            new SpecialEventRequirement('Golden Week'),
        ])
    }),
    new DungeonBossPokemon('Vivillon (Garden)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 26),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 27, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Garden)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 96500, 230);
dungeonList['Snowpoint Temple'] = new Dungeon('Snowpoint Temple', ['Golbat', 'Sneasel', 'Smoochum'], {
    common: [
        { loot: 'Token_collector', weight: 2 },
        { loot: 'Aspear' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'White Shard' },
    ],
    epic: [{ loot: 'Blank Plate' }],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Never_Melt_Ice' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(350, GameConstants.getDungeonIndex('Snowpoint Temple')) }],
}, 2603000, [
    new DungeonBossPokemon('Steelix', 10000000, 100),
    new DungeonBossPokemon('Jynx', 10000000, 100),
    new DungeonBossPokemon('Regigigas', 11000000, 100),
], 96500, 230);
dungeonList['Stark Mountain'] = new Dungeon('Stark Mountain', [
    { pokemon: 'Fearow', options: { weight: 4.4 } },
    { pokemon: 'Golbat', options: { weight: 4.4 } },
    { pokemon: 'Graveler', options: { weight: 4.4 } },
    { pokemon: 'Weezing', options: { weight: 4.4 } },
    { pokemon: 'Rhyhorn', options: { weight: 4.4 } },
    { pokemon: 'Rhydon', options: { weight: 4.4 } },
    { pokemon: 'Slugma', options: { weight: 4.4 } },
    { pokemon: 'Magcargo', options: { weight: 4.4 } },
    { pokemon: 'Numel', options: { weight: 4.4 } },
    { pokemon: 'Machoke', options: { weight: 4.4 } },
    new DungeonTrainer('Dragon Tamer', [new GymPokemon('Dragonite', 2603000, 60)], { weight: 1 }, 'Darien'),
    new DungeonTrainer('Commander', [
        new GymPokemon('Bronzong', 2603000, 58),
        new GymPokemon('Golbat', 2603000, 58),
        new GymPokemon('Purugly', 2603000, 60),
    ], { weight: 1 }, 'Mars', '(mars)'),
    new DungeonTrainer('Commander', [
        new GymPokemon('Bronzong', 2603000, 58),
        new GymPokemon('Golbat', 2603000, 58),
        new GymPokemon('Skuntank', 2603000, 60),
    ], { weight: 1 }, 'Jupiter', '(jupiter)'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Primeape', 2603000, 58),
        new GymPokemon('Banette', 2603000, 59),
        new GymPokemon('Electabuzz', 2603000, 58),
        new GymPokemon('Jumpluff', 2603000, 58),
        new GymPokemon('Ampharos', 2603000, 59),
        new GymPokemon('Onix', 2603000, 58),
    ], { weight: 1 }, 'Keenan & Kassandra'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Pupitar', 2603000, 58),
        new GymPokemon('Torterra', 2603000, 61),
        new GymPokemon('Drapion', 2603000, 61),
    ], { weight: 1 }, 'Stefan & Jasmin'),
    new DungeonTrainer('Fight & Flight', [
        new GymPokemon('Staravia', 2603000, 55),
        new GymPokemon('Fearow', 2603000, 57),
        new GymPokemon('Noctowl', 2603000, 59),
        new GymPokemon('Breloom', 2603000, 58),
        new GymPokemon('Toxicroak', 2603000, 58),
    ], { weight: 1 }, 'Krystal & Ray'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Glalie', 2603000, 59),
        new GymPokemon('Crobat', 2603000, 60),
        new GymPokemon('Luxray', 2603000, 58),
        new GymPokemon('Ursaring', 2603000, 59),
        new GymPokemon('Gliscor', 2603000, 58),
    ], { weight: 1 }, 'Abel & Monique'),
    new DungeonTrainer('Melded Minds', [
        new GymPokemon('Lunatone', 2603000, 57),
        new GymPokemon('Gardevoir', 2603000, 59),
        new GymPokemon('Solrock', 2603000, 57),
        new GymPokemon('Gallade', 2603000, 59),
    ], { weight: 1 }, 'Chelsey & Sterling', '(both)'),
    new DungeonTrainer('Dragon Warriors', [
        new GymPokemon('Raticate', 2603000, 57),
        new GymPokemon('Drifblim', 2603000, 58),
        new GymPokemon('Shiftry', 2603000, 59),
        new GymPokemon('Bagon', 2603000, 57),
        new GymPokemon('Shelgon', 2603000, 57),
        new GymPokemon('Vibrava', 2603000, 57),
    ], { weight: 1 }, 'Harlan & Kenny'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Loudred', 2603000, 58),
        new GymPokemon('Rampardos', 2603000, 59),
        new GymPokemon('Pelipper', 2603000, 58),
        new GymPokemon('Wigglytuff', 2603000, 58),
        new GymPokemon('Gardevoir', 2603000, 59),
        new GymPokemon('Medicham', 2603000, 58),
    ], { weight: 1 }, 'Skylar & Narasha'),
    new DungeonTrainer('Hidden Dragons', [
        new GymPokemon('Gible', 2603000, 57),
        new GymPokemon('Gabite', 2603000, 57),
        new GymPokemon('Dragonair', 2603000, 57),
        new GymPokemon('Machamp', 2603000, 60),
    ], { weight: 1 }, 'Drake & Jarrett'),
], {
    common: [
        { loot: 'Token_collector', weight: 2 },
        { loot: 'Rawst' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Grey Shard' },
    ],
    epic: [
        { loot: 'Flame Plate' },
        { loot: 'Iron Plate' },
    ],
    legendary: [
        { loot: 'Metal_Powder' },
        { loot: 'Star Piece', weight: 2 },
        { loot: 'Charcoal' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 2603000, [
    new DungeonBossPokemon('Skarmory', 10000000, 100),
    new DungeonBossPokemon('Camerupt', 10000000, 100),
    new DungeonBossPokemon('Heatran', 11000000, 100),
], 96500, 230);
// Unova Dungeons
dungeonList['Floccesy Ranch'] = new Dungeon('Floccesy Ranch', [
    { pokemon: 'Psyduck', options: { weight: 2 } },
    { pokemon: 'Mareep', options: { weight: 2 } },
    { pokemon: 'Azurill', options: { weight: 2 } },
    { pokemon: 'Patrat', options: { weight: 2 } },
    { pokemon: 'Lillipup', options: { weight: 2 } },
    { pokemon: 'Pidove', options: { weight: 2 } },
    new DungeonTrainer('Lass', [
        new GymPokemon('Purrloin', 126500, 6),
        new GymPokemon('Sewaddle', 126500, 6),
    ], { weight: 1 }, 'Molly'),
    new DungeonTrainer('Janitor', [
        new GymPokemon('Lillipup', 126500, 6),
        new GymPokemon('Mareep', 126500, 6),
    ], { weight: 1 }, 'Orville'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Patrat', 126500, 6),
        new GymPokemon('Psyduck', 126500, 6),
    ], { weight: 1 }, 'Kenny'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Ultraball' },
        { loot: 'Cheri' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Nanab' },
        { loot: 'Wepear' },
    ],
}, 2503000, [new DungeonBossPokemon('Riolu', 13000000, 100)], 126500, 20);
dungeonList['Liberty Garden'] = new Dungeon('Liberty Garden', ['Vulpix', 'Sunkern', 'Abra', 'Wingull', 'Pidove', 'Sentret'], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Figy', weight: 2 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Green Shard' },
    ],
    epic: [
        { loot: 'Flame Plate' },
        { loot: 'Mind Plate' },
    ],
}, 2703000, [
    new DungeonBossPokemon('Chimecho', 14000000, 100),
    new DungeonBossPokemon('Kadabra', 14000000, 100),
    new DungeonBossPokemon('Victini', 14000000, 100),
], 136500, 20);
dungeonList['Castelia Sewers'] = new Dungeon('Castelia Sewers', [
    { pokemon: 'Rattata', options: { weight: 5.6 } },
    { pokemon: 'Zubat', options: { weight: 5.6 } },
    { pokemon: 'Grimer', options: { weight: 5.6 } },
    { pokemon: 'Muk', options: { weight: 5.6 } },
    { pokemon: 'Trubbish', options: { weight: 5.6 } },
    new DungeonTrainer('Janitor', [
        new GymPokemon('Lillipup', 146500, 16),
        new GymPokemon('Trubbish', 146500, 16),
    ], { weight: 1 }, 'Felix'),
    new DungeonTrainer('Doctor', [new GymPokemon('Sewaddle', 146500, 17)], { weight: 1 }, 'Heath'),
    new DungeonTrainer('Worker', [new GymPokemon('Drilbur', 146500, 17)], { weight: 1 }, 'Zack', '(male)'),
    new DungeonTrainer('Worker', [new GymPokemon('Timburr', 146500, 17)], { weight: 1 }, 'Scott', '(male)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Grimer', 146500, 17)], { weight: 1 }, 'Caroline', '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Magnemite', 146500, 17)], { weight: 1 }, 'Clarke', '(male)'),
    new DungeonTrainer('Janitor', [
        new GymPokemon('Marill', 146500, 31),
        new GymPokemon('Cinccino', 146500, 31),
    ], { weight: 1 }, 'Brady'),
], {
    common: [
        { loot: 'xClick', weight: 2 },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Purple Shard' },
    ],
    epic: [
        { loot: 'Toxic Plate' },
        { loot: 'Mind Plate' },
    ],
    legendary: [
        { loot: 'Revive' },
        { loot: 'Rare Bone' },
        { loot: 'LargeRestore' },
    ],
    mythic: [{ loot: 'Heart Scale' }],
}, 2603000, [
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Sandile', 15000000, 16)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scraggy', 15000000, 16)], { weight: 1 }, undefined, '(female)'),
], 146500, 4);
dungeonList['Relic Passage'] = new Dungeon('Relic Passage', [
    { pokemon: 'Rattata', options: { weight: 8 } },
    { pokemon: 'Raticate', options: { weight: 8 } },
    { pokemon: 'Roggenrola', options: { weight: 8 } },
    { pokemon: 'Woobat', options: { weight: 8 } },
    { pokemon: 'Timburr', options: { weight: 8 } },
    new DungeonTrainer('Scientist', [new GymPokemon('Grimer', 176500, 18)], { weight: 1 }, 'Terrance', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Venipede', 176500, 17),
        new GymPokemon('Koffing', 176500, 17),
    ], { weight: 1 }, 'Lumina', '(female)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Herdier', 176500, 18)], { weight: 1 }, 'Kendall', '(male)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Sandslash', 176500, 32)], { weight: 1 }, 'Eileen', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Drilbur', 176500, 31),
        new GymPokemon('Roggenrola', 176500, 31),
    ], { weight: 1 }, 'Keith'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Raticate', 176500, 32)], { weight: 1 }, 'Randall', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Roggenrola', 176500, 31),
        new GymPokemon('Timburr', 176500, 31),
    ], { weight: 1 }, 'Tobias'),
    new DungeonTrainer('Psychic', [new GymPokemon('Swoobat', 176500, 33)], { weight: 1 }, 'Tully', '(male)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Watchog', 176500, 32)], { weight: 1 }, 'Annie', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Baltoy', 176500, 32),
        new GymPokemon('Yamask', 176500, 32),
    ], { weight: 1 }, 'Ena', '(female)'),
], {
    common: [
        { loot: 'Lucky_egg', weight: 2 },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Stone Plate' }],
    legendary: [{ loot: 'Rock_Incense' }],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Relic Passage')) }],
}, 3203000, [
    new DungeonBossPokemon('Onix', 21000000, 100),
    new DungeonBossPokemon('Drilbur', 21000000, 100),
], 156500, 5);
dungeonList['Relic Castle'] = new Dungeon('Relic Castle', [
    { pokemon: 'Sandshrew', options: { weight: 1.33 } },
    { pokemon: 'Sandslash', options: { weight: 1.33 } },
    { pokemon: 'Sandile', options: { weight: 1.33 } },
    { pokemon: 'Baltoy', options: { weight: 1.33 } },
    { pokemon: 'Krokorok', options: { weight: 1.33 } },
    { pokemon: 'Yamask', options: { weight: 1.33 } },
    new DungeonTrainer('Psychic', [new GymPokemon('Gothita', 156500, 23)], { weight: 1 }, 'Dua', '(female)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Solosis', 156500, 23)], { weight: 1 }, 'Low', '(male)'),
], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Mago', weight: 2 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Lime Shard' },
    ],
    epic: [
        { loot: 'Earth Plate' },
        { loot: 'Insect Plate' },
        { loot: 'Flame Plate' },
    ],
    legendary: [
        { loot: 'Revive' },
        { loot: 'Smooth Rock' },
        { loot: 'LargeRestore', weight: 2 },
    ],
    mythic: [
        { loot: 'Heart Scale' },
        { loot: 'Darmanitan (Zen)', ignoreDebuff: true },
    ],
}, 2803000, [
    new DungeonTrainer('Psychic', [new GymPokemon('Sigilyph', 16000000, 23)], { weight: 1 }, 'Perry', '(male)'),
    new DungeonBossPokemon('Darmanitan', 21000000, 100),
    new DungeonBossPokemon('Volcarona', 21000000, 100, { requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Relic Passage')) }),
    new DungeonBossPokemon('Vivillon (Sandstorm)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 24),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 25, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Sandstorm)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 166500, 25);
dungeonList['Lostlorn Forest'] = new Dungeon('Lostlorn Forest', [
    { pokemon: 'Roselia', options: { weight: 2.29 } },
    { pokemon: 'Combee', options: { weight: 2.29 } },
    { pokemon: 'Sewaddle', options: { weight: 2.29 } },
    { pokemon: 'Venipede', options: { weight: 2.29 } },
    { pokemon: 'Cottonee', options: { weight: 2.29 } },
    { pokemon: 'Petilil', options: { weight: 2.29 } },
    { pokemon: 'Vespiquen', options: { weight: 2.29, hide: true, requirement: new ObtainedPokemonRequirement('Vespiquen') } },
    new DungeonTrainer('Pokémon Breeder', [
        new GymPokemon('Tranquill', 166500, 24),
        new GymPokemon('Liepard', 166500, 24),
    ], { weight: 1 }, 'Galen', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Trubbish', 166500, 26)], { weight: 1 }, 'Serenity', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Emolga', 166500, 26)], { weight: 1 }, 'Forrest', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Larvesta', 166500, 51),
        new GymPokemon('Pinsir', 166500, 51),
        new GymPokemon('Heracross', 166500, 51),
        new GymPokemon('Leavanny', 166500, 51),
        new GymPokemon('Scolipede', 166500, 51),
    ], { weight: 1 }, 'Murphy', '(male)'),
], {
    common: [
        { loot: 'Iapapa' },
        { loot: 'xClick', weight: 2 },
        { loot: 'Greatball', weight: 2 },
        { loot: 'Foongus' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Lime Shard' },
    ],
    legendary: [{ loot: 'Zoroark', requirement: new ClearDungeonRequirement(50, GameConstants.getDungeonIndex('Lostlorn Forest')) }],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Lostlorn Forest')) }],
}, 3003000, [
    new DungeonBossPokemon('Heracross', 18000000, 100),
    new DungeonBossPokemon('Pinsir', 18000000, 100),
    new DungeonBossPokemon('Emolga', 19000000, 100),
], 176500, 16);
dungeonList['Chargestone Cave'] = new Dungeon('Chargestone Cave', [
    { pokemon: 'Nosepass', options: { weight: 8.8 } },
    { pokemon: 'Boldore', options: { weight: 8.8 } },
    { pokemon: 'Joltik', options: { weight: 8.8 } },
    { pokemon: 'Ferroseed', options: { weight: 8.8 } },
    { pokemon: 'Klink', options: { weight: 8.8 } },
    new DungeonTrainer('Guitarist', [new GymPokemon('Emolga', 186500, 30)], { weight: 1 }, 'Anna', '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Magneton', 186500, 30)], { weight: 1 }, 'Ronald', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Klink', 186500, 33),
        new GymPokemon('Unfezant', 186500, 33),
        new GymPokemon('Sandslash', 186500, 33),
    ], { weight: 1 }, 'Corky', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Ampharos', 186500, 34)], { weight: 1 }, 'Louis', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Aron', 186500, 32),
        new GymPokemon('Nosepass', 186500, 32),
    ], { weight: 1 }, 'Otto'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Minccino', 186500, 33),
        new GymPokemon('Excadrill', 186500, 33),
    ], { weight: 1 }, 'Briana', '(female)'),
    new DungeonTrainer('Doctor', [
        new GymPokemon('Solosis', 186500, 32),
        new GymPokemon('Gothita', 186500, 32),
    ], { weight: 1 }, 'Kit'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Joltik', 186500, 32),
        new GymPokemon('Golbat', 186500, 32),
    ], { weight: 1 }, 'Lumi', '(female)'),
    new DungeonTrainer('Guitarist', [new GymPokemon('Zebstrika', 186500, 33)], { weight: 1 }, 'Beverly', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Onix', 186500, 32),
        new GymPokemon('Boldore', 186500, 32),
    ], { weight: 1 }, 'Jeremy'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Stoutland', 186500, 33),
        new GymPokemon('Krokorok', 186500, 33),
        new GymPokemon('Ferroseed', 186500, 33),
    ], { weight: 1 }, 'Vicki', '(female)'),
], {
    common: [
        { loot: 'Lucky_egg', weight: 2 },
        { loot: 'Dowsing_machine', weight: 2 },
        { loot: 'Aguav' },
    ],
    rare: [{ loot: 'Yellow Shard' }],
    epic: [
        { loot: 'Zap Plate' },
        { loot: 'Timerball' },
    ],
    legendary: [
        { loot: 'Star Piece', weight: 2 },
        { loot: 'Magnet' },
        { loot: 'Revive' },
        { loot: 'LargeRestore' },
    ],
}, 3403000, [
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Tirtouga', 12000000, 34),
        new GymPokemon('Magmar', 12000000, 34),
    ], { weight: 1 }, 'Mary', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Archen', 12000000, 34),
        new GymPokemon('Electabuzz', 12000000, 34),
    ], { weight: 1 }, 'Shaye', '(male)'),
    new DungeonBossPokemon('Drilbur', 22000000, 100),
    new DungeonBossPokemon('Tynamo', 22000000, 100),
], 186500, 6);
dungeonList['Mistralton Cave'] = new Dungeon('Mistralton Cave', [
    { pokemon: 'Boldore', options: { weight: 4 } },
    { pokemon: 'Woobat', options: { weight: 4 } },
    { pokemon: 'Aron', options: { weight: 4 } },
    { pokemon: 'Lairon', options: { weight: 4 } },
    new DungeonTrainer('Hiker', [new GymPokemon('Boldore', 196500, 32)], { weight: 1 }, 'Shelby'),
    new DungeonTrainer('Hiker', [new GymPokemon('Onix', 196500, 32)], { weight: 1 }, 'Jebediah'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Tirtouga', 196500, 33),
        new GymPokemon('Axew', 196500, 33),
    ], { weight: 1 }, 'Geoff', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Archen', 196500, 33),
        new GymPokemon('Axew', 196500, 33),
    ], { weight: 1 }, 'Belle', '(female)'),
], {
    common: [
        { loot: 'xClick', weight: 2 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Grey Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Draco Plate' },
        { loot: 'Fist Plate' },
        { loot: 'Iron Plate' },
    ],
    legendary: [
        { loot: 'Duskball' },
        { loot: 'LargeRestore' },
    ],
}, 3603000, [
    new DungeonBossPokemon('Drilbur', 23000000, 100),
    new DungeonBossPokemon('Axew', 24000000, 100),
    new DungeonBossPokemon('Cobalion', 25000000, 100, {
        requirement: new QuestLineStepCompletedRequirement('Swords of Justice', 21),
    }),
], 196500, 6);
dungeonList['Celestial Tower'] = new Dungeon('Celestial Tower', [
    { pokemon: 'Golbat', options: { weight: 8 } },
    { pokemon: 'Haunter', options: { weight: 8 } },
    { pokemon: 'Elgyem', options: { weight: 8 } },
    { pokemon: 'Misdreavus', options: { weight: 8 } },
    new DungeonTrainer('Psychic', [new GymPokemon('Musharna', 206500, 36)], { weight: 1 }, 'Joyce', '(female)'),
    new DungeonTrainer('School Kid', [new GymPokemon('Litwick', 206500, 35)], { weight: 1 }, 'Alberta', '(female)'),
    new DungeonTrainer('Pokéfan', [new GymPokemon('Clefairy', 206500, 35)], { weight: 1 }, 'Jude', '(male)'),
    new DungeonTrainer('Pokéfan', [new GymPokemon('Cubchoo', 206500, 35)], { weight: 1 }, 'Georgia', '(female)'),
    new DungeonTrainer('Psychic', [new GymPokemon('Espeon', 206500, 36)], { weight: 1 }, 'Micki', '(male)'),
    new DungeonTrainer('Nurse', [new GymPokemon('Leavanny', 206500, 35)], { weight: 1 }, 'Dixie'),
    new DungeonTrainer('Socialite', [new GymPokemon('Roselia', 206500, 35)], { weight: 1 }, 'Grace'),
    new DungeonTrainer('Gentleman', [new GymPokemon('Umbreon', 206500, 35)], { weight: 1 }, 'Daniel'),
], {
    common: [
        { loot: 'Lucky_egg', weight: 2 },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Spooky Plate' },
        { loot: 'Mind Plate' },
    ],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Twisted_Spoon' },
    ],
}, 3803000, [
    new DungeonBossPokemon('Litwick', 25000000, 100),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Elgyem', 14000000, 35),
        new GymPokemon('Duosion', 14000000, 35),
    ], { weight: 1 }, 'Bryce', '(male)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Yamask', 14000000, 35),
        new GymPokemon('Gothorita', 14000000, 35),
    ], { weight: 1 }, 'Sarah', '(female)'),
], 206500, 7);
dungeonList['Reversal Mountain'] = new Dungeon('Reversal Mountain', [
    { pokemon: 'Skarmory', options: { weight: 5.2 } },
    { pokemon: 'Numel', options: { weight: 5.2 } },
    { pokemon: 'Camerupt', options: { weight: 5.2 } },
    { pokemon: 'Spoink', options: { weight: 5.2 } },
    { pokemon: 'Grumpig', options: { weight: 5.2 } },
    { pokemon: 'Trapinch', options: { weight: 5.2 } },
    { pokemon: 'Drifblim', options: { weight: 5.2 } },
    { pokemon: 'Skorupi', options: { weight: 5.2 } },
    { pokemon: 'Boldore', options: { weight: 5.2 } },
    { pokemon: 'Woobat', options: { weight: 5.2 } },
    new DungeonTrainer('Cyclist', [new GymPokemon('Zebstrika', 226500, 37)], { weight: 1 }, 'Jeremiah', '(male)'),
    new DungeonTrainer('Cyclist', [new GymPokemon('Unfezant', 226500, 37)], { weight: 1 }, 'Adalaide', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Gurdurr', 226500, 37),
        new GymPokemon('Crustle', 226500, 37),
    ], { weight: 1 }, 'Markus'),
    new DungeonTrainer('Backpacker', [
        new GymPokemon('Golbat', 226500, 37),
        new GymPokemon('Swanna', 226500, 37),
    ], { weight: 1 }, 'Kiyo', '(male)'),
    new DungeonTrainer('Doctor', [new GymPokemon('Swoobat', 226500, 38)], { weight: 1 }, 'Derek'),
    new DungeonTrainer('Backpacker', [
        new GymPokemon('Golbat', 226500, 37),
        new GymPokemon('Darmanitan', 226500, 37),
    ], { weight: 1 }, 'Kumiko', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Boldore', 226500, 37),
        new GymPokemon('Excadrill', 226500, 37),
    ], { weight: 1 }, 'Jared'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Vibrava', 226500, 39),
        new GymPokemon('Camerupt', 226500, 39),
    ], { weight: 1 }, 'Ray', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Grumpig', 226500, 37),
        new GymPokemon('Drifblim', 226500, 37),
    ], { weight: 1 }, 'Cora', '(female)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Gurdurr', 226500, 37),
        new GymPokemon('Scraggy', 226500, 37),
        new GymPokemon('Scraggy', 226500, 37),
    ], { weight: 1 }, 'Corey'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Riolu', 226500, 37),
        new GymPokemon('Gurdurr', 226500, 37),
        new GymPokemon('Riolu', 226500, 37),
    ], { weight: 1 }, 'Chan'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Banette', 226500, 38),
        new GymPokemon('Golduck', 226500, 38),
    ], { weight: 1 }, 'Eliza', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Watchog', 226500, 38),
        new GymPokemon('Camerupt', 226500, 38),
    ], { weight: 1 }, 'Lewis', '(male)'),
], {
    common: [
        { loot: 'Persim', weight: 4 },
        { loot: 'Dowsing_machine', weight: 2 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Grey Shard' },
    ],
    epic: [
        { loot: 'Iron Plate' },
        { loot: 'Flame Plate' },
    ],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Metal_Powder' },
        { loot: 'Star Piece' },
    ],
}, 4003000, [
    new DungeonBossPokemon('Cacturne', 24000000, 100),
    new DungeonBossPokemon('Vibrava', 24000000, 100),
    new DungeonBossPokemon('Excadrill', 26000000, 100),
    new DungeonBossPokemon('Heatran', 30000000, 100, { hide: true, requirement: new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion) }),
], 226500, 14);
dungeonList['Seaside Cave'] = new Dungeon('Seaside Cave', [
    { pokemon: 'Golduck', options: { weight: 3.5 } },
    { pokemon: 'Seel', options: { weight: 3.5 } },
    { pokemon: 'Shellder', options: { weight: 3.5 } },
    { pokemon: 'Luvdisc', options: { weight: 3.5 } },
    { pokemon: 'Boldore', options: { weight: 3.5 } },
    { pokemon: 'Woobat', options: { weight: 3.5 } },
    { pokemon: 'Tynamo', options: { weight: 3.5 } },
    { pokemon: 'Frillish', options: { weight: 3.5 } },
    new DungeonTrainer('Battle Girl', [new GymPokemon('Heracross', 246500, 47)], { weight: 1 }, 'Tia'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Vibrava', 246500, 46),
        new GymPokemon('Gligar', 246500, 46),
    ], { weight: 1 }, 'Johan', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Onix', 246500, 46),
        new GymPokemon('Lairon', 246500, 46),
    ], { weight: 1 }, 'Mikiko', '(female)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Scrafty', 246500, 47)], { weight: 1 }, 'Drago'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Roggenrola', 246500, 44),
        new GymPokemon('Roggenrola', 246500, 44),
        new GymPokemon('Roggenrola', 246500, 44),
        new GymPokemon('Roggenrola', 246500, 44),
    ], { weight: 1 }, 'Rocky'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Mienfoo', 246500, 47)], { weight: 1 }, 'Maki'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Gurdurr', 246500, 47)], { weight: 1 }, 'Rich'),
], {
    common: [
        { loot: 'Token_collector', weight: 2 },
        { loot: 'Lucky_egg', weight: 2 },
        { loot: 'Persim' },
    ],
    rare: [{ loot: 'Blue Shard' }],
    epic: [
        { loot: 'Insect Plate' },
        { loot: 'Stone Plate' },
        { loot: 'Diveball' },
        { loot: 'Lureball' },
    ],
    legendary: [{ loot: 'LargeRestore' }],
    mythic: [
        { loot: 'Heart Scale' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Seaside Cave')) },
    ],
}, 4203000, [
    new DungeonBossPokemon('Eelektrik', 28000000, 100),
    new DungeonBossPokemon('Crustle', 28000000, 100),
], 246500, 21);
dungeonList['Plasma Frigate'] = new Dungeon('Plasma Frigate', [
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Watchog', 257500, 46),
        new GymPokemon('Garbodor', 257500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Golbat', 257500, 46),
        new GymPokemon('Drapion', 257500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Seviper', 257500, 46),
        new GymPokemon('Garbodor', 257500, 46),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Krookodile', 257500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Drapion', 257500, 47)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Garbodor', 257500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Whirlipede', 257500, 46),
        new GymPokemon('Watchog', 257500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Pawniard', 257500, 45),
        new GymPokemon('Pawniard', 257500, 45),
        new GymPokemon('Pawniard', 257500, 45),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Scraggy', 257500, 46),
        new GymPokemon('Liepard', 257500, 46),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Weezing', 257500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Krokorok', 257500, 46),
        new GymPokemon('Raticate', 257500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Deino', 257500, 45),
        new GymPokemon('Deino', 257500, 45),
        new GymPokemon('Sneasel', 257500, 45),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Scraggy', 257500, 45),
        new GymPokemon('Krokorok', 257500, 45),
        new GymPokemon('Golbat', 257500, 45),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scrafty', 257500, 47)], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
        { loot: 'Black Shard' },
        { loot: 'White Shard' },
    ],
    epic: [
        { loot: 'Iron Plate' },
        { loot: 'Zap Plate' },
        { loot: 'Icicle Plate' },
    ],
    legendary: [{ loot: 'Revive' }],
    mythic: [{ loot: 'Max Revive' }],
}, 4603000, [
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Cryogonal', 12000000, 48),
        new GymPokemon('Cryogonal', 12000000, 48),
        new GymPokemon('Weavile', 13000000, 50),
    ], { weight: 1 }, 'Zinzolin', '(zinzolin)'),
], 257500, 20);
dungeonList['Giant Chasm'] = new Dungeon('Giant Chasm', [
    { pokemon: 'Clefairy', options: { weight: 4 } },
    { pokemon: 'Poliwag', options: { weight: 4 } },
    { pokemon: 'Seel', options: { weight: 4 } },
    { pokemon: 'Tangela', options: { weight: 4 } },
    { pokemon: 'Delibird', options: { weight: 4 } },
    { pokemon: 'Sneasel', options: { weight: 4 } },
    { pokemon: 'Piloswine', options: { weight: 4 } },
    { pokemon: 'Pelipper', options: { weight: 4 } },
    { pokemon: 'Lunatone', options: { weight: 4 } },
    { pokemon: 'Solrock', options: { weight: 4 } },
    { pokemon: 'Vanillish', options: { weight: 4 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 4 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 4 } },
    { pokemon: 'Ditto', options: { weight: 4 } },
    { pokemon: 'Metang', options: { weight: 4 } },
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Weezing', 266500, 46),
        new GymPokemon('Muk', 266500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Scraggy', 266500, 46),
        new GymPokemon('Scrafty', 266500, 46),
        new GymPokemon('Whirlipede', 266500, 46),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Trubbish', 266500, 46),
        new GymPokemon('Golbat', 266500, 46),
        new GymPokemon('Garbodor', 266500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Skorupi', 266500, 45),
        new GymPokemon('Foongus', 266500, 45),
        new GymPokemon('Golbat', 266500, 45),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Krookodile', 266500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Doctor', [new GymPokemon('Leavanny', 266500, 49)], { weight: 1 }, 'Julius'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scrafty', 266500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Scolipede', 266500, 47)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Trubbish', 266500, 46),
        new GymPokemon('Zangoose', 266500, 46),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Grimer', 266500, 46),
        new GymPokemon('Seviper', 266500, 46),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Raticate', 266500, 47),
        new GymPokemon('Watchog', 266500, 47),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Krokorok', 266500, 47),
        new GymPokemon('Krookodile', 266500, 47),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [new GymPokemon('Drapion', 266500, 47)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Deino', 266500, 45),
        new GymPokemon('Deino', 266500, 45),
        new GymPokemon('Sneasel', 266500, 45),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Plasma Grunt', [
        new GymPokemon('Koffing', 266500, 46),
        new GymPokemon('Amoonguss', 266500, 46),
    ], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'Aspear', weight: 4 },
        { loot: 'Lucky_incense', weight: 2 },
        { loot: 'Amoonguss' },
    ],
    rare: [
        { loot: 'Crimson Shard' },
        { loot: 'White Shard' },
    ],
    epic: [
        { loot: 'Icicle Plate' },
        { loot: 'Draco Plate' },
        { loot: 'Dread Plate' },
    ],
    legendary: [
        { loot: 'Star Piece', weight: 2 },
        { loot: 'LargeRestore' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 4403000, [
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Cryogonal', 12000000, 49),
        new GymPokemon('Cryogonal', 12000000, 49),
        new GymPokemon('Weavile', 12500000, 51),
    ], { weight: 1 }, 'Zinzolin', '(zinzolin)'),
    new DungeonBossPokemon('Tangrowth', 30000000, 100, { hide: true, requirement: new TemporaryBattleRequirement('Ghetsis 2') }),
    new DungeonBossPokemon('Audino', 32000000, 100, { hide: true, requirement: new TemporaryBattleRequirement('Ghetsis 2') }),
    new DungeonBossPokemon('Mamoswine', 32000000, 100, { hide: true, requirement: new TemporaryBattleRequirement('Ghetsis 2') }),
    new DungeonBossPokemon('Kyurem', 35000000, 100, { requirement: new MultiRequirement([
            new QuestLineCompletedRequirement('Hollow Truth and Ideals'),
            new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
            new OneFromManyRequirement([
                new QuestLineCompletedRequirement('Swords of Justice'),
                new QuestLineStartedRequirement('Swords of Justice', GameConstants.AchievementOption.less),
            ]),
        ]) }),
], 266500, 22);
dungeonList['Cave of Being'] = new Dungeon('Cave of Being', ['Kadabra', 'Golbat', 'Woobat', 'Gurdurr', 'Graveler', 'Onix'], {
    common: [
        { loot: 'xClick' },
        { loot: 'xAttack' },
        { loot: 'Lucky_egg' },
        { loot: 'Token_collector' },
        { loot: 'Dowsing_machine' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Mind Plate' }],
}, 4603000, [
    new DungeonBossPokemon('Uxie', 35000000, 100),
    new DungeonBossPokemon('Mesprit', 35000000, 100),
    new DungeonBossPokemon('Azelf', 35000000, 100),
], 286500, 20);
dungeonList['Abundant Shrine'] = new Dungeon('Abundant Shrine', [
    { pokemon: 'Vulpix', options: { weight: 1.45 } },
    { pokemon: 'Golduck', options: { weight: 1.45 } },
    { pokemon: 'Marill', options: { weight: 1.45 } },
    { pokemon: 'Azumarill', options: { weight: 1.45 } },
    { pokemon: 'Swablu', options: { weight: 1.45 } },
    { pokemon: 'Bronzor', options: { weight: 1.45 } },
    { pokemon: 'Cottonee', options: { weight: 1.45 } },
    { pokemon: 'Petilil', options: { weight: 1.45 } },
    { pokemon: 'Goldeen', options: { weight: 1.45 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 1.45 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 1.45 } },
    new DungeonTrainer('Youngster', [
        new GymPokemon('Skorupi', 306500, 39),
        new GymPokemon('Seviper', 306500, 39),
    ], { weight: 1 }, 'Wes'),
    new DungeonTrainer('Twins', [
        new GymPokemon('Swablu', 306500, 38),
        new GymPokemon('Swablu', 306500, 38),
    ], { weight: 1 }, 'Rae & Ula'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Deerling (Spring)', 306500, 39),
        new GymPokemon('Zangoose', 306500, 39),
    ], { weight: 1 }, 'Lurleen'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Karrablast', 306500, 37),
        new GymPokemon('Shelmet', 306500, 37),
        new GymPokemon('Joltik', 306500, 37),
        new GymPokemon('Scolipede', 306500, 37),
    ], { weight: 1 }, 'Jaye'),
], {
    common: [
        { loot: 'Mago', weight: 3 },
        { loot: 'xClick', weight: 3 },
        { loot: 'Amoonguss' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Ochre Shard' },
    ],
    legendary: [{ loot: 'LargeRestore' }],
    mythic: [{ loot: 'Max Revive' }],
}, 4803000, [
    new DungeonBossPokemon('Bronzong', 38000000, 100),
    new DungeonBossPokemon('Altaria', 38000000, 100),
    new DungeonBossPokemon('Landorus', 42000000, 100),
], 306500, 14);
dungeonList['Victory Road Unova'] = new Dungeon('Victory Road Unova', [
    { pokemon: 'Poliwag', options: { weight: 5.57 } },
    { pokemon: 'Onix', options: { weight: 5.57 } },
    { pokemon: 'Marill', options: { weight: 5.57 } },
    { pokemon: 'Roselia', options: { weight: 5.57 } },
    { pokemon: 'Altaria', options: { weight: 5.57 } },
    { pokemon: 'Banette', options: { weight: 5.57 } },
    { pokemon: 'Buizel', options: { weight: 5.57 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 5.57 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 5.57 } },
    { pokemon: 'Boldore', options: { weight: 5.57 } },
    { pokemon: 'Cottonee', options: { weight: 5.57 } },
    { pokemon: 'Petilil', options: { weight: 5.57 } },
    { pokemon: 'Tranquill', options: { weight: 5.57 } },
    { pokemon: 'Unfezant', options: { weight: 5.57 } },
    { pokemon: 'Gurdurr', options: { weight: 5.57 } },
    { pokemon: 'Druddigon', options: { weight: 5.57 } },
    { pokemon: 'Sawk', options: { weight: 5.57, hide: true, requirement: new ObtainedPokemonRequirement('Sawk') } },
    { pokemon: 'Throh', options: { weight: 5.57, hide: true, requirement: new ObtainedPokemonRequirement('Throh') } },
    { pokemon: 'Deino', options: { weight: 5.57, hide: true, requirement: new ObtainedPokemonRequirement('Deino') } },
    { pokemon: 'Zweilous', options: { weight: 5.57, hide: true, requirement: new ObtainedPokemonRequirement('Zweilous') } },
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Golurk', 326500, 55),
        new GymPokemon('Sigilyph', 326500, 55),
    ], { weight: 1 }, 'Billy', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Drifblim', 326500, 55),
        new GymPokemon('Claydol', 326500, 55),
    ], { weight: 1 }, 'Jamie', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Lampent', 326500, 54),
        new GymPokemon('Musharna', 326500, 54),
    ], { weight: 1 }, 'Alia', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Metang', 326500, 54),
        new GymPokemon('Cofagrigus', 326500, 54),
    ], { weight: 1 }, 'Al', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Braviary', 326500, 55),
        new GymPokemon('Carracosta', 326500, 55),
    ], { weight: 1 }, 'Claude', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Mandibuzz', 326500, 55),
        new GymPokemon('Archeops', 326500, 55),
    ], { weight: 1 }, 'Cecile', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Darmanitan', 326500, 55),
        new GymPokemon('Tangrowth', 326500, 55),
    ], { weight: 1 }, 'Chandra', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Whimsicott', 326500, 55),
        new GymPokemon('Unfezant', 326500, 55),
    ], { weight: 1 }, 'Beckett', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Swoobat', 326500, 55),
        new GymPokemon('Lilligant', 326500, 55),
    ], { weight: 1 }, 'Shelly', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Sigilyph', 326500, 55),
        new GymPokemon('Crobat', 326500, 55),
    ], { weight: 1 }, 'Cathy', '(female)'),
    new DungeonTrainer('Doctor', [new GymPokemon('Clefable', 326500, 54)], { weight: 1 }, 'Logan'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Sawsbuck (Spring)', 326500, 54)], { weight: 1 }, 'Mae', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Swanna', 326500, 55),
        new GymPokemon('Ampharos', 326500, 55),
    ], { weight: 1 }, 'Pierce', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Gigalith', 326500, 55),
        new GymPokemon('Skarmory', 326500, 55),
    ], { weight: 1 }, 'Abraham', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Heatmor', 326500, 55),
        new GymPokemon('Galvantula', 326500, 55),
    ], { weight: 1 }, 'Shanta', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Durant', 326500, 55),
        new GymPokemon('Ferrothorn', 326500, 55),
    ], { weight: 1 }, 'Webster', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Electabuzz', 326500, 54),
        new GymPokemon('Probopass', 326500, 54),
    ], { weight: 1 }, 'Eddie', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Magmar', 326500, 54),
        new GymPokemon('Camerupt', 326500, 54),
    ], { weight: 1 }, 'Elle', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Fraxure', 326500, 54),
        new GymPokemon('Zweilous', 326500, 54),
        new GymPokemon('Flygon', 326500, 54),
    ], { weight: 1 }, 'Hugo', '(male)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Pinsir', 326500, 54),
        new GymPokemon('Heracross', 326500, 54),
    ], { weight: 1 }, 'Martell'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Throh', 326500, 54),
        new GymPokemon('Sawk', 326500, 54),
    ], { weight: 1 }, 'Chalina'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Zweilous', 326500, 55),
        new GymPokemon('Eelektross', 326500, 55),
    ], { weight: 1 }, 'Elmer', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Fraxure', 326500, 55),
        new GymPokemon('Vanilluxe', 326500, 55),
    ], { weight: 1 }, 'Caroll', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Zebstrika', 326500, 54),
        new GymPokemon('Sawk', 326500, 54),
        new GymPokemon('Starmie', 326500, 54),
    ], { weight: 1 }, 'Portia', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Beartic', 326500, 54),
        new GymPokemon('Throh', 326500, 54),
        new GymPokemon('Golurk', 326500, 54),
    ], { weight: 1 }, 'Sterling', '(male)'),
], {
    common: [
        { loot: 'xClick', weight: 3 },
        { loot: 'xAttack', weight: 3 },
        { loot: 'Zoroark' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
        { loot: 'Black Shard' },
        { loot: 'White Shard' },
    ],
    epic: [
        { loot: 'Quickball' },
        { loot: 'Timerball' },
        { loot: 'Duskball' },
        { loot: 'Nestball' },
        { loot: 'Repeatball' },
    ],
    legendary: [
        { loot: 'Star Piece' },
        { loot: 'LargeRestore' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 5003000, [
    new DungeonBossPokemon('Golurk', 44000000, 100),
    new DungeonBossPokemon('Audino', 45000000, 100),
    new DungeonBossPokemon('Terrakion', 45000000, 100, {
        requirement: new QuestLineStepCompletedRequirement('Swords of Justice', 21),
    }),
], 326500, 23);
dungeonList['Twist Mountain'] = new Dungeon('Twist Mountain', [
    { pokemon: 'Onix', options: { weight: 10.4 } },
    { pokemon: 'Boldore', options: { weight: 10.4 } },
    { pokemon: 'Woobat', options: { weight: 10.4 } },
    { pokemon: 'Gurdurr', options: { weight: 10.4 } },
    { pokemon: 'Beartic', options: { weight: 10.4 } },
    new DungeonTrainer('Worker', [
        new GymPokemon('Roggenrola', 356500, 60),
        new GymPokemon('Graveler', 356500, 60),
        new GymPokemon('Excadrill', 356500, 60),
    ], { weight: 1 }, 'Cairn', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Tauros', 356500, 64),
        new GymPokemon('Crobat', 356500, 64),
        new GymPokemon('Carracosta', 356500, 64),
    ], { weight: 1 }, 'Carter', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Glaceon', 356500, 63),
        new GymPokemon('Bastiodon', 356500, 63),
        new GymPokemon('Rhyperior', 356500, 63),
        new GymPokemon('Drapion', 356500, 63),
    ], { weight: 1 }, 'Julia', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Golett', 356500, 61),
        new GymPokemon('Mamoswine', 356500, 61),
    ], { weight: 1 }, 'Wade'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Geodude', 356500, 60),
        new GymPokemon('Steelix', 356500, 60),
        new GymPokemon('Boldore', 356500, 60),
    ], { weight: 1 }, 'Gus', '(male)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Machoke', 356500, 61),
        new GymPokemon('Abomasnow', 356500, 61),
    ], { weight: 1 }, 'Patton', '(ice)'),
    new DungeonTrainer('Nurse', [new GymPokemon('Blissey', 356500, 62)], { weight: 1 }, 'Carol'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Gyarados', 356500, 64),
        new GymPokemon('Kangaskhan', 356500, 64),
        new GymPokemon('Archeops', 356500, 64),
    ], { weight: 1 }, 'Chloris', '(female)'),
    new DungeonTrainer('Worker', [new GymPokemon('Sigilyph', 356500, 62)], { weight: 1 }, 'Cliff', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Larvitar', 356500, 61),
        new GymPokemon('Probopass', 356500, 61),
    ], { weight: 1 }, 'Hunter'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Glalie', 356500, 61),
        new GymPokemon('Beartic', 356500, 61),
    ], { weight: 1 }, 'Victor', '(ice)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Smoochum', 356500, 60),
        new GymPokemon('Claydol', 356500, 60),
        new GymPokemon('Kadabra', 356500, 60),
    ], { weight: 1 }, 'Ryan', '(ice)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Weavile', 356500, 63),
        new GymPokemon('Rampardos', 356500, 63),
        new GymPokemon('Toxicroak', 356500, 63),
        new GymPokemon('Aggron', 356500, 63),
    ], { weight: 1 }, 'Zach', '(male)'),
], {
    common: [
        { loot: 'Token_collector', weight: 3 },
        { loot: 'Lucky_incense', weight: 3 },
        { loot: 'Ultraball' },
    ],
    rare: [{ loot: 'White Shard' }],
    legendary: [
        { loot: 'Rare Bone', weight: 2 },
        { loot: 'Duskball' },
        { loot: 'LargeRestore' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Twist Mountain')) }],
}, 5203000, [
    new DungeonBossPokemon('Durant', 48000000, 100),
    new DungeonBossPokemon('Cryogonal', 48000000, 100),
    new DungeonBossPokemon('Heatmor', 48000000, 100),
    new DungeonBossPokemon('Regigigas', 50000000, 100),
], 356500, 7);
dungeonList['Dragonspiral Tower'] = new Dungeon('Dragonspiral Tower', ['Dratini', 'Dragonair', 'Tranquill', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Vanillish', 'Sawsbuck (Spring)', 'Sawsbuck (Summer)', 'Sawsbuck (Autumn)', 'Sawsbuck (Winter)', 'Beartic', 'Mienfoo', 'Mienshao', 'Golett', 'Golurk'], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Razz' },
        { loot: 'Pinap' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Crimson Shard' },
    ],
    epic: [
        { loot: 'Draco Plate' },
        { loot: 'Zap Plate' },
        { loot: 'Flame Plate' },
        { loot: 'Icicle Plate' },
        { loot: 'Spooky Plate' },
        { loot: 'Splash Plate' },
        { loot: 'Iron Plate' },
    ],
    legendary: [
        { loot: 'Star Piece', weight: 2 },
        { loot: 'Dragon_Fang' },
        { loot: 'LargeRestore' },
    ],
    mythic: [
        { loot: 'Heart Scale' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Dragonspiral Tower')) },
    ],
}, 5203000, [
    new DungeonBossPokemon('Druddigon', 48000000, 100),
    new DungeonBossPokemon('Dragonite', 48000000, 100),
    new DungeonBossPokemon('Reshiram', 50000000, 100),
    new DungeonBossPokemon('Zekrom', 50000000, 100),
    new DungeonBossPokemon('Vivillon (Savanna)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 30),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 31, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Savanna)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 356500, 7);
dungeonList['Moor of Icirrus'] = new Dungeon('Moor of Icirrus', [
    { pokemon: 'Croagunk', options: { weight: 2.67 } },
    { pokemon: 'Palpitoad', options: { weight: 2.67 } },
    { pokemon: 'Karrablast', options: { weight: 2.67 } },
    { pokemon: 'Shelmet', options: { weight: 2.67 } },
    { pokemon: 'Stunfisk', options: { weight: 2.67 } },
    { pokemon: 'Barboach', options: { weight: 2.67 } },
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Accelgor', 356500, 62),
        new GymPokemon('Swalot', 356500, 62),
        new GymPokemon('Kecleon', 356500, 62),
    ], { weight: 1 }, 'Elaine', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Escavalier', 356500, 62),
        new GymPokemon('Skuntank', 356500, 62),
        new GymPokemon('Carnivine', 356500, 62),
    ], { weight: 1 }, 'Parker', '(male)'),
    new DungeonTrainer('Fisherman', [
        new GymPokemon('Corphish', 356500, 60),
        new GymPokemon('Poliwag', 356500, 60),
        new GymPokemon('Stunfisk', 356500, 60),
    ], { weight: 1 }, 'Eustace'),
    new DungeonTrainer('Fisherman', [
        new GymPokemon('Poliwhirl', 356500, 60),
        new GymPokemon('Whiscash', 356500, 60),
        new GymPokemon('Politoed', 356500, 60),
    ], { weight: 1 }, 'Arnold'),
], {
    common: [
        { loot: 'xAttack', weight: 3 },
        { loot: 'Lucky_egg', weight: 3 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Ochre Shard' },
    ],
    legendary: [
        { loot: 'Revive', weight: 2 },
        { loot: 'LargeRestore' },
    ],
    mythic: [
        { loot: 'Heart Scale' },
        { loot: 'Max Revive' },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Moor of Icirrus')) },
    ],
}, 5203000, [
    new DungeonBossPokemon('Seismitoad', 48000000, 100),
    new DungeonBossPokemon('Whiscash', 48000000, 100),
    new DungeonBossPokemon('Keldeo', 50000000, 100, {
        hide: false,
        requirement: new QuestLineCompletedRequirement('Swords of Justice'),
    }),
    new DungeonBossPokemon('Vivillon (Jungle)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 4),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 5, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Jungle)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 356500, 8);
dungeonList['Pledge Grove'] = new Dungeon('Pledge Grove', ['Fearow', 'Furret', 'Ledian', 'Sudowoodo', 'Stantler', 'Breloom', 'Sawsbuck (Spring)', 'Sawsbuck (Summer)', 'Sawsbuck (Autumn)', 'Sawsbuck (Winter)'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Splash Plate' },
        { loot: 'Fist Plate' },
    ],
    legendary: [{ loot: 'Sharp_Beak' }],
}, 5203000, [
    new DungeonBossPokemon('Unfezant', 50000000, 100),
    new DungeonBossPokemon('Politoed', 50000000, 100),
    new DungeonBossPokemon('Keldeo (Resolute)', 52000000, 100),
], 356500, 8);
dungeonList['Pinwheel Forest'] = new Dungeon('Pinwheel Forest', [
    { pokemon: 'Goldeen', options: { weight: 5.42 } },
    { pokemon: 'Marill', options: { weight: 5.42 } },
    { pokemon: 'Yanma', options: { weight: 5.42 } },
    { pokemon: 'Vigoroth', options: { weight: 5.42 } },
    { pokemon: 'Toxicroak', options: { weight: 5.42 } },
    { pokemon: 'Gurdurr', options: { weight: 5.42 } },
    { pokemon: 'Tympole', options: { weight: 5.42 } },
    { pokemon: 'Palpitoad', options: { weight: 5.42 } },
    { pokemon: 'Swadloon', options: { weight: 5.42 } },
    { pokemon: 'Whirlipede', options: { weight: 5.42 } },
    { pokemon: 'Cottonee', options: { weight: 5.42 } },
    { pokemon: 'Petilil', options: { weight: 5.42 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 5.42 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 5.42 } },
    { pokemon: 'Sawk', options: { weight: 5.42, hide: true, requirement: new ObtainedPokemonRequirement('Sawk') } },
    { pokemon: 'Throh', options: { weight: 5.42, hide: true, requirement: new ObtainedPokemonRequirement('Throh') } },
    { pokemon: 'Yanmega', options: { weight: 5.42, hide: true, requirement: new ObtainedPokemonRequirement('Yanmega') } },
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Wooper', 356500, 60),
        new GymPokemon('Tympole', 356500, 60),
    ], { weight: 1 }, 'Jojo', '(male)'),
    new DungeonTrainer('Nursery Aide', [
        new GymPokemon('Exeggcute', 356500, 61),
        new GymPokemon('Miltank', 356500, 61),
    ], { weight: 1 }, 'Ethel'),
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Dratini', 356500, 59),
        new GymPokemon('Gible', 356500, 59),
        new GymPokemon('Bagon', 356500, 59),
    ], { weight: 1 }, 'Samantha', '(female)'),
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Burmy (Plant)', 356500, 59),
        new GymPokemon('Scyther', 356500, 59),
        new GymPokemon('Paras', 356500, 59),
    ], { weight: 1 }, 'José', '(male)'),
    new DungeonTrainer('Twins', [
        new GymPokemon('Plusle', 356500, 60),
        new GymPokemon('Minun', 356500, 60),
    ], { weight: 1 }, 'Ally & Amy'),
    new DungeonTrainer('Nursery Aide', [
        new GymPokemon('Chansey', 356500, 61),
        new GymPokemon('Leavanny', 356500, 61),
    ], { weight: 1 }, 'Rosalyn'),
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Pineco', 356500, 60),
        new GymPokemon('Ferrothorn', 356500, 60),
    ], { weight: 1 }, 'Ike', '(male)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Sudowoodo', 356500, 62),
        new GymPokemon('Gloom', 356500, 62),
        new GymPokemon('Beartic', 356500, 62),
    ], { weight: 1 }, 'Hillary', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Weepinbell', 356500, 62),
        new GymPokemon('Luxray', 356500, 62),
        new GymPokemon('Ursaring', 356500, 62),
    ], { weight: 1 }, 'Dwayne', '(male)'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Mankey', 356500, 60),
        new GymPokemon('Snubbull', 356500, 60),
        new GymPokemon('Crawdaunt', 356500, 60),
    ], { weight: 1 }, 'Keita'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Electrike', 356500, 62),
        new GymPokemon('Rapidash', 356500, 62),
        new GymPokemon('Farfetch\'d', 356500, 62),
    ], { weight: 1 }, 'Ralph', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Crobat', 356500, 64),
        new GymPokemon('Magmortar', 356500, 64),
        new GymPokemon('Leafeon', 356500, 64),
    ], { weight: 1 }, 'Rosaline', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Ludicolo', 356500, 64),
        new GymPokemon('Electivire', 356500, 64),
        new GymPokemon('Forretress', 356500, 64),
    ], { weight: 1 }, 'Sinan', '(male)'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Nidoran(F)', 356500, 60),
        new GymPokemon('Nidoran(M)', 356500, 60),
        new GymPokemon('Nidoqueen', 356500, 60),
    ], { weight: 1 }, 'Helia'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Cascoon', 356500, 60),
        new GymPokemon('Silcoon', 356500, 60),
        new GymPokemon('Scolipede', 356500, 60),
    ], { weight: 1 }, 'Henley'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Munchlax', 356500, 62),
        new GymPokemon('Zebstrika', 356500, 62),
        new GymPokemon('Kricketune', 356500, 62),
    ], { weight: 1 }, 'Melita', '(female)'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Phanpy', 356500, 60),
        new GymPokemon('Doduo', 356500, 60),
        new GymPokemon('Fearow', 356500, 60),
    ], { weight: 1 }, 'Nicholas'),
    new DungeonTrainer('School Kid', [
        new GymPokemon('Oddish', 356500, 60),
        new GymPokemon('Tangela', 356500, 60),
        new GymPokemon('Bellossom', 356500, 60),
    ], { weight: 1 }, 'Millie', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Furret', 356500, 63),
        new GymPokemon('Braviary', 356500, 63),
        new GymPokemon('Seismitoad', 356500, 63),
    ], { weight: 1 }, 'Kelsey', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Linoone', 356500, 63),
        new GymPokemon('Mandibuzz', 356500, 63),
        new GymPokemon('Toxicroak', 356500, 63),
    ], { weight: 1 }, 'Kathrine', '(female)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Tyrogue', 356500, 61),
        new GymPokemon('Scrafty', 356500, 61),
        new GymPokemon('Makuhita', 356500, 61),
    ], { weight: 1 }, 'Kentaro'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Tyrogue', 356500, 61),
        new GymPokemon('Machop', 356500, 61),
        new GymPokemon('Poliwrath', 356500, 61),
    ], { weight: 1 }, 'Lee'),
    new DungeonTrainer('School Kid', [
        new GymPokemon('Venonat', 356500, 60),
        new GymPokemon('Yanma', 356500, 60),
        new GymPokemon('Venomoth', 356500, 60),
    ], { weight: 1 }, 'Keston', '(male)'),
], {
    common: [
        { loot: 'Chesto', weight: 2 },
        { loot: 'Pecha', weight: 2 },
        { loot: 'Sitrus', weight: 2 },
        { loot: 'Amoonguss' },
        { loot: 'Greatball' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Lime Shard' },
    ],
    epic: [
        { loot: 'Meadow Plate' },
        { loot: 'Fist Plate' },
    ],
    legendary: [
        { loot: 'Star Piece', weight: 2 },
        { loot: 'LargeRestore' },
        { loot: 'Nestball' },
        { loot: 'Miracle_Seed' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Pinwheel Forest')) },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(300, GameConstants.getDungeonIndex('Pinwheel Forest')) },
    ],
}, 5203000, [
    new DungeonBossPokemon('Scolipede', 48000000, 100),
    new DungeonBossPokemon('Seismitoad', 48000000, 100),
    new DungeonBossPokemon('Virizion', 48000000, 100, {
        requirement: new QuestLineStepCompletedRequirement('Swords of Justice', 21),
    }),
], 356500, 3);
dungeonList.Dreamyard = new Dungeon('Dreamyard', [
    { pokemon: 'Raticate', options: { weight: 4.67 } },
    { pokemon: 'Jigglypuff', options: { weight: 4.67 } },
    { pokemon: 'Golbat', options: { weight: 4.67 } },
    { pokemon: 'Watchog', options: { weight: 4.67 } },
    { pokemon: 'Liepard', options: { weight: 4.67 } },
    { pokemon: 'Munna', options: { weight: 4.67 } },
    new DungeonTrainer('Psychic', [
        new GymPokemon('Hypno', 356500, 62),
        new GymPokemon('Dusclops', 356500, 62),
    ], { weight: 1 }, 'Nandor', '(male)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Gastly', 356500, 63),
        new GymPokemon('Skuntank', 356500, 63),
    ], { weight: 1 }, 'Athena', '(female)'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Chingling', 356500, 62),
        new GymPokemon('Mr. Mime', 356500, 62),
    ], { weight: 1 }, 'Olesia', '(female)'),
    new DungeonTrainer('Scientist', [
        new GymPokemon('Klang', 356500, 63),
        new GymPokemon('Porygon', 356500, 63),
    ], { weight: 1 }, 'Franklin', '(male)'),
    new DungeonTrainer('School Kid', [
        new GymPokemon('Shroomish', 356500, 63),
        new GymPokemon('Tangrowth', 356500, 63),
    ], { weight: 1 }, 'William', '(male)'),
    new DungeonTrainer('Youngster', [
        new GymPokemon('Slakoth', 356500, 63),
        new GymPokemon('Slaking', 356500, 63),
    ], { weight: 1 }, 'Keita'),
    new DungeonTrainer('School Kid', [
        new GymPokemon('Igglybuff', 356500, 63),
        new GymPokemon('Lickilicky', 356500, 63),
    ], { weight: 1 }, 'Rita', '(female)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Crimson Shard' },
    ],
    epic: [
        { loot: 'Mind Plate', weight: 2 },
        { loot: 'Draco Plate' },
        { loot: 'Moonball' },
    ],
    legendary: [
        { loot: 'Revive', weight: 2 },
        { loot: 'LargeRestore' },
    ],
}, 5203000, [
    new DungeonBossPokemon('Audino', 48000000, 100),
    new DungeonBossPokemon('Dunsparce', 48000000, 100),
    new DungeonBossPokemon('Latias', 48000000, 100),
    new DungeonBossPokemon('Latios', 48000000, 100),
    new DungeonBossPokemon('Vivillon (Ocean)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 16),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 17, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Ocean)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 356500, 3);
dungeonList['P2 Laboratory'] = new Dungeon('P2 Laboratory', ['Frillish', 'Finneon', 'Horsea', 'Herdier', 'Magneton', 'Klang', 'Weezing', 'Watchog', 'Scrafty', 'Audino'], {
    common: [
        { loot: 'xClick' },
        { loot: 'xAttack', weight: 2 },
        { loot: 'Token_collector', weight: 2 },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
        { loot: 'Black Shard' },
        { loot: 'White Shard' },
    ],
    epic: [
        { loot: 'Iron Plate', weight: 2 },
        { loot: 'Insect Plate', weight: 2 },
        { loot: 'Zap Plate' },
    ],
    legendary: [
        { loot: 'Burn_Drive', ignoreDebuff: true },
        { loot: 'Chill_Drive', ignoreDebuff: true },
        { loot: 'Douse_Drive', ignoreDebuff: true },
        { loot: 'Shock_Drive', ignoreDebuff: true },
    ],
    mythic: [{ loot: 'Great_Twisted_Spoon', ignoreDebuff: true, requirement: new QuestLineStepCompletedRequirement('An Unrivaled Power', 14) }],
}, 5403000, [
    new DungeonBossPokemon('Stoutland', 58000000, 100, { hide: true, requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Magnezone', 58000000, 100, { hide: true, requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonBossPokemon('Klinklang', 58000000, 100, { hide: true, requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')) }),
    new DungeonTrainer('Team Plasma', [
        new GymPokemon('Magneton', 10000000, 72),
        new GymPokemon('Rotom (Wash)', 10000000, 72),
        new GymPokemon('Metagross', 10000000, 72),
        new GymPokemon('Beheeyem', 10000000, 72),
        new GymPokemon('Magnezone', 10000000, 72),
        new GymPokemon('Klinklang', 11000000, 74),
    ], { weight: 1 }, 'Colress', '(colress)'),
    new DungeonBossPokemon('Genesect', 62000000, 100, { requirement: new QuestLineStepCompletedRequirement('The Legend Awakened', 7) }),
], 396500, 18);
// Kalos Dungeons
dungeonList['Santalune Forest'] = new Dungeon('Santalune Forest', [
    { pokemon: 'Caterpie', options: { weight: 0.88 } },
    { pokemon: 'Metapod', options: { weight: 0.88 } },
    { pokemon: 'Weedle', options: { weight: 0.88 } },
    { pokemon: 'Kakuna', options: { weight: 0.88 } },
    { pokemon: 'Pansage', options: { weight: 0.88 } },
    { pokemon: 'Pansear', options: { weight: 0.88 } },
    { pokemon: 'Panpour', options: { weight: 0.88 } },
    { pokemon: 'Fletchling', options: { weight: 0.88 } },
    { pokemon: 'Scatterbug', options: { weight: 0.88 } },
    new DungeonTrainer('Youngster', [
        new GymPokemon('Scatterbug', 5803000, 3),
        new GymPokemon('Fletchling', 5803000, 3),
    ], { weight: 1 }, 'Joey'),
    new DungeonTrainer('Lass', [new GymPokemon('Pikachu', 5803000, 5)], { weight: 1 }, 'Anna'),
], {
    common: [
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Lime Shard' },
    ],
    epic: [
        { loot: 'Insect Plate' },
        { loot: 'Fist Plate' },
    ],
    legendary: [
        { loot: 'SmallRestore' },
        { loot: 'Silver_Powder' },
        { loot: 'Heracronite', ignoreDebuff: true },
    ],
}, 5803020, [
    new DungeonTrainer('Lass', [
        new GymPokemon('Weedle', 24303000, 2),
        new GymPokemon('Bunnelby', 27303000, 4),
    ], { weight: 1 }, 'Lise'),
    new DungeonBossPokemon('Pikachu', 51738600, 4),
], 400000, 2);
dungeonList['Connecting Cave'] = new Dungeon('Connecting Cave', [
    { pokemon: 'Zubat', options: { weight: 1.33 } },
    { pokemon: 'Whismur', options: { weight: 1.33 } },
    { pokemon: 'Meditite', options: { weight: 1.33 } },
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Wepear' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Toxic Plate' },
        { loot: 'Sky Plate' },
    ],
    legendary: [
        { loot: 'Damp Rock' },
        { loot: 'Silk_Scarf' },
    ],
}, 6503370, [
    new DungeonTrainer('Pokémon Breeder', [
        new GymPokemon('Ducklett', 13374965, 12),
        new GymPokemon('Pikachu', 14465837, 12),
        new GymPokemon('Litleo', 17438602, 12),
        new GymPokemon('Oddish', 19365784, 12),
    ], { weight: 1 }, 'Mercy', '(female)'),
    new DungeonBossPokemon('Axew', 59867590, 20),
], 475000, 7);
dungeonList['Glittering Cave'] = new Dungeon('Glittering Cave', [
    { pokemon: 'Machop', options: { weight: .88 } },
    { pokemon: 'Cubone', options: { weight: .88 } },
    { pokemon: 'Rhyhorn', options: { weight: .88 } },
    { pokemon: 'Lunatone', options: { weight: .88 } },
    { pokemon: 'Solrock', options: { weight: .88 } },
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Houndour', 7037592, 18),
        new GymPokemon('Zubat', 7037592, 18),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Gulpin', 7037592, 18),
        new GymPokemon('Electrike', 7037592, 18),
    ], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'White Shard' },
    ],
    epic: [
        { loot: 'Moonball' },
        { loot: 'Blank Plate' },
    ],
    legendary: [
        { loot: 'Hard Stone' },
        { loot: 'Revive' },
        { loot: 'Kangaskhanite', ignoreDebuff: true },
    ],
}, 7037500, [
    new DungeonTrainer('Team Flare Grunt Duo', [
        new GymPokemon('Scraggy', 33084827, 20),
        new GymPokemon('Croagunk', 31937395, 20),
    ], { weight: 1 }, undefined),
    new DungeonBossPokemon('Kangaskhan', 63749659, 20, { requirement: new QuestLineStepCompletedRequirement('A Beautiful World', 3) }),
    new DungeonBossPokemon('Mawile', 61285398, 20, { requirement: new QuestLineStepCompletedRequirement('A Beautiful World', 3) }),
], 505000, 9);
dungeonList['Reflection Cave'] = new Dungeon('Reflection Cave', [
    { pokemon: 'Mr. Mime', options: { weight: 4 } },
    { pokemon: 'Wobbuffet', options: { weight: 4 } },
    { pokemon: 'Sableye', options: { weight: 4 } },
    { pokemon: 'Chingling', options: { weight: 4 } },
    { pokemon: 'Roggenrola', options: { weight: 4 } },
    { pokemon: 'Solosis', options: { weight: 4 } },
    { pokemon: 'Carbink', options: { weight: 4 } },
    { pokemon: 'Mime Jr.', options: { weight: 4 } },
    new DungeonTrainer('Backpacker', [new GymPokemon('Linoone', 7353000, 26)], { weight: 1 }, 'Lane', '(male)'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Throh', 7353000, 25),
        new GymPokemon('Hawlucha', 7353000, 26),
    ], { weight: 1 }, 'Hedvig'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Sandile', 7353000, 23),
        new GymPokemon('Dwebble', 7353000, 23),
        new GymPokemon('Diggersby', 7353000, 24),
    ], { weight: 1 }, 'Dunstan'),
    new DungeonTrainer('Tourist', [new GymPokemon('Nidorina', 7353000, 26)], { weight: 1 }, 'Monami', '(female)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Sawk', 7353000, 28)], { weight: 1 }, 'Igor'),
    new DungeonTrainer('Psychic', [
        new GymPokemon('Chimecho', 7353000, 24),
        new GymPokemon('Golett', 7353000, 24),
    ], { weight: 1 }, 'Franz', '(male)'),
    new DungeonTrainer('Tourist', [new GymPokemon('Nidorino', 7353000, 26)], { weight: 1 }, 'Haruto', '(male)'),
    new DungeonTrainer('Honeymooners', [
        new GymPokemon('Combee', 7353000, 26),
        new GymPokemon('Vespiquen', 7353000, 26),
    ], { weight: 1 }, 'Yuu & Ami'),
], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [
        { loot: 'Fist Plate' },
        { loot: 'Earth Plate' },
        { loot: 'Mind Plate' },
        { loot: 'Nestball' },
    ],
    legendary: [
        { loot: 'Revive', weight: 2 },
        { loot: 'LargeRestore' },
        { loot: 'Black_Belt' },
    ],
}, 7353000, [
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Absol', 33468400, 26),
        new GymPokemon('Pinsir', 37474200, 25),
    ], { weight: 1.5 }, 'Emil', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Doduo', 20365400, 24),
        new GymPokemon('Granbull', 23366400, 24),
        new GymPokemon('Helioptile', 25476400, 25),
    ], { weight: 1.5 }, 'Monique', '(female)'),
    new DungeonBossPokemon('Diancie', 69694200, 100, { requirement: new QuestLineStepCompletedRequirement('Princess Diancie', 7) }),
], 555000, 11);
//Tower of Mastery?
dungeonList['Kalos Power Plant'] = new Dungeon('Kalos Power Plant', [
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Croagunk', 7903570, 32),
        new GymPokemon('Scraggy', 7903570, 32),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Golbat', 7903570, 32),
        new GymPokemon('Scraggy', 7903570, 32),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Mightyena', 7903570, 34)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Golbat', 7903570, 32),
        new GymPokemon('Mightyena', 7903570, 32),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Golbat', 7903570, 33),
        new GymPokemon('Croagunk', 7903570, 31),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Liepard', 7903570, 31),
        new GymPokemon('Scraggy', 7903570, 31),
        new GymPokemon('Croagunk', 7903570, 31),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Swalot', 7903570, 34)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Liepard', 7903570, 31),
        new GymPokemon('Swalot', 7903570, 33),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Houndoom', 7903570, 36)], { weight: 8 }, undefined, '(male)'),
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Zap Plate' },
        { loot: 'Dread Plate' },
    ],
    legendary: [
        { loot: 'Repeatball', weight: 2 },
        { loot: 'LargeRestore' },
        { loot: 'Magnet' },
    ],
}, 7903570, [
    new DungeonTrainer('Team Flare Aliana', [new GymPokemon('Mightyena', 75384400, 38)], { weight: 3 }),
    new DungeonBossPokemon('Volcanion', 83945700, 100, {
        requirement: new MultiRequirement([
            new ClearDungeonRequirement(5, GameConstants.getDungeonIndex('Kalos Power Plant')),
            new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion),
        ])
    }),
], 575000, 13);
dungeonList['Sea Spirit\'s Den'] = new Dungeon('Sea Spirit\'s Den', ['Lapras', 'Dwebble', 'Lanturn', 'Binacle', 'Woobat', 'Onix'], {
    common: [
        { loot: 'xClick', weight: 2 },
        { loot: 'Bluk' },
    ],
    rare: [{ loot: 'Blue Shard' }],
    epic: [
        { loot: 'Flame Plate' },
        { loot: 'Sky Plate' },
        { loot: 'Icicle Plate' },
        { loot: 'Zap Plate' },
        { loot: 'Mind Plate' },
        { loot: 'Lureball' },
    ],
    legendary: [
        { loot: 'Damp Rock' },
        { loot: 'Mystic_Water' },
    ],
}, 7543000, [new DungeonBossPokemon('Lugia', 92375000, 100)], 600000, 23);
dungeonList['Poké Ball Factory'] = new Dungeon('Poké Ball Factory', [
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Toxicroak', 8173950, 37)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Mightyena', 8173950, 36),
        new GymPokemon('Golbat', 8173950, 36),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Scraggy', 8173950, 36),
        new GymPokemon('Mightyena', 8173950, 36),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Swalot', 8173950, 37)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [
        new GymPokemon('Scraggy', 8173950, 37),
        new GymPokemon('Houndoom', 8173950, 38),
    ], { weight: 4 }, undefined, '(female)'),
], {
    common: [
        { loot: 'Pokeball', weight: 4 },
        { loot: 'Greatball', weight: 2 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [
        { loot: 'Duskball' },
        { loot: 'Quickball' },
        { loot: 'Timerball' },
        { loot: 'Luxuryball' },
        { loot: 'Lureball' },
        { loot: 'Diveball' },
        { loot: 'Repeatball' },
    ],
}, 8173950, [
    new DungeonTrainer('Team Flare Celosia', [new GymPokemon('Manectric', 79385030, 41)], { weight: 1 }),
    new DungeonTrainer('Team Flare Bryony', [new GymPokemon('Liepard', 79284730, 41)], { weight: 1 }),
    new DungeonBossPokemon('Vivillon (Tundra)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 8),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 9, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Tundra)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 615000, 14);
dungeonList['Lost Hotel'] = new Dungeon('Lost Hotel', [
    { pokemon: 'Magneton', options: { weight: 2.6 } },
    { pokemon: 'Electrode', options: { weight: 2.6 } },
    { pokemon: 'Litwick', options: { weight: 2.6 } },
    { pokemon: 'Pawniard', options: { weight: 2.6 } },
    { pokemon: 'Klefki', options: { weight: 2.6 } },
    new DungeonTrainer('Punk Guy', [
        new GymPokemon('Scrafty', 8375300, 39),
        new GymPokemon('Sharpedo', 8375300, 39),
        new GymPokemon('Pawniard', 8375300, 39),
    ], { weight: 1 }, 'Sid'),
    new DungeonTrainer('Punk Guy', [
        new GymPokemon('Skuntank', 8375300, 40),
        new GymPokemon('Crawdaunt', 8375300, 40),
    ], { weight: 1 }, 'Jacques'),
    new DungeonTrainer('Punk Guy', [new GymPokemon('Dunsparce', 8375300, 42)], { weight: 1 }, 'Slater'),
    new DungeonTrainer('Punk Girl', [
        new GymPokemon('Seviper', 8375300, 40),
        new GymPokemon('Arbok', 8375300, 40),
    ], { weight: 1 }, 'Jeanne'),
    new DungeonTrainer('Punk Girl', [
        new GymPokemon('Liepard', 8375300, 40),
        new GymPokemon('Liepard', 8375300, 40),
    ], { weight: 1 }, 'Cecile'),
], {
    common: [
        { loot: 'xClick', weight: 8 },
        { loot: 'Lucky_incense', weight: 6 },
        { loot: 'Trubbish', weight: 2 },
        { loot: 'Garbodor' },
    ],
    rare: [
        { loot: 'Pink Shard' },
        { loot: 'Purple Shard' },
    ],
    epic: [
        { loot: 'Dread Plate' },
        { loot: 'Duskball' },
    ],
    legendary: [
        { loot: 'Rotom (Heat)' },
        { loot: 'Rotom (Wash)' },
        { loot: 'Rotom (Fan)' },
        { loot: 'Rotom (Frost)' },
        { loot: 'Rotom (Mow)' },
        { loot: 'Rotom (Discord)', requirement: new ObtainedPokemonRequirement('Rotom (Discord)') },
        { loot: 'Spell_Tag' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Lost Hotel')) }],
}, 8375300, [
    new DungeonTrainer('Punk Couple', [
        new GymPokemon('Garbodor', 42664500, 42),
        new GymPokemon('Pangoro', 42765500, 42),
    ], { weight: 2 }, 'Zoya & Asa'),
    new DungeonBossPokemon('Rotom', 82376500, 38),
    new DungeonBossPokemon('Vivillon (Elegant)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 14),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 15, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Elegant)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 635000, 15);
dungeonList['Frost Cavern'] = new Dungeon('Frost Cavern', [
    { pokemon: 'Haunter', options: { weight: 4.61 } },
    { pokemon: 'Jynx', options: { weight: 4.61 } },
    { pokemon: 'Piloswine', options: { weight: 4.61 } },
    { pokemon: 'Beartic', options: { weight: 4.61 } },
    { pokemon: 'Cryogonal', options: { weight: 4.61 } },
    { pokemon: 'Bergmite', options: { weight: 4.61 } },
    { pokemon: 'Smoochum', options: { weight: 4.61 } },
    { pokemon: 'Vanillite', options: { weight: 4.61 } },
    { pokemon: 'Cubchoo', options: { weight: 4.61 } },
    { pokemon: 'Poliwhirl', options: { weight: 4.61 } },
    { pokemon: 'Floatzel', options: { weight: 4.61 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 4.61 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 4.61 } },
    new DungeonTrainer('Hiker', [new GymPokemon('Vibrava', 8537490, 44)], { weight: 1 }, 'Ross'),
    new DungeonTrainer('Sky Trainer', [
        new GymPokemon('Carnivine', 8537490, 41),
        new GymPokemon('Swanna', 8537490, 44),
    ], { weight: 1 }, 'Celso', '(male)'),
    new DungeonTrainer('Sky Trainer', [new GymPokemon('Cryogonal', 8537490, 45)], { weight: 1 }, 'Era', '(female)'),
    new DungeonTrainer('Artist', [new GymPokemon('Smeargle', 8537490, 44)], { weight: 1 }, 'Salvador', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Doublade', 8537490, 46)], { weight: 1 }, 'Cordelia', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Raichu', 8537490, 42),
        new GymPokemon('Golduck', 8537490, 42),
        new GymPokemon('Marowak', 8537490, 43),
    ], { weight: 1 }, 'Neil', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Graveler', 8537490, 40),
        new GymPokemon('Graveler', 8537490, 41),
        new GymPokemon('Carbink', 8537490, 42),
    ], { weight: 1 }, 'Alain'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Relicanth', 8537490, 42),
        new GymPokemon('Rhydon', 8537490, 42),
    ], { weight: 1 }, 'Delmon'),
    new DungeonTrainer('Brains & Brawn', [
        new GymPokemon('Grumpig', 8537490, 44),
        new GymPokemon('Hariyama', 8537490, 46),
    ], { weight: 1 }, 'Eoin & Wolf'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Scrafty', 8537490, 43),
        new GymPokemon('Throh', 8537490, 44),
    ], { weight: 1 }, 'Alonzo'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Sawk', 8537490, 43),
        new GymPokemon('Mienshao', 8537490, 44),
    ], { weight: 1 }, 'Kinsey'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Gurdurr', 8537490, 46)], { weight: 1 }, 'Kenji'),
    new DungeonTrainer('Hiker', [new GymPokemon('Probopass', 8537490, 44)], { weight: 1 }, 'Brent'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Medicham', 8537490, 46)], { weight: 1 }, 'Gabrielle'),
    new DungeonTrainer('Team Flare Grunt', [
        new GymPokemon('Golbat', 8537490, 42),
        new GymPokemon('Manectric', 8537490, 42),
    ], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'xClick' },
        { loot: 'Oran' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'White Shard' },
    ],
    epic: [
        { loot: 'Icicle Plate' },
        { loot: 'Meadow Plate' },
        { loot: 'Insect Plate' },
        { loot: 'Iron Plate' },
        { loot: 'Duskball' },
    ],
    legendary: [
        { loot: 'LargeRestore', weight: 2 },
        { loot: 'Star Piece' },
        { loot: 'Never_Melt_Ice' },
        { loot: 'Abomasite', ignoreDebuff: true },
    ],
    mythic: [{ loot: 'Heart Scale' }],
}, 8537490, [
    new DungeonTrainer('Team Flare Mable', [new GymPokemon('Houndoom', 87365830, 48)], { weight: 1 }),
    new DungeonBossPokemon('Abomasnow', 85376500, 50, { hide: true, requirement: new QuestLineStepCompletedRequirement('A Beautiful World', 17) }),
    new DungeonBossPokemon('Vivillon (Icy Snow)', 96662023, 60, {
        hide: true,
        requirement: new OneFromManyRequirement([
            new MultiRequirement([
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 32),
                new QuestLineStepCompletedRequirement('The Great Vivillon Hunt!', 33, GameConstants.AchievementOption.less),
            ]),
            new MultiRequirement([
                new ObtainedPokemonRequirement('Vivillon (Icy Snow)'),
                new SpecialEventRequirement('Lunar New Year'),
            ]),
        ])
    }),
], 665500, 15);
dungeonList['Team Flare Secret HQ'] = new Dungeon('Team Flare Secret HQ', [
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Toxicroak', 8739480, 50)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Liepard', 8739480, 48)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Manectric', 8739480, 50)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Mightyena', 8739480, 48)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Houndoom', 8739480, 50)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Grunt', [new GymPokemon('Scrafty', 8739480, 48)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [
        new GymPokemon('Liepard', 8739480, 47),
        new GymPokemon('Manectric', 8739480, 48),
    ], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [
        new GymPokemon('Mightyena', 8739480, 47),
        new GymPokemon('Houndoom', 8739480, 48),
    ], { weight: 2 }, undefined, '(male)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Swalot', 8739480, 50)], { weight: 2 }, undefined, '(female)'),
    new DungeonTrainer('Team Flare Admin', [new GymPokemon('Golbat', 8739480, 50)], { weight: 2 }, undefined, '(male)'),
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Black Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [
        { loot: 'Pixie Plate' },
        { loot: 'Dread Plate' },
        { loot: 'Sky Plate' },
    ],
    legendary: [{ loot: 'Black_Glasses' }],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Team Flare Secret HQ')) }],
}, 8739480, [
    new DungeonTrainer('Team Flare Aliana', [
        new GymPokemon('Houndoom', 47416644, 48),
        new GymPokemon('Druddigon', 48374556, 49),
    ], { weight: 2, hide: true, requirement: new MultiRequirement([
            new QuestLineStepCompletedRequirement('A Beautiful World', 24),
            new QuestLineStepCompletedRequirement('A Beautiful World', 25, GameConstants.AchievementOption.less),
        ]) }),
    new DungeonTrainer('Team Flare Celosia', [
        new GymPokemon('Manectric', 47416644, 48),
        new GymPokemon('Drapion', 48374556, 49),
    ], { weight: 2, hide: true, requirement: new MultiRequirement([
            new QuestLineStepCompletedRequirement('A Beautiful World', 25),
            new QuestLineStepCompletedRequirement('A Beautiful World', 26, GameConstants.AchievementOption.less),
        ]) }),
    new DungeonTrainer('Team Flare Bryony', [
        new GymPokemon('Liepard', 47416644, 48),
        new GymPokemon('Bisharp', 48374556, 49),
    ], { weight: 2, hide: true, requirement: new MultiRequirement([
            new QuestLineStepCompletedRequirement('A Beautiful World', 26),
            new QuestLineStepCompletedRequirement('A Beautiful World', 27, GameConstants.AchievementOption.less),
        ]) }),
    new DungeonTrainer('Team Flare Mable', [
        new GymPokemon('Houndoom', 47416644, 48),
        new GymPokemon('Weavile', 48374556, 49),
    ], { weight: 2, hide: true, requirement: new MultiRequirement([
            new QuestLineStepCompletedRequirement('A Beautiful World', 27),
            new QuestLineStepCompletedRequirement('A Beautiful World', 28, GameConstants.AchievementOption.less),
        ]) }),
    new DungeonTrainer('Team Flare Lysandre', [
        new GymPokemon('Mienshao', 22464940, 47),
        new GymPokemon('Honchkrow', 22564950, 47),
        new GymPokemon('Pyroar', 23375580, 49),
        new GymPokemon('Gyarados', 27385730, 51),
    ], { weight: 2, hide: true, requirement: new MultiRequirement([
            new QuestLineStepCompletedRequirement('A Beautiful World', 28),
            new QuestLineStepCompletedRequirement('A Beautiful World', 33, GameConstants.AchievementOption.less),
        ]) }),
    new DungeonTrainer('Team Flare Boss Lysandre', [
        new GymPokemon('Mienshao', 22464940, 47),
        new GymPokemon('Honchkrow', 22564950, 47),
        new GymPokemon('Pyroar', 23375580, 49),
        new GymPokemon('Mega Gyarados', 27385730, 51),
    ], { weight: 3, hide: true, requirement: new QuestLineStepCompletedRequirement('A Beautiful World', 33) }),
    new DungeonBossPokemon('Xerneas', 93659460, 100, { requirement: new QuestLineStepCompletedRequirement('A Beautiful World', 31) }),
    new DungeonBossPokemon('Yveltal', 93659450, 100, { requirement: new QuestLineStepCompletedRequirement('A Beautiful World', 31) }),
], 675000, 16);
dungeonList['Terminus Cave'] = new Dungeon('Terminus Cave', [
    { pokemon: 'Sandslash', options: { weight: 3.27 } },
    { pokemon: 'Graveler', options: { weight: 3.27 } },
    { pokemon: 'Pupitar', options: { weight: 3.27 } },
    { pokemon: 'Lairon', options: { weight: 3.27 } },
    { pokemon: 'Durant', options: { weight: 3.27 } },
    { pokemon: 'Geodude', options: { weight: 3.27 } },
    { pokemon: 'Larvitar', options: { weight: 3.27 } },
    { pokemon: 'Aron', options: { weight: 3.27 } },
    new DungeonTrainer('Worker', [
        new GymPokemon('Graveler', 8924330, 46),
        new GymPokemon('Graveler', 8924330, 47),
        new GymPokemon('Golem', 8924330, 48),
    ], { weight: 1 }, 'Narek', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Steelix', 8924330, 48),
        new GymPokemon('Boldore', 8924330, 48),
    ], { weight: 1 }, 'Bergin'),
    new DungeonTrainer('Hiker', [new GymPokemon('Rhydon', 8924330, 50)], { weight: 1 }, 'Aaron'),
    new DungeonTrainer('Worker', [new GymPokemon('Octillery', 8924330, 50)], { weight: 1 }, 'Dimitri', '(male)'),
    new DungeonTrainer('Worker', [new GymPokemon('Probopass', 8924330, 50)], { weight: 1 }, 'Yusif', '(male)'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Throh', 8924330, 49),
        new GymPokemon('Conkeldurr', 8924330, 50),
    ], { weight: 1 }, 'Andrea'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Toxicroak', 8924330, 49),
        new GymPokemon('Sawk', 8924330, 50),
    ], { weight: 1 }, 'Gunnar'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Medicham', 8924330, 48),
        new GymPokemon('Hawlucha', 8924330, 51),
    ], { weight: 1 }, 'Hailey'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Hariyama', 8924330, 52)], { weight: 1 }, 'Ricardo'),
], {
    common: [
        { loot: 'xAttack', weight: 2 },
        { loot: 'Pokeball' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Crimson Shard' },
    ],
    epic: [
        { loot: 'Iron Plate' },
        { loot: 'Earth Plate' },
        { loot: 'Draco Plate' },
        { loot: 'Duskball' },
    ],
    legendary: [
        { loot: 'Star Piece', weight: 2 },
        { loot: 'Heat Rock' },
        { loot: 'LargeRestore' },
    ],
}, 8924330, [
    new DungeonTrainer('Pokémon Rangers', [
        new GymPokemon('Nidoqueen', 46659450, 51),
        new GymPokemon('Nidoking', 46654990, 51),
    ], { weight: 3 }, 'Fern & Lee'),
    new DungeonBossPokemon('Zygarde', 92485360, 70, { requirement: new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion) }),
], 700000, 18);
dungeonList['Pokémon Village'] = new Dungeon('Pokémon Village', ['Jigglypuff', 'Poliwhirl', 'Noctowl', 'Lombre', 'Gothorita', 'Amoonguss'], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Rawst' },
        { loot: 'Chesto' },
        { loot: 'Aguav' },
        { loot: 'Wiki' },
        { loot: 'Garbodor' },
        { loot: 'Banette' },
    ],
    rare: [{ loot: 'Pink Shard' }],
    epic: [
        { loot: 'Pixie Plate' },
        { loot: 'Repeatball' },
    ],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Fairy_Feather' },
    ],
    mythic: [{ loot: 'Quick_Powder' }],
}, 9003000, [
    new DungeonBossPokemon('Ditto', 94836530, 50),
    new DungeonBossPokemon('Zoroark', 95743340, 50),
    new DungeonTrainer('Anomaly Mewtwo', [new GymPokemon('Mega Mewtwo X', 120000000, 70)], { hide: true, requirement: new QuestLineCompletedRequirement('An Unrivaled Power'), hideTrainer: true }, undefined, 'X'),
    new DungeonTrainer('Anomaly Mewtwo', [new GymPokemon('Mega Mewtwo Y', 120000000, 70)], { hide: true, requirement: new MultiRequirement([
            new QuestLineStepCompletedRequirement('An Unrivaled Power', 16),
            new QuestLineCompletedRequirement('An Unrivaled Power', GameConstants.AchievementOption.less),
        ]), hideTrainer: true }, undefined, 'Y'),
], 725000, 20);
dungeonList['Victory Road Kalos'] = new Dungeon('Victory Road Kalos', [
    { pokemon: 'Haunter', options: { weight: 3.27 } },
    { pokemon: 'Graveler', options: { weight: 3.27 } },
    { pokemon: 'Lickitung', options: { weight: 3.27 } },
    { pokemon: 'Gurdurr', options: { weight: 3.27 } },
    { pokemon: 'Druddigon', options: { weight: 3.27 } },
    { pokemon: 'Zweilous', options: { weight: 3.27 } },
    { pokemon: 'Geodude', options: { weight: 3.27 } },
    { pokemon: 'Lombre', options: { weight: 3.27 } },
    { pokemon: 'Floatzel', options: { weight: 3.27 } },
    { pokemon: 'Poliwhirl', options: { weight: 3.27 } },
    { pokemon: 'Poliwag', options: { weight: 3.27 } },
    { pokemon: 'Noibat', options: { weight: 3.27 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 3.27 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 3.27 } },
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Carbink', 3500000, 56),
        new GymPokemon('Raichu', 3500000, 56),
        new GymPokemon('Kingdra', 3500000, 57),
    ], { weight: 1 }, 'Robbie', '(male)'),
    new DungeonTrainer('Ace Trainer', [new GymPokemon('Weavile', 3500000, 60)], { weight: 1 }, 'Alanza', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Steelix', 3500000, 56),
        new GymPokemon('Electrode', 3500000, 56),
        new GymPokemon('Kangaskhan', 3500000, 57),
    ], { weight: 1 }, 'Bence', '(male)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Machamp', 3500000, 60)], { weight: 1 }, 'Markus'),
    new DungeonTrainer('Battle Girl', [
        new GymPokemon('Hawlucha', 3500000, 57),
        new GymPokemon('Mienshao', 3500000, 58),
    ], { weight: 1 }, 'Veronique'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Haxorus', 3500000, 58)], { weight: 1 }, 'Farid', '(male)'),
    new DungeonTrainer('Battle Girl', [new GymPokemon('Medicham', 3500000, 60)], { weight: 1 }, 'Sigrid'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Pangoro', 3500000, 57),
        new GymPokemon('Heracross', 3500000, 58),
    ], { weight: 1 }, 'Ander'),
    new DungeonTrainer('Psychic', [new GymPokemon('Espeon', 3500000, 58)], { weight: 1 }, 'William', '(male)'),
    new DungeonTrainer('Brains & Brawn', [
        new GymPokemon('Medicham', 3500000, 58),
        new GymPokemon('Gallade', 3500000, 60),
    ], { weight: 1 }, 'Arman & Hugo'),
    new DungeonTrainer('Fairy Tale Girl', [
        new GymPokemon('Azumarill', 3500000, 56),
        new GymPokemon('Florges (Red)', 3500000, 56),
    ], { weight: 1 }, 'Corinne'),
    new DungeonTrainer('Hex Maniac', [new GymPokemon('Gourgeist (Average)', 3500000, 58)], { weight: 1 }, 'Raziah'),
    new DungeonTrainer('Pokémon Ranger', [
        new GymPokemon('Slowbro', 3500000, 57),
        new GymPokemon('Altaria', 3500000, 57),
    ], { weight: 1 }, 'Petra', '(female)'),
    new DungeonTrainer('Veteran', [new GymPokemon('Talonflame', 3500000, 61)], { weight: 1 }, 'Inga', '(female)'),
    new DungeonTrainer('Pokémon Ranger', [new GymPokemon('Crobat', 3500000, 59)], { weight: 1 }, 'Ralf', '(male)'),
    new DungeonTrainer('Black Belt', [
        new GymPokemon('Banette', 3500000, 57),
        new GymPokemon('Leafeon', 3500000, 59),
    ], { weight: 1 }, 'Gerard'),
    new DungeonTrainer('Artist', [new GymPokemon('Smeargle', 3500000, 58)], { weight: 1 }, 'Vincent', '(male)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Torkoal', 3500000, 56),
        new GymPokemon('Golem', 3500000, 56),
    ], { weight: 1 }, 'Corwin'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
        { loot: 'Black Shard' },
        { loot: 'White Shard' },
        { loot: 'Pink Shard' },
        { loot: 'Duskball' },
    ],
    legendary: [
        { loot: 'Star Piece', weight: 2 },
        { loot: 'Smooth Rock' },
        { loot: 'Revive' },
        { loot: 'Odd Keystone' },
        { loot: 'Rock_Incense' },
        { loot: 'Damp Rock' },
        { loot: 'LargeRestore' },
        { loot: 'Garchompite', ignoreDebuff: true },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Heart Scale' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Victory Road Kalos')) },
    ],
}, 9003000, [
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Magcargo', 48593850, 57),
        new GymPokemon('Scizor', 49355840, 58),
    ], { weight: 1 }, 'Michele', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Trevenant', 48329640, 57),
        new GymPokemon('Gigalith', 49355820, 59),
    ], { weight: 1 }, 'Timeo', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Glaceon', 48395740, 57),
        new GymPokemon('Snorlax', 49265840, 59),
    ], { weight: 1 }, 'Catrina', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Skarmory', 32395730, 55),
        new GymPokemon('Umbreon', 33254840, 55),
        new GymPokemon('Alakazam', 35385940, 57),
    ], { weight: 1 }, 'Gilles', '(male)'),
], 750500, 21);
//Unknown Dungeon? Contains Mewtwo.
// Alola Dungeons
dungeonList['Trainers\' School'] = new Dungeon('Trainers\' School', [
    { pokemon: 'Alolan Meowth', options: { weight: 2 } },
    { pokemon: 'Abra', options: { weight: 2 } },
    { pokemon: 'Magnemite', options: { weight: 2 } },
    { pokemon: 'Alolan Grimer', options: { weight: 2 } },
    { pokemon: 'Wingull', options: { weight: 2 } },
    { pokemon: 'Mime Jr.', options: { weight: 2 } },
    { pokemon: 'Zorua', options: { weight: 2 } },
    { pokemon: 'Furfrou', options: { weight: 2 } },
    new DungeonTrainer('Youth Athlete', [new GymPokemon('Bonsly', 11407338, 7)], { weight: 1 }, 'Hiromi', '(female)'),
    new DungeonTrainer('Preschooler', [new GymPokemon('Metapod', 11407338, 7)], { weight: 1 }, 'Mia', '(female)'),
    new DungeonTrainer('Youngster', [new GymPokemon('Alolan Grimer', 11407338, 7)], { weight: 1 }, 'Joey'),
    new DungeonTrainer('Rising Star', [new GymPokemon('Ekans', 11407338, 8)], { weight: 1 }, 'Joseph', '(male)'),
], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Pokeball' },
        { loot: 'Oran' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [{ loot: 'Flame Plate' }],
    legendary: [{ loot: 'SmallRestore' }],
}, 11407338, [
    new DungeonTrainer('Teacher', [
        new GymPokemon('Litten', 19012230, 10),
        new GymPokemon('Popplio', 19012230, 10),
        new GymPokemon('Rowlet', 19012230, 10),
    ], { weight: 1 }, 'Emily', '(gen7)'),
], 757500, 18);
dungeonList['Hau\'oli Cemetery'] = new Dungeon('Hau\'oli Cemetery', [
    { pokemon: 'Zubat', options: { weight: 4 } },
    { pokemon: 'Gastly', options: { weight: 4 } },
    { pokemon: 'Misdreavus', options: { weight: 4 } },
    new DungeonTrainer('Pokémon Breeder', [new GymPokemon('Pikachu', 11587450, 9)], { weight: 1 }, 'Ikue', '(female)'),
    new DungeonTrainer('Office Worker', [new GymPokemon('Pikipek', 11587450, 9)], { weight: 1 }, 'Jeremy', '(male)'),
    new DungeonTrainer('Preschooler', [new GymPokemon('Happiny', 11587450, 8)], { weight: 1 }, 'Malia', '(female)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [{ loot: 'Purple Shard' }],
    epic: [{ loot: 'Spooky Plate' }],
    legendary: [{ loot: 'MediumRestore' }],
}, 11587450, [
    new DungeonBossPokemon('Drifloon', 28968625, 9),
    new DungeonBossPokemon('Litwick', 28968625, 9, { hide: true, requirement: new DayOfWeekRequirement(GameConstants.DayOfWeek.Saturday) }),
], 800000, 2);
dungeonList['Verdant Cavern'] = new Dungeon('Verdant Cavern', [
    { pokemon: 'Alolan Rattata', options: { weight: 0.75 } },
    { pokemon: 'Zubat', options: { weight: 0.75 } },
    { pokemon: 'Alolan Diglett', options: { weight: 0.75 } },
    { pokemon: 'Noibat', options: { weight: 0.75 } },
    { pokemon: 'Yungoos', options: { weight: 0.75 } },
    { pokemon: 'Pheromosa', options: { weight: 0.75, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 5) } },
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Drowzee', 11595673, 11)], { weight: 0.5 }, 'A', '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Drowzee', 11595673, 11)], { weight: 0.5 }, 'B', '(male)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
    ],
    rare: [
        { loot: 'Black Shard' },
        { loot: 'White Shard' },
    ],
    epic: [{ loot: 'Meadow Plate' }],
    legendary: [
        { loot: 'MediumRestore' },
        { loot: 'Revive' },
    ],
}, 11595673, [
    new DungeonBossPokemon('Alolan Raticate', 57978365, 12),
    new DungeonBossPokemon('Gumshoos', 57978365, 12),
    new DungeonBossPokemon('Totem Raticate', 82543791, 70, { hide: true, requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Champion_Stamp), new QuestLineCompletedRequirement('Welcome to Paradise, Cousin!')]) }),
    new DungeonBossPokemon('Totem Gumshoos', 82543791, 70, { hide: true, requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Champion_Stamp), new QuestLineCompletedRequirement('Welcome to Paradise, Cousin!')]) }),
    new DungeonTrainer('Trial Site', [
        new GymPokemon('Yungoos', 23191346, 10, new OneFromManyRequirement([
            new DayCyclePartRequirement([1]),
            new DayCyclePartRequirement([2]),
        ])),
        new GymPokemon('Totem Gumshoos', 34787019, 12, new OneFromManyRequirement([
            new DayCyclePartRequirement([1]),
            new DayCyclePartRequirement([2]),
        ])),
        new GymPokemon('Alolan Rattata', 23191346, 10, new OneFromManyRequirement([
            new DayCyclePartRequirement([0]),
            new DayCyclePartRequirement([3]),
        ])),
        new GymPokemon('Totem Raticate', 34787019, 12, new OneFromManyRequirement([
            new DayCyclePartRequirement([0]),
            new DayCyclePartRequirement([3]),
        ])),
    ], { hide: true, weight: 10, requirement: new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 5, GameConstants.AchievementOption.less) }, 'of Verdant Cavern'),
], 805000, 2);
dungeonList['Melemele Meadow'] = new Dungeon('Melemele Meadow', [
    { pokemon: 'Caterpie', options: { weight: 0.55 } },
    { pokemon: 'Metapod', options: { weight: 0.55 } },
    { pokemon: 'Butterfree', options: { weight: 0.55 } },
    { pokemon: 'Cottonee', options: { weight: 0.55 } },
    { pokemon: 'Petilil', options: { weight: 0.55 } },
    { pokemon: 'Cutiefly', options: { weight: 0.55 } },
    { pokemon: 'Buzzwole', options: { weight: 0.55, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 5) } },
    new DungeonTrainer('Actor', [new GymPokemon('Oricorio (Pom-Pom)', 11769270, 12)], { weight: 1 }, 'Meredith'),
], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [{ loot: 'Meadow Plate' }],
}, 11769270, [
    new DungeonBossPokemon('Flabébé (Red)', 58846350, 12),
    new DungeonBossPokemon('Oricorio (Pom-Pom)', 58846350, 12),
], 825000, 3);
dungeonList['Seaward Cave'] = new Dungeon('Seaward Cave', ['Zubat', 'Psyduck', 'Seel', 'Magikarp', 'Smoochum'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Lureball' },
        { loot: 'Diveball' },
    ],
    legendary: [
        { loot: 'Star Piece' },
        { loot: 'Never_Melt_Ice' },
    ],
    mythic: [{ loot: 'Max Revive' }],
}, 11845338, [
    new DungeonBossPokemon('Delibird', 59226690, 12),
    new DungeonBossPokemon('Barboach', 59226690, 17),
    new DungeonBossPokemon('Squirtle', 59226690, 12, { hide: true, requirement: new DayOfWeekRequirement(GameConstants.DayOfWeek.Monday) }),
    new DungeonBossPokemon('Totodile', 59226690, 12, { hide: true, requirement: new DayOfWeekRequirement(GameConstants.DayOfWeek.Monday) }),
], 830000, 3);
dungeonList['Ten Carat Hill'] = new Dungeon('Ten Carat Hill', [
    { pokemon: 'Zubat', options: { weight: 1 } },
    { pokemon: 'Machop', options: { weight: 1 } },
    { pokemon: 'Psyduck', options: { weight: 1 } },
    { pokemon: 'Mawile', options: { weight: 1 } },
    { pokemon: 'Roggenrola', options: { weight: 1 } },
    { pokemon: 'Necrozma', options: { weight: 0.25, hide: true, requirement: new MultiRequirement([
                new QuestLineCompletedRequirement('Ultra Beast Hunt'),
                new StatisticRequirement(['pokemonEncountered', PokemonHelper.getPokemonByName('Necrozma').id], 1, 'Must have encountered Necrozma before.'),
            ]) } },
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'xClick' },
    ],
    rare: [{ loot: 'Cyan Shard' }],
    epic: [{ loot: 'MediumRestore' }],
    legendary: [
        { loot: 'Star Piece' },
        { loot: 'Sharp_Beak' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Ten Carat Hill')) }],
}, 11897821, [
    new DungeonBossPokemon('Spinda', 59489105, 14),
    new DungeonBossPokemon('Carbink', 59489105, 14),
    new DungeonBossPokemon('Rockruff', 59489105, 14),
    new DungeonBossPokemon('Onix', 59489105, 14, { hide: true, requirement: new DayOfWeekRequirement(GameConstants.DayOfWeek.Tuesday) }),
    new DungeonBossPokemon('Deino', 59489105, 13, { hide: true, requirement: new DayOfWeekRequirement(GameConstants.DayOfWeek.Tuesday) }),
    new DungeonTrainer('Trial Site', [
        new GymPokemon('Rockruff', 59489105, 30, new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Vast Poni Canyon'), GameConstants.AchievementOption.less)),
        new GymPokemon('Rockruff', 23795642, 30, new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Vast Poni Canyon'))),
        new GymPokemon('Hakamo-o', 35693463, 36, new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Vast Poni Canyon'))),
    ], { hide: true, weight: 10, requirement: new QuestLineCompletedRequirement('Welcome to Paradise, Cousin!', GameConstants.AchievementOption.less) }, 'of Ten Carat Hill'),
], 835000, 3);
dungeonList['Pikachu Valley'] = new Dungeon('Pikachu Valley', ['Pikachu', 'Pichu', 'Plusle', 'Minun', 'Pachirisu', 'Emolga', 'Dedenne'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Cheri' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Zap Plate', weight: 2 },
        { loot: 'Pikachu (Partner Cap)', ignoreDebuff: true, requirement: new TemporaryBattleRequirement('Ash Ketchum Alola') },
    ],
    legendary: [{ loot: 'Magnet' }],
}, 11952804, [
    new DungeonBossPokemon('Pikachu (Original Cap)', 59764020, 15),
    new DungeonBossPokemon('Pikachu (Hoenn Cap)', 59764020, 15),
    new DungeonBossPokemon('Pikachu (Sinnoh Cap)', 59764020, 15),
    new DungeonBossPokemon('Pikachu (Unova Cap)', 59764020, 15),
    new DungeonBossPokemon('Pikachu (Kalos Cap)', 59764020, 15),
    new DungeonBossPokemon('Pikachu (Alola Cap)', 59764020, 15, { hide: true, requirement: new GymBadgeRequirement(BadgeEnums.Champion_Stamp) }),
    new DungeonBossPokemon('Pikachu (World Cap)', 59764020, 15, { hide: true, requirement: new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion) }),
], 850000, 4);
dungeonList['Paniola Ranch'] = new Dungeon('Paniola Ranch', [
    { pokemon: 'Mareep', options: { weight: 6.66 } },
    { pokemon: 'Lillipup', options: { weight: 6.66 } },
    { pokemon: 'Mudbray', options: { weight: 6.66 } },
    new DungeonTrainer('Madame', [new GymPokemon('Carbink', 12161328, 15)], { weight: 1 }, 'Elizabeth'),
    new DungeonTrainer('Pokémon Breeder', [new GymPokemon('Tauros', 12161328, 15)], { weight: 1 }, 'Wesley', '(male)'),
    new DungeonTrainer('Pokémon Breeder', [new GymPokemon('Mudbray', 12161328, 15)], { weight: 1 }, 'Glenn', '(male)'),
    new DungeonTrainer('Gentleman', [new GymPokemon('Sableye', 12161328, 15)], { weight: 1 }, 'Gerald'),
    new DungeonTrainer('Rising Star', [
        new GymPokemon('Lillipup', 12161328, 15),
        new GymPokemon('Magnemite', 12161328, 16),
    ], { weight: 1 }, 'Micah', '(male)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'White Shard' },
    ],
    epic: [{ loot: 'Splash Plate' }],
    legendary: [
        { loot: 'LargeRestore' },
        { loot: 'Oval Stone' },
    ],
}, 12111328, [
    new DungeonBossPokemon('Tauros', 30278320, 15),
    new DungeonBossPokemon('Miltank', 30278320, 15),
], 855000, 4);
dungeonList['Brooklet Hill'] = new Dungeon('Brooklet Hill', [
    { pokemon: 'Paras', options: { weight: 1.43 } },
    { pokemon: 'Psyduck', options: { weight: 1.43 } },
    { pokemon: 'Poliwag', options: { weight: 1.43 } },
    { pokemon: 'Tentacool', options: { weight: 1.43 } },
    { pokemon: 'Goldeen', options: { weight: 1.43 } },
    { pokemon: 'Magikarp', options: { weight: 1.43 } },
    { pokemon: 'Wingull', options: { weight: 1.43 } },
    { pokemon: 'Surskit', options: { weight: 1.43 } },
    { pokemon: 'Feebas', options: { weight: 1.43 } },
    { pokemon: 'Finneon', options: { weight: 1.43 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 1.43 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 1.43 } },
    { pokemon: 'Alomomola', options: { weight: 1.43 } },
    { pokemon: 'Dewpider', options: { weight: 1.43 } },
    { pokemon: 'Morelull', options: { weight: 1.43, hide: true, requirement: new ObtainedPokemonRequirement('Morelull') } },
    { pokemon: 'Marill', options: { weight: 1.43, hide: true, requirement: new DayOfWeekRequirement(GameConstants.DayOfWeek.Saturday) } },
    { pokemon: 'Marshtomp', options: { weight: 1.43, hide: true, requirement: new DayOfWeekRequirement(GameConstants.DayOfWeek.Saturday) } },
    new DungeonTrainer('Fisherman', [new GymPokemon('Tentacool', 12138060, 16)], { weight: 1 }, 'Hal'),
    new DungeonTrainer('Fisherman', [
        new GymPokemon('Barboach', 12138060, 16),
        new GymPokemon('Goldeen', 12138060, 16),
    ], { weight: 1 }, 'Ernest'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Fletchling', 12138060, 16)], { weight: 1 }, 'Mikiko', '(female)'),
    new DungeonTrainer('Fisherman', [new GymPokemon('Poliwag', 12138060, 16)], { weight: 1 }, 'Herbert'),
    new DungeonTrainer('Fisherman', [
        new GymPokemon('Magikarp', 12138060, 16),
        new GymPokemon('Magikarp', 12138060, 16),
        new GymPokemon('Magikarp', 12138060, 16),
    ], { weight: 1 }, 'Carl'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Lime Shard' },
    ],
    epic: [
        { loot: 'Splash Plate' },
        { loot: 'Diveball' },
    ],
    legendary: [{ loot: 'Mystic_Water' }],
    mythic: [{ loot: 'Heart Scale' }],
}, 12138060, [
    new DungeonBossPokemon('Wishiwashi (School)', 60690300, 20),
    new DungeonBossPokemon('Araquanid', 60690300, 20),
    new DungeonBossPokemon('Totem Wishiwashi', 82543791, 60, { hide: true, requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Champion_Stamp), new QuestLineCompletedRequirement('Symbiotic Relations')]) }),
    new DungeonBossPokemon('Totem Araquanid', 82543791, 60, { hide: true, requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Champion_Stamp), new QuestLineCompletedRequirement('Symbiotic Relations')]) }),
    new DungeonTrainer('Trial Site', [
        new GymPokemon('Masquerain', 15172575, 18, new MultiRequirement([
            new OneFromManyRequirement([
                new DayCyclePartRequirement([1]),
                new DayCyclePartRequirement([2]),
            ]),
            new WeatherRequirement([WeatherType.Clear, WeatherType.Overcast, WeatherType.Snow, WeatherType.Hail, WeatherType.Blizzard, WeatherType.Harsh_Sunlight, WeatherType.Sandstorm, WeatherType.Fog, WeatherType.Windy]),
        ])),
        new GymPokemon('Dewpider', 15172575, 18, new MultiRequirement([
            new OneFromManyRequirement([
                new DayCyclePartRequirement([1]),
                new DayCyclePartRequirement([2]),
            ]),
            new WeatherRequirement([WeatherType.Clear, WeatherType.Overcast, WeatherType.Snow, WeatherType.Hail, WeatherType.Blizzard, WeatherType.Harsh_Sunlight, WeatherType.Sandstorm, WeatherType.Fog, WeatherType.Windy]),
        ])),
        new GymPokemon('Totem Araquanid', 30345150, 20, new MultiRequirement([
            new OneFromManyRequirement([
                new DayCyclePartRequirement([1]),
                new DayCyclePartRequirement([2]),
            ]),
            new WeatherRequirement([WeatherType.Clear, WeatherType.Overcast, WeatherType.Snow, WeatherType.Hail, WeatherType.Blizzard, WeatherType.Harsh_Sunlight, WeatherType.Sandstorm, WeatherType.Fog, WeatherType.Windy]),
        ])),
        new GymPokemon('Alomomola', 18207090, 18, new OneFromManyRequirement([
            new DayCyclePartRequirement([0]),
            new DayCyclePartRequirement([3]),
            new WeatherRequirement([WeatherType.Rain, WeatherType.Thunderstorm]),
        ])),
        new GymPokemon('Wishiwashi (Solo)', 12138060, 18, new OneFromManyRequirement([
            new DayCyclePartRequirement([0]),
            new DayCyclePartRequirement([3]),
            new WeatherRequirement([WeatherType.Rain, WeatherType.Thunderstorm]),
        ])),
        new GymPokemon('Totem Wishiwashi', 30345150, 20, new OneFromManyRequirement([
            new DayCyclePartRequirement([0]),
            new DayCyclePartRequirement([3]),
            new WeatherRequirement([WeatherType.Rain, WeatherType.Thunderstorm]),
        ])),
    ], { hide: true, weight: 10, requirement: new QuestLineStepCompletedRequirement('Symbiotic Relations', 1, GameConstants.AchievementOption.less) }, 'of Brooklet Hill'),
], 875000, 5);
dungeonList['Wela Volcano Park'] = new Dungeon('Wela Volcano Park', [
    { pokemon: 'Cubone', options: { weight: 1.7 } },
    { pokemon: 'Kangaskhan', options: { weight: 1.7 } },
    { pokemon: 'Magmar', options: { weight: 1.7 } },
    { pokemon: 'Magby', options: { weight: 1.7 } },
    { pokemon: 'Fletchling', options: { weight: 1.7 } },
    { pokemon: 'Salandit', options: { weight: 1.7 } },
    { pokemon: 'Nihilego', options: { weight: 1.7, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 3) } },
    new DungeonTrainer('Sightseer', [new GymPokemon('Meowth', 12896392, 19)], { weight: 1 }, 'Mariah', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Noibat', 12896392, 20),
        new GymPokemon('Kadabra', 12896392, 21),
    ], { weight: 1 }, 'Jim', '(male)'),
    new DungeonTrainer('Hiker', [new GymPokemon('Roggenrola', 12896392, 19)], { weight: 1 }, 'Calhoun'),
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Rawst' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Purple Shard' },
    ],
    epic: [
        { loot: 'Flame Plate' },
        { loot: 'Quickball' },
    ],
    legendary: [{ loot: 'Charcoal' }],
}, 12896392, [
    new DungeonBossPokemon('Alolan Marowak', 64481960, 22),
    new DungeonBossPokemon('Salazzle', 64481960, 22),
    new DungeonBossPokemon('Totem Marowak', 82543791, 60, { hide: true, requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Champion_Stamp), new QuestLineCompletedRequirement('Symbiotic Relations')]) }),
    new DungeonBossPokemon('Totem Salazzle', 82543791, 60, { hide: true, requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Champion_Stamp), new QuestLineCompletedRequirement('Symbiotic Relations')]) }),
    new DungeonTrainer('Trial Site', [
        new GymPokemon('Salandit', 16120490, 20),
        new GymPokemon('Salandit', 16120490, 20),
        new GymPokemon('Totem Salazzle', 32240980, 22, new OneFromManyRequirement([
            new DayCyclePartRequirement([1]),
            new DayCyclePartRequirement([2]),
        ])),
        new GymPokemon('Totem Marowak', 32240980, 22, new OneFromManyRequirement([
            new DayCyclePartRequirement([0]),
            new DayCyclePartRequirement([3]),
        ])),
    ], { hide: true, weight: 10, requirement: new QuestLineStepCompletedRequirement('Symbiotic Relations', 4, GameConstants.AchievementOption.less) }, 'of Wela Volcano Park'),
], 900000, 7);
dungeonList['Lush Jungle'] = new Dungeon('Lush Jungle', [
    { pokemon: 'Metapod', options: { weight: 1 } },
    { pokemon: 'Paras', options: { weight: 1 } },
    { pokemon: 'Pinsir', options: { weight: 1 } },
    { pokemon: 'Hoothoot', options: { weight: 1 } },
    { pokemon: 'Bonsly', options: { weight: 1 } },
    { pokemon: 'Trumbeak', options: { weight: 1 } },
    { pokemon: 'Fomantis', options: { weight: 1 } },
    { pokemon: 'Morelull', options: { weight: 1, hide: true, requirement: new ObtainedPokemonRequirement('Morelull') } },
    { pokemon: 'Bounsweet', options: { weight: 1 } },
    { pokemon: 'Steenee', options: { weight: 1 } },
    { pokemon: 'Comfey', options: { weight: 1 } },
    { pokemon: 'Oranguru', options: { weight: 1 } },
    { pokemon: 'Passimian', options: { weight: 1 } },
    { pokemon: 'Xurkitree', options: { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 9) } }, // hide UBs because they show up in too many dungeons and will distract the players
], {
    common: [
        { loot: 'xClick' },
        { loot: 'xAttack' },
        { loot: 'Mago' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Lime Shard' },
    ],
    epic: [
        { loot: 'Meadow Plate' },
        { loot: 'Nestball' },
    ],
    legendary: [{ loot: 'Miracle_Seed' }],
}, 13090332, [
    new DungeonBossPokemon('Lurantis', 65451660, 24),
    new DungeonBossPokemon('Totem Lurantis', 82543791, 60, { hide: true, requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Champion_Stamp), new QuestLineCompletedRequirement('Symbiotic Relations')]) }),
    new DungeonTrainer('Trial Site', [
        new GymPokemon('Castform (Sunny)', 8181457, 22),
        new GymPokemon('Trumbeak', 8181457, 22),
        new GymPokemon('Comfey', 8181457, 22),
        new GymPokemon('Kecleon', 8181457, 22),
        new GymPokemon('Totem Lurantis', 32725830, 24),
    ], { hide: true, weight: 10, requirement: new QuestLineStepCompletedRequirement('Symbiotic Relations', 5, GameConstants.AchievementOption.less) }, 'of Lush Jungle'),
], 925000, 8);
dungeonList['Diglett\'s Tunnel'] = new Dungeon('Diglett\'s Tunnel', [
    { pokemon: 'Zubat', options: { weight: 6.5 } },
    { pokemon: 'Alolan Diglett', options: { weight: 6.5 } },
    { pokemon: 'Nihilego', options: { weight: 6.5, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 3) } },
    new DungeonTrainer('Worker', [new GymPokemon('Shieldon', 13215839, 22)], { weight: 1 }, 'Frank', '(male)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Alolan Diglett', 13215839, 22),
        new GymPokemon('Alolan Diglett', 13215839, 22),
    ], { weight: 1 }, 'Jeff', '(male)'),
    new DungeonTrainer('Worker', [new GymPokemon('Archen', 13215839, 22)], { weight: 1 }, 'Vaclav', '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Ekans', 13215839, 23)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Salandit', 13215839, 23)], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Earth Plate' },
        { loot: 'Duskball' },
    ],
    legendary: [{ loot: 'Soft_Sand' }],
}, 13215839, [new DungeonBossPokemon('Larvitar', 66079195, 23)], 930000, 8);
dungeonList['Memorial Hill'] = new Dungeon('Memorial Hill', [
    { pokemon: 'Zubat', options: { weight: 7.5 } },
    { pokemon: 'Gastly', options: { weight: 7.5 } },
    { pokemon: 'Phantump', options: { weight: 7.5 } },
    { pokemon: 'Xurkitree', options: { weight: 7.5, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 9) } },
    new DungeonTrainer('Preschooler', [
        new GymPokemon('Magby', 13286024, 23),
        new GymPokemon('Ledian', 13286024, 23),
    ], { weight: 1 }, 'Liam', '(male)'),
    new DungeonTrainer('Gentleman', [new GymPokemon('Jolteon', 13286024, 24)], { weight: 1 }, 'Smith'),
    new DungeonTrainer('Madame', [
        new GymPokemon('Furfrou', 13286024, 24),
        new GymPokemon('Comfey', 13286024, 24),
    ], { weight: 1 }, 'Sayuri'),
    new DungeonTrainer('Punk Girl', [new GymPokemon('Ariados', 13286024, 24)], { weight: 1 }, 'Melissa'),
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Purple Shard' },
    ],
    epic: [
        { loot: 'Spooky Plate' },
        { loot: 'Duskball' },
    ],
    legendary: [{ loot: 'Spell_Tag' }],
}, 13286024, [
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Alolan Raticate', 66430120, 24)], { weight: 1 }, undefined, '(male)'),
], 950000, 9);
dungeonList['Malie Garden'] = new Dungeon('Malie Garden', [
    { pokemon: 'Alolan Meowth', options: { weight: 1 } },
    { pokemon: 'Psyduck', options: { weight: 1 } },
    { pokemon: 'Poliwhirl', options: { weight: 1 } },
    { pokemon: 'Goldeen', options: { weight: 1 } },
    { pokemon: 'Magikarp', options: { weight: 1 } },
    { pokemon: 'Gyarados', options: { weight: 1 } },
    { pokemon: 'Ledian', options: { weight: 1 } },
    { pokemon: 'Ariados', options: { weight: 1 } },
    { pokemon: 'Masquerain', options: { weight: 1 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 1 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 1 } },
    { pokemon: 'Cottonee', options: { weight: 1 } },
    { pokemon: 'Petilil', options: { weight: 1 } },
    { pokemon: 'Araquanid', options: { weight: 1 } },
    { pokemon: 'Kartana', options: { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 11) } },
    { pokemon: 'Celesteela', options: { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 11) } },
    new DungeonTrainer('Sightseer', [new GymPokemon('Raticate', 13483476, 28)], { weight: 1 }, 'Mitch', '(male)'),
    new DungeonTrainer('Preschooler', [new GymPokemon('Cleffa', 13483476, 27)], { weight: 1 }, 'Nancy', '(female)'),
    new DungeonTrainer('Sightseer', [new GymPokemon('Raichu', 13483476, 28)], { weight: 1 }, 'Akali', '(female)'),
    new DungeonTrainer('Tourist Couple', [
        new GymPokemon('Alolan Vulpix', 13483476, 28),
        new GymPokemon('Vulpix', 13483476, 28),
    ], { weight: 1, requirement: new QuestLineStepCompletedRequirement('Child of the Stars', 2) }, 'Landon and Yuriko'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Black Shard' },
        { loot: 'Lime Shard' },
    ],
    epic: [
        { loot: 'Spooky Plate' },
        { loot: 'Luxuryball' },
    ],
    legendary: [{ loot: 'Rare Bone' }],
}, 13483476, [
    new DungeonBossPokemon('Alolan Persian', 76702881, 23),
    new DungeonTrainer('Tourist Couple', [
        new GymPokemon('Alolan Vulpix', 33708690, 28),
        new GymPokemon('Vulpix', 33708690, 28),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Child of the Stars', 2, GameConstants.AchievementOption.less) }, 'Landon and Yuriko'),
    new DungeonTrainer('Team Skull Boss', [
        new GymPokemon('Golisopod', 33708690, 34),
        new GymPokemon('Masquerain', 33708690, 34),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Child of the Stars', 2) }, 'Guzma', '(guzma)'),
], 975000, 21);
dungeonList['Hokulani Observatory'] = new Dungeon('Hokulani Observatory', ['Grubbin', 'Charjabug', 'Elekid', 'Electabuzz', 'Skarmory', 'Dedenne'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
    ],
    epic: [
        { loot: 'Zap Plate' },
        { loot: 'Iron Plate' },
    ],
    legendary: [{ loot: 'Quickball' }],
}, 13883676, [
    new DungeonBossPokemon('Vikavolt', 69418380, 29),
    new DungeonBossPokemon('Togedemaru', 69418380, 33),
    new DungeonBossPokemon('Totem Vikavolt', 82543791, 60, { hide: true, requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Champion_Stamp), new QuestLineCompletedRequirement('Child of the Stars')]) }),
    new DungeonBossPokemon('Totem Togedemaru', 82543791, 60, { hide: true, requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Champion_Stamp), new QuestLineCompletedRequirement('Child of the Stars')]) }),
    new DungeonTrainer('Trial Site', [
        new GymPokemon('Charjabug', 13883676, 28, new OneFromManyRequirement([
            new DayCyclePartRequirement([1]),
            new DayCyclePartRequirement([2]),
        ])),
        new GymPokemon('Charjabug', 20825514, 28, new OneFromManyRequirement([
            new DayCyclePartRequirement([1]),
            new DayCyclePartRequirement([2]),
        ])),
        new GymPokemon('Totem Vikavolt', 45121947, 29, new OneFromManyRequirement([
            new DayCyclePartRequirement([1]),
            new DayCyclePartRequirement([2]),
        ])),
        new GymPokemon('Dedenne', 17354595, 31, new OneFromManyRequirement([
            new DayCyclePartRequirement([0]),
            new DayCyclePartRequirement([3]),
        ])),
        new GymPokemon('Skarmory', 13883676, 32, new OneFromManyRequirement([
            new DayCyclePartRequirement([0]),
            new DayCyclePartRequirement([3]),
        ])),
        new GymPokemon('Totem Togedemaru', 27767352, 33, new OneFromManyRequirement([
            new DayCyclePartRequirement([0]),
            new DayCyclePartRequirement([3]),
        ])),
    ], { hide: true, weight: 10, requirement: new QuestLineStepCompletedRequirement('Child of the Stars', 2, GameConstants.AchievementOption.less) }, 'of Hokulani Observatory'),
], 1000000, 22);
dungeonList['Thrifty Megamart'] = new Dungeon('Thrifty Megamart', ['Golbat', 'Gastly', 'Haunter', 'Gengar', 'Shuppet', 'Banette', 'Jellicent', 'Klefki'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Purple Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [{ loot: 'Spooky Plate' }],
    mythic: [{ loot: 'Lum', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Thrifty Megamart')) }],
}, 14705422, [
    new DungeonBossPokemon('Mimikyu', 73527110, 35),
    new DungeonBossPokemon('Totem Mimikyu', 82543791, 60, { hide: true, requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Champion_Stamp), new QuestLineCompletedRequirement('Child of the Stars')]) }),
    new DungeonTrainer('Trial Site', [
        new GymPokemon('Gengar', 29410844, 27, new OneFromManyRequirement([
            new DayCyclePartRequirement([1]),
            new DayCyclePartRequirement([2]),
            new DayCyclePartRequirement([3]),
        ])),
        new GymPokemon('Haunter', 29410844, 27, new OneFromManyRequirement([
            new DayCyclePartRequirement([0]),
            new DayCyclePartRequirement([1]),
            new DayCyclePartRequirement([2]),
        ])),
        new GymPokemon('Jellicent', 29410844, 33, new OneFromManyRequirement([
            new DayCyclePartRequirement([0]),
            new DayCyclePartRequirement([1]),
            new DayCyclePartRequirement([3]),
        ])),
        new GymPokemon('Banette', 29410844, 32, new OneFromManyRequirement([
            new DayCyclePartRequirement([0]),
            new DayCyclePartRequirement([2]),
            new DayCyclePartRequirement([3]),
        ])),
        new GymPokemon('Totem Mimikyu', 36763555, 35),
    ], { hide: true, weight: 10, requirement: new QuestLineStepCompletedRequirement('Child of the Stars', 5, GameConstants.AchievementOption.less) }, 'of Thrifty Megamart'),
    new DungeonBossPokemon('Vivillon (Poké Ball)', 96662023, 60, {
        hide: true,
        requirement: new MultiRequirement([
            new ObtainedPokemonRequirement('Vivillon (Poké Ball)'),
            new SpecialEventRequirement('Lunar New Year'),
            new QuestLineCompletedRequirement('Child of the Stars'),
        ])
    }),
], 1025000, 14);
dungeonList['Ula\'ula Meadow'] = new Dungeon('Ula\'ula Meadow', [
    { pokemon: 'Ledian', options: { weight: 4 } },
    { pokemon: 'Ariados', options: { weight: 4 } },
    { pokemon: 'Cottonee', options: { weight: 4 } },
    { pokemon: 'Petilil', options: { weight: 4 } },
    { pokemon: 'Ribombee', options: { weight: 4 } },
    new DungeonTrainer('Dancer', [new GymPokemon('Floette (Red)', 15127052, 36)], { weight: 1 }, 'Mireille', '(female)'),
    new DungeonTrainer('Office Worker', [
        new GymPokemon('Torkoal', 15127052, 36),
        new GymPokemon('Whimsicott', 15127052, 36),
    ], { weight: 1 }, 'Michelle', '(female)'),
    new DungeonTrainer('Lass', [
        new GymPokemon('Sneasel', 15127052, 35),
        new GymPokemon('Komala', 15127052, 35),
    ], { weight: 1 }, 'Rylee'),
    new DungeonTrainer('Golfer', [
        new GymPokemon('Hariyama', 15127052, 39),
        new GymPokemon('Alakazam', 15127052, 39),
    ], { weight: 1 }, 'Dean', '(male)'),
    new DungeonTrainer('Actor', [new GymPokemon('Oricorio (Baile)', 15127052, 36)], { weight: 1 }, 'Meredith'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [{ loot: 'Flame Plate' }],
    legendary: [{ loot: 'Repeatball' }],
}, 15127052, [
    new DungeonBossPokemon('Floette (Red)', 75635260, 36),
    new DungeonBossPokemon('Oricorio (Baile)', 75635260, 36),
    new DungeonBossPokemon('Roselia', 75635260, 34, { hide: true, requirement: new DayOfWeekRequirement(GameConstants.DayOfWeek.Wednesday) }),
    new DungeonBossPokemon('Grotle', 75635260, 36, { hide: true, requirement: new DayOfWeekRequirement(GameConstants.DayOfWeek.Wednesday) }),
], 1050000, 16);
dungeonList['Po Town'] = new Dungeon('Po Town', [
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Spinarak', 15340576, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Trubbish', 15340576, 36)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Drowzee', 15340576, 37)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Alolan Raticate', 15340576, 37),
        new GymPokemon('Golbat', 15340576, 37),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Ekans', 15340576, 37),
        new GymPokemon('Salandit', 15340576, 37),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Fomantis', 15340576, 37),
        new GymPokemon('Mareanie', 15340576, 37),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Scraggy', 15340576, 40)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Drowzee', 15340576, 38)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Salandit', 15340576, 38),
        new GymPokemon('Fomantis', 15340576, 38),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Trubbish', 15340576, 38),
        new GymPokemon('Houndour', 15340576, 38),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Scraggy', 15340576, 38)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Alolan Rattata', 15340576, 38)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Alolan Raticate', 15340576, 38)], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Haunter', 15340576, 38),
        new GymPokemon('Alolan Grimer', 15340576, 38),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [
        new GymPokemon('Spinarak', 15340576, 38),
        new GymPokemon('Pawniard', 15340576, 38),
        new GymPokemon('Golbat', 15340576, 38),
    ], { weight: 1 }, undefined, '(female)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Lime Shard' },
    ],
    epic: [
        { loot: 'Insect Plate' },
        { loot: 'Toxic Plate' },
        { loot: 'Dread Plate' },
    ],
    legendary: [
        { loot: 'Max Revive' },
        { loot: 'Poison_Barb' },
    ],
}, 15340576, [
    new DungeonTrainer('Team Skull Boss', [
        new GymPokemon('Golisopod', 25567627, 41),
        new GymPokemon('Masquerain', 25567627, 41),
        new GymPokemon('Pinsir', 25567627, 41),
    ], { weight: 1 }, 'Guzma', '(guzma)'),
    new DungeonTrainer('Office Worker', [
        new GymPokemon('Elgyem', 38351440, 40),
        new GymPokemon('Metang', 38351440, 40),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Child of the Stars', 6) }, 'Royce', '(male)'),
], 1075000, 17);
dungeonList['Aether Foundation'] = new Dungeon('Aether Foundation', [
    new DungeonTrainer('Aether Foundation Employee', [
        new GymPokemon('Alolan Dugtrio', 15619682, 40),
        new GymPokemon('Toucannon', 15619682, 40),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aether Foundation Employee', [
        new GymPokemon('Kecleon', 15619682, 40),
        new GymPokemon('Stoutland', 15619682, 40),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Aether Foundation Employee', [
        new GymPokemon('Arbok', 15619682, 40),
        new GymPokemon('Lurantis', 15619682, 40),
    ], { weight: 1 }, undefined, '(female)'),
    new DungeonTrainer('Aether Foundation Employee', [
        new GymPokemon('Parasect', 15619682, 40),
        new GymPokemon('Drifblim', 15619682, 40),
        new GymPokemon('Sudowoodo', 15619682, 40),
    ], { weight: 0.75 }, undefined, '(male)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Primeape', 15619682, 40)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Arcanine', 15619682, 41)], { weight: 1 }, undefined, '(masked)'),
    new DungeonTrainer('Aether Foundation Employees', [
        new GymPokemon('Anorith', 15619682, 41),
        new GymPokemon('Lileep', 15619682, 41),
    ], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Aether Foundation Employees', [
        new GymPokemon('Magmar', 15619682, 42),
        new GymPokemon('Houndoom', 15619682, 42),
        new GymPokemon('Electabuzz', 15619682, 42),
        new GymPokemon('Manectric', 15619682, 42),
    ], { weight: 0.25 }, undefined, '(male)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Alolan Muk', 15619682, 41)], { weight: 1 }, undefined, '(masked)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Magneton', 15619682, 41)], { weight: 1 }, undefined, '(masked)'),
    new DungeonTrainer('Aether Foundation Employee', [new GymPokemon('Porygon2', 15619682, 41)], { weight: 1 }, undefined, '(masked)'),
    new DungeonTrainer('Aether Foundation Employees', [
        new GymPokemon('Huntail', 15619682, 41),
        new GymPokemon('Gorebyss', 15619682, 41),
    ], { weight: 1 }, undefined, '(both)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Golbat', 15619682, 42)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Alolan Raticate', 15619682, 42)], { weight: 1 }, undefined, '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Chesto' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
        { loot: 'Black Shard' },
        { loot: 'White Shard' },
        { loot: 'Pink Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Iron Ball' },
        { loot: 'Mind Plate' },
    ],
    legendary: [
        { loot: 'Max Revive' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Aether Foundation')) },
    ],
}, 15619682, [
    new DungeonTrainer('Dulse', [new GymPokemon('Poipole', 78098410, 47)], { weight: 0.25, hide: true, requirement: new QuestLineStepCompletedRequirement('Child of the Stars', 12, GameConstants.AchievementOption.less) }),
    new DungeonTrainer('Soliera', [new GymPokemon('Poipole', 78098410, 47)], { weight: 0.25, hide: true, requirement: new QuestLineStepCompletedRequirement('Child of the Stars', 12, GameConstants.AchievementOption.less) }),
    new DungeonTrainer('Aether Branch Chief', [
        new GymPokemon('Claydol', 26032803, 44),
        new GymPokemon('Bruxish', 26032803, 44),
        new GymPokemon('Hypno', 26032803, 44),
        new GymPokemon('You hateful little Trainer!', 26032803, 47, new MultiRequirement([new QuestLineCompletedRequirement('Eater of Light'), new SpecialEventRequirement('Hoopa Day')]), true),
    ], { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Child of the Stars', 9) }, 'Faba', '(faba)'),
    new DungeonTrainer('Team Skull Boss', [
        new GymPokemon('Golisopod', 19524602, 45),
        new GymPokemon('Vikavolt', 19524602, 45),
        new GymPokemon('Masquerain', 19524602, 45),
        new GymPokemon('Pinsir', 19524602, 45),
        new GymPokemon('You hateful little Trainer!', 19524602, 47, new MultiRequirement([new QuestLineCompletedRequirement('Eater of Light'), new SpecialEventRequirement('Hoopa Day')]), false),
    ], { weight: 2.5, hide: true, requirement: new QuestLineStepCompletedRequirement('Child of the Stars', 10) }, 'Guzma', '(guzma)'),
    new DungeonTrainer('Aether President', [
        new GymPokemon('Clefable', 15619682, 47),
        new GymPokemon('Lilligant', 15619682, 47),
        new GymPokemon('Lopunny', 15619682, 47),
        new GymPokemon('Milotic', 15619682, 47),
        new GymPokemon('Bewear', 15619682, 47),
    ], { weight: 5, hide: true, requirement: new QuestLineStepCompletedRequirement('Child of the Stars', 11) }, 'Lusamine', '(lusamine)'),
], 1080000, 17);
dungeonList['Exeggutor Island Hill'] = new Dungeon('Exeggutor Island Hill', [
    { pokemon: 'Alolan Exeggutor', options: { weight: 1, hide: true, requirement: new OneFromManyRequirement([new QuestLineStepCompletedRequirement('Emissary of Light', 2, GameConstants.AchievementOption.less), new SpecialEventRequirement('Hoopa Day')]) } },
    { pokemon: 'Alolan Exeggutor', options: { weight: 1, hide: true, requirement: new OneFromManyRequirement([new QuestLineStepCompletedRequirement('Emissary of Light', 2, GameConstants.AchievementOption.less), new SpecialEventRequirement('Hoopa Day')]) } },
    { pokemon: 'Exeggcute', options: { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Emissary of Light', 2) } },
    { pokemon: 'Alolan Exeggutor', options: { weight: 1, hide: true, requirement: new OneFromManyRequirement([new QuestLineStepCompletedRequirement('Emissary of Light', 2, GameConstants.AchievementOption.less), new SpecialEventRequirement('Hoopa Day')]) } },
    { pokemon: 'Pelipper', options: { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Emissary of Light', 2) } },
    { pokemon: 'Alolan Exeggutor', options: { weight: 1, hide: true, requirement: new OneFromManyRequirement([new QuestLineStepCompletedRequirement('Emissary of Light', 2, GameConstants.AchievementOption.less), new SpecialEventRequirement('Hoopa Day')]) } },
    { pokemon: 'Gastrodon (East)', options: { weight: 1, hide: true, requirement: new QuestLineStepCompletedRequirement('Emissary of Light', 2) } },
    { pokemon: 'Alolan Exeggutor', options: { weight: 1, hide: true, requirement: new OneFromManyRequirement([new QuestLineStepCompletedRequirement('Emissary of Light', 2, GameConstants.AchievementOption.less), new SpecialEventRequirement('Hoopa Day')]) } },
    { pokemon: 'Alolan Exeggutor', options: { weight: 1, hide: true, requirement: new OneFromManyRequirement([new QuestLineStepCompletedRequirement('Emissary of Light', 2, GameConstants.AchievementOption.less), new SpecialEventRequirement('Hoopa Day')]) } },
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Crimson Shard' },
    ],
    epic: [
        { loot: 'Earth Plate' },
        { loot: 'Draco Plate' },
        { loot: 'Meadow Plate' },
    ],
    legendary: [{ loot: 'Revive' }],
    mythic: [{ loot: 'Heart Scale' }],
}, 15773066, [
    new DungeonBossPokemon('Pinsir', 78865330, 45, { hide: true, requirement: new QuestLineStepCompletedRequirement('Emissary of Light', 2) }),
    new DungeonBossPokemon('Alolan Exeggutor', 78865330, 45, { hide: true, requirement: new SpecialEventRequirement('Hoopa Day') }),
    new DungeonBossPokemon('Tropius', 78865330, 45, { hide: true, requirement: new QuestLineStepCompletedRequirement('Emissary of Light', 2) }),
    new DungeonBossPokemon('Alolan Exeggutor', 78865330, 45),
    new DungeonBossPokemon('Serperior', 78865330, 43, { hide: true, requirement: new MultiRequirement([new DayOfWeekRequirement(GameConstants.DayOfWeek.Thursday), new QuestLineStepCompletedRequirement('Emissary of Light', 2)]) }),
    new DungeonBossPokemon('Chesnaught', 78865330, 45, { hide: true, requirement: new MultiRequirement([new DayOfWeekRequirement(GameConstants.DayOfWeek.Thursday), new QuestLineStepCompletedRequirement('Emissary of Light', 2)]) }),
], 1100000, 24);
dungeonList['Vast Poni Canyon'] = new Dungeon('Vast Poni Canyon', [
    { pokemon: 'Golbat', options: { weight: 4 } },
    { pokemon: 'Alolan Dugtrio', options: { weight: 4 } },
    { pokemon: 'Machoke', options: { weight: 4 } },
    { pokemon: 'Magikarp', options: { weight: 4 } },
    { pokemon: 'Skarmory', options: { weight: 4 } },
    { pokemon: 'Barboach', options: { weight: 4 } },
    { pokemon: 'Corphish', options: { weight: 4 } },
    { pokemon: 'Basculin (Red-Striped)', options: { weight: 4 } },
    { pokemon: 'Basculin (Blue-Striped)', options: { weight: 4 } },
    { pokemon: 'Boldore', options: { weight: 4 } },
    { pokemon: 'Mienfoo', options: { weight: 4 } },
    { pokemon: 'Carbink', options: { weight: 4 } },
    { pokemon: 'Lycanroc (Midday)', options: { weight: 4 } },
    { pokemon: 'Lycanroc (Midnight)', options: { weight: 4 } },
    { pokemon: 'Jangmo-o', options: { weight: 4 } },
    { pokemon: 'Hakamo-o', options: { weight: 4 } },
    new DungeonTrainer('Veteran', [
        new GymPokemon('Beheeyem', 15992044, 47),
        new GymPokemon('Banette', 15992044, 47),
    ], { weight: 1 }, 'Harry', '(male)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Spinda', 15992044, 45)], { weight: 1 }, 'Perdy', '(female)'),
    new DungeonTrainer('Ace Duo', [
        new GymPokemon('Alolan Sandslash', 15992044, 47),
        new GymPokemon('Alolan Ninetales', 15992044, 47),
    ], { weight: 1 }, 'Kent and Aimee'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Kabutops', 15992044, 46),
        new GymPokemon('Tyrantrum', 15992044, 46),
    ], { weight: 1 }, 'Zachary'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Xatu', 15992044, 48),
        new GymPokemon('Kangaskhan', 15992044, 48),
        new GymPokemon('Dewgong', 15992044, 48),
    ], { weight: 1 }, 'Lynn', '(female)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Mawile', 15992044, 47),
        new GymPokemon('Weavile', 15992044, 47),
    ], { weight: 1 }, 'Junko', '(female)'),
    new DungeonTrainer('Scientist', [new GymPokemon('Magnezone', 15992044, 46)], { weight: 1 }, 'Ikaika', '(male)'),
    new DungeonTrainer('Punk Girl', [new GymPokemon('Scrafty', 15992044, 46)], { weight: 1 }, 'Anna'),
    new DungeonTrainer('Punk Guy', [
        new GymPokemon('Pangoro', 15992044, 46),
        new GymPokemon('Crawdaunt', 15992044, 46),
    ], { weight: 1 }, 'Adam'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Poliwrath', 15992044, 47)], { weight: 1 }, 'Curtis'),
    new DungeonTrainer('Team Skull Grunt', [new GymPokemon('Pawniard', 15992044, 46)], { weight: 1 }, undefined, '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Alolan Graveler', 15992044, 47),
        new GymPokemon('Lapras', 15992044, 48),
    ], { weight: 1 }, 'Hiroshi', '(male)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Talonflame', 15992044, 48),
        new GymPokemon('Wailord', 15992044, 48),
        new GymPokemon('Glaceon', 15992044, 48),
    ], { weight: 1 }, 'Heather', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Noctowl', 15992044, 48),
        new GymPokemon('Flygon', 15992044, 48),
        new GymPokemon('Slowking', 15992044, 48),
        new GymPokemon('Gengar', 15992044, 48),
    ], { weight: 1 }, 'Eric', '(male)'),
    new DungeonTrainer('Black Belt', [new GymPokemon('Crabominable', 15992044, 47)], { weight: 1 }, 'Terry'),
    new DungeonTrainer('Surfer', [new GymPokemon('Golduck', 15992044, 47)], { weight: 1 }, 'Joshah'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Ochre Shard' },
        { loot: 'Crimson Shard' },
    ],
    epic: [
        { loot: 'Draco Plate' },
        { loot: 'Pixie Plate' },
        { loot: 'Duskball' },
        { loot: 'Repeatball' },
    ],
    legendary: [
        { loot: 'Star Piece' },
        { loot: 'Max Revive' },
    ],
    mythic: [
        { loot: 'Heart Scale' },
        { loot: 'Protein', requirement: new ClearDungeonRequirement(200, GameConstants.getDungeonIndex('Vast Poni Canyon')) },
    ],
}, 15992044, [
    new DungeonBossPokemon('Kommo-o', 79960220, 49),
    new DungeonBossPokemon('Totem Kommo-o', 82543791, 60, { hide: true, requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Champion_Stamp), new QuestLineCompletedRequirement('Emissary of Light')]) }),
    new DungeonTrainer('Trial Site', [
        new GymPokemon('Hakamo-o', 23988066, 32),
        new GymPokemon('Scizor', 19190452, 46),
        new GymPokemon('Noivern', 23988066, 48),
        new GymPokemon('Totem Kommo-o', 55972154, 49),
    ], { hide: true, weight: 10, requirement: new QuestLineStepCompletedRequirement('Emissary of Light', 5, GameConstants.AchievementOption.less) }, 'of Vast Poni Canyon'),
], 1125000, 25, undefined, { requirement: new QuestLineStepCompletedRequirement('Emissary of Light', 4) });
dungeonList['Mina\'s Houseboat'] = new Dungeon('Mina\'s Houseboat', ['Chansey', 'Wingull', 'Pelipper', 'Spritzee', 'Swirlix', 'Cutiefly', 'Comfey', 'Dhelmise'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Lime Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [{ loot: 'Pixie Plate' }],
    legendary: [{ loot: 'Fairy_Feather' }],
    mythic: [{ loot: 'Heart Scale' }],
}, 16217412, [
    new DungeonBossPokemon('Ribombee', 81087060, 55),
    new DungeonBossPokemon('Totem Ribombee', 82543791, 60, { hide: true, requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Champion_Stamp), new QuestLineCompletedRequirement('Eater of Light')]) }),
    new DungeonTrainer('Trial Site', [
        new GymPokemon('Blissey', 24326118, 53),
        new GymPokemon('Pelipper', 24326118, 52),
        new GymPokemon('Totem Ribombee', 32434824, 55),
    ], { hide: true, weight: 10, requirement: new QuestLineStepCompletedRequirement('Eater of Light', 3, GameConstants.AchievementOption.less) }, 'of Mina\'s Houseboat'),
], 1150000, 25);
dungeonList['Mount Lanakila'] = new Dungeon('Mount Lanakila', [
    { pokemon: 'Alolan Raticate', options: { weight: 8.67 } },
    { pokemon: 'Alolan Sandshrew', options: { weight: 8.67 } },
    { pokemon: 'Alolan Vulpix', options: { weight: 8.67 } },
    { pokemon: 'Sneasel', options: { weight: 8.67 } },
    { pokemon: 'Snorunt', options: { weight: 8.67 } },
    { pokemon: 'Gumshoos', options: { weight: 8.67 } },
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Scyther', 16212850, 51),
        new GymPokemon('Malamar', 16212850, 52),
    ], { weight: 1 }, 'Seth', '(male)'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Shiinotic', 16212850, 51),
        new GymPokemon('Clefable', 16212850, 52),
    ], { weight: 1 }, 'Kailee', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Lickitung', 16212850, 52),
        new GymPokemon('Goodra', 16212850, 52),
    ], { weight: 1 }, 'Alonsa', '(female)'),
    new DungeonTrainer('Worker', [new GymPokemon('Relicanth', 16212850, 50)], { weight: 1 }, 'Ovid', '(male)'),
    new DungeonTrainer('Sparring Partners', [
        new GymPokemon('Bewear', 16212850, 51),
        new GymPokemon('Mienfoo', 16212850, 51),
        new GymPokemon('Machamp', 16212850, 51),
    ], { weight: 1 }, 'Alon and Eimar'),
    new DungeonTrainer('Sparring Partners', [
        new GymPokemon('Hawlucha', 16212850, 51),
        new GymPokemon('Crabominable', 16212850, 51),
        new GymPokemon('Pangoro', 16212850, 51),
    ], { weight: 1 }, 'Craig and Jason'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Emolga', 16212850, 51)], { weight: 1 }, 'Peren', '(female)'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Pyroar', 16212850, 53),
        new GymPokemon('Claydol', 16212850, 53),
        new GymPokemon('Milotic', 16212850, 53),
    ], { weight: 1 }, 'Ella', '(female)'),
    new DungeonTrainer('Collector', [new GymPokemon('Florges (White)', 16212850, 51)], { weight: 1 }, 'Minty'),
    new DungeonTrainer('Ace Trainer', [
        new GymPokemon('Vanilluxe', 16212850, 52),
        new GymPokemon('Mismagius', 16212850, 53),
    ], { weight: 1 }, 'Jada', '(female)'),
    new DungeonTrainer('Master & Apprentice', [
        new GymPokemon('Vikavolt', 16212850, 52),
        new GymPokemon('Forretress', 16212850, 53),
        new GymPokemon('Glalie', 16212850, 53),
        new GymPokemon('Tyranitar', 16212850, 53),
        new GymPokemon('Bisharp', 16212850, 53),
    ], { weight: 1 }, 'Breon and Kaimana'),
    new DungeonTrainer('Hiker', [new GymPokemon('Gigalith', 16212850, 51)], { weight: 1 }, 'Anuhea'),
    new DungeonTrainer('Veteran', [
        new GymPokemon('Carbink', 16212850, 65),
        new GymPokemon('Torkoal', 16212850, 65),
        new GymPokemon('Pelipper', 16212850, 65),
        new GymPokemon('Alolan Ninetales', 16212850, 65),
        new GymPokemon('Gigalith', 16212850, 65),
    ], { weight: 1 }, 'Aristo', '(male)'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
        { loot: 'Black Shard' },
        { loot: 'White Shard' },
        { loot: 'Pink Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Icicle Plate' },
        { loot: 'Moonball' },
    ],
    legendary: [{ loot: 'Max Revive' }],
}, 16312850, [
    new DungeonBossPokemon('Golbat', 81064250, 50),
    new DungeonBossPokemon('Absol', 81064250, 50),
    new DungeonBossPokemon('Glalie', 81064250, 50),
    new DungeonBossPokemon('Vanilluxe', 81064250, 50),
    new DungeonBossPokemon('Necrozma', 83527125, 65, { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eater of Light', 5), new GymBadgeRequirement(BadgeEnums.Champion_Stamp)]) }),
    new DungeonTrainer('Trial Site', [
        new GymPokemon('Sneasel', 20266062, 47),
        new GymPokemon('Alolan Vulpix', 24319275, 47, new OneFromManyRequirement([
            new DayCyclePartRequirement([1]),
            new DayCyclePartRequirement([2]),
        ])),
        new GymPokemon('Alolan Ninetales', 40532125, 50, new OneFromManyRequirement([
            new DayCyclePartRequirement([1]),
            new DayCyclePartRequirement([2]),
        ])),
        new GymPokemon('Alolan Sandshrew', 24319275, 47, new OneFromManyRequirement([
            new DayCyclePartRequirement([0]),
            new DayCyclePartRequirement([3]),
        ])),
        new GymPokemon('Alolan Sandslash', 40532125, 50, new OneFromManyRequirement([
            new DayCyclePartRequirement([0]),
            new DayCyclePartRequirement([3]),
        ])),
    ], { hide: true, weight: 10, requirement: new MultiRequirement([
            new QuestLineStepCompletedRequirement('Eater of Light', 5),
            new QuestLineCompletedRequirement('Eater of Light', GameConstants.AchievementOption.less),
        ]) }, 'of Mount Lanakila'),
], 1175000, 26);
dungeonList['Lake of the Sunne and Moone'] = new Dungeon('Lake of the Sunne and Moone', ['Clefairy', 'Sunkern', 'Skitty', 'Lunatone', 'Solrock', 'Helioptile'], {
    common: [
        { loot: 'Lucky_incense' },
        { loot: 'Chesto' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
    ],
    epic: [
        { loot: 'Mind Plate', weight: 2 },
        { loot: 'Iron Plate' },
        { loot: 'Spooky Plate' },
        { loot: 'Moonball' },
    ],
}, 16435490, [
    new DungeonBossPokemon('Cosmog', 82177450, 70),
    new DungeonBossPokemon('Minior (Meteor)', 82177450, 60, { hide: true, requirement: new ObtainedPokemonRequirement('Cosmoem', true) }),
    new DungeonBossPokemon('Cosmoem', 82177450, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Cosmoem') }),
    new DungeonBossPokemon('Minior (Yellow Core)', 82177450, 60, { hide: true, requirement: new MultiRequirement([new ObtainedPokemonRequirement('Solgaleo', true), new ObtainedPokemonRequirement('Necrozma', true)]) }),
    new DungeonBossPokemon('Solgaleo', 90673816, 100, { hide: true, requirement: new MultiRequirement([new ObtainedPokemonRequirement('Solgaleo'), new ObtainedPokemonRequirement('Necrozma')]) }),
    new DungeonBossPokemon('Minior (Violet Core)', 82177450, 60, { hide: true, requirement: new MultiRequirement([new ObtainedPokemonRequirement('Lunala', true), new ObtainedPokemonRequirement('Necrozma', true)]) }),
    new DungeonBossPokemon('Lunala', 90673816, 100, { hide: true, requirement: new MultiRequirement([new ObtainedPokemonRequirement('Lunala'), new ObtainedPokemonRequirement('Necrozma')]) }),
], 1200000, 27);
dungeonList['Ruins of Conflict'] = new Dungeon('Ruins of Conflict', ['Floette (Yellow)', 'Comfey', 'Ampharos', 'Electabuzz'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Cheri' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [
        { loot: 'Zap Plate' },
        { loot: 'Pixie Plate' },
    ],
}, 16435490, [
    new DungeonBossPokemon('Luxray', 82177450, 55),
    new DungeonBossPokemon('Granbull', 82177450, 55),
    new DungeonBossPokemon('Dedenne', 82177450, 55),
    new DungeonBossPokemon('Tapu Koko', 82543791, 60),
], 1200000, 27, undefined, { requirement: new GymBadgeRequirement(BadgeEnums.Champion_Stamp) });
dungeonList['Ruins of Life'] = new Dungeon('Ruins of Life', ['Floette (White)', 'Comfey', 'Chimecho', 'Munna'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Cheri' },
    ],
    rare: [{ loot: 'Pink Shard' }],
    epic: [
        { loot: 'Stone Plate' },
        { loot: 'Mind Plate' },
        { loot: 'Pixie Plate' },
    ],
    legendary: [{ loot: 'Twisted_Spoon' }],
}, 16435490, [
    new DungeonBossPokemon('Wobbuffet', 82177450, 55),
    new DungeonBossPokemon('Granbull', 82177450, 55),
    new DungeonBossPokemon('Gardevoir', 82177450, 55),
    new DungeonBossPokemon('Tapu Lele', 82543791, 60),
], 1200000, 27, undefined, { requirement: new GymBadgeRequirement(BadgeEnums.Champion_Stamp) });
dungeonList['Ruins of Abundance'] = new Dungeon('Ruins of Abundance', ['Floette (Orange)', 'Comfey', 'Cottonee', 'Petilil'], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Rawst' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [
        { loot: 'Insect Plate' },
        { loot: 'Fist Plate' },
    ],
}, 16435490, [
    new DungeonBossPokemon('Maractus', 82177450, 55),
    new DungeonBossPokemon('Granbull', 82177450, 55),
    new DungeonBossPokemon('Shiinotic', 82177450, 55),
    new DungeonBossPokemon('Tapu Bulu', 82543791, 60),
], 1200000, 27, undefined, { requirement: new GymBadgeRequirement(BadgeEnums.Champion_Stamp) });
dungeonList['Ruins of Hope'] = new Dungeon('Ruins of Hope', ['Floette (Blue)', 'Comfey', 'Poliwhirl', 'Clamperl'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Aspear' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [
        { loot: 'Splash Plate' },
        { loot: 'Pixie Plate' },
    ],
}, 16435490, [
    new DungeonBossPokemon('Lumineon', 82177450, 55),
    new DungeonBossPokemon('Granbull', 82177450, 55),
    new DungeonBossPokemon('Azumarill', 82177450, 55),
    new DungeonBossPokemon('Tapu Fini', 82543791, 60),
], 1200000, 27, undefined, { requirement: new GymBadgeRequirement(BadgeEnums.Champion_Stamp) });
dungeonList['Poni Meadow'] = new Dungeon('Poni Meadow', [
    { pokemon: 'Magikarp', options: { weight: 0.5 } },
    { pokemon: 'Dratini', options: { weight: 0.5 } },
    { pokemon: 'Dragonair', options: { weight: 0.5, hide: true, requirement: new ObtainedPokemonRequirement('Dragonair') } },
    { pokemon: 'Cottonee', options: { weight: 0.5 } },
    { pokemon: 'Petilil', options: { weight: 0.5 } },
    { pokemon: 'Ribombee', options: { weight: 0.5 } },
    { pokemon: 'Misdreavus', options: { weight: 0.5 } },
    { pokemon: 'Barboach', options: { weight: 0.5 } },
    new DungeonTrainer('Actor', [new GymPokemon('Oricorio (Sensu)', 16659968, 57)], { weight: 1 }, 'Meredith'),
], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Aspear' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Splash Plate' },
        { loot: 'Pixie Plate' },
        { loot: 'Power_Herb' },
    ],
}, 16659968, [
    new DungeonBossPokemon('Oricorio (Sensu)', 83299840, 70),
    new DungeonBossPokemon('Floette (Blue)', 83299840, 70),
    new DungeonBossPokemon('Leavanny', 83299840, 57, { hide: true, requirement: new DayOfWeekRequirement(GameConstants.DayOfWeek.Wednesday) }),
], 1225000, 28);
dungeonList['Resolution Cave'] = new Dungeon('Resolution Cave', [
    { pokemon: 'Zubat', options: { weight: 4 } },
    { pokemon: 'Alolan Dugtrio', options: { weight: 4 } },
    { pokemon: 'Druddigon', options: { weight: 4 } },
    new DungeonTrainer('Veteran', [
        new GymPokemon('Ribombee', 17114462, 61),
        new GymPokemon('Bewear', 17114462, 61),
    ], { weight: 1 }, 'Leticia', '(female)'),
    new DungeonTrainer('Backpacker', [new GymPokemon('Manectric', 17114462, 59)], { weight: 1 }, 'Maria', '(female)'),
    new DungeonTrainer('Hiker', [
        new GymPokemon('Alolan Dugtrio', 17114462, 59),
        new GymPokemon('Mudsdale', 17114462, 59),
    ], { weight: 1 }, 'Travis'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Pecha' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
        { loot: 'Black Shard' },
        { loot: 'White Shard' },
        { loot: 'Pink Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Dread Plate' },
        { loot: 'Draco Plate' },
    ],
    legendary: [{ loot: 'Dragon_Fang' }],
}, 17114462, [
    new DungeonBossPokemon('Golbat', 85572310, 59),
    new DungeonBossPokemon('Noivern', 85572310, 59),
    new DungeonBossPokemon('Zygarde', 88406970, 60),
    new DungeonBossPokemon('Guzzlord', 90673816, 70),
], 1250000, 30);
//Galar Dungeons
dungeonList['Slumbering Weald Shrine'] = new Dungeon('Slumbering Weald Shrine', ['Galarian Stunfisk', 'Munna', 'Butterfree', 'Orbeetle', 'Whiscash', 'Barboach', 'Magikarp'], {
    common: [
        { loot: 'Chesto' },
        { loot: 'Dowsing_machine' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Lime Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [
        { loot: 'Pixie Plate' },
        { loot: 'Fist Plate' },
        { loot: 'Iron Plate' },
    ],
    legendary: [{ loot: 'Silver_Powder' }],
}, 27009504, [
    new DungeonBossPokemon('Corviknight', 135047520, 60),
    new DungeonBossPokemon('Galarian Weezing', 135047520, 60),
    new DungeonBossPokemon('Zacian (Crowned Sword)', 169578810, 70, { weight: 0.5, hide: true, requirement: new ObtainedPokemonRequirement('Zacian (Crowned Sword)') }),
    new DungeonBossPokemon('Zamazenta (Crowned Shield)', 169578810, 70, { weight: 0.5, hide: true, requirement: new ObtainedPokemonRequirement('Zamazenta (Crowned Shield)') }),
], 2000000, 32);
dungeonList['Galar Mine'] = new Dungeon('Galar Mine', [
    { pokemon: 'Rolycoly', options: { weight: 2.7 } },
    { pokemon: 'Timburr', options: { weight: 2.7 } },
    { pokemon: 'Roggenrola', options: { weight: 2.7 } },
    { pokemon: 'Woobat', options: { weight: 2.7 } },
    { pokemon: 'Diglett', options: { weight: 2.7 } },
    { pokemon: 'Drilbur', options: { weight: 2.7 } },
    new DungeonTrainer('Worker', [new GymPokemon('Roggenrola', 20767840, 14)], { weight: 1 }, 'Keith', '(male)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Timburr', 20767840, 14),
        new GymPokemon('Timburr', 20767840, 14),
        new GymPokemon('Timburr', 20767840, 14),
    ], { weight: 1 }, 'Georgia', '(female)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Diglett', 20767840, 14),
        new GymPokemon('Drilbur', 20767840, 15),
    ], { weight: 1 }, 'Sandra', '(female)'),
    new DungeonTrainer('Worker', [new GymPokemon('Rolycoly', 20767840, 14)], { weight: 1 }, 'Russell', '(male)'),
], {
    common: [
        { loot: 'Ultraball', weight: 5 },
        { loot: 'MediumRestore', weight: 1 },
        { loot: 'Carkol', weight: 0.5 },
        { loot: 'Woobat', weight: 0.5 },
    ],
    rare: [
        { loot: 'Crimson Shard' },
        { loot: 'Brown Shard' },
    ],
    legendary: [{ loot: 'Rock_Incense' }],
}, 20767840, [new DungeonBossPokemon('Carkol', 103839200, 18)], 1320000, 12);
dungeonList['Galar Mine No. 2'] = new Dungeon('Galar Mine No. 2', [
    { pokemon: 'Shellos (East)', options: { weight: 1.6 } },
    { pokemon: 'Wimpod', options: { weight: 1.6 } },
    { pokemon: 'Binacle', options: { weight: 1.6 } },
    { pokemon: 'Chewtle', options: { weight: 1.6 } },
    { pokemon: 'Scraggy', options: { weight: 1.6 } },
    { pokemon: 'Croagunk', options: { weight: 1.6 } },
    { pokemon: 'Shuckle', options: { weight: 1.6 } },
    { pokemon: 'Noibat', options: { weight: 1.6 } },
    { pokemon: 'Barboach', options: { weight: 1.6 } },
    { pokemon: 'Corphish', options: { weight: 1.6 } },
    new DungeonTrainer('Worker', [new GymPokemon('Carkol', 21294640, 21)], { weight: 1 }, 'Francis', '(male)'),
    new DungeonTrainer('Worker', [
        new GymPokemon('Roggenrola', 21294640, 20),
        new GymPokemon('Timburr', 21294640, 21),
    ], { weight: 1 }, 'Yvonne', '(female)'),
    new DungeonTrainer('Team Yell Grunts', [
        new GymPokemon('Thievul', 21294640, 21),
        new GymPokemon('Galarian Linoone', 21294640, 22),
        new GymPokemon('Liepard', 21294640, 22),
        new GymPokemon('Pancham', 21294640, 21),
    ], { weight: 1 }, undefined),
    new DungeonTrainer('Rail Staff', [
        new GymPokemon('Drilbur', 21294640, 22),
        new GymPokemon('Onix', 21294640, 23),
    ], { weight: 1 }, 'Vincent'),
], {
    common: [
        { loot: 'Dowsing_machine', weight: 4 },
        { loot: 'xClick', weight: 2.5 },
        { loot: 'Galarian Stunfisk', weight: 0.5 },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [
        { loot: 'Earth Plate' },
        { loot: 'Duskball' },
    ],
    legendary: [{ loot: 'Star Piece' }],
}, 21294640, [
    new DungeonBossPokemon('Galarian Stunfisk', 106473200, 25),
    new DungeonBossPokemon('Gastrodon (East)', 106473200, 50),
    new DungeonBossPokemon('Drednaw', 106473200, 24),
], 1430000, 14);
dungeonList['Rose Tower'] = new Dungeon('Rose Tower', [
    new DungeonTrainer('Macro Cosmos', [new GymPokemon('Durant', 26400842, 48)], { weight: 1 }, 'Elijah', '(male)'),
    new DungeonTrainer('Macro Cosmos', [new GymPokemon('Cufant', 26400842, 48)], { weight: 1 }, 'Jane', '(female)'),
    new DungeonTrainer('Macro Cosmos', [new GymPokemon('Bronzong', 26400842, 48)], { weight: 1 }, 'Mateo', '(male)'),
    new DungeonTrainer('Macro Cosmos', [new GymPokemon('Klang', 26400842, 48)], { weight: 1 }, 'Kevin', '(male)'),
    new DungeonTrainer('Macro Cosmos', [new GymPokemon('Mawile', 26400842, 48)], { weight: 1 }, 'Carla', '(female)'),
    new DungeonTrainer('Macro Cosmos', [new GymPokemon('Steelix', 26400842, 49)], { weight: 1 }, 'Adalyn', '(female)'),
    new DungeonTrainer('Macro Cosmos', [new GymPokemon('Galarian Stunfisk', 26400842, 49)], { weight: 1 }, 'Justin', '(male)'),
], {
    common: [
        { loot: 'xAttack' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Green Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Purple Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
        { loot: 'Black Shard' },
        { loot: 'White Shard' },
        { loot: 'Pink Shard' },
        { loot: 'Cyan Shard' },
        { loot: 'Brown Shard' },
        { loot: 'Rose Shard' },
    ],
    epic: [{ loot: 'Iron Plate' }],
}, 26400842, [
    new DungeonTrainer('Macro Cosmos', [
        new GymPokemon('Froslass', 26400842, 50),
        new GymPokemon('Tsareena', 26400842, 50),
        new GymPokemon('Salazzle', 26400842, 50),
        new GymPokemon('Milotic', 26400842, 51),
        new GymPokemon('Gigantamax Garbodor', 26400842, 52),
    ], { weight: 1 }, 'Oleana', '(oleana)'),
], 1800000, 32);
dungeonList['Energy Plant'] = new Dungeon('Energy Plant', ['Steelix', 'Mawile', 'Bronzong', 'Durant', 'Bisharp', 'Doublade', 'Golisopod', 'Galarian Stunfisk'], {
    common: [
        { loot: 'Token_collector' },
        { loot: 'Lucky_egg' },
        { loot: 'Pokeball' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        { loot: 'Grey Shard' },
    ],
    legendary: [{ loot: 'Metal_Powder' }],
}, 26704124, [
    new DungeonTrainer('Macro Cosmos', [
        new GymPokemon('Escavalier', 26704124, 50),
        new GymPokemon('Ferrothorn', 26704124, 50),
        new GymPokemon('Perrserker', 26704124, 50),
        new GymPokemon('Klinklang', 26704124, 51),
        new GymPokemon('Gigantamax Copperajah', 26704124, 52),
    ], { hide: true, weight: 3, requirement: new QuestLineStepCompletedRequirement('The Lair of Giants', 36, GameConstants.AchievementOption.less) }, 'Rose', '(rose)'),
    new DungeonTrainer('Macro Cosmos', [
        new GymPokemon('Escavalier', 26704124, 50),
        new GymPokemon('Ferrothorn', 26704124, 50),
        new GymPokemon('Perrserker', 26704124, 50),
        new GymPokemon('Klinklang', 26704124, 51),
        new GymPokemon('Gigantamax Copperajah', 26704124, 52),
    ], { hide: true, weight: 2, requirement: new QuestLineStepCompletedRequirement('The Lair of Giants', 36) }, 'Rose', '(rose)'),
    new DungeonBossPokemon('Zacian (Battle Hero)', 169578810, 70, { requirement: new QuestLineStepCompletedRequirement('Sword and Shield', 18) }),
    new DungeonBossPokemon('Zamazenta (Battle Hero)', 169578810, 70, { requirement: new QuestLineStepCompletedRequirement('Sword and Shield', 18) }),
    new DungeonBossPokemon('Eternatus', 169578810, 70, { hide: true, requirement: new QuestLineStepCompletedRequirement('The Lair of Giants', 36) }),
], 1850000, 32);
dungeonList['Glimwood Tangle'] = new Dungeon('Glimwood Tangle', [
    { pokemon: 'Shiinotic', options: { weight: 1.8 } },
    { pokemon: 'Galarian Ponyta', options: { weight: 1.8 } },
    { pokemon: 'Sinistea', options: { weight: 1.8 } },
    { pokemon: 'Phantump', options: { weight: 1.8 } },
    { pokemon: 'Swirlix', options: { weight: 1.8 } },
    { pokemon: 'Spritzee', options: { weight: 1.8 } },
    { pokemon: 'Passimian', options: { weight: 1.8 } },
    { pokemon: 'Oranguru', options: { weight: 1.8 } },
    { pokemon: 'Impidimp', options: { weight: 1.8 } },
    new DungeonTrainer('Rail Staff', [new GymPokemon('Ninetales', 23764848, 34)], { weight: 1 }, 'Robert'),
    new DungeonTrainer('Cook', [
        new GymPokemon('Milcery', 23764848, 33),
        new GymPokemon('Sinistea', 23764848, 33),
        new GymPokemon('Shiinotic', 23764848, 34),
    ], { weight: 1 }, 'Derek'),
    new DungeonTrainer('Madame', [
        new GymPokemon('Indeedee (Male)', 23764848, 33),
        new GymPokemon('Indeedee (Female)', 23764848, 33),
    ], { weight: 1 }, 'Judy'),
    new DungeonTrainer('Beauty', [new GymPokemon('Kirlia', 23764848, 34)], { weight: 1 }, 'Jacqueline'),
], {
    common: [
        { loot: 'Cheri', weight: 3 },
        { loot: 'Pecha', weight: 3 },
        { loot: 'Impidimp' },
    ],
    rare: [
        { loot: 'White Shard' },
        { loot: 'Pink Shard' },
    ],
    epic: [
        { loot: 'LargeRestore' },
        { loot: 'Moonball' },
    ],
    legendary: [
        { loot: 'Fairy_Feather' },
        { loot: 'Flowering Celebi', ignoreDebuff: true, requirement: new QuestLineStepCompletedRequirement('Secrets of the Jungle', 13) },
    ],
}, 23764848, [
    new DungeonBossPokemon('Hattrem', 118824240, 36),
    new DungeonBossPokemon('Morgrem', 118824240, 36),
    new DungeonBossPokemon('Indeedee (Male)', 118824240, 36),
    new DungeonBossPokemon('Indeedee (Female)', 118824240, 36),
], 1680000, 23);
dungeonList['Dusty Bowl'] = new Dungeon('Dusty Bowl', ['Gurdurr', 'Ferrothorn', 'Klang', 'Meowstic', 'Barbaracle', 'Applin', 'Hattrem', 'Qwilfish', 'Hitmonlee', 'Hitmonchan', 'Koffing'], {
    common: [
        { loot: 'Pokeball' },
        { loot: 'Greatball' },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Ochre Shard' },
        { loot: 'Grey Shard' },
    ],
    epic: [
        { loot: 'Revive' },
        { loot: 'Rare Bone' },
    ],
    legendary: [
        { loot: 'Star Piece' },
        { loot: 'Soft_Sand' },
    ],
}, 22923210, [
    new DungeonBossPokemon('Gigalith', 114616050, 60),
    new DungeonBossPokemon('Flygon', 114616050, 60),
    new DungeonBossPokemon('Sigilyph', 114616050, 60),
    new DungeonBossPokemon('Tyranitar', 114616050, 60),
], 1570000, 20);
//Isle of Armor
dungeonList['Warm-Up Tunnel'] = new Dungeon('Warm-Up Tunnel', ['Sandshrew', 'Cubone', 'Torkoal'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Lucky_egg' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Brown Shard' },
    ],
    epic: [{ loot: 'Quickball' }],
    legendary: [
        { loot: 'Max Revive' },
        { loot: 'Black_Belt' },
    ],
}, 28252100, [new DungeonBossPokemon('Kangaskhan', 141260500, 60)], 1730000, 38);
dungeonList['Courageous Cavern'] = new Dungeon('Courageous Cavern', [
    'Pincurchin', 'Dwebble', 'Crustle', 'Swoobat', 'Magikarp', 'Shellder', 'Cloyster', 'Tentacool', 'Chewtle', 'Tentacruel', 'Whiscash',
    { pokemon: 'Clobbopus', options: { hide: true, requirement: new ObtainedPokemonRequirement('Clobbopus') } },
], {
    common: [
        { loot: 'Pokeball' },
        { loot: 'Greatball' },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
    ],
    epic: [
        { loot: 'Duskball' },
        { loot: 'Quickball' },
    ],
    legendary: [
        { loot: 'Icy Rock' },
        { loot: 'Star Piece' },
        { loot: 'Revive' },
        { loot: 'Oval Stone' },
        { loot: 'Everstone' },
        { loot: 'Hard Stone' },
    ],
}, 26704124, [
    new DungeonBossPokemon('Golisopod', 133520620, 60),
    new DungeonBossPokemon('Druddigon', 133520620, 60),
    new DungeonBossPokemon('Drednaw', 133520620, 60),
], 1730000, 33);
dungeonList['Brawlers\' Cave'] = new Dungeon('Brawlers\' Cave', ['Whismur', 'Woobat', 'Azurill', 'Lickitung', 'Loudred', 'Swoobat', 'Golduck', 'Poliwag', 'Barboach', 'Whiscash', 'Chansey', 'Psyduck'], {
    common: [
        { loot: 'Greatball', weight: 3 },
        { loot: 'Ultraball', weight: 3 },
        { loot: 'MediumRestore' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Rose Shard' },
    ],
    epic: [
        { loot: 'Duskball' },
        { loot: 'Nestball' },
        { loot: 'Timerball' },
        { loot: 'Luxuryball' },
    ],
    legendary: [
        { loot: 'Rare Bone' },
        { loot: 'Hard Stone' },
        { loot: 'Star Piece' },
        { loot: 'LargeRestore' },
    ],
    mythic: [{ loot: 'Protein', requirement: new ClearDungeonRequirement(150, GameConstants.getDungeonIndex('Brawlers\' Cave')) }],
}, 27009504, [
    new DungeonBossPokemon('Gigalith', 135047520, 60),
    new DungeonBossPokemon('Druddigon', 135047520, 60),
    new DungeonBossPokemon('Poliwrath', 135047520, 60),
], 1730000, 34);
dungeonList['Tower of Darkness'] = new Dungeon('Tower of Darkness', [
    { pokemon: 'Kubfu', options: { weight: 1 } },
    new DungeonTrainer('Master Dojo', [new GymPokemon('Zorua', 28886112, 65)], { weight: 1 }, 'Student'),
    new DungeonTrainer('Master Dojo', [new GymPokemon('Scraggy', 28886112, 66)], { weight: 1 }, 'Student'),
    new DungeonTrainer('Master Dojo', [new GymPokemon('Inkay', 28886112, 67)], { weight: 1 }, 'Student'),
    new DungeonTrainer('Master Dojo', [new GymPokemon('Krokorok', 28886112, 68)], { weight: 1 }, 'Student'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Black Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [{ loot: 'Dread Plate' }],
    legendary: [{ loot: 'Black_Glasses' }],
}, 28886112, [
    new DungeonBossPokemon('Urshifu (Single Strike)', 160924440, 60, {
        requirement: new MultiRequirement([
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tower of Darkness')),
            new ObtainedPokemonRequirement('Urshifu (Single Strike)'),
        ])
    }),
    new DungeonTrainer('Dojo Master', [new GymPokemon('Kubfu', 144430560, 70)], { weight: 1 }, 'Mustard'),
], 2000000, 40);
dungeonList['Tower of Waters'] = new Dungeon('Tower of Waters', [
    { pokemon: 'Kubfu', options: { weight: 1 } },
    new DungeonTrainer('Master Dojo', [new GymPokemon('Psyduck', 28886112, 65)], { weight: 1 }, 'Student'),
    new DungeonTrainer('Master Dojo', [new GymPokemon('Krabby', 28886112, 66)], { weight: 1 }, 'Student'),
    new DungeonTrainer('Master Dojo', [new GymPokemon('Marill', 28886112, 67)], { weight: 1 }, 'Student'),
    new DungeonTrainer('Master Dojo', [new GymPokemon('Poliwhirl', 28886112, 68)], { weight: 1 }, 'Student'),
], {
    common: [
        { loot: 'xClick' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Ochre Shard' },
    ],
    epic: [{ loot: 'Splash Plate' }],
    legendary: [{ loot: 'Mystic_Water' }],
}, 28886112, [
    new DungeonBossPokemon('Urshifu (Rapid Strike)', 160924440, 60, {
        requirement: new MultiRequirement([
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tower of Waters')),
            new ObtainedPokemonRequirement('Urshifu (Rapid Strike)'),
        ])
    }),
    new DungeonTrainer('Dojo Master', [new GymPokemon('Kubfu', 144430560, 70)], { weight: 1 }, 'Mustard'),
], 2000000, 36);
//Crown Tundra
dungeonList['Roaring-Sea Caves'] = new Dungeon('Roaring-Sea Caves', [
    'Zubat', 'Carbink', 'Piloswine', 'Deino', 'Larvitar', 'Riolu', 'Audino', 'Golbat', 'Barboach', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Magikarp', 'Feebas',
    { pokemon: 'Omanyte', options: { hide: true, requirement: new ObtainedPokemonRequirement('Omanyte') } },
    { pokemon: 'Kabuto', options: { hide: true, requirement: new ObtainedPokemonRequirement('Kabuto') } },
], {
    common: [
        { loot: 'Greatball' },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Duskball' },
        { loot: 'LargeRestore' },
    ],
    legendary: [
        { loot: 'Max Revive' },
        { loot: 'Hard Stone' },
        { loot: 'Star Piece' },
        { loot: 'Everstone' },
        { loot: 'Rare Bone' },
    ],
}, 32184888, [
    new DungeonBossPokemon('Kabutops', 160924440, 60, { hide: true, requirement: new ObtainedPokemonRequirement('Kabutops') }),
    new DungeonBossPokemon('Omastar', 160924440, 60, { hide: true, requirement: new ObtainedPokemonRequirement('Omastar') }),
    new DungeonBossPokemon('Tyranitar', 160924440, 60),
    new DungeonBossPokemon('Hydreigon', 160924440, 60),
    new DungeonBossPokemon('Lucario', 160924440, 60),
], 1730000, 50);
dungeonList['Rock Peak Ruins'] = new Dungeon('Rock Peak Ruins', [
    'Stonjourner', 'Rhyperior', 'Aggron', 'Coalossal', 'Barbaracle', 'Gigalith', 'Crustle',
    { pokemon: 'Aerodactyl', options: { hide: true, requirement: new ObtainedPokemonRequirement('Aerodactyl') } },
], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Lucky_incense' },
    ],
    rare: [{ loot: 'Brown Shard' }],
    epic: [
        { loot: 'Hard Stone' },
        { loot: 'Everstone' },
        { loot: 'Stone Plate' },
    ],
}, 31507840, [
    new DungeonBossPokemon('Relicanth', 149662240, 60),
    new DungeonBossPokemon('Regirock', 157539200, 70, { hide: true, requirement: new QuestLineStepCompletedRequirement('The Ancient Golems', 4) }),
], 1920000, 48);
dungeonList['Iron Ruins'] = new Dungeon('Iron Ruins', ['Bronzong', 'Duraludon', 'Copperajah', 'Corviknight', 'Perrserker', 'Bisharp', 'Ferrothorn', 'Excadrill'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Lucky_incense' },
    ],
    rare: [{ loot: 'Grey Shard' }],
    epic: [
        { loot: 'Hard Stone' },
        { loot: 'Everstone' },
        { loot: 'Iron Plate' },
    ],
}, 31507840, [
    new DungeonBossPokemon('Metagross', 149662240, 60),
    new DungeonBossPokemon('Registeel', 157539200, 70, { hide: true, requirement: new QuestLineStepCompletedRequirement('The Ancient Golems', 4) }),
], 1920000, 48);
dungeonList['Iceberg Ruins'] = new Dungeon('Iceberg Ruins', [
    'Cryogonal', 'Beartic', 'Galarian Darumaka', 'Weavile', 'Vanilluxe', 'Froslass', 'Delibird',
    { pokemon: 'Aurorus', options: { hide: true, requirement: new ObtainedPokemonRequirement('Aurorus') } },
], {
    common: [
        { loot: 'Dowsing_machine', weight: 3 },
        { loot: 'Lucky_incense', weight: 3 },
        { loot: 'Cryogonal' },
    ],
    rare: [
        { loot: 'White Shard' },
        { loot: 'Cyan Shard' },
    ],
    epic: [
        { loot: 'Hard Stone' },
        { loot: 'Everstone' },
        { loot: 'Icicle Plate' },
    ],
    legendary: [{ loot: 'Never_Melt_Ice' }],
}, 31507840, [
    new DungeonBossPokemon('Glalie', 149662240, 60),
    new DungeonBossPokemon('Regice', 157539200, 70, { hide: true, requirement: new QuestLineStepCompletedRequirement('The Ancient Golems', 4) }),
], 1920000, 54);
dungeonList['Split-Decision Ruins'] = new Dungeon('Split-Decision Ruins', ['Electabuzz', 'Cryogonal', 'Bronzong', 'Stonjourner', 'Galvantula', 'Relicanth', 'Glalie', 'Metagross'], {
    common: [
        { loot: 'Dowsing_machine' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'White Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Crimson Shard' },
    ],
    legendary: [
        { loot: 'Dragon_Fang' },
        { loot: 'Magnet' },
    ],
    mythic: [
        { loot: 'Draco Plate' },
        { loot: 'Zap Plate' },
    ],
}, 32870660, [
    new DungeonBossPokemon('Altaria', 156135635, 60),
    new DungeonBossPokemon('Electivire', 156135635, 60),
    new DungeonBossPokemon('Regidrago', 164353300, 70),
    new DungeonBossPokemon('Regieleki', 164353300, 70),
], 2000000, 52);
dungeonList['Lakeside Cave'] = new Dungeon('Lakeside Cave', ['Zubat', 'Aron', 'Carbink', 'Carkol', 'Ferroseed', 'Mawile', 'Sableye', 'Audino', 'Lairon'], {
    common: [
        { loot: 'xClick' },
        { loot: 'Token_collector' },
    ],
    rare: [
        { loot: 'Grey Shard' },
        { loot: 'Brown Shard' },
    ],
    epic: [{ loot: 'Duskball' }],
    legendary: [
        { loot: 'Rare Bone' },
        { loot: 'Star Piece' },
        { loot: 'Hard Stone' },
        { loot: 'Everstone' },
    ],
}, 33216830, [
    new DungeonBossPokemon('Noivern', 166608415, 60),
    new DungeonBossPokemon('Aggron', 166608415, 60),
    new DungeonBossPokemon('Coalossal', 166608415, 60),
], 1750000, 53);
dungeonList['Dyna Tree Hill'] = new Dungeon('Dyna Tree Hill', ['Magmar', 'Absol', 'Beartic', 'Cryogonal', 'Dubwool', 'Glalie', 'Clefable'], {
    common: [
        { loot: 'Oran', weight: 2 },
        { loot: 'Sitrus' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Rose Shard' },
    ],
    epic: [
        { loot: 'Meadow Plate' },
        { loot: 'Tamato' },
        { loot: 'Hondew' },
    ],
    legendary: [{ loot: 'Silk_Scarf' }],
}, 33216830, [new DungeonBossPokemon('Greedent', 166608415, 60)], 1920000, 53);
dungeonList['Tunnel to the Top'] = new Dungeon('Tunnel to the Top', ['Zubat', 'Golbat', 'Carbink', 'Snorunt', 'Gible', 'Bagon', 'Clefairy', 'Clefable', 'Audino', 'Druddigon'], {
    common: [
        { loot: 'Rawst' },
        { loot: 'Aspear' },
        { loot: 'xAttack' },
    ],
    rare: [
        { loot: 'Brown Shard' },
        { loot: 'Rose Shard' },
    ],
    epic: [
        { loot: 'Duskball' },
        { loot: 'Quickball' },
        { loot: 'Moonball' },
        { loot: 'Flame Plate' },
    ],
    legendary: [
        { loot: 'Fastball' },
        { loot: 'Repeatball' },
    ],
}, 33565196, [
    new DungeonBossPokemon('Froslass', 167825980, 60),
    new DungeonBossPokemon('Garchomp', 167825980, 60),
    new DungeonBossPokemon('Salamence', 167825980, 60),
], 2000000, 54);
dungeonList['Crown Shrine'] = new Dungeon('Crown Shrine', ['Dhelmise', 'Hatterene', 'Reuniclus', 'Mr. Rime', 'Mamoswine', 'Roserade'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
    rare: [
        { loot: 'Brown Shard' },
        { loot: 'Rose Shard' },
    ],
    epic: [
        { loot: 'Mind Plate' },
        { loot: 'Icicle Plate' },
        { loot: 'Spooky Plate' },
    ],
    legendary: [{ loot: 'Max Revive' }],
    mythic: [
        { loot: 'Heart Scale', weight: 2 },
        { loot: 'Galarian Darmanitan (Zen)', ignoreDebuff: true },
    ],
}, 33915762, [
    new DungeonBossPokemon('Galarian Rapidash', 161099869, 60),
    new DungeonBossPokemon('Abomasnow', 161099869, 60),
    new DungeonBossPokemon('Trevenant', 161099869, 60),
    new DungeonBossPokemon('Weavile', 161099869, 60),
    new DungeonBossPokemon('Calyrex', 169578810, 80, { requirement: new QuestLineStepCompletedRequirement('The Crown of Galar', 8) }),
], 2200000, 55);
// Function, because we don't have 'player' on load
const maxLairQuestStepRandomIndex = (index) => {
    SeededRand.seed(+player.trainerId);
    return SeededRand.shuffleArray([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])[index];
};
dungeonList['Max Lair'] = new Dungeon('Max Lair', ['Ivysaur', 'Charmeleon', 'Wartortle', 'Grovyle', 'Sceptile', 'Combusken', 'Blaziken', 'Marshtomp', 'Swampert', 'Cradily', 'Cofagrigus', 'Fraxure', 'Toxtricity (Amped)', 'Toxtricity (Low Key)'], {
    common: [
        { loot: 'xAttack' },
        { loot: 'xClick' },
    ],
    rare: [
        { loot: 'Brown Shard' },
        { loot: 'Rose Shard' },
    ],
    epic: [
        { loot: 'Draco Plate' },
        { loot: 'Toxic Plate' },
    ],
    legendary: [
        { loot: 'Duskball' },
        { loot: 'Quickball' },
        { loot: 'Fastball' },
        { loot: 'Repeatball' },
    ],
    mythic: [
        { loot: 'Carbos', weight: 2 },
        { loot: 'Rare_Candy' },
    ],
}, 33915762, [
    new DungeonBossPokemon('Gigantamax Venusaur', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(0)), new ObtainedPokemonRequirement('Gigantamax Venusaur', true)]) }),
    new DungeonBossPokemon('Gigantamax Venusaur', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Venusaur') }),
    new DungeonBossPokemon('Gigantamax Charizard', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(1)), new ObtainedPokemonRequirement('Gigantamax Charizard', true)]) }),
    new DungeonBossPokemon('Gigantamax Charizard', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Charizard') }),
    new DungeonBossPokemon('Gigantamax Blastoise', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(2)), new ObtainedPokemonRequirement('Gigantamax Blastoise', true)]) }),
    new DungeonBossPokemon('Gigantamax Blastoise', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Blastoise') }),
    new DungeonBossPokemon('Gigantamax Butterfree', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(3)), new ObtainedPokemonRequirement('Gigantamax Butterfree', true)]) }),
    new DungeonBossPokemon('Gigantamax Butterfree', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Butterfree') }),
    new DungeonBossPokemon('Gigantamax Pikachu', 164353300, 70, { hide: true, weight: 4, requirement: new ObtainedPokemonRequirement('Gigantamax Pikachu', true) }),
    new DungeonBossPokemon('Gigantamax Pikachu', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Pikachu') }),
    new DungeonBossPokemon('Gigantamax Meowth', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new ObtainedPokemonRequirement('Gigantamax Meowth', true), new QuestLineStepCompletedRequirement('The Lair of Giants', 2)]) }),
    new DungeonBossPokemon('Gigantamax Meowth', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Meowth') }),
    new DungeonBossPokemon('Gigantamax Machamp', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(4)), new ObtainedPokemonRequirement('Gigantamax Machamp', true)]) }),
    new DungeonBossPokemon('Gigantamax Machamp', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Machamp') }),
    new DungeonBossPokemon('Gigantamax Gengar', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(5)), new ObtainedPokemonRequirement('Gigantamax Gengar', true)]) }),
    new DungeonBossPokemon('Gigantamax Gengar', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Gengar') }),
    new DungeonBossPokemon('Gigantamax Kingler', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(6)), new ObtainedPokemonRequirement('Gigantamax Kingler', true)]) }),
    new DungeonBossPokemon('Gigantamax Kingler', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Kingler') }),
    new DungeonBossPokemon('Gigantamax Lapras', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(7)), new ObtainedPokemonRequirement('Gigantamax Lapras', true)]) }),
    new DungeonBossPokemon('Gigantamax Lapras', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Lapras') }),
    new DungeonBossPokemon('Gigantamax Eevee', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new ObtainedPokemonRequirement('Gigantamax Eevee', true), new QuestLineStepCompletedRequirement('The Lair of Giants', 2)]) }),
    new DungeonBossPokemon('Gigantamax Eevee', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Eevee') }),
    new DungeonBossPokemon('Gigantamax Snorlax', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(8)), new ObtainedPokemonRequirement('Gigantamax Snorlax', true)]) }),
    new DungeonBossPokemon('Gigantamax Snorlax', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Snorlax') }),
    new DungeonBossPokemon('Gigantamax Garbodor', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(9)), new ObtainedPokemonRequirement('Gigantamax Garbodor', true)]) }),
    new DungeonBossPokemon('Gigantamax Garbodor', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Garbodor') }),
    new DungeonBossPokemon('Gigantamax Melmetal', 169578810, 70, { hide: true, weight: 2, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(10)), new ObtainedPokemonRequirement('Gigantamax Melmetal', true)]) }),
    new DungeonBossPokemon('Gigantamax Melmetal', 169578810, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Melmetal') }),
    new DungeonBossPokemon('Gigantamax Rillaboom', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(11)), new ObtainedPokemonRequirement('Gigantamax Rillaboom', true)]) }),
    new DungeonBossPokemon('Gigantamax Rillaboom', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Rillaboom') }),
    new DungeonBossPokemon('Gigantamax Cinderace', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(12)), new ObtainedPokemonRequirement('Gigantamax Cinderace', true)]) }),
    new DungeonBossPokemon('Gigantamax Cinderace', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Cinderace') }),
    new DungeonBossPokemon('Gigantamax Inteleon', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(13)), new ObtainedPokemonRequirement('Gigantamax Inteleon', true)]) }),
    new DungeonBossPokemon('Gigantamax Inteleon', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Inteleon') }),
    new DungeonBossPokemon('Gigantamax Corviknight', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(14)), new ObtainedPokemonRequirement('Gigantamax Corviknight', true)]) }),
    new DungeonBossPokemon('Gigantamax Corviknight', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Corviknight') }),
    new DungeonBossPokemon('Gigantamax Orbeetle', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(15)), new ObtainedPokemonRequirement('Gigantamax Orbeetle', true)]) }),
    new DungeonBossPokemon('Gigantamax Orbeetle', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Orbeetle') }),
    new DungeonBossPokemon('Gigantamax Drednaw', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(16)), new ObtainedPokemonRequirement('Gigantamax Drednaw', true)]) }),
    new DungeonBossPokemon('Gigantamax Drednaw', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Drednaw') }),
    new DungeonBossPokemon('Gigantamax Coalossal', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(17)), new ObtainedPokemonRequirement('Gigantamax Coalossal', true)]) }),
    new DungeonBossPokemon('Gigantamax Coalossal', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Coalossal') }),
    new DungeonBossPokemon('Gigantamax Flapple', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(18)), new ObtainedPokemonRequirement('Gigantamax Flapple', true)]) }),
    new DungeonBossPokemon('Gigantamax Flapple', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Flapple') }),
    new DungeonBossPokemon('Gigantamax Appletun', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(19)), new ObtainedPokemonRequirement('Gigantamax Appletun', true)]) }),
    new DungeonBossPokemon('Gigantamax Appletun', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Appletun') }),
    new DungeonBossPokemon('Gigantamax Sandaconda', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(20)), new ObtainedPokemonRequirement('Gigantamax Sandaconda', true)]) }),
    new DungeonBossPokemon('Gigantamax Sandaconda', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Sandaconda') }),
    new DungeonBossPokemon('Gigantamax Toxtricity', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(21)), new ObtainedPokemonRequirement('Gigantamax Toxtricity', true)]) }),
    new DungeonBossPokemon('Gigantamax Toxtricity', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Toxtricity') }),
    new DungeonBossPokemon('Gigantamax Centiskorch', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(22)), new ObtainedPokemonRequirement('Gigantamax Centiskorch', true)]) }),
    new DungeonBossPokemon('Gigantamax Centiskorch', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Centiskorch') }),
    new DungeonBossPokemon('Gigantamax Hatterene', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(23)), new ObtainedPokemonRequirement('Gigantamax Hatterene', true)]) }),
    new DungeonBossPokemon('Gigantamax Hatterene', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Hatterene') }),
    new DungeonBossPokemon('Gigantamax Grimmsnarl', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(24)), new ObtainedPokemonRequirement('Gigantamax Grimmsnarl', true)]) }),
    new DungeonBossPokemon('Gigantamax Grimmsnarl', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Grimmsnarl') }),
    new DungeonBossPokemon('Gigantamax Alcremie', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(25)), new ObtainedPokemonRequirement('Gigantamax Alcremie', true)]) }),
    new DungeonBossPokemon('Gigantamax Alcremie', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Alcremie') }),
    new DungeonBossPokemon('Gigantamax Copperajah', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(26)), new ObtainedPokemonRequirement('Gigantamax Copperajah', true)]) }),
    new DungeonBossPokemon('Gigantamax Copperajah', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Copperajah') }),
    new DungeonBossPokemon('Gigantamax Duraludon', 164353300, 70, { hide: true, weight: 4, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(27)), new ObtainedPokemonRequirement('Gigantamax Duraludon', true)]) }),
    new DungeonBossPokemon('Gigantamax Duraludon', 164353300, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Duraludon') }),
    new DungeonBossPokemon('Gigantamax Urshifu (Single Strike)', 169578810, 70, { hide: true, weight: 2, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(28)), new ObtainedPokemonRequirement('Gigantamax Urshifu (Single Strike)', true)]) }),
    new DungeonBossPokemon('Gigantamax Urshifu (Single Strike)', 169578810, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Urshifu (Single Strike)') }),
    new DungeonBossPokemon('Gigantamax Urshifu (Rapid Strike)', 169578810, 70, { hide: true, weight: 2, requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', () => maxLairQuestStepRandomIndex(29)), new ObtainedPokemonRequirement('Gigantamax Urshifu (Rapid Strike)', true)]) }),
    new DungeonBossPokemon('Gigantamax Urshifu (Rapid Strike)', 169578810, 70, { hide: true, requirement: new ObtainedPokemonRequirement('Gigantamax Urshifu (Rapid Strike)') }),
    new DungeonBossPokemon('Eternamax Eternatus', 176361964, 100, { hide: true, requirement: new QuestLineCompletedRequirement('The Lair of Giants') }),
], 2500000, 46);
//Hisui Dungeons
dungeonList['Floaro Gardens'] = new Dungeon('Floaro Gardens', ['Wurmple', 'Silcoon', 'Cascoon', 'Pichu', 'Drifloon', 'Shinx', 'Luxio'], {
    common: [
        { loot: 'Cheri' },
        { loot: 'Rawst' },
        { loot: 'Leppa' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
        { loot: 'Nanab' },
        { loot: 'Pinap' },
    ],
    rare: [{ loot: 'Green Shard' }],
    epic: [
        { loot: 'Meadow Plate' },
        { loot: 'Star Piece' },
    ],
    legendary: [{ loot: 'Miracle_Seed' }],
}, 2603000, [
    new DungeonBossPokemon('Beautifly', 10000000, 31),
    new DungeonBossPokemon('Dustox', 10000000, 31),
    new DungeonBossPokemon('Shaymin (Land)', 10000000, 70, { hide: true, requirement: new DevelopmentRequirement() }),
], 96500, 1);
dungeonList['Oreburrow Tunnel'] = new Dungeon('Oreburrow Tunnel', ['Geodude', 'Machop', 'Zubat', 'Happiny'], {
    common: [
        { loot: 'Cheri' },
        { loot: 'Rawst' },
        { loot: 'Leppa' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
        { loot: 'Nanab' },
        { loot: 'Pinap' },
    ],
    rare: [
        { loot: 'Brown Shard' },
        // {loot: 'Beige Shard'},
    ],
    epic: [{ loot: 'Stone Plate' }],
    legendary: [{ loot: 'Rock_Incense' }],
}, 2603000, [new DungeonBossPokemon('Graveler', 10000000, 28)], 96500, 11);
dungeonList.Heartwood = new Dungeon('Heartwood', ['Geodude', 'Zubat', 'Golbat', 'Psyduck', 'Wurmple', 'Silcoon', 'Cascoon', 'Combee', 'Buneary'], {
    common: [
        { loot: 'Cheri' },
        { loot: 'Rawst' },
        { loot: 'Leppa' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
        { loot: 'Nanab' },
        { loot: 'Pinap' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Lime Shard' },
    ],
    epic: [{ loot: 'Insect Plate' }],
    legendary: [{ loot: 'Silver_Powder' }],
}, 2603000, [
    new DungeonBossPokemon('Scyther', 10000000, 31),
    new DungeonBossPokemon('Beautifly', 10000000, 31),
    new DungeonBossPokemon('Dustox', 10000000, 31),
], 96500, 10);
// All Unown
const AncientSolaceonUnownList = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ?!'.split('');
dungeonList['Ancient Solaceon Ruins'] = new Dungeon('Ancient Solaceon Ruins', ['Paras', 'Carnivine', 'Croagunk', 'Yanma', 'Stunky', 'Kirlia'], {
    common: [
        { loot: 'Cheri' },
        { loot: 'Pecha' },
        { loot: 'Chesto' },
        { loot: 'Aspear' },
        { loot: 'Leppa' },
        { loot: 'Razz' },
    ],
    rare: [
        { loot: 'Pink Shard' },
        // {loot: 'Beige Shard'},
    ],
    epic: [{ loot: 'Mind Plate' }],
    legendary: [{ loot: 'Twisted_Spoon' }],
}, 960000, [
    ...AncientSolaceonUnownList.map((char, index) => {
        const req = new OneFromManyRequirement([
            new SeededDateSelectNRequirement(index, AncientSolaceonUnownList.length, 1),
            new MultiRequirement([new SeededDateSelectNRequirement(index, AncientSolaceonUnownList.length, 2), new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Ancient Solaceon Ruins'))]),
            new MultiRequirement([new SeededDateSelectNRequirement(index, AncientSolaceonUnownList.length, 3), new ClearDungeonRequirement(250, GameConstants.getDungeonIndex('Ancient Solaceon Ruins'))]),
        ]);
        return new DungeonBossPokemon(`Unown (${char})`, 4100000, 30, {
            hide: true,
            requirement: new CustomRequirement(ko.pureComputed(() => req.isCompleted()), true, UnownHint),
        });
    }),
], 96500, 13);
dungeonList['Shrouded Ruins'] = new Dungeon('Shrouded Ruins', ['Geodude', 'Graveler', 'Rhyhorn', 'Gastly', 'Haunter', 'Lickitung', 'Ralts', 'Kirlia', 'Carnivine', 'Burmy (Sand)'], {
    common: [
        { loot: 'Cheri' },
        { loot: 'Pecha' },
        { loot: 'Chesto' },
        { loot: 'Aspear' },
        { loot: 'Leppa' },
        { loot: 'Razz' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
    ],
    rare: [
        { loot: 'Black Shard' },
        // {loot: 'Beige Shard'},
    ],
    epic: [
        { loot: 'Spooky Plate' },
        { loot: 'Dread Plate' },
    ],
    legendary: [{ loot: 'Black_Glasses' }],
}, 2603000, [
    new DungeonBossPokemon('Lickilicky', 10000000, 52),
    new DungeonBossPokemon('Spiritomb', 10000000, 80),
], 96500, 16);
dungeonList['Veilstone Cape'] = new Dungeon('Veilstone Cape', ['Glameow', 'Murkrow', 'Vulpix', 'Mothim', 'Burmy (Trash)', 'Wormadam (Trash)', 'Geodude', 'Graveler'], {
    common: [
        { loot: 'Cheri', weight: 2 },
        { loot: 'Pecha', weight: 2 },
        { loot: 'Rawst', weight: 2 },
        { loot: 'Nanab', weight: 2 },
        { loot: 'Leppa', weight: 2 },
        { loot: 'Pinap', weight: 2 },
        { loot: 'Razz', weight: 2 },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Greatball', weight: 1 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Green Shard' },
        { loot: 'Blue Shard' },
    ],
    epic: [{ loot: 'Flame Plate' }],
    legendary: [
        { loot: 'Charcoal' },
        { loot: 'Rock_Incense' },
    ],
}, 2603000, [
    new DungeonBossPokemon('Purugly', 10000000, 45),
    new DungeonBossPokemon('Beautifly', 10000000, 47),
    new DungeonBossPokemon('Dustox', 10000000, 47),
    new DungeonBossPokemon('Hisuian Growlithe', 10000000, 47),
], 96500, 31);
dungeonList['Firespit Island'] = new Dungeon('Firespit Island', ['Graveler', 'Magby', 'Magmar'], {
    common: [
        { loot: 'Cheri' },
        { loot: 'Pecha' },
        { loot: 'Chesto' },
        { loot: 'Aspear' },
        { loot: 'Leppa' },
        { loot: 'Razz' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Grey Shard' },
    ],
    epic: [
        { loot: 'Flame Plate' },
        { loot: 'Iron Plate' },
    ],
    legendary: [
        { loot: 'Charcoal' },
        { loot: 'Metal_Powder' },
    ],
}, 2603000, [
    new DungeonBossPokemon('Ninetales', 10000000, 61),
    new DungeonBossPokemon('Heatran', 10000000, 70, { hide: true, requirement: new DevelopmentRequirement() }),
], 96500, 36);
dungeonList['Ancient Wayward Cave'] = new Dungeon('Ancient Wayward Cave', ['Zubat', 'Golbat', 'Barboach', 'Whiscash', 'Gible'], {
    common: [
        { loot: 'Cheri', weight: 2 },
        { loot: 'Chesto', weight: 2 },
        { loot: 'Pecha', weight: 2 },
        { loot: 'Rawst', weight: 2 },
        { loot: 'Aspear', weight: 2 },
        { loot: 'Leppa', weight: 2 },
        { loot: 'Oran', weight: 2 },
        { loot: 'Sitrus', weight: 2 },
        { loot: 'Mago', weight: 2 },
        { loot: 'Iapapa', weight: 2 },
        { loot: 'Wiki', weight: 2 },
        { loot: 'Aguav', weight: 2 },
        { loot: 'Nanab', weight: 2 },
        { loot: 'Pinap', weight: 2 },
        { loot: 'Razz', weight: 2 },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Greatball', weight: 1.5 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Cyan Shard' },
        // {loot: 'Beige Shard'},
    ],
    epic: [{ loot: 'Revive' }],
    legendary: [
        { loot: 'Star Piece' },
        { loot: 'MediumRestore' },
        { loot: 'LargeRestore' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Ancient Wayward Cave')) },
    ],
}, 2603000, [new DungeonBossPokemon('Crobat', 10000000, 60)], 96500, 38);
dungeonList['Ancient Quarry'] = new Dungeon('Ancient Quarry', ['Bronzor', 'Goomy', 'Stunky', 'Croagunk', 'Skuntank', 'Toxicroak'], {
    common: [
        { loot: 'Cheri', weight: 2 },
        { loot: 'Chesto', weight: 2 },
        { loot: 'Pecha', weight: 2 },
        { loot: 'Rawst', weight: 2 },
        { loot: 'Aspear', weight: 2 },
        { loot: 'Leppa', weight: 2 },
        { loot: 'Oran', weight: 2 },
        { loot: 'Sitrus', weight: 2 },
        { loot: 'Mago', weight: 2 },
        { loot: 'Iapapa', weight: 2 },
        { loot: 'Wiki', weight: 2 },
        { loot: 'Aguav', weight: 2 },
        { loot: 'Nanab', weight: 2 },
        { loot: 'Pinap', weight: 2 },
        { loot: 'Razz', weight: 2 },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Greatball', weight: 1.5 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Grey Shard' },
        // {loot: 'Beige Shard'},
    ],
    epic: [{ loot: 'Revive' }],
    legendary: [
        { loot: 'Star Piece' },
        { loot: 'MediumRestore' },
        { loot: 'LargeRestore' },
        { loot: 'Metal_Powder' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Ancient Quarry')) },
    ],
}, 2603000, [
    new DungeonBossPokemon('Bronzong', 10000000, 55),
    new DungeonBossPokemon('Hisuian Sliggoo', 10000000, 55),
], 96500, 39);
dungeonList['Primeval Grotto'] = new Dungeon('Primeval Grotto', ['Bronzor', 'Scyther', 'Gligar', 'Nosepass', 'Gyarados', 'Cherubi', 'Cherrim (Overcast)'], {
    common: [
        { loot: 'Cheri', weight: 2 },
        { loot: 'Chesto', weight: 2 },
        { loot: 'Pecha', weight: 2 },
        { loot: 'Rawst', weight: 2 },
        { loot: 'Aspear', weight: 2 },
        { loot: 'Leppa', weight: 2 },
        { loot: 'Oran', weight: 2 },
        { loot: 'Sitrus', weight: 2 },
        { loot: 'Mago', weight: 2 },
        { loot: 'Iapapa', weight: 2 },
        { loot: 'Wiki', weight: 2 },
        { loot: 'Aguav', weight: 2 },
        { loot: 'Nanab', weight: 2 },
        { loot: 'Pinap', weight: 2 },
        { loot: 'Razz', weight: 2 },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Greatball', weight: 1.5 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Brown Shard' },
        { loot: 'Purple Shard' },
        // {loot: 'Beige Shard'},
    ],
    epic: [{ loot: 'Revive' }],
    legendary: [
        { loot: 'Star Piece' },
        { loot: 'MediumRestore' },
        { loot: 'LargeRestore' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Primeval Grotto')) },
    ],
}, 2603000, [
    new DungeonBossPokemon('Probopass', 10000000, 71),
    new DungeonBossPokemon('Gliscor', 10000000, 71),
    new DungeonBossPokemon('Hisuian Sneasel', 10000000, 71),
], 96500, 42);
dungeonList['Clamberclaw Cliffs'] = new Dungeon('Clamberclaw Cliffs', ['Gligar', 'Geodude', 'Graveler', 'Gastly', 'Haunter', 'Gible', 'Burmy (Sand)', 'Wormadam (Sand)', 'Bronzor'], {
    common: [
        { loot: 'Cheri', weight: 2 },
        { loot: 'Chesto', weight: 2 },
        { loot: 'Pecha', weight: 2 },
        { loot: 'Rawst', weight: 2 },
        { loot: 'Aspear', weight: 2 },
        { loot: 'Leppa', weight: 2 },
        { loot: 'Oran', weight: 2 },
        { loot: 'Sitrus', weight: 2 },
        { loot: 'Mago', weight: 2 },
        { loot: 'Iapapa', weight: 2 },
        { loot: 'Wiki', weight: 2 },
        { loot: 'Aguav', weight: 2 },
        { loot: 'Nanab', weight: 2 },
        { loot: 'Pinap', weight: 2 },
        { loot: 'Razz', weight: 2 },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Greatball', weight: 1.5 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Black Shard' },
        { loot: 'Purple Shard' },
        // {loot: 'Beige Shard'},
    ],
    epic: [
        { loot: 'Revive' },
        { loot: 'Toxic Plate' },
    ],
    legendary: [
        { loot: 'Star Piece' },
        { loot: 'MediumRestore' },
        { loot: 'LargeRestore' },
        { loot: 'Poison_Barb' },
        { loot: 'Black_Glasses' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Clamberclaw Cliffs')) },
    ],
}, 2603000, [
    new DungeonBossPokemon('Bronzong', 10000000, 44),
    new DungeonBossPokemon('Gabite', 10000000, 47),
    new DungeonBossPokemon('Darkrai', 10000000, 70, { hide: true, requirement: new DevelopmentRequirement() }),
], 96500, 40);
dungeonList['Celestica Ruins'] = new Dungeon('Celestica Ruins', ['Geodude', 'Graveler', 'Nosepass', 'Gligar', 'Burmy (Sand)', 'Gastly', 'Haunter', 'Bonsly', 'Misdreavus'], {
    common: [
        { loot: 'Cheri', weight: 2 },
        { loot: 'Chesto', weight: 2 },
        { loot: 'Pecha', weight: 2 },
        { loot: 'Rawst', weight: 2 },
        { loot: 'Aspear', weight: 2 },
        { loot: 'Leppa', weight: 2 },
        { loot: 'Oran', weight: 2 },
        { loot: 'Sitrus', weight: 2 },
        { loot: 'Mago', weight: 2 },
        { loot: 'Iapapa', weight: 2 },
        { loot: 'Wiki', weight: 2 },
        { loot: 'Aguav', weight: 2 },
        { loot: 'Nanab', weight: 2 },
        { loot: 'Pinap', weight: 2 },
        { loot: 'Razz', weight: 2 },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Greatball', weight: 1.5 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Lime Shard' },
        // {loot: 'Beige Shard'},
    ],
    epic: [{ loot: 'Revive' }],
    legendary: [
        { loot: 'Star Piece' },
        { loot: 'MediumRestore' },
        { loot: 'LargeRestore' },
        { loot: 'Silver_Powder' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Celestica Ruins')) },
    ],
}, 2603000, [
    new DungeonBossPokemon('Sudowoodo', 10000000, 57),
    new DungeonBossPokemon('Wormadam (Sand)', 10000000, 57),
], 96500, 40);
dungeonList['Sacred Plaza'] = new Dungeon('Sacred Plaza', ['Geodude', 'Graveler', 'Rhyhorn', 'Gastly', 'Haunter', 'Burmy (Sand)', 'Wormadam (Sand)', 'Nosepass', 'Luxio', 'Chingling', 'Chimecho', 'Misdreavus', 'Rotom', 'Hisuian Voltorb'], {
    common: [
        { loot: 'Cheri', weight: 2 },
        { loot: 'Chesto', weight: 2 },
        { loot: 'Pecha', weight: 2 },
        { loot: 'Rawst', weight: 2 },
        { loot: 'Aspear', weight: 2 },
        { loot: 'Leppa', weight: 2 },
        { loot: 'Oran', weight: 2 },
        { loot: 'Sitrus', weight: 2 },
        { loot: 'Mago', weight: 2 },
        { loot: 'Iapapa', weight: 2 },
        { loot: 'Wiki', weight: 2 },
        { loot: 'Aguav', weight: 2 },
        { loot: 'Nanab', weight: 2 },
        { loot: 'Pinap', weight: 2 },
        { loot: 'Razz', weight: 2 },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Greatball', weight: 1.5 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        // {loot: 'Beige Shard'},
    ],
    epic: [{ loot: 'Revive' }],
    legendary: [
        { loot: 'Star Piece' },
        { loot: 'MediumRestore' },
        { loot: 'LargeRestore' },
        { loot: 'Soft_Sand' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Celestica Ruins')) },
    ],
}, 2603000, [
    new DungeonBossPokemon('Rhydon', 10000000, 71),
    new DungeonBossPokemon('Luxray', 10000000, 55),
], 96500, 45);
dungeonList['Avalugg\'s Legacy'] = new Dungeon('Avalugg\'s Legacy', ['Hisuian Sneasel', 'Bergmite', 'Swinub', 'Piloswine', 'Drifloon', 'Drifblim', 'Bibarel', 'Glalie', 'Froslass'], {
    common: [
        { loot: 'Chesto' },
        { loot: 'Aspear' },
        { loot: 'Leppa' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
        { loot: 'Razz' },
    ],
    rare: [
        { loot: 'White Shard' },
        // {loot: 'Beige Shard'},
    ],
    epic: [{ loot: 'Icicle Plate' }],
    legendary: [{ loot: 'Never_Melt_Ice' }],
}, 2603000, [
    new DungeonBossPokemon('Mamoswine', 10000000, 68),
    new DungeonBossPokemon('Hisuian Avalugg', 10000000, 51),
], 96500, 48);
dungeonList['Ice Column Chamber'] = new Dungeon('Ice Column Chamber', ['Bergmite', 'Misdreavus'], {
    common: [
        { loot: 'Chesto' },
        { loot: 'Aspear' },
        { loot: 'Pecha' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
        { loot: 'Razz' },
    ],
    rare: [{ loot: 'White Shard' }],
    epic: [{ loot: 'Icicle Plate' }],
}, 2603000, [new DungeonBossPokemon('Froslass', 10000000, 72)], 96500, 51);
dungeonList['Icepeak Cavern'] = new Dungeon('Icepeak Cavern', ['Bergmite', 'Misdreavus', 'Hisuian Zorua'], {
    common: [
        { loot: 'Chesto' },
        { loot: 'Aspear' },
        { loot: 'Pecha' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
        { loot: 'Razz' },
    ],
    rare: [
        { loot: 'White Shard' },
        { loot: 'Purple Shard' },
    ],
    epic: [{ loot: 'Icicle Plate' }],
    legendary: [{ loot: 'Never_Melt_Ice' }],
}, 2603000, [new DungeonBossPokemon('Hisuian Zoroark', 10000000, 67)], 96500, 49);
dungeonList['Ancient Snowpoint Temple'] = new Dungeon('Ancient Snowpoint Temple', ['Zubat', 'Golbat', 'Graveler', 'Ralts', 'Kirlia', 'Glalie', 'Froslass', 'Bronzor', 'Bronzong'], {
    common: [
        { loot: 'Chesto' },
        { loot: 'Aspear' },
        { loot: 'Pecha' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
        { loot: 'Razz' },
    ],
    rare: [{ loot: 'White Shard' }],
    // epic: [{loot: 'Blank Plate'}],
    legendary: [{ loot: 'Silk_Scarf' }],
}, 2603000, [
    new DungeonBossPokemon('Gallade', 10000000, 70),
    new DungeonBossPokemon('Regigigas', 10000000, 70, { hide: true, requirement: new DevelopmentRequirement() }),
], 96500, 54);
dungeonList['Seaside Hollow'] = new Dungeon('Seaside Hollow', ['Octillery', 'Phione'], {
    common: [
        { loot: 'Cheri', weight: 2 },
        { loot: 'Pecha', weight: 2 },
        { loot: 'Rawst', weight: 2 },
        { loot: 'Nanab', weight: 2 },
        { loot: 'Leppa', weight: 2 },
        { loot: 'Pinap', weight: 2 },
        { loot: 'Razz', weight: 2 },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Greatball', weight: 1.5 },
        { loot: 'Ultraball' },
    ],
    rare: [{ loot: 'Blue Shard' }],
    epic: [{ loot: 'Splash Plate' }],
    legendary: [{ loot: 'Mystic_Water' }],
}, 2603000, [new DungeonBossPokemon('Manaphy', 10000000, 50)], 96500, 36);
dungeonList['Ancient Lake Verity'] = new Dungeon('Ancient Lake Verity', ['Magikarp', 'Gyarados', 'Luxio', 'Luxray', 'Wormadam (Plant)', 'Drifblim', 'Togekiss'], {
    common: [
        { loot: 'Cheri' },
        { loot: 'Rawst' },
        { loot: 'Leppa' },
        { loot: 'Oran' },
        { loot: 'Sitrus' },
        { loot: 'Razz' },
        { loot: 'Nanab' },
        { loot: 'Pinap' },
    ],
    rare: [
        { loot: 'Red Shard' },
        // {loot: 'Beige Shard'},
    ],
    epic: [{ loot: 'Draco Plate' }],
    legendary: [{ loot: 'Twisted_Spoon' }],
}, 2603000, [
    new DungeonBossPokemon('Hisuian Goodra', 10000000, 58),
    new DungeonBossPokemon('Mesprit', 10000000, 70, { hide: true, requirement: new DevelopmentRequirement() }),
], 96500, 3);
dungeonList['Ancient Lake Valor'] = new Dungeon('Ancient Lake Valor', ['Graveler', 'Barboach', 'Whiscash'], {
    common: [
        { loot: 'Oran' },
        { loot: 'Sitrus' },
        { loot: 'Cheri' },
        { loot: 'Pecha' },
        { loot: 'Chesto' },
        { loot: 'Aspear' },
        { loot: 'Leppa' },
        { loot: 'Razz' },
    ],
    rare: [
        { loot: 'Blue Shard' },
        // {loot: 'Beige Shard'},
    ],
    epic: [{ loot: 'Draco Plate' }],
    legendary: [{ loot: 'Twisted_Spoon' }],
}, 2603000, [
    new DungeonBossPokemon('Overqwil', 10000000, 58),
    new DungeonBossPokemon('Azelf', 10000000, 70, { hide: true, requirement: new DevelopmentRequirement() }),
], 96500, 16);
dungeonList['Ancient Lake Acuity'] = new Dungeon('Ancient Lake Acuity', ['Abra', 'Kadabra', 'Chingling', 'Chimecho', 'Burmy (Trash)', 'Wormadam (Trash)', 'Rufflet', 'Basculin (White-Striped)'], {
    common: [
        { loot: 'Oran' },
        { loot: 'Sitrus' },
        { loot: 'Chesto' },
        { loot: 'Aspear' },
        { loot: 'Leppa' },
        { loot: 'Razz' },
    ],
    rare: [
        { loot: 'Yellow Shard' },
        // {loot: 'Beige Shard'},
    ],
    epic: [{ loot: 'Draco Plate' }],
    legendary: [{ loot: 'Twisted_Spoon' }],
}, 2603000, [
    new DungeonBossPokemon('Hisuian Zoroark', 10000000, 58),
    new DungeonBossPokemon('Uxie', 10000000, 70, { hide: true, requirement: new DevelopmentRequirement() }),
], 96500, 54);
dungeonList['Temple of Sinnoh'] = new Dungeon('Temple of Sinnoh', ['Bronzong', 'Floatzel', 'Magnezone', 'Lumineon', 'Lucario', 'Bibarel', 'Garchomp'], {
    common: [
        { loot: 'Cheri', weight: 2 },
        { loot: 'Chesto', weight: 2 },
        { loot: 'Pecha', weight: 2 },
        { loot: 'Rawst', weight: 2 },
        { loot: 'Aspear', weight: 2 },
        { loot: 'Leppa', weight: 2 },
        { loot: 'Oran', weight: 2 },
        { loot: 'Sitrus', weight: 2 },
        { loot: 'Figy', weight: 2 },
        { loot: 'Mago', weight: 2 },
        { loot: 'Iapapa', weight: 2 },
        { loot: 'Wiki', weight: 2 },
        { loot: 'Aguav', weight: 2 },
        { loot: 'Nanab', weight: 2 },
        { loot: 'Pinap', weight: 2 },
        { loot: 'Razz', weight: 2 },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Greatball', weight: 1.5 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Red Shard' },
        { loot: 'Blue Shard' },
        { loot: 'Yellow Shard' },
        { loot: 'Green Shard' },
        { loot: 'Purple Shard' },
        { loot: 'Grey Shard' },
        { loot: 'Ochre Shard' },
        { loot: 'Crimson Shard' },
        { loot: 'Lime Shard' },
        { loot: 'Black Shard' },
        { loot: 'White Shard' },
        { loot: 'Pink Shard' },
        { loot: 'Cyan Shard' },
        { loot: 'Brown Shard' },
        { loot: 'Rose Shard' },
        // {loot: 'Beige Shard'},
    ],
    epic: [
        // {loot: 'Blank Plate'},
        { loot: 'Draco Plate' },
        { loot: 'Dread Plate' },
        { loot: 'Earth Plate' },
        { loot: 'Fist Plate' },
        { loot: 'Flame Plate' },
        { loot: 'Icicle Plate' },
        { loot: 'Insect Plate' },
        { loot: 'Iron Plate' },
        { loot: 'Meadow Plate' },
        { loot: 'Mind Plate' },
        { loot: 'Pixie Plate' },
        { loot: 'Sky Plate' },
        { loot: 'Splash Plate' },
        { loot: 'Spooky Plate' },
        { loot: 'Stone Plate' },
        { loot: 'Toxic Plate' },
        { loot: 'Zap Plate' },
        { loot: 'Revive' },
    ],
    legendary: [
        { loot: 'MediumRestore' },
        { loot: 'LargeRestore' },
        { loot: 'Silk_Scarf' },
    ],
    mythic: [
        { loot: 'Max Revive' },
        { loot: 'Lum', requirement: new ClearDungeonRequirement(100, GameConstants.getDungeonIndex('Temple of Sinnoh')) },
    ],
}, 1350400, [
    new DungeonTrainer('The Galaxy Team\'s Kamado', [
        new GymPokemon('Hisuian Braviary', 1128000, 61),
        new GymPokemon('Golem', 1128000, 61),
        new GymPokemon('Clefable', 1128000, 61),
        new GymPokemon('Snorlax', 1128000, 61),
    ], { weight: 4 }),
    new DungeonBossPokemon('Dialga (Origin)', 11880000, 70, { hide: true, requirement: new DevelopmentRequirement() }),
    new DungeonBossPokemon('Palkia (Origin)', 11880000, 70, { hide: true, requirement: new DevelopmentRequirement() }),
], 96500, 46);
dungeonList['Turnback Cave'] = new Dungeon('Turnback Cave', ['Gabite', 'Hisuian Sliggoo', 'Dusclops', 'Gengar', 'Rotom', 'Drifblim', 'Hisuian Zorua'], {
    common: [
        { loot: 'Cheri', weight: 2 },
        { loot: 'Pecha', weight: 2 },
        { loot: 'Rawst', weight: 2 },
        { loot: 'Oran', weight: 2 },
        { loot: 'Sitrus', weight: 2 },
        { loot: 'Nanab', weight: 2 },
        { loot: 'Leppa', weight: 2 },
        { loot: 'Pinap', weight: 2 },
        { loot: 'Razz', weight: 2 },
        { loot: 'Pokeball', weight: 2 },
        { loot: 'Greatball', weight: 1.5 },
        { loot: 'Ultraball' },
    ],
    rare: [
        { loot: 'Purple Shard' },
        { loot: 'Black Shard' },
    ],
    epic: [
        { loot: 'Spooky Plate' },
        { loot: 'Draco Plate' },
    ],
    legendary: [
        { loot: 'Spell_Tag' },
        { loot: 'Dragon_Fang' },
    ],
}, 2603000, [
    new DungeonBossPokemon('Garchomp', 10000000, 58),
    new DungeonBossPokemon('Dusknoir', 10000000, 58),
    new DungeonBossPokemon('Mismagius', 10000000, 58),
    new DungeonBossPokemon('Froslass', 10000000, 58),
    new DungeonBossPokemon('Giratina (Origin)', 10000000, 70),
], 96500, 32);
// Paldea Dungeons
dungeonList['Inlet Grotto'] = new Dungeon('Inlet Grotto', ['Diglett', 'Houndour', 'Yungoos'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
}, 33915762, [new DungeonBossPokemon('Houndoom', 161099869, 30)], 2200000, 1);
//This is ridiculous. Should certainly be split up if a way to do so is found, and possibly some encounters removed outright.
dungeonList['Glaseado Mountain'] = new Dungeon('Glaseado Mountain', ['Magneton', 'Haunter', 'Sneasel', 'Ursaring', 'Delibird', 'Kirlia', 'Gardevoir', 'Vigoroth', 'Grumpig'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
}, 33915762, [
    new DungeonBossPokemon('Spiritomb', 161099869, 30),
    new DungeonBossPokemon('Cetitan', 161099869, 30),
    new DungeonBossPokemon('Arctibax', 161099869, 30),
], 2200000, 1);
dungeonList['Grasswither Shrine'] = new Dungeon('Grasswither Shrine', ['Shiftry', 'Cacturne'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
}, 33915762, [new DungeonBossPokemon('Wo-Chien', 161099869, 60)], 2200000, 1);
dungeonList['Icerend Shrine'] = new Dungeon('Icerend Shrine', ['Weavile'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
}, 33915762, [new DungeonBossPokemon('Chien-Pao', 161099869, 60)], 2200000, 1);
dungeonList['Groundblight Shrine'] = new Dungeon('Groundblight Shrine', ['Krookodile'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
}, 33915762, [new DungeonBossPokemon('Ting-Lu', 161099869, 60)], 2200000, 1);
dungeonList['Firescourge Shrine'] = new Dungeon('Firescourge Shrine', ['Houndoom'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
}, 33915762, [new DungeonBossPokemon('Chi-Yu', 161099869, 60)], 2200000, 1);
// May be split up into two areas (Area Zero: Heights & Area Zero: Lower (Needs better name)).
//To have some of the regular Paradox mons be exclusive to one area, I am likely going to have Slither Wing/Iron Moth and Sandy Shocks/Iron Thorns be exclusive to Area Zero (pretty sure they actually are, anyway), and Great Tusk/Iron Treads and Flutter Mane/Iron Jugulis be exclusive to Area Zero Depths
dungeonList['Area Zero'] = new Dungeon('Area Zero', ['Venomoth', 'Meditite', 'Medicham', 'Braviary', 'Corviknight', 'Floette (White)', 'Raichu', 'Jumpluff', 'Girafarig', 'Volcarona', 'Frosmoth', 'Farigiraf', 'Swablu', 'Altaria', 'Flamigo', 'Phanpy', 'Donphan', 'Talonflame', 'Lycanroc (Midday)', 'Lycanroc (Midnight)', 'Garganacl', 'Masquerain', 'Tadbulb', 'Bellibolt', 'Pawniard', 'Bisharp', 'Numel', 'Camerupt', 'Sneasel', 'Weavile', 'Scream Tail', 'Iron Bundle', 'Brute Bonnet', 'Iron Hands', 'Flutter Mane', 'Iron Jugulis', 'Slither Wing', 'Iron Moth', 'Sandy Shocks', 'Iron Thorns'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
}, 33915762, [
    new DungeonBossPokemon('Glimmora', 161099869, 30, { weight: 4 }),
    new DungeonBossPokemon('Roaring Moon', 161099869, 30, { hide: true, weight: 2, requirement: new TemporaryBattleRequirement('Paradise Protection Protocol') }),
    new DungeonBossPokemon('Iron Valiant', 161099869, 30, { hide: true, weight: 2, requirement: new TemporaryBattleRequirement('Paradise Protection Protocol') }),
], 2200000, 1);
dungeonList['Area Zero Depths'] = new Dungeon('Area Zero Depths', ['Glimmet', 'Dunsparce', 'Gible', 'Gabite', 'Sableye', 'Garganacl', 'Greavard', 'Houndstone', 'Dugtrio', 'Zweilous', 'Dreepy', 'Drakloak', 'Espathra', 'Dudunsparce (Two-Segment)', 'Great Tusk', 'Iron Treads', 'Scream Tail', 'Iron Bundle', 'Flutter Mane', 'Iron Jugulis', 'Brute Bonnet', 'Iron Hands', /*Slither Wing and Iron Moth are only found in Grass. I have never seen Grass, nor these Pokémon, in the depths, so they may not actually spawn here*/ 'Slither Wing', 'Iron Moth', /*Sandy Shocks have the same situation as Slither Wing and Iron Moth, except in Rocky environment*/ 'Sandy Shocks', 'Iron Thorns'], {
    common: [
        { loot: 'Lucky_egg' },
        { loot: 'Lucky_incense' },
    ],
    epic: [{ loot: 'Heart Scale' }],
}, 33915762, [
    new DungeonBossPokemon('Glimmora', 161099869, 30, { weight: 5 }),
    new DungeonBossPokemon('Koraidon', 161099869, 30, { hide: true, requirement: new TemporaryBattleRequirement('Paradise Protection Protocol') }),
    new DungeonBossPokemon('Miraidon', 161099869, 30, { hide: true, requirement: new TemporaryBattleRequirement('Paradise Protection Protocol') }),
], 2200000, 1);
/// <reference path="../../declarations/GameHelper.d.ts" />
class DungeonBattle extends Battle {
    /**
     * Award the player with money and exp, and throw a Pokéball if applicable
     */
    static defeatPokemon() {
        var _a, _b;
        const enemyPokemon = this.enemyPokemon();
        // Handle Trainer Pokemon defeat
        if (this.trainer()) {
            this.defeatTrainerPokemon();
            return;
        }
        DungeonRunner.fighting(false);
        if (DungeonRunner.fightingLootEnemy) {
            DungeonRunner.fightingLootEnemy = false;
        }
        else if (!DungeonRunner.fightingBoss()) {
            GameHelper.incrementObservable(DungeonRunner.encountersWon);
        }
        if (DungeonRunner.fightingBoss()) {
            DungeonRunner.fightingBoss(false);
            DungeonRunner.defeatedBoss(enemyPokemon.name);
        }
        enemyPokemon.defeat();
        App.game.breeding.progressEggsBattle(DungeonRunner.dungeon.difficultyRoute, player.region);
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
        // Clearing Dungeon tile
        DungeonRunner.map.currentTile().type(GameConstants.DungeonTileType.empty);
        DungeonRunner.map.currentTile().calculateCssClass();
        // Attempting to catch Pokemon
        const isShiny = enemyPokemon.shiny;
        const isShadow = enemyPokemon.shadow == GameConstants.ShadowStatus.Shadow;
        const pokeBall = App.game.pokeballs.calculatePokeballToUse(enemyPokemon.id, isShiny, isShadow, enemyPokemon.encounterType);
        const route = ((_b = (_a = player.town) === null || _a === void 0 ? void 0 : _a.dungeon) === null || _b === void 0 ? void 0 : _b.difficultyRoute) || 1;
        const region = player.region;
        if (pokeBall !== GameConstants.Pokeball.None) {
            this.prepareCatch(enemyPokemon, pokeBall);
            setTimeout(() => {
                this.attemptCatch(enemyPokemon, route, region);
                if (DungeonRunner.defeatedBoss()) {
                    DungeonRunner.dungeonWon();
                }
            }, App.game.pokeballs.calculateCatchTime(pokeBall));
        }
        else if (DungeonRunner.defeatedBoss()) {
            DungeonRunner.dungeonWon();
        }
    }
    /**
     * Handles defeating a trainer Pokemon
     */
    static defeatTrainerPokemon() {
        var _a, _b;
        const enemyPokemon = this.enemyPokemon();
        enemyPokemon.defeat(true);
        GameHelper.incrementObservable(this.trainerPokemonIndex);
        App.game.breeding.progressEggsBattle(DungeonRunner.dungeon.difficultyRoute, player.region);
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
        if (this.enemyPokemon().shadow == GameConstants.ShadowStatus.Shadow) {
            // Attempting to catch Pokemon
            const isShiny = enemyPokemon.shiny;
            const isShadow = enemyPokemon.shadow == GameConstants.ShadowStatus.Shadow;
            const pokeBall = App.game.pokeballs.calculatePokeballToUse(enemyPokemon.id, isShiny, isShadow, enemyPokemon.encounterType);
            const route = ((_b = (_a = player.town) === null || _a === void 0 ? void 0 : _a.dungeon) === null || _b === void 0 ? void 0 : _b.difficultyRoute) || 1;
            const region = player.region;
            if (pokeBall !== GameConstants.Pokeball.None) {
                this.prepareCatch(enemyPokemon, pokeBall);
                setTimeout(() => {
                    this.attemptCatch(enemyPokemon, route, region);
                    DungeonBattle.nextTrainerPokemon();
                }, App.game.pokeballs.calculateCatchTime(pokeBall));
            }
            else {
                DungeonBattle.nextTrainerPokemon();
            }
        }
        else {
            DungeonBattle.nextTrainerPokemon();
        }
    }
    static nextTrainerPokemon() {
        // No Pokemon left, trainer defeated
        if (this.trainerPokemonIndex() >= this.trainer().getTeam().length) {
            // rewards for defeating trainer
            if (this.trainer().options.reward) {
                // Custom reward amount on defeat
                App.game.wallet.addAmount(this.trainer().options.reward);
            }
            else {
                const dungeonCost = DungeonRunner.dungeon.tokenCost;
                // Reward back 50% or 100% (boss) of the total dungeon DT cost as money (excludes achievement multiplier)
                const money = Math.round(dungeonCost * (DungeonRunner.fightingBoss() ? 1 : 0.5));
                App.game.wallet.gainMoney(money, true);
                // Reward back 4% or 10% (boss) of the total dungeon DT cost (excludes achievement multiplier)
                const tokens = Math.round(dungeonCost * (DungeonRunner.fightingBoss() ? 0.1 : 0.04));
                App.game.wallet.gainDungeonTokens(tokens, true);
            }
            DungeonRunner.fighting(false);
            GameHelper.incrementObservable(DungeonRunner.encountersWon);
            if (DungeonRunner.fightingBoss()) {
                DungeonRunner.defeatedBoss(DungeonBattle.trainer().name);
            }
            this.trainer(null);
            this.trainerPokemonIndex(0);
            // Clearing Dungeon tile
            DungeonRunner.map.currentTile().type(GameConstants.DungeonTileType.empty);
            DungeonRunner.map.currentTile().calculateCssClass();
            // Update boss
            if (DungeonRunner.fightingBoss()) {
                DungeonRunner.fightingBoss(false);
                DungeonRunner.dungeonWon();
            }
            // Generate next trainer Pokemon
        }
        else {
            this.generateTrainerPokemon();
        }
    }
    static generateNewEnemy() {
        this.catching(false);
        this.counter = 0;
        // Finding enemy from enemyList
        const enemy = Rand.fromWeightedArray(DungeonRunner.dungeon.availableMinions(), DungeonRunner.dungeon.weightList);
        // Pokemon
        if (typeof enemy === 'string' || enemy.hasOwnProperty('pokemon')) {
            const pokemon = (typeof enemy === 'string') ? enemy : enemy.pokemon;
            const enemyPokemon = PokemonFactory.generateDungeonPokemon(pokemon, DungeonRunner.chestsOpened(), DungeonRunner.dungeon.baseHealth, DungeonRunner.dungeonLevel());
            this.enemyPokemon(enemyPokemon);
            PokemonHelper.incrementPokemonStatistics(enemyPokemon.id, GameConstants.PokemonStatisticsType.Encountered, enemyPokemon.shiny, enemyPokemon.gender, enemyPokemon.shadow);
            // Shiny
            if (enemyPokemon.shiny) {
                App.game.logbook.newLog(LogBookTypes.SHINY, App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id, true)
                    ? createLogContent.encounterShinyDupe({
                        location: player.town.dungeon.name,
                        pokemon: this.enemyPokemon().name,
                    })
                    : createLogContent.encounterShiny({
                        location: player.town.dungeon.name,
                        pokemon: this.enemyPokemon().name,
                    }));
            }
            else if (!App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id)) {
                App.game.logbook.newLog(LogBookTypes.NEW, createLogContent.encounterWild({
                    location: player.town.dungeon.name,
                    pokemon: this.enemyPokemon().name,
                }));
            }
            // Trainer
        }
        else {
            const trainer = enemy;
            this.trainer(trainer);
            this.trainerPokemonIndex(0);
            this.generateTrainerPokemon();
        }
        DungeonRunner.fighting(true);
    }
    static generateNewLootEnemy(pokemon) {
        this.catching(false);
        this.counter = 0;
        const enemyPokemon = PokemonFactory.generateDungeonPokemon(pokemon, DungeonRunner.chestsOpened(), DungeonRunner.dungeon.baseHealth * 2, DungeonRunner.dungeonLevel(), true);
        this.enemyPokemon(enemyPokemon);
        PokemonHelper.incrementPokemonStatistics(enemyPokemon.id, GameConstants.PokemonStatisticsType.Encountered, enemyPokemon.shiny, enemyPokemon.gender, enemyPokemon.shadow);
        // Shiny
        if (enemyPokemon.shiny) {
            App.game.logbook.newLog(LogBookTypes.SHINY, App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id, true)
                ? createLogContent.encounterShinyDupe({
                    location: player.town.dungeon.name,
                    pokemon: this.enemyPokemon().name,
                })
                : createLogContent.encounterShiny({
                    location: player.town.dungeon.name,
                    pokemon: this.enemyPokemon().name,
                }));
        }
        else if (!App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id)) {
            App.game.logbook.newLog(LogBookTypes.NEW, createLogContent.encounterWild({
                location: player.town.dungeon.name,
                pokemon: this.enemyPokemon().name,
            }));
        }
        DungeonRunner.fighting(true);
    }
    /**
     * Handles generating the enemy Trainer Pokemon
     */
    static generateTrainerPokemon() {
        this.counter = 0;
        const pokemon = this.trainer().getTeam()[this.trainerPokemonIndex()];
        const baseHealth = DungeonRunner.fightingBoss() ? pokemon.maxHealth : DungeonRunner.dungeon.baseHealth;
        const level = DungeonRunner.fightingBoss() ? pokemon.level : DungeonRunner.dungeonLevel();
        const enemyPokemon = PokemonFactory.generateDungeonTrainerPokemon(pokemon, DungeonRunner.chestsOpened(), baseHealth, level, DungeonRunner.fightingBoss(), this.trainer().getTeam().length);
        this.enemyPokemon(enemyPokemon);
    }
    static generateNewBoss() {
        DungeonRunner.fighting(true);
        this.catching(false);
        this.counter = 0;
        // Finding boss from bossList
        const enemy = Rand.fromWeightedArray(DungeonRunner.dungeon.availableBosses(), DungeonRunner.dungeon.bossWeightList);
        // Pokemon
        if (enemy instanceof DungeonBossPokemon) {
            this.enemyPokemon(PokemonFactory.generateDungeonBoss(enemy, DungeonRunner.chestsOpened()));
            PokemonHelper.incrementPokemonStatistics(this.enemyPokemon().id, GameConstants.PokemonStatisticsType.Encountered, this.enemyPokemon().shiny, this.enemyPokemon().gender, this.enemyPokemon().shadow);
            // Shiny
            if (this.enemyPokemon().shiny) {
                App.game.logbook.newLog(LogBookTypes.SHINY, App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id, true)
                    ? createLogContent.encounterShinyDupe({
                        location: player.town.dungeon.name,
                        pokemon: this.enemyPokemon().name,
                    })
                    : createLogContent.encounterShiny({
                        location: player.town.dungeon.name,
                        pokemon: this.enemyPokemon().name,
                    }));
            }
            else if (!App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id)) {
                App.game.logbook.newLog(LogBookTypes.NEW, createLogContent.encounterWild({
                    location: player.town.dungeon.name,
                    pokemon: this.enemyPokemon().name,
                }));
            }
        }
        else {
            this.trainer(enemy);
            this.trainerPokemonIndex(0);
            this.generateTrainerPokemon();
        }
    }
}
DungeonBattle.trainer = ko.observable(null);
DungeonBattle.trainerPokemonIndex = ko.observable(0);
DungeonBattle.remainingTrainerPokemon = ko.pureComputed(() => {
    if (!DungeonBattle.trainer()) {
        return 0;
    }
    return DungeonBattle.trainer().getTeam().length - DungeonBattle.trainerPokemonIndex();
});
DungeonBattle.defeatedTrainerPokemon = ko.pureComputed(() => {
    if (!DungeonBattle.trainer()) {
        return 0;
    }
    return DungeonBattle.trainerPokemonIndex();
});
class DungeonFlash {
    constructor(flashConfig) {
        var _a;
        this.flashConfig = flashConfig;
        this.playerOffset = [
            flashConfig.findIndex(row => row.includes('P')),
            (_a = flashConfig.find(row => row.includes('P'))) === null || _a === void 0 ? void 0 : _a.findIndex(state => state === 'P'),
        ];
        if (this.playerOffset.includes(-1)) {
            console.error('DungeonFlash definition does not specify player location', flashConfig);
        }
    }
    apply(board, position) {
        const [pi, pj] = this.playerOffset;
        const { floor, x, y } = position;
        return this.flashConfig.forEach((row, i) => {
            row.forEach((s, j) => {
                var _a;
                if (s === 'F') {
                    const tile = (_a = board[floor][y + i - pi]) === null || _a === void 0 ? void 0 : _a[x + j - pj];
                    if (tile) {
                        tile.isVisible = true;
                    }
                }
            });
        });
    }
}
DungeonFlash.tiers = [
    new DungeonFlash([
        ['-', 'F', '-'],
        ['F', 'P', 'F'],
        ['-', 'F', '-'],
    ]),
    new DungeonFlash([
        ['F', 'F', 'F'],
        ['F', 'P', 'F'],
        ['F', 'F', 'F'],
    ]),
    new DungeonFlash([
        ['-', '-', 'F', '-', '-'],
        ['-', 'F', 'F', 'F', '-'],
        ['F', 'F', 'P', 'F', 'F'],
        ['-', 'F', 'F', 'F', '-'],
        ['-', '-', 'F', '-', '-'],
    ]),
];
class DungeonGuide {
    constructor(name, description, cost, fixedCost, interval, // how often they take a step in ms
    walk, unlockRequirement, trainerSprite) {
        this.name = name;
        this.description = description;
        this.cost = cost;
        this.fixedCost = fixedCost;
        this.interval = interval;
        this.walk = walk;
        this.unlockRequirement = unlockRequirement;
        this.trainerSprite = 0;
        this.hired = ko.observable(false).extend({ boolean: null });
        this.ticks = 0;
        this.index = 0;
        SeededRand.seed(parseInt(this.name, 36));
        this.trainerSprite = trainerSprite !== null && trainerSprite !== void 0 ? trainerSprite : SeededRand.intBetween(0, 118);
    }
    start() {
        DungeonRunner.map.playerMoved(true);
        GameHelper.incrementObservable(DungeonGuides.clears, -1);
        GameHelper.incrementObservable(App.game.statistics.dungeonGuideAttempts[this.index]);
    }
    tick() {
        this.ticks += GameConstants.DUNGEON_TICK;
        if (this.ticks >= this.interval) {
            this.ticks = 0;
            try {
                this.walk();
                // Interact with the current tile
                switch (DungeonRunner.map.currentTile().type()) {
                    case GameConstants.DungeonTileType.chest:
                    case GameConstants.DungeonTileType.boss:
                    case GameConstants.DungeonTileType.ladder:
                        DungeonRunner.handleInteraction(GameConstants.DungeonInteractionSource.DungeonGuide);
                        break;
                }
            }
            catch (e) {
                console.error('Dungeon Guide failed to walk correctly:\n', e);
            }
        }
    }
    end() {
        // Check if more clears already paid for
        if (DungeonGuides.clears() > 0) {
            if (DungeonRunner.canStartDungeon(DungeonRunner.dungeon)) {
                // Need to reset the map
                DungeonRunner.map.board([]);
                DungeonRunner.initializeDungeon(player.town.dungeon);
            }
            else {
                // Most likely, dungeon is not open anymore
                Notifier.notify({
                    title: `[DUNGEON GUIDE] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
                    message: 'I could not enter the dungeon anymore. Here is a refund.',
                    type: NotificationConstants.NotificationOption.danger,
                    timeout: 5 * GameConstants.MINUTE,
                });
                const uncompleteRatio = DungeonGuides.clears() / DungeonGuides.totalClears;
                const refunds = this.calcCost(DungeonGuides.totalClears, DungeonRunner.dungeon.tokenCost, DungeonRunner.dungeon.difficulty, true);
                // Only refund for the cancelled attempts
                refunds.forEach((a) => {
                    a.amount = Math.round(uncompleteRatio * a.amount);
                    App.game.wallet.addAmount(a, true);
                });
                this.fire();
            }
        }
        else {
            // No more clears, fire the guide, reset clears to 1 for modal
            this.fire();
        }
    }
    isUnlocked() {
        var _a, _b;
        return (_b = (_a = this.unlockRequirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    calcCost(clears, price, region, includeDungeonCost = false) {
        const costs = [];
        let discount = Math.pow(clears, 0.975);
        discount /= clears;
        this.cost.forEach(([multiplier, currency]) => {
            costs.push(new Amount(Math.round(Math.pow((price * clears * discount), (1 - region / 100))) * multiplier, currency));
        });
        this.fixedCost.forEach((cost) => {
            const newCost = Object.assign({}, cost);
            newCost.amount = Math.round(cost.amount * clears * discount);
            costs.push(new Amount(newCost.amount, newCost.currency));
        });
        if (includeDungeonCost) {
            let dtCost = costs.find(c => c.currency === GameConstants.Currency.dungeonToken);
            if (!dtCost) {
                dtCost = new Amount(0, GameConstants.Currency.dungeonToken);
                costs.push(dtCost);
            }
            dtCost.amount += price * clears;
        }
        return costs;
    }
    hire() {
        Notifier.notify({
            title: `[DUNGEON GUIDE] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: 'Thanks for hiring me,\nI won\'t let you down!',
            type: NotificationConstants.NotificationOption.success,
            timeout: 30 * GameConstants.SECOND,
        });
        DungeonGuides.hired(this);
    }
    fire() {
        Notifier.notify({
            title: `[DUNGEON GUIDE] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: 'Thanks for the work.\nLet me know when you\'re hiring again!',
            type: NotificationConstants.NotificationOption.info,
            timeout: 30 * GameConstants.SECOND,
        });
        // Hide modals
        $('.modal.show').modal('hide');
        // Reset our clears
        DungeonGuides.clears(1);
        DungeonGuides.totalClears = 1;
        DungeonGuides.hired(null);
    }
}
class DungeonGuides {
    static add(guide) {
        guide.index = this.list.length;
        this.list.push(guide);
    }
    static startDungeon() {
        var _a;
        // Add steps and attack based on efficiency
        (_a = this.hired()) === null || _a === void 0 ? void 0 : _a.start();
    }
    static endDungeon() {
        var _a;
        // runEarly as deferred updates can fail to happen before the dungeon is started again, e.g. DefeatDungeonBossQuest
        ko.tasks.runEarly();
        (_a = this.hired()) === null || _a === void 0 ? void 0 : _a.end();
    }
    static calcCost(includeDungeonCost = false) {
        return this.list[this.selected()].calcCost(this.clears(), player.town.dungeon.tokenCost, player.town.dungeon.difficulty, includeDungeonCost);
    }
    static calcDungeonCost() {
        return new Amount(player.town.dungeon.tokenCost * this.clears(), GameConstants.Currency.dungeonToken);
    }
    static canAfford() {
        const costs = {
            [GameConstants.Currency.dungeonToken]: this.calcDungeonCost(),
        };
        this.calcCost().forEach((cost) => {
            var _a;
            const tempAmount = (_a = costs[cost.currency]) !== null && _a !== void 0 ? _a : new Amount(0, cost.currency);
            tempAmount.amount += cost.amount;
            costs[cost.currency] = tempAmount;
        });
        return Object.values(costs).every((cost) => App.game.wallet.hasAmount(cost));
    }
    static hire() {
        if (DungeonGuides.hired()) {
            return;
        }
        const guide = this.list[this.selected()];
        const dungeon = player.town.dungeon;
        // Check player has enough currency
        if (!this.canAfford()) {
            Notifier.notify({
                title: `[DUNGEON GUIDE] <img src="assets/images/profile/trainer-${guide.trainerSprite}.png" height="24px" class="pixelated"/> ${guide.name}`,
                message: 'You can\'t currently afford to hire me...',
                type: NotificationConstants.NotificationOption.warning,
                timeout: 30 * GameConstants.SECOND,
            });
            return;
        }
        // Just in case the dungeon is locked or something
        if (!DungeonRunner.canStartDungeon(dungeon)) {
            Notifier.notify({
                title: `[DUNGEON GUIDE] <img src="assets/images/profile/trainer-${guide.trainerSprite}.png" height="24px" class="pixelated"/> ${guide.name}`,
                message: 'You can\'t access that dungeon right now!',
                type: NotificationConstants.NotificationOption.warning,
                timeout: 30 * GameConstants.SECOND,
            });
            return;
        }
        // Charge the player and hire the guide
        guide.hire();
        this.calcCost().forEach((cost) => App.game.wallet.loseAmount(cost));
        App.game.wallet.loseAmount(this.calcDungeonCost());
        DungeonGuides.totalClears = DungeonGuides.clears();
        // Hide modals
        $('.modal.show').modal('hide');
        // Start the dungeon
        DungeonRunner.initializeDungeon(dungeon);
    }
    static getRandomWeightedNearbyTile(nearbyTiles) {
        const weightedTiles = nearbyTiles.map(t => {
            let weight = 0.5;
            weight += !t.isVisited ? 1.5 : 0;
            weight += [GameConstants.DungeonTileType.enemy].includes(t.type()) ? 1 : 0;
            weight += [GameConstants.DungeonTileType.chest].includes(t.type()) ? 2 : 0;
            weight += [GameConstants.DungeonTileType.boss, GameConstants.DungeonTileType.ladder].includes(t.type()) ? 4 : 0;
            return weight;
        });
        return Rand.fromWeightedArray(nearbyTiles, weightedTiles);
    }
}
DungeonGuides.list = [];
DungeonGuides.available = ko.pureComputed(() => DungeonGuides.list.filter(f => f.isUnlocked()));
DungeonGuides.selected = ko.observable(0).extend({ numeric: 0 });
DungeonGuides.hired = ko.observable(null);
DungeonGuides.clears = ko.observable(1).extend({ numeric: 0 });
DungeonGuides.totalClears = 1;
// Note: Trainer sprite is (seeded) randomly generated, or can be set manually, please make sure it kind of matches the name
DungeonGuides.add(new DungeonGuide('Jimmy', 'Doesn\'t really know their way around a dungeon, but gives it their best try!', [[4, GameConstants.Currency.money]], [], 2000, () => {
    // Get current position
    const pos = DungeonRunner.map.playerPosition();
    const nearbyTiles = DungeonRunner.map.nearbyTiles(pos);
    // We just want to move weighted randomly
    const randomTile = DungeonGuides.getRandomWeightedNearbyTile(nearbyTiles);
    DungeonRunner.map.moveToTile(randomTile.position);
}));
DungeonGuides.add(new DungeonGuide('Timmy', 'Can smell when there is a treasure chest on a tile near them!', [[4, GameConstants.Currency.money], [1, GameConstants.Currency.dungeonToken]], [], 2000, () => {
    // Get current position
    const pos = DungeonRunner.map.playerPosition();
    const nearbyTiles = DungeonRunner.map.nearbyTiles(pos);
    // Check if any tiles within 3 spaces contain a chest
    const treasureTiles = DungeonRunner.map.board()[pos.floor].flat().filter(t => t.type() == GameConstants.DungeonTileType.chest);
    if (treasureTiles.length) {
        const paths = treasureTiles.map(t => DungeonRunner.map.findShortestPath(pos, t.position)).filter(t => t.length <= 3);
        if (paths === null || paths === void 0 ? void 0 : paths.length) {
            const shortestPath = Math.min(...paths.map(p => p.length));
            const path = Rand.fromArray(paths.filter(p => p.length == shortestPath));
            // We found some treasure, move to it
            DungeonRunner.map.moveToTile(path[0]);
            return;
        }
    }
    // We didn't find what we were looking for, We just want to move weighted randomly
    const randomTile = DungeonGuides.getRandomWeightedNearbyTile(nearbyTiles);
    DungeonRunner.map.moveToTile(randomTile.position);
}, new MaxRegionRequirement(GameConstants.Region.johto)));
DungeonGuides.add(new DungeonGuide('Shelly', 'Prefers to explore the unknown!', [[4, GameConstants.Currency.money], [4, GameConstants.Currency.dungeonToken]], [new Amount(5, GameConstants.Currency.questPoint)], 1500, () => {
    // Get current position
    const pos = DungeonRunner.map.playerPosition();
    const nearbyTiles = DungeonRunner.map.nearbyTiles(pos);
    // Check if any tiles within 3 spaces are unexplored
    const unexploredTiles = DungeonRunner.map.board()[pos.floor].flat().filter(t => !t.isVisited);
    if (unexploredTiles.length) {
        const paths = unexploredTiles.map(t => DungeonRunner.map.findShortestPath(pos, t.position)).filter(t => t.length <= 3);
        if (paths === null || paths === void 0 ? void 0 : paths.length) {
            const shortestPath = Math.min(...paths.map(p => p.length));
            const path = Rand.fromArray(paths.filter(p => p.length == shortestPath));
            // We found an unexplored tile, move to it
            DungeonRunner.map.moveToTile(path[0]);
            return;
        }
    }
    // We didn't find what we were looking for, We just want to move weighted randomly
    const randomTile = DungeonGuides.getRandomWeightedNearbyTile(nearbyTiles);
    DungeonRunner.map.moveToTile(randomTile.position);
}, new MaxRegionRequirement(GameConstants.Region.hoenn)));
DungeonGuides.add(new DungeonGuide('Angeline', 'Can find treasure anywhere, loves to explore new areas!', [[15, GameConstants.Currency.money], [10, GameConstants.Currency.dungeonToken]], [new Amount(150, GameConstants.Currency.diamond)], 1000, () => {
    // Get current position
    const pos = DungeonRunner.map.playerPosition();
    const nearbyTiles = DungeonRunner.map.nearbyTiles(pos);
    // Look for any unopened chest
    const treasureTiles = DungeonRunner.map.board()[pos.floor].flat().filter(t => t.type() == GameConstants.DungeonTileType.chest);
    if (treasureTiles.length) {
        const paths = treasureTiles.map(t => DungeonRunner.map.findShortestPath(pos, t.position));
        if (paths === null || paths === void 0 ? void 0 : paths.length) {
            const shortestPath = Math.min(...paths.map(p => p.length));
            const path = Rand.fromArray(paths.filter(p => p.length == shortestPath));
            // We found some treasure, move to it
            DungeonRunner.map.moveToTile(path[0]);
            return;
        }
    }
    // Look for any unexplored areas
    const unexploredTiles = DungeonRunner.map.board()[pos.floor].flat().filter(t => !t.isVisited);
    if (unexploredTiles.length) {
        const paths = unexploredTiles.map(t => DungeonRunner.map.findShortestPath(pos, t.position));
        if (paths === null || paths === void 0 ? void 0 : paths.length) {
            const shortestPath = Math.min(...paths.map(p => p.length));
            const path = Rand.fromArray(paths.filter(p => p.length == shortestPath));
            // We found an unexplored tile, move to it
            DungeonRunner.map.moveToTile(path[0]);
            return;
        }
    }
    // We didn't find what we were looking for, We just want to move weighted randomly
    const randomTile = DungeonGuides.getRandomWeightedNearbyTile(nearbyTiles);
    DungeonRunner.map.moveToTile(randomTile.position);
}, new MaxRegionRequirement(GameConstants.Region.kalos)));
DungeonGuides.add(new DungeonGuide('Georgia', 'Knows the path to the boss, avoids random encounters when possible.', [[20, GameConstants.Currency.money], [20, GameConstants.Currency.dungeonToken]], [new Amount(300, GameConstants.Currency.diamond)], 900, () => {
    var _a, _b;
    // Get current position
    const pos = DungeonRunner.map.playerPosition();
    const nearbyTiles = DungeonRunner.map.nearbyTiles(pos);
    const bossPosition = (_a = DungeonRunner.map.board()[pos.floor].flat().find(t => t.type() == GameConstants.DungeonTileType.boss)) === null || _a === void 0 ? void 0 : _a.position;
    const ladderPosition = (_b = DungeonRunner.map.board()[pos.floor].flat().find(t => t.type() == GameConstants.DungeonTileType.ladder)) === null || _b === void 0 ? void 0 : _b.position;
    // Shortest path to the boss avoiding enemies
    let path = bossPosition || ladderPosition ? DungeonRunner.map.findShortestPath(pos, bossPosition || ladderPosition, [GameConstants.DungeonTileType.enemy]) : [];
    // If no path avoiding enemies, then any path will do
    if ((path === null || path === void 0 ? void 0 : path.length) <= 1) {
        path = bossPosition || ladderPosition ? DungeonRunner.map.findShortestPath(pos, bossPosition || ladderPosition) : [];
    }
    if (path === null || path === void 0 ? void 0 : path.length) {
        // We found the boss or a ladder, move to it
        DungeonRunner.map.moveToTile(path[0]);
        return;
    }
    // We didn't find what we were looking for, We just want to move weighted randomly
    const randomTile = DungeonGuides.getRandomWeightedNearbyTile(nearbyTiles);
    DungeonRunner.map.moveToTile(randomTile.position);
}, new MaxRegionRequirement(GameConstants.Region.alola)));
DungeonGuides.add(new DungeonGuide('Drake', 'Knows the shortest path to the boss!', [[20, GameConstants.Currency.money], [20, GameConstants.Currency.dungeonToken]], [new Amount(450, GameConstants.Currency.diamond)], 800, () => {
    var _a, _b;
    // Get current position
    const pos = DungeonRunner.map.playerPosition();
    const nearbyTiles = DungeonRunner.map.nearbyTiles(pos);
    const bossPosition = (_a = DungeonRunner.map.board()[pos.floor].flat().find(t => t.type() == GameConstants.DungeonTileType.boss)) === null || _a === void 0 ? void 0 : _a.position;
    const ladderPosition = (_b = DungeonRunner.map.board()[pos.floor].flat().find(t => t.type() == GameConstants.DungeonTileType.ladder)) === null || _b === void 0 ? void 0 : _b.position;
    const path = bossPosition || ladderPosition ? DungeonRunner.map.findShortestPath(pos, bossPosition || ladderPosition) : [];
    if (path === null || path === void 0 ? void 0 : path.length) {
        // We found the boss or a ladder, move to it
        DungeonRunner.map.moveToTile(path[0]);
        return;
    }
    // We didn't find what we were looking for, We just want to move weighted randomly
    const randomTile = DungeonGuides.getRandomWeightedNearbyTile(nearbyTiles);
    DungeonRunner.map.moveToTile(randomTile.position);
}, new MaxRegionRequirement(GameConstants.Region.galar)));
class DungeonMap {
    constructor(size, generateChestLoot, flash) {
        var _a;
        this.generateChestLoot = generateChestLoot;
        this.flash = flash;
        if (size <= GameConstants.MAX_DUNGEON_SIZE) {
            this.floorSizes = [size];
        }
        else {
            this.floorSizes = [GameConstants.MAX_DUNGEON_SIZE, size - GameConstants.MAX_DUNGEON_SIZE + GameConstants.MIN_DUNGEON_SIZE - 1];
        }
        this.board = ko.observable(this.generateMap());
        this.playerPosition = ko.observable(new Point(Math.floor(this.floorSizes[0] / 2), this.floorSizes[0] - 1));
        this.playerMoved = ko.observable(false);
        this.currentTile().hasPlayer = true;
        (_a = this.flash) === null || _a === void 0 ? void 0 : _a.apply(this.board(), this.playerPosition());
        this.totalFights = ko.observable(this.board().flat().flat().filter((t) => t.type() == GameConstants.DungeonTileType.enemy).length);
        this.totalChests = ko.observable(this.board().flat().flat().filter((t) => t.type() == GameConstants.DungeonTileType.chest).length);
    }
    moveToCoordinates(x, y, floor = undefined) {
        if (this.moveToTile(new Point(x, y, floor !== null && floor !== void 0 ? floor : this.playerPosition().floor))) {
            this.playerMoved(true);
        }
    }
    moveUp() {
        this.moveToCoordinates(this.playerPosition().x, this.playerPosition().y - 1);
    }
    moveRight() {
        this.moveToCoordinates(this.playerPosition().x + 1, this.playerPosition().y);
    }
    moveDown() {
        this.moveToCoordinates(this.playerPosition().x, this.playerPosition().y + 1);
    }
    moveLeft() {
        this.moveToCoordinates(this.playerPosition().x - 1, this.playerPosition().y);
    }
    moveToTile(point) {
        var _a;
        if (this.hasAccessToTile(point)) {
            this.currentTile().hasPlayer = false;
            this.playerPosition(point);
            (_a = this.flash) === null || _a === void 0 ? void 0 : _a.apply(this.board(), this.playerPosition());
            this.currentTile().hasPlayer = true;
            this.currentTile().isVisible = true;
            this.currentTile().isVisited = true;
            if (this.currentTile().type() == GameConstants.DungeonTileType.enemy) {
                DungeonBattle.generateNewEnemy();
            }
            return true;
        }
        return false;
    }
    showChestTiles() {
        for (let i = 0; i < this.board()[this.playerPosition().floor].length; i++) {
            for (let j = 0; j < this.board()[this.playerPosition().floor][i].length; j++) {
                if (this.board()[this.playerPosition().floor][i][j].type() == GameConstants.DungeonTileType.chest) {
                    this.board()[this.playerPosition().floor][i][j].isVisible = true;
                }
            }
        }
    }
    showAllTiles() {
        for (let i = 0; i < this.board()[this.playerPosition().floor].length; i++) {
            for (let j = 0; j < this.board()[this.playerPosition().floor][i].length; j++) {
                this.board()[this.playerPosition().floor][i][j].isVisible = true;
            }
        }
    }
    currentTile() {
        return this.board()[this.playerPosition().floor][this.playerPosition().y][this.playerPosition().x];
    }
    nearbyTiles(point, avoidTiles = []) {
        var _a, _b, _c, _d;
        const tiles = [];
        tiles.push((_a = this.board()[point.floor][point.y - 1]) === null || _a === void 0 ? void 0 : _a[point.x]);
        tiles.push((_b = this.board()[point.floor][point.y + 1]) === null || _b === void 0 ? void 0 : _b[point.x]);
        tiles.push((_c = this.board()[point.floor][point.y]) === null || _c === void 0 ? void 0 : _c[point.x - 1]);
        tiles.push((_d = this.board()[point.floor][point.y]) === null || _d === void 0 ? void 0 : _d[point.x + 1]);
        return tiles.filter(t => t && !avoidTiles.includes(t.type()));
    }
    findShortestPath(start, goal, avoidTiles = []) {
        const pathing = [start];
        const fromPos = {};
        fromPos[`${start.x},${start.y}`] = null;
        while (pathing.length > 0) {
            const current = pathing.shift();
            if (current.x === goal.x && current.y === goal.y) {
                break;
            }
            const neighbors = this.nearbyTiles(current, avoidTiles);
            const randNeighbors = Rand.shuffleArray(neighbors);
            randNeighbors.forEach(neighbor => {
                if (!fromPos[`${neighbor.position.x},${neighbor.position.y}`]) {
                    pathing.push(neighbor.position);
                    fromPos[`${neighbor.position.x},${neighbor.position.y}`] = current;
                }
            });
        }
        let current = goal;
        const path = [];
        while (current != undefined && (current.x !== start.x || current.y !== start.y)) {
            path.unshift(current);
            current = fromPos[`${current.x},${current.y}`];
        }
        return path;
    }
    hasAccessToTile(point) {
        var _a;
        // If player fighting/catching they cannot move right now
        if (DungeonRunner.fighting() || DungeonBattle.catching()) {
            return false;
        }
        // If tile out of bounds, it's invalid
        if (point.x < 0 || point.x >= this.floorSizes[point.floor] || point.y < 0 || point.y >= this.floorSizes[point.floor]) {
            return false;
        }
        if ((_a = this.board()[point.floor][point.y]) === null || _a === void 0 ? void 0 : _a[point.x].isVisited) {
            return true;
        }
        //If any of the adjacent Tiles is visited, it's a valid Tile.
        return this.nearbyTiles(point).some(t => t.isVisited);
    }
    generateMap() {
        const map = [];
        this.floorSizes.forEach((size, index) => {
            // Fill mapList with required Tiles
            const mapList = [];
            // Boss or ladder
            if (index == this.floorSizes.length - 1) {
                mapList.push(new DungeonTile(GameConstants.DungeonTileType.boss, null));
            }
            else {
                mapList.push(new DungeonTile(GameConstants.DungeonTileType.ladder, null));
            }
            // Chests (leave 1 space for enemy and 1 space for entrance)
            for (let i = 0; i < size && mapList.length < size * size - 2; i++) {
                mapList.push(new DungeonTile(GameConstants.DungeonTileType.chest, this.generateChestLoot()));
            }
            // Enemy Pokemon (leave 1 space for entrance)
            for (let i = 0; i < size * 2 + 3 && mapList.length < size * size - 1; i++) {
                mapList.push(new DungeonTile(GameConstants.DungeonTileType.enemy, null));
            }
            // Fill with empty tiles (leave 1 space for entrance)
            for (let i = mapList.length; i < size * size - 1; i++) {
                mapList.push(new DungeonTile(GameConstants.DungeonTileType.empty, null));
            }
            // Shuffle the tiles randomly
            this.shuffle(mapList);
            // Then place the entrance tile
            const entranceTile = new DungeonTile(GameConstants.DungeonTileType.entrance, null);
            entranceTile.isVisible = true;
            entranceTile.isVisited = true;
            mapList.splice(mapList.length + 1 - Math.ceil(size / 2), 0, entranceTile);
            // Create a 2d array
            const floor = [];
            while (mapList.length) {
                floor.push(mapList.splice(0, size));
            }
            map.push(floor);
        });
        // Map positions to each tile
        return map.map((floor, floorIndex) => {
            return floor.map((row, rowIndex) => {
                return row.map((tile, tileIndex) => {
                    tile.position = new Point(tileIndex, rowIndex, floorIndex);
                    return tile;
                });
            });
        });
    }
    /**
     * Shuffles array in place.
     * @param {Array} a items The array containing the items.
     */
    shuffle(a) {
        let j, x, i;
        for (i = a.length; i; i--) {
            j = Rand.floor(i);
            x = a[i - 1];
            a[i - 1] = a[j];
            a[j] = x;
        }
    }
}
/// <reference path="../../declarations/TemporaryScriptTypes.d.ts" />
/// <reference path="../../declarations/GameHelper.d.ts" />
class DungeonRunner {
    static initializeDungeon(dungeon) {
        if (!DungeonRunner.canStartDungeon(dungeon)) {
            let message;
            let notifType;
            if (!dungeon.isUnlocked()) {
                if (dungeon.name === 'Viridian Forest') {
                    message = 'You need the Dungeon Ticket to access dungeons.\n<i>Check out the shop at Viridian City.</i>';
                    notifType = NotificationConstants.NotificationOption.danger;
                }
                else {
                    message = `You don't have access to this dungeon yet.\n<i>${dungeon.getRequirementHints()}</i>`;
                    notifType = NotificationConstants.NotificationOption.warning;
                }
            }
            else if (!dungeon.hasUnlockedBoss()) {
                message = 'You can\'t access this dungeon right now because all of its bosses are locked.';
                notifType = NotificationConstants.NotificationOption.warning;
            }
            else if (!DungeonGuides.hired() && !DungeonRunner.hasEnoughTokens(dungeon)) {
                message = 'You don\'t have enough Dungeon Tokens.';
                notifType = NotificationConstants.NotificationOption.danger;
            }
            else {
                message = 'You can\'t enter this dungeon right now.';
                notifType = NotificationConstants.NotificationOption.danger;
            }
            Notifier.notify({
                message: message,
                type: notifType,
            });
            return false;
        }
        DungeonRunner.dungeon = dungeon;
        // Only charge the player if they aren't using a dungeon guide as they are charged when they start the dungeon
        if (!DungeonGuides.hired()) {
            App.game.wallet.loseAmount(new Amount(DungeonRunner.dungeon.tokenCost, GameConstants.Currency.dungeonToken));
        }
        // Reset any trainers/pokemon if there was one previously
        DungeonBattle.trainer(null);
        DungeonBattle.trainerPokemonIndex(0);
        DungeonBattle.enemyPokemon(null);
        DungeonRunner.timeBonus(FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute));
        DungeonRunner.timeLeft(GameConstants.DUNGEON_TIME * DungeonRunner.timeBonus());
        DungeonRunner.timeLeftPercentage(100);
        // Dungeon size increases with each region
        let dungeonSize = GameConstants.BASE_DUNGEON_SIZE + (dungeon.difficulty);
        // Decrease dungeon size by 1 for every 10, 100, 1000 etc completes
        dungeonSize -= Math.max(0, App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(DungeonRunner.dungeon.name)]().toString().length - 1);
        const flash = DungeonRunner.getFlash(DungeonRunner.dungeon.name);
        const generateChestLoot = () => {
            const clears = App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(dungeon.name)]();
            const debuffed = DungeonRunner.isDungeonDebuffed(dungeon);
            // Ignores debuff on first attempt to get loot that ignores debuff.
            let tier = dungeon.getRandomLootTier(clears);
            let loot = dungeon.getRandomLoot(tier);
            if (!loot.ignoreDebuff && debuffed) {
                tier = dungeon.getRandomLootTier(clears, debuffed, true);
                loot = dungeon.getRandomLoot(tier, true);
            }
            return { tier, loot };
        };
        // Dungeon size minimum of MIN_DUNGEON_SIZE
        DungeonRunner.map = new DungeonMap(Math.max(GameConstants.MIN_DUNGEON_SIZE, dungeonSize), generateChestLoot, flash);
        DungeonRunner.chestsOpened(0);
        DungeonRunner.encountersWon(0);
        DungeonRunner.chestsOpenedPerFloor = new Array(DungeonRunner.map.board().length).fill(0);
        DungeonRunner.currentTileType = ko.pureComputed(() => {
            return DungeonRunner.map.currentTile().type;
        });
        DungeonRunner.fightingLootEnemy = false;
        DungeonRunner.fightingBoss(false);
        DungeonRunner.defeatedBoss(null);
        DungeonRunner.dungeonFinished(false);
        App.game.gameState = GameConstants.GameState.dungeon;
        // If we have a dungeon guide, start them walking
        DungeonGuides.startDungeon();
    }
    static tick() {
        var _a;
        if (DungeonRunner.timeLeft() <= 0) {
            if (DungeonRunner.defeatedBoss()) {
                DungeonRunner.dungeonWon();
            }
            else {
                DungeonRunner.dungeonLost();
            }
            return;
        }
        // Tick our dungeon guides
        (_a = DungeonGuides.hired()) === null || _a === void 0 ? void 0 : _a.tick();
        if (DungeonRunner.map.playerMoved()) {
            DungeonRunner.timeLeft(DungeonRunner.timeLeft() - GameConstants.DUNGEON_TICK);
            DungeonRunner.timeLeftPercentage(Math.floor(DungeonRunner.timeLeft() / (GameConstants.DUNGEON_TIME * FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute)) * 100));
            if (DungeonRunner.continuousInteractionInput) {
                DungeonRunner.handleInteraction(GameConstants.DungeonInteractionSource.HeldKeybind);
            }
        }
        const currentFluteBonus = FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute);
        if (currentFluteBonus != DungeonRunner.timeBonus()) {
            if (currentFluteBonus > DungeonRunner.timeBonus()) {
                if (DungeonRunner.timeBonus() === 1) {
                    DungeonRunner.timeBonus(currentFluteBonus);
                    DungeonRunner.timeLeft(DungeonRunner.timeLeft() * DungeonRunner.timeBonus());
                }
                else {
                    DungeonRunner.timeLeft(DungeonRunner.timeLeft() / DungeonRunner.timeBonus());
                    DungeonRunner.timeBonus(currentFluteBonus);
                    DungeonRunner.timeLeft(DungeonRunner.timeLeft() * DungeonRunner.timeBonus());
                }
            }
            else {
                DungeonRunner.timeLeft(DungeonRunner.timeLeft() / DungeonRunner.timeBonus());
                DungeonRunner.timeBonus(currentFluteBonus);
            }
        }
    }
    /**
     * Handles the interaction event in the dungeon view and from keybinds
     */
    static handleInteraction(source = GameConstants.DungeonInteractionSource.Click) {
        if (DungeonRunner.fighting() && !DungeonBattle.catching() && source === GameConstants.DungeonInteractionSource.Click) {
            DungeonBattle.clickAttack();
        }
        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTileType.entrance && (source === GameConstants.DungeonInteractionSource.Click || source === GameConstants.DungeonInteractionSource.Keybind) && !DungeonGuides.hired()) {
            DungeonRunner.dungeonLeave();
        }
        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTileType.chest) {
            DungeonRunner.openChest();
        }
        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTileType.boss && !DungeonRunner.fightingBoss()) {
            DungeonRunner.startBossFight();
        }
        else if (DungeonRunner.map.currentTile().type() === GameConstants.DungeonTileType.ladder) {
            DungeonRunner.nextFloor();
        }
    }
    static openChest() {
        const tile = DungeonRunner.map.currentTile();
        if (tile.type() !== GameConstants.DungeonTileType.chest) {
            return;
        }
        GameHelper.incrementObservable(DungeonRunner.chestsOpened);
        DungeonRunner.chestsOpenedPerFloor[DungeonRunner.map.playerPosition().floor]++;
        const { tier, loot } = tile.metadata;
        let amount = loot.amount || 1;
        const tierWeight = {
            common: 4,
            rare: 3,
            epic: 2,
            legendary: 1,
            mythic: 0,
        }[tier];
        // Decreasing chance for rarer items (41.7% → 8.3%), ×150% with Dowsing Machine on
        let moreItemsChance = 0.5 / (4 / (tierWeight + 1)) / 1.5;
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.Dowsing_machine)()) {
            moreItemsChance *= 1.5;
        }
        if (Rand.chance(moreItemsChance)) {
            // Gain more items in higher regions
            const region = DungeonRunner.dungeon.difficulty;
            amount *= 1 + Math.max(1, Math.round(Math.max(tierWeight, 2) / 8 * (region + 1)));
        }
        DungeonRunner.gainLoot(loot.loot, amount, tierWeight);
        if (tier === 'mythic' && !loot.ignoreDebuff && DungeonRunner.isDungeonDebuffed(DungeonRunner.dungeon)) {
            AchievementHandler.unlockAchievement('Lucky Loot');
        }
        DungeonRunner.map.currentTile().type(GameConstants.DungeonTileType.empty);
        DungeonRunner.map.currentTile().calculateCssClass();
        if (DungeonRunner.chestsOpenedPerFloor[DungeonRunner.map.playerPosition().floor] == Math.floor(DungeonRunner.map.floorSizes[DungeonRunner.map.playerPosition().floor] / 3)) {
            DungeonRunner.map.showChestTiles();
        }
        if (DungeonRunner.chestsOpenedPerFloor[DungeonRunner.map.playerPosition().floor] == Math.ceil(DungeonRunner.map.floorSizes[DungeonRunner.map.playerPosition().floor] / 2)) {
            DungeonRunner.map.showAllTiles();
        }
    }
    static gainLoot(input, amount, weight) {
        if (typeof BerryType[input] == 'number') {
            DungeonRunner.lootNotification(input, amount, weight, FarmController.getBerryImage(BerryType[GameConstants.humanifyString(input)]));
            return App.game.farming.gainBerry(BerryType[GameConstants.humanifyString(input)], amount, false);
        }
        else if (ItemList[input] instanceof PokeballItem) {
            DungeonRunner.lootNotification(input, amount, weight, ItemList[input].image);
            return App.game.pokeballs.gainPokeballs(GameConstants.Pokeball[GameConstants.humanifyString(input)], amount, false);
        }
        else if (UndergroundItems.getByName(input) instanceof UndergroundItem) {
            DungeonRunner.lootNotification(input, amount, weight, UndergroundItems.getByName(input).image);
            return UndergroundController.gainMineItem(UndergroundItems.getByName(input).id, amount);
        }
        else if (PokemonHelper.getPokemonByName(input).name != 'MissingNo.') {
            const image = `assets/images/pokemon/${PokemonHelper.getPokemonByName(input).id}.png`;
            DungeonRunner.lootNotification(input, amount, weight, image);
            DungeonRunner.fightingLootEnemy = true;
            return DungeonBattle.generateNewLootEnemy(input);
        }
        else if (ItemList[input] instanceof MegaStoneItem) {
            DungeonRunner.lootNotification(input, amount, weight, ItemList[input].image);
            ItemList[input].gain(1);
        }
        else if (ItemList[input] instanceof EvolutionStone || EggItem || BattleItem || Vitamin || EnergyRestore) {
            if (ItemList[input] instanceof Vitamin) {
                GameHelper.incrementObservable(App.game.statistics.totalVitaminsObtained, amount);
            }
            DungeonRunner.lootNotification(input, amount, weight, ItemList[input].image);
            return player.gainItem(ItemList[input].name, amount);
        }
        else {
            DungeonRunner.lootNotification(input, amount, weight, ItemList[input].image);
            return player.gainItem(ItemList.xAttack, 1);
        }
    }
    static lootNotification(input, amount, weight, image) {
        let message = `Found ${amount} × <img src="${image}" height="24px"/> ${GameConstants.pluralizeString(GameConstants.camelCaseToString(GameConstants.humanifyString(input)), amount)} in a dungeon chest.`;
        let type = NotificationConstants.NotificationOption.success;
        let setting = NotificationConstants.NotificationSetting.Dungeons.common_dungeon_item_found;
        if (typeof BerryType[input] == 'number') {
            message = `Found ${Math.floor(amount)} × <img src="${image}" height="24px"/> ${GameConstants.humanifyString(input)} ${GameConstants.pluralizeString('Berry', amount)} in a dungeon chest.`;
        }
        if (ItemList[input] instanceof PokeballItem) {
            message = `Found ${amount} × <img src="${image}" height ="24px"/> ${GameConstants.pluralizeString(ItemList[input].displayName, amount)} in a dungeon chest.`;
        }
        else if (PokemonHelper.getPokemonByName(input).name != 'MissingNo.') {
            message = `Encountered ${GameHelper.anOrA(input)} <img src="${image}" height="40px"/> ${GameConstants.humanifyString(input)} in a dungeon chest.`;
        }
        if (weight <= 2) {
            setting = NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found;
            if (weight <= 0.5) {
                type = NotificationConstants.NotificationOption.danger;
            }
            else {
                type = NotificationConstants.NotificationOption.warning;
            }
        }
        return Notifier.notify({
            message: message,
            type: type,
            setting: setting,
        });
    }
    static startBossFight() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTileType.boss || DungeonRunner.fightingBoss()) {
            return;
        }
        if (!DungeonRunner.dungeon.hasUnlockedBoss()) {
            // Prevent the player from being unable to finish the dungeon if somehow all the bosses became locked after entering
            DungeonRunner.dungeonWon();
            return;
        }
        DungeonRunner.fightingBoss(true);
        DungeonBattle.generateNewBoss();
    }
    static nextFloor() {
        DungeonRunner.map.moveToCoordinates(Math.floor(DungeonRunner.map.floorSizes[DungeonRunner.map.playerPosition().floor + 1] / 2), DungeonRunner.map.floorSizes[DungeonRunner.map.playerPosition().floor + 1] - 1, DungeonRunner.map.playerPosition().floor + 1);
        DungeonRunner.map.playerPosition.notifySubscribers();
        DungeonRunner.timeLeft(DungeonRunner.timeLeft() + GameConstants.DUNGEON_LADDER_BONUS);
        if (!DungeonGuides.hired()) {
            DungeonRunner.map.playerMoved(false);
        }
    }
    static returnToTown() {
        MapHelper.moveToTown(DungeonRunner.dungeon.name);
        if (App.game.gameState !== GameConstants.GameState.town) {
            // MoveToTown failed and the player is stuck in the dungeon
            const dest = GameConstants.StartingTowns[player.region];
            MapHelper.moveToTown(dest);
        }
    }
    static dungeonLeave(shouldConfirm = Settings.getSetting('confirmLeaveDungeon').observableValue()) {
        return __awaiter(this, void 0, void 0, function* () {
            if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTileType.entrance || DungeonRunner.dungeonFinished() || !DungeonRunner.map.playerMoved()) {
                return;
            }
            if (!shouldConfirm || (yield Notifier.confirm({
                title: 'Dungeon',
                message: 'Leave the dungeon?\n\nCurrent progress will be lost, but you will keep any items obtained from chests.',
                type: NotificationConstants.NotificationOption.warning,
                confirm: 'Leave',
                timeout: 1 * GameConstants.MINUTE,
            }))) {
                DungeonRunner.dungeonFinished(true);
                DungeonRunner.fighting(false);
                DungeonRunner.fightingBoss(false);
                DungeonRunner.returnToTown();
                DungeonGuides.endDungeon();
            }
        });
    }
    static dungeonLost() {
        if (!DungeonRunner.dungeonFinished()) {
            DungeonRunner.dungeonFinished(true);
            DungeonRunner.fighting(false);
            DungeonRunner.fightingBoss(false);
            DungeonRunner.returnToTown();
            Notifier.notify({
                message: 'You could not complete the dungeon in time.',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        DungeonGuides.endDungeon();
    }
    static dungeonWon() {
        if (!DungeonRunner.dungeonFinished()) {
            DungeonRunner.dungeonFinished(true);
            if (!App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(DungeonRunner.dungeon.name)]()) {
                DungeonRunner.dungeon.rewardFunction();
            }
            if (DungeonGuides.hired()) {
                GameHelper.incrementObservable(App.game.statistics.dungeonGuideClears[DungeonGuides.hired().index]);
            }
            GameHelper.incrementObservable(App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(DungeonRunner.dungeon.name)]);
            DungeonRunner.returnToTown();
            Notifier.notify({
                message: 'You have successfully completed the dungeon.',
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Dungeons.dungeon_complete,
            });
        }
        DungeonGuides.endDungeon();
    }
    static dungeonCompleted(dungeon, includeShiny) {
        const possiblePokemon = dungeon.allAvailablePokemon();
        return RouteHelper.listCompleted(possiblePokemon, includeShiny);
    }
    static isAchievementsComplete(dungeon) {
        const dungeonIndex = GameConstants.getDungeonIndex(dungeon.name);
        return AchievementHandler.achievementList.every(achievement => {
            return !(achievement.property instanceof ClearDungeonRequirement && achievement.property.dungeonIndex === dungeonIndex && !achievement.isCompleted());
        });
    }
    static canStartDungeon(dungeon = DungeonRunner.dungeon) {
        return (DungeonGuides.hired() || DungeonRunner.hasEnoughTokens(dungeon)) && dungeon.isUnlocked() && dungeon.hasUnlockedBoss();
    }
    static hasEnoughTokens(dungeon = DungeonRunner.dungeon) {
        return App.game.wallet.hasAmount(new Amount(dungeon.tokenCost, GameConstants.Currency.dungeonToken));
    }
    static dungeonLevel() {
        return PokemonFactory.routeLevel(DungeonRunner.dungeon.difficultyRoute, player.region);
    }
    static getFlash(dungeonName) {
        var _a;
        const clears = App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(dungeonName)]();
        const config = [
            { flash: DungeonFlash.tiers[0], clearsNeeded: 100 },
            { flash: DungeonFlash.tiers[1], clearsNeeded: 250 },
            { flash: DungeonFlash.tiers[2], clearsNeeded: 400 },
        ].reverse();
        // findIndex, so we can get next tier when light ball is implemented
        const index = config.findIndex((tier) => tier.clearsNeeded <= clears);
        return (_a = config[index]) === null || _a === void 0 ? void 0 : _a.flash;
    }
    static isDungeonDebuffed(dungeon) {
        return dungeon.difficulty < player.highestRegion() - 2;
    }
}
DungeonRunner.timeLeft = ko.observable(GameConstants.DUNGEON_TIME);
DungeonRunner.timeLeftPercentage = ko.observable(100);
DungeonRunner.timeBonus = ko.observable(1);
DungeonRunner.fighting = ko.observable(false);
DungeonRunner.chestsOpened = ko.observable(0);
DungeonRunner.encountersWon = ko.observable(0);
DungeonRunner.fightingBoss = ko.observable(false);
DungeonRunner.defeatedBoss = ko.observable(null);
DungeonRunner.dungeonFinished = ko.observable(false);
DungeonRunner.continuousInteractionInput = false;
DungeonRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(DungeonRunner.timeLeft() / 100) / 10).toFixed(1);
});
DungeonRunner;
class DungeonTile {
    constructor(type, metadata = null) {
        this.metadata = metadata;
        this._isVisible = false;
        this._isVisited = false;
        this._hasPlayer = false;
        this.type = ko.observable(type);
        this.cssClass = ko.observable('');
        this.calculateCssClass();
    }
    get isVisible() {
        return this._isVisible;
    }
    set isVisible(val) {
        this._isVisible = val;
        this.calculateCssClass();
    }
    get isVisited() {
        return this._isVisited;
    }
    set isVisited(val) {
        this._isVisited = val;
        this.calculateCssClass();
    }
    get hasPlayer() {
        return this._hasPlayer;
    }
    set hasPlayer(val) {
        this._hasPlayer = val;
        this.calculateCssClass();
    }
    calculateCssClass() {
        if (!this.isVisible) {
            this.cssClass('tile tile-invisible');
            return;
        }
        if (this.hasPlayer) {
            this.cssClass('tile tile-player');
            return;
        }
        // Base tile class
        const css = ['tile'];
        // If player visited tile add the class
        if (this.isVisited) {
            css.push('tile-visited');
        }
        // Add the tile type class
        css.push(`tile-${GameConstants.DungeonTileType[this.type()]}`);
        if (this.type() === GameConstants.DungeonTileType.chest) {
            css.push(`tile-chest-${this.metadata.tier}`);
        }
        // Join all the classes
        this.cssClass(css.join(' '));
    }
}
class Point {
    constructor(x, y, floor = 0) {
        this.x = x;
        this.y = y;
        this.floor = floor;
    }
}
class DungeonInfo {
    static getLootList() {
        var _a;
        const rawTable = ((_a = player.town.dungeon) === null || _a === void 0 ? void 0 : _a.lootTable) || {};
        const displayTable = {};
        Object.entries(rawTable).forEach(([tier, loots]) => {
            const filteredLoots = loots.filter(l => ItemList[l.loot] || pokemonMap[l.loot].name == 'MissingNo.');
            if (filteredLoots.length) {
                displayTable[tier] = filteredLoots;
            }
        });
        return displayTable;
    }
    static getFullName() {
        return `${DungeonInfo.getDungeonName()} - ${DungeonInfo.getRegionName()} (${DungeonInfo.getSubregionName()})`;
    }
    static getDungeonName() {
        return player.town.name;
    }
    static getRegionName() {
        return GameConstants.camelCaseToString(GameConstants.Region[player.region]);
    }
    static getSubregionName() {
        var _a;
        return (_a = player.subregionObject()) === null || _a === void 0 ? void 0 : _a.name;
    }
    static getLootImage(input) {
        switch (true) {
            case typeof BerryType[input] == 'number':
                return FarmController.getBerryImage(BerryType[GameConstants.humanifyString(input)]);
            case UndergroundItems.getByName(input) instanceof UndergroundItem:
                return UndergroundItems.getByName(input).image;
            default:
                return ItemList[input].image;
        }
    }
    static getLootName(input) {
        var _a;
        switch (true) {
            case input in ItemList:
                return (_a = ItemList[input]) === null || _a === void 0 ? void 0 : _a.displayName;
            case typeof BerryType[input] == 'number':
                return `${input} Berry`;
            default:
                return GameConstants.camelCaseToString(GameConstants.humanifyString(input.toLowerCase()));
        }
    }
}
DungeonInfo.lootList = ko.pureComputed(() => {
    return DungeonInfo.getLootList();
});
class RouteInfo {
    static getPokemonList() {
        var _a;
        const pokemonList = (_a = Routes.getRoute(player.region, player.route)) === null || _a === void 0 ? void 0 : _a.pokemon;
        const pokemonArray = [];
        if (pokemonList) {
            [...new Set(pokemonList.land)].forEach(pokemonName => {
                pokemonArray.push({ id: PokemonHelper.getPokemonByName(pokemonName).id, name: pokemonName, type: 'land' });
            });
            if (App.game.keyItems.hasKeyItem(KeyItemType.Super_rod) || pokemonList.land.length == 0) {
                [...new Set(pokemonList.water)].forEach(pokemonName => {
                    pokemonArray.push({ id: PokemonHelper.getPokemonByName(pokemonName).id, name: pokemonName, type: 'water', fishing: pokemonList.land.length != 0 });
                });
            }
            [...new Set(pokemonList.headbutt)].forEach(pokemonName => {
                pokemonArray.push({ id: PokemonHelper.getPokemonByName(pokemonName).id, name: pokemonName, type: 'headbutt' });
            });
            pokemonList.special.filter(p => p.isAvailable()).forEach(special => {
                [...new Set(special.pokemon)].forEach(pokemonName => {
                    pokemonArray.push({ id: PokemonHelper.getPokemonByName(pokemonName).id, name: pokemonName, type: 'special', requirement: special.req });
                });
            });
            pokemonArray.sort((a, b) => a.id - b.id);
        }
        const roamerArray = RoamingPokemonList.getSubRegionalGroupRoamers(player.region, RoamingPokemonList.findGroup(player.region, player.subregion))
            .map((roamer) => ({ id: roamer.pokemon.id, name: roamer.pokemonName, type: 'roamer', requirement: roamer.unlockRequirement }))
            .sort((a, b) => a.id - b.id);
        return roamerArray.length ? { pokemons: pokemonArray, roamers: roamerArray } : { pokemons: pokemonArray };
    }
    static getInformations(pokemon) {
        if (pokemon.type == 'roamer') {
            if (RouteInfo.hasRequirement(pokemon.requirement, SpecialEventRequirement)) {
                return { tooltip: 'Event Roaming Pokémon', image: 'event_roaming.png' };
            }
            else {
                return { tooltip: 'Roaming Pokémon', image: 'roaming.png' };
            }
        }
        else if (pokemon.type == 'special') {
            if (RouteInfo.hasRequirement(pokemon.requirement, SpecialEventRequirement)) {
                return { tooltip: 'Event Pokémon', image: 'event.png' };
            }
            else if (RouteInfo.hasRequirement(pokemon.requirement, WeatherRequirement)) {
                return { tooltip: 'Weather Pokémon', image: 'weather.png' };
            }
            else if (RouteInfo.hasRequirement(pokemon.requirement, DayOfWeekRequirement)) {
                return { tooltip: 'Day of Week Pokémon', image: 'day_of_week.png' };
            }
        }
        else if (pokemon.type == 'water' && pokemon.fishing) {
            return { tooltip: 'Fishing Pokémon', image: 'fishing.png' };
        }
        return null;
    }
    static hasRequirement(requirement, type) {
        //I traverse all the Requirement tree recursively to check if one of the requirements is the one I want
        if (requirement instanceof type) {
            return true;
        }
        if (requirement === null || requirement === void 0 ? void 0 : requirement.requirements) {
            for (const req of requirement.requirements) {
                if (RouteInfo.hasRequirement(req, type)) {
                    return true;
                }
            }
        }
        return false;
    }
    static getFullName() {
        return `${RouteInfo.getRouteName()} - ${RouteInfo.getRegionName()} (${RouteInfo.getSubregionName()})`;
    }
    static getRouteName() {
        return Routes.getName(player.route, player.region);
    }
    static getRegionName() {
        return GameConstants.camelCaseToString(GameConstants.Region[player.region]);
    }
    static getSubregionName() {
        var _a;
        return (_a = player.subregionObject()) === null || _a === void 0 ? void 0 : _a.name;
    }
}
RouteInfo.pokemonList = ko.pureComputed(() => {
    return RouteInfo.getPokemonList();
});
/// <reference path="../../declarations/enums/BerryType.d.ts"/>
/// <reference path="../../declarations/enums/FlavorType.d.ts"/>
/// <reference path="../../declarations/enums/BerryColor.d.ts"/>
/// <reference path="../../declarations/enums/BerryFirmness.d.ts"/>
/// <reference path="../../declarations/enums/SizeUnits.d.ts"/>
class Berry {
    static isBaseWanderer(pokemon) {
        return this.baseWander.includes(pokemon);
    }
    constructor(type, growthTime, harvestAmount, replantRate, farmValue, exp, flavors, smoothness, color, size, firmness, description, aura, wander) {
        this.type = type;
        this.growthTime = growthTime;
        this.harvestAmount = harvestAmount;
        this.replantRate = replantRate;
        this.farmValue = farmValue;
        this.exp = exp;
        this.smoothness = smoothness;
        this.color = color;
        this.size = size;
        this.firmness = firmness;
        this.description = description;
        this.aura = aura;
        this.flavors = [];
        for (let i = 0; i < 5; i++) {
            this.flavors.push({ type: i, value: flavors[i] });
        }
        this.wander = Berry.baseWander.concat(Berry.colorWander[this.color], wander !== null && wander !== void 0 ? wander : []);
    }
    get descriptionHTML() {
        return this.description.join('<br/>');
    }
}
Berry.baseWander = [
    'Tangela', 'Scyther',
    'Pineco', 'Heracross',
    'Cherubi',
    'Sewaddle', 'Karrablast',
    'Scatterbug',
    'Cutiefly', 'Bounsweet',
    'Blipbug', 'Gossifleur',
];
Berry.colorWander = {
    [BerryColor.Red]: ['Ledyba', 'Flabébé (Red)', 'Oricorio (Baile)'],
    [BerryColor.Purple]: ['Illumise', 'Oricorio (Sensu)'],
    [BerryColor.Pink]: ['Spewpa', 'Oricorio (Pa\'u)'],
    [BerryColor.Green]: ['Burmy (Plant)'],
    [BerryColor.Yellow]: ['Combee', 'Flabébé (Yellow)', 'Oricorio (Pom-Pom)'],
    [BerryColor.Blue]: ['Volbeat', 'Flabébé (Blue)'],
    [BerryColor.Silver]: ['Flabébé (White)'],
    [BerryColor.Gold]: ['Flabébé (Orange)'],
};
class BerryDeal {
    constructor(berry, berryAmount, item, itemAmount) {
        this.berries = [];
        berry.forEach((berry, idx) => {
            this.berries.push({ berryType: berry, amount: berryAmount[idx] });
        });
        this.item = { itemType: item, amount: itemAmount };
    }
    calculateMaxTrades() {
        return Math.min(...this.berries.map(b => Math.floor(App.game.farming.berryList[b.berryType]() / b.amount)));
    }
    static getDeals(town) {
        return BerryDeal.list[town];
    }
    static randomBerry(berryList) {
        return SeededRand.fromArray(berryList);
    }
    static randomBattleItem() {
        const battleItem = SeededRand.fromArray(GameHelper.enumStrings(GameConstants.BattleItemType));
        return ItemList[battleItem];
    }
    static randomEvoItem() {
        const evoItem = SeededRand.fromArray(GameHelper.enumStrings(GameConstants.StoneType).filter(name => !(['None', 'Black_DNA', 'White_DNA', 'Solar_light', 'Key_stone', 'Lunar_light', 'Pure_light', 'Crystallized_shadow', 'Black_mane_hair', 'White_mane_hair']).includes(name)));
        return ItemList[evoItem];
    }
    static randomUndergroundItem() {
        return ItemList[SeededRand.fromArray(UndergroundItems.list.filter(item => item.valueType !== UndergroundItemValueType.MegaStone && item.valueType !== UndergroundItemValueType.Special)).itemName];
    }
    static randomPokeballDeal() {
        const firstGen = Farming.getGeneration(0);
        const secondGen = Farming.getGeneration(1);
        const thirdGen = Farming.getGeneration(2);
        return SeededRand.fromArray([
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Fastball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Moonball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Quickball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Timerball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
            ], ItemList.Duskball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
                this.randomBerry(thirdGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
                SeededRand.intBetween(5, 10),
            ], ItemList.Luxuryball, 1),
        ]);
    }
    static generateDeals(date) {
        SeededRand.seedWithDate(date);
        const berryMasterTowns = [GameConstants.BerryTraderLocations['Goldenrod City'], GameConstants.BerryTraderLocations['Mauville City'], GameConstants.BerryTraderLocations['Hearthome City'], GameConstants.BerryTraderLocations['Pinkan Pokémon Reserve'], GameConstants.BerryTraderLocations['Secret Berry Shop'], GameConstants.BerryTraderLocations['Driftveil City']];
        // Removing old deals
        for (const town of berryMasterTowns) {
            if (!BerryDeal.list[town]) {
                BerryDeal.list[town] = ko.observableArray();
            }
            else {
                BerryDeal.list[town].removeAll();
            }
        }
        BerryDeal.list[GameConstants.BerryTraderLocations['Goldenrod City']].push(...this.generateGoldenrodDeals());
        BerryDeal.list[GameConstants.BerryTraderLocations['Mauville City']].push(...this.generateMauvilleDeals());
        BerryDeal.list[GameConstants.BerryTraderLocations['Pinkan Pokémon Reserve']].push(...this.generatePinkanDeals());
        BerryDeal.list[GameConstants.BerryTraderLocations['Hearthome City']].push(...this.generateHearthomeDeals());
        BerryDeal.list[GameConstants.BerryTraderLocations['Secret Berry Shop']].push(...this.generateSecretBerryShopDeals());
        BerryDeal.list[GameConstants.BerryTraderLocations['Driftveil City']].push(...this.generateDriftveilDeals());
    }
    static generateGoldenrodDeals() {
        const firstGen = Farming.getGeneration(0);
        const secondGen = Farming.getGeneration(1);
        const thirdGen = Farming.getGeneration(2);
        const list = [];
        list.push(new BerryDeal([
            this.randomBerry(firstGen),
            this.randomBerry(secondGen),
        ], [
            SeededRand.intBetween(30, 70),
            SeededRand.intBetween(10, 30),
        ], this.randomBattleItem(), SeededRand.intBetween(3, 7)));
        list.push(new BerryDeal([
            this.randomBerry(firstGen),
            this.randomBerry(secondGen),
            this.randomBerry(thirdGen),
        ], [
            SeededRand.intBetween(70, 130),
            SeededRand.intBetween(30, 70),
            SeededRand.intBetween(10, 30),
        ], this.randomEvoItem(), SeededRand.intBetween(1, 3)));
        list.push(this.randomPokeballDeal());
        return list;
    }
    static generateMauvilleDeals() {
        const thirdGen = Farming.getGeneration(2);
        const fourthGen = Farming.getGeneration(3);
        const temp = [];
        const maxTries = 30;
        let i = 0;
        while (i < maxTries && temp.length < 3) {
            const deal = new BerryDeal([
                this.randomBerry(thirdGen),
                this.randomBerry(fourthGen),
            ], [
                SeededRand.intBetween(30, 70),
                SeededRand.intBetween(10, 30),
            ], this.randomUndergroundItem(), SeededRand.intBetween(1, 3));
            if (temp.every(madeDeal => madeDeal.item.name !== deal.item.itemType.name)) {
                temp.push(deal);
            }
            i++;
        }
        return temp;
    }
    static generateHearthomeDeals() {
        const firstGen = Farming.getGeneration(0);
        const secondGen = Farming.getGeneration(1);
        const thirdGen = Farming.getGeneration(2);
        const fourthGen = Farming.getGeneration(3);
        const fifthGen = [
            BerryType.Micle,
            BerryType.Custap,
            BerryType.Jaboca,
            BerryType.Rowap,
            BerryType.Kee,
            BerryType.Maranga,
        ];
        const list = [];
        list.push(new BerryDeal([
            this.randomBerry(firstGen),
            this.randomBerry(secondGen),
            this.randomBerry(thirdGen),
            this.randomBerry(fourthGen),
            this.randomBerry(fifthGen),
        ], [
            SeededRand.intBetween(500, 1000),
            SeededRand.intBetween(200, 500),
            SeededRand.intBetween(100, 200),
            SeededRand.intBetween(50, 100),
            SeededRand.intBetween(10, 50),
        ], ItemList.Masterball, 1));
        list.push(new BerryDeal([this.randomBerry(fourthGen)], [SeededRand.intBetween(50, 100)], ItemList.Protein, 1));
        list.push(new BerryDeal([this.randomBerry(fifthGen)], [SeededRand.intBetween(10, 50)], ItemList.Calcium, 1));
        return [SeededRand.fromArray(list)];
    }
    static generatePinkanDeals() {
        const list = [];
        list.push(new BerryDeal([BerryType.Pinkan], [SeededRand.intBetween(40, 60)], ItemList['Pinkan Arbok'], 1));
        list.push(new BerryDeal([BerryType.Pinkan], [SeededRand.intBetween(20, 40)], ItemList['Pinkan Oddish'], 1));
        list.push(new BerryDeal([BerryType.Pinkan], [SeededRand.intBetween(40, 60)], ItemList['Pinkan Poliwhirl'], 1));
        list.push(new BerryDeal([BerryType.Pinkan], [SeededRand.intBetween(20, 40)], ItemList['Pinkan Geodude'], 1));
        list.push(new BerryDeal([BerryType.Pinkan], [SeededRand.intBetween(80, 100)], ItemList['Pinkan Weezing'], 1));
        list.push(new BerryDeal([BerryType.Pinkan], [SeededRand.intBetween(80, 100)], ItemList['Pinkan Scyther'], 1));
        list.push(new BerryDeal([BerryType.Pinkan], [SeededRand.intBetween(80, 100)], ItemList['Pinkan Electabuzz'], 1));
        return list;
    }
    static generateSecretBerryShopDeals() {
        const list = [];
        list.push(new BerryDeal([BerryType.Snover], [SeededRand.intBetween(80, 100)], ItemList['Grotle (Acorn)'], 1));
        return list;
    }
    static generateDriftveilDeals() {
        const firstGen = Farming.getGeneration(0);
        const secondGen = Farming.getGeneration(1);
        const thirdGen = Farming.getGeneration(2);
        const fourthGen = Farming.getGeneration(3);
        const fifthGen = [
            BerryType.Micle,
            BerryType.Custap,
            BerryType.Jaboca,
            BerryType.Rowap,
            BerryType.Kee,
            BerryType.Maranga,
        ];
        const pokeballList = [
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
                this.randomBerry(thirdGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
                SeededRand.intBetween(5, 10),
            ], ItemList.Diveball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
                this.randomBerry(thirdGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
                SeededRand.intBetween(5, 10),
            ], ItemList.Lureball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
                this.randomBerry(thirdGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
                SeededRand.intBetween(5, 10),
            ], ItemList.Nestball, 1),
            new BerryDeal([
                this.randomBerry(firstGen),
                this.randomBerry(secondGen),
                this.randomBerry(thirdGen),
            ], [
                SeededRand.intBetween(20, 40),
                SeededRand.intBetween(5, 15),
                SeededRand.intBetween(5, 10),
            ], ItemList.Repeatball, 1),
        ];
        const vitaminList = [
            new BerryDeal([this.randomBerry(fourthGen)], [SeededRand.intBetween(50, 100)], ItemList.Protein, 1),
            new BerryDeal([this.randomBerry(fifthGen)], [SeededRand.intBetween(10, 50)], ItemList.Calcium, 1),
            new BerryDeal([this.randomBerry(fifthGen)], [SeededRand.intBetween(10, 50)], ItemList.Carbos, 1),
        ];
        return [
            SeededRand.fromArray(pokeballList),
            SeededRand.fromArray(vitaminList),
        ];
    }
    static canUse(town, i) {
        var _a;
        const deal = (_a = BerryDeal.list[town]) === null || _a === void 0 ? void 0 : _a.peek()[i];
        if (!deal) {
            return false;
        }
        else {
            return deal.berries.every((value) => App.game.farming.berryList[value.berryType]() >= value.amount);
        }
    }
    static use(town, i, tradeTimes = 1) {
        var _a;
        const deal = (_a = BerryDeal.list[town]) === null || _a === void 0 ? void 0 : _a.peek()[i];
        if (BerryDeal.canUse(town, i)) {
            const trades = deal.berries.map(berry => {
                const amt = App.game.farming.berryList[berry.berryType]();
                const maxTrades = Math.floor(amt / berry.amount);
                return maxTrades;
            });
            const maxTrades = trades.reduce((a, b) => Math.min(a, b), tradeTimes);
            deal.berries.forEach((value) => GameHelper.incrementObservable(App.game.farming.berryList[value.berryType], -value.amount * maxTrades));
            if (deal.item.itemType instanceof UndergroundItem) {
                UndergroundController.gainMineItem(deal.item.itemType.id, deal.item.amount * maxTrades);
            }
            else {
                deal.item.itemType.gain(deal.item.amount * maxTrades);
            }
            GameHelper.incrementObservable(App.game.statistics.berryDailyDealTrades);
            const amount = deal.item.amount * maxTrades;
            Notifier.notify({
                message: `You traded for ${amount.toLocaleString('en-US')} × <img src="${deal.item.itemType.image}" height="24px"/> ${GameConstants.pluralizeString(GameConstants.humanifyString(deal.item.itemType.displayName), amount)}.`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.item_bought,
            });
        }
    }
}
BerryDeal.list = {};
/// <reference path="../../declarations/enums/MulchType.d.ts"/>
class FarmController {
    static initialize() {
        this.berryListFiltered(Array.from(Array(GameHelper.enumLength(BerryType) - 1).keys()));
        this.numberOfTabs = ko.pureComputed(() => {
            return Math.max(1, Math.ceil(FarmController.filteredBerryList().length / this.BERRIES_PER_PAGE));
        });
        this.berryListEnd = ko.pureComputed(() => {
            var _a;
            const highestMutation = App.game.farming.mutations.slice().sort((a, b) => b.mutatedBerry - a.mutatedBerry).find(mut => mut._hintSeen() && !App.game.farming.unlockedBerries[mut.mutatedBerry]());
            const highestMutationHint = (_a = highestMutation === null || highestMutation === void 0 ? void 0 : highestMutation.mutatedBerry) !== null && _a !== void 0 ? _a : 0;
            return Math.max(App.game.farming.highestUnlockedBerry(), highestMutationHint);
        });
        this.berryListSearch.subscribe(() => this.navigateIndex(0));
        this.navigateIndex(0);
    }
    static openFarmModal() {
        if (App.game.farming.canAccess()) {
            $('#farmModal').modal('show');
        }
        else {
            Notifier.notify({
                message: `You need the ${GameConstants.humanifyString(KeyItemType[KeyItemType.Wailmer_pail])} to access this location.\n<i>Clear Route 6 first.</i>`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static getImage(index) {
        const plot = App.game.farming.plotList[index];
        if (plot.berry === BerryType.None) {
            return '';
        }
        if (plot.stage() === PlotStage.Seed) {
            return 'assets/images/farm/AllTreeSeed.png';
        }
        else if (plot.stage() === PlotStage.Sprout) {
            return 'assets/images/farm/AllTreeSprout.png';
        }
        return `assets/images/farm/${BerryType[plot.berry]}Tree${PlotStage[plot.stage()]}.png`;
    }
    static calculateCssClassFromTool(plot, tool) {
        switch (tool) {
            case FarmingTool.Lock:
                return 'PlotSafeLockSelected';
            case FarmingTool.Mulch:
                return 'MulchSelected';
            case FarmingTool.Shovel:
                return 'ShovelSelected';
            case FarmingTool.MulchShovel:
                return 'MulchShovelSelected';
            case FarmingTool.Berry:
            default:
                return plot.wanderer ? 'WandererHandling' : 'BerrySelected';
        }
    }
    static calculateCssClass(plot) {
        return this.calculateCssClassFromTool(plot, this.selectedFarmTool());
    }
    static calcMulchClass(plot) {
        if (plot.mulch === MulchType.None) {
            return '';
        }
        return MulchType[plot.mulch];
    }
    static plotClick(index, event) {
        const plot = App.game.farming.plotList[index];
        // If shift key held, lock/unlock plot
        if (event.shiftKey) {
            this.shiftTogglePlotSafeLock(plot, index);
        }
        else {
            this.handleClickActions(this.selectedFarmTool(), plot, index);
        }
    }
    static plotClickMini(index, event) {
        const plot = App.game.farming.plotList[index];
        // Unlocking Plot (we don't want to do this in the farm module)
        if (!plot.isUnlocked) {
            return;
        }
        // If shift key held, lock/unlock plot
        if (event.shiftKey) {
            this.shiftTogglePlotSafeLock(plot, index);
        }
        else {
            this.handleClickActions(this.selectedFarmModuleTool(), plot, index);
        }
    }
    static shiftTogglePlotSafeLock(plot, index) {
        if (!plot.isUnlocked) {
            return;
        }
        App.game.farming.togglePlotSafeLock(index);
    }
    static toggleAllPlotLocks() {
        App.game.farming.plotList.forEach((plot, index) => {
            if (plot.isUnlocked) {
                App.game.farming.togglePlotSafeLock(index);
            }
        });
    }
    static toggleAllPlotLocksTo(lock) {
        App.game.farming.plotList.forEach((plot, index) => {
            if (plot.isUnlocked && ((lock && !plot.isSafeLocked) || (!lock && plot.isSafeLocked))) {
                App.game.farming.togglePlotSafeLock(index);
            }
        });
    }
    static handleClickActions(tool, plot, index) {
        // Unlocking Plot
        if (!plot.isUnlocked) {
            return App.game.farming.unlockPlot(index);
        }
        // Check which tool we have selected
        switch (tool) {
            case FarmingTool.Berry:
                if (plot.wanderer) {
                    App.game.farming.handleWanderer(plot);
                }
                else if (plot.isEmpty()) {
                    App.game.farming.plant(index, this.selectedBerry());
                }
                else {
                    App.game.farming.harvest(index);
                }
                break;
            case FarmingTool.Mulch:
                App.game.farming.addMulch(index, this.selectedMulch(), this.getAmount());
                break;
            case FarmingTool.Shovel:
                App.game.farming.shovel(index);
                break;
            case FarmingTool.MulchShovel:
                App.game.farming.shovelMulch(index);
                break;
            case FarmingTool.Lock:
                App.game.farming.togglePlotSafeLock(index);
                break;
        }
    }
    static calculateCssClassMini(plot) {
        return this.calculateCssClassFromTool(plot, this.selectedFarmModuleTool());
    }
    static mulchAll() {
        if (!Settings.getSetting('confirmBeformeMulchingAllPlots').observableValue()) {
            return App.game.farming.mulchAll(FarmController.selectedMulch(), this.getAmount());
        }
        Notifier.confirm({
            title: 'Mulch All',
            message: `Are you sure you want to use ${this.getAmount()} ${MulchType[FarmController.selectedMulch()].replace('_', ' ')} on all plots?`,
            type: NotificationConstants.NotificationOption.info,
            confirm: 'Mulch',
        }).then(confirmed => {
            if (confirmed) {
                App.game.farming.mulchAll(FarmController.selectedMulch(), this.getAmount());
            }
        });
    }
    static navigateRight() {
        if (FarmController.navigateIndex() < FarmController.numberOfTabs() - 1) {
            FarmController.navigateIndex(FarmController.navigateIndex() + 1);
            this.selectedBerry(this.getUnlockedBerryListWithIndex()[0]);
        }
    }
    static navigateLeft() {
        if (FarmController.navigateIndex() > 0) {
            FarmController.navigateIndex(FarmController.navigateIndex() - 1);
            this.selectedBerry(this.getUnlockedBerryListWithIndex()[0]);
        }
    }
    static getUnlockedBerryListWithIndex() {
        return FarmController.filteredBerryList().slice(this.navigateIndex() * this.BERRIES_PER_PAGE, (this.navigateIndex() * this.BERRIES_PER_PAGE) + this.BERRIES_PER_PAGE);
    }
    static getUnlockedBerryList() {
        return this.berryListFiltered().filter((berry) => berry <= this.berryListEnd());
    }
    static getAmount() {
        return Number(this.multipliers[this.multIndex()].replace(/\D/g, '')) || Infinity;
    }
    static incrementMultiplier() {
        this.multIndex((this.multIndex() + 1) % this.multipliers.length);
    }
    static decrementMultiplier() {
        this.multIndex((this.multIndex() + this.multipliers.length - 1) % this.multipliers.length);
    }
    static getBackgroundColor(index) {
        if (App.game.farming.unlockedBerries[index]()) {
            return GameConstants.BerryColor[App.game.farming.berryData[index].color];
        }
        else if (FarmController.getHint(index, true) !== '') {
            return GameConstants.BerryColor[8];
        }
        else {
            return GameConstants.BerryColor[9];
        }
    }
    static getBerryImage(index) {
        return `assets/images/items/berry/${BerryType[index]}.png`;
    }
    static getHint(index, checkSeen = false, checkUnlocked = false) {
        if (checkUnlocked && App.game.farming.unlockedBerries[index]()) {
            return '';
        }
        const mutation = App.game.farming.mutations.find(mutation => mutation.mutatedBerry === index && mutation.showHint);
        if (mutation) {
            if (checkSeen && !mutation.hintSeen) {
                return '';
            }
            return mutation.hint;
        }
        return '';
    }
    // For preview in Farm Modal's BerryDex Tab
    static handleBerryDexClick(berryId) {
        if (App.game.statistics.selectedBerryID() === berryId && App.game.farming.unlockedBerries[berryId]()) {
            $('#berryDexModal').modal('show');
        }
        App.game.statistics.selectedBerryID(berryId);
    }
    static wandererToRoute(pokemon) {
        const maxRegion = player.highestRegion();
        const pokemonRegion = pokemonMap[pokemon].nativeRegion;
        const routes = Routes.getRoutesByRegion(maxRegion).filter(r => !r.ignoreRouteInCalculations);
        const minIndex = Math.floor((routes.length - 1) * pokemonRegion / (maxRegion + 2));
        const maxIndex = Math.floor((routes.length - 1) * (pokemonRegion + 2) / (maxRegion + 2));
        // Adds a bit of randomness so it is not always the same route
        const routeIndex = Rand.intBetween(minIndex, maxIndex);
        return routes[routeIndex];
    }
    static getWandererStyle(plot) {
        if (!plot.wanderer) {
            return '';
        }
        const pokemon = pokemonMap[plot.wanderer.name];
        const forgedID = `${pokemon.id}${plot.wanderer.shiny ? 's' : ''}`;
        return `${plot.wanderer.shiny ? 'url(\'assets/images/dynamic-background/pokemon/sparkle.png\'), ' : ''}url('assets/images/dynamic-background/pokemon/${forgedID}.png')`;
    }
    static getWandererCss(plot) {
        if (!plot.wanderer) {
            return '';
        }
        if (plot.wanderer.fleeing()) {
            return 'walkDownFlee';
        }
        else if (plot.wanderer.distractTime() > 0) {
            return 'walkDownFlash';
        }
        else {
            return 'walkDown';
        }
    }
}
FarmController.navigateIndex = ko.observable(0);
FarmController.berryListFiltered = ko.observableArray([]);
FarmController.farmingModalTabSelected = ko.observable('berryFarmView');
FarmController.berryListSearch = ko.observable('');
FarmController.selectedBerry = ko.observable(BerryType.Cheri);
FarmController.selectedMulch = ko.observable(MulchType.Boost_Mulch);
FarmController.selectedFarmTool = ko.observable(FarmingTool.Berry);
FarmController.selectedFarmModuleTool = ko.observable(FarmingTool.Berry);
FarmController.berryListVisible = ko.observable(true);
FarmController.multipliers = ['×1', '×10', '×100', '×1000', 'All'];
FarmController.multIndex = ko.observable(0);
FarmController.BERRIES_PER_PAGE = 8;
FarmController.filteredBerryList = ko.pureComputed(() => {
    let berryList = FarmController.getUnlockedBerryList();
    const searchVal = FarmController.berryListSearch().trim();
    if (searchVal.length) {
        const split = searchVal.toLowerCase().split(' ').filter(s => s);
        berryList = berryList.filter((berry) => App.game.farming.unlockedBerries[berry]() && split.some((val) => BerryType[berry].toLowerCase().includes(val)));
    }
    return berryList;
});
FarmController.additionalInfoTooltip = ko.pureComputed(() => {
    const tooltip = [];
    // External Auras
    App.game.farming.externalAuras.forEach((aura, idx) => {
        if (typeof aura === 'undefined') {
            return;
        }
        if (aura() !== 1) {
            tooltip.push(`${AuraType[idx]}: ×${aura().toLocaleString('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 })}`);
        }
    });
    // Adding header if necessary
    if (tooltip.length) {
        tooltip.unshift('<u>External Auras</u>');
    }
    return tooltip.join('<br>');
});
FarmController.shortcutVisible = ko.pureComputed(() => {
    return App.game.farming.canAccess() && Settings.getSetting('showFarmModule').observableValue() === 'never';
});
const FarmHandSkills = [
    'energy',
    'efficiency',
    'accuracy',
    'cost',
];
var FarmHandSpeeds;
(function (FarmHandSpeeds) {
    FarmHandSpeeds[FarmHandSpeeds["Fastest"] = 0] = "Fastest";
    FarmHandSpeeds[FarmHandSpeeds["Faster"] = 1] = "Faster";
    FarmHandSpeeds[FarmHandSpeeds["Fast"] = 2] = "Fast";
    FarmHandSpeeds[FarmHandSpeeds["AboveAverage"] = 3] = "AboveAverage";
    FarmHandSpeeds[FarmHandSpeeds["Average"] = 4] = "Average";
    FarmHandSpeeds[FarmHandSpeeds["BelowAverage"] = 5] = "BelowAverage";
    FarmHandSpeeds[FarmHandSpeeds["Slow"] = 6] = "Slow";
    FarmHandSpeeds[FarmHandSpeeds["Slower"] = 7] = "Slower";
    FarmHandSpeeds[FarmHandSpeeds["Slowest"] = 8] = "Slowest";
    FarmHandSpeeds[FarmHandSpeeds["SnailPaced"] = 9] = "SnailPaced";
    FarmHandSpeeds[FarmHandSpeeds["Lazy"] = 10] = "Lazy";
})(FarmHandSpeeds || (FarmHandSpeeds = {}));
/*
TODO:
Work in levels/experience somehow
Use accuracy to decide if they plant the right berry or plant a berry at all (still use up energy?)
Use accuracy to decide if they harvest a berry by accident? (still use up energy?)
*/
var FarmHandBerryType;
(function (FarmHandBerryType) {
    FarmHandBerryType[FarmHandBerryType["Random"] = -3] = "Random";
    FarmHandBerryType[FarmHandBerryType["Replant"] = -2] = "Replant";
})(FarmHandBerryType || (FarmHandBerryType = {}));
const FarmHandBerryTypes = Object.assign(Object.assign({}, FarmHandBerryType), BerryType);
class FarmHand {
    // public level: number;
    // public experience: number;
    constructor(name, maxEnergy, // 10 - 100
    efficiency, // 1 - 50?
    speed, accuracy, // 0 - 10 (80% - 100%)
    cost, // 0 - 10? (can go higher if needed)
    unlockRequirement) {
        this.name = name;
        this.maxEnergy = maxEnergy;
        this.efficiency = efficiency;
        this.speed = speed;
        this.accuracy = accuracy;
        this.unlockRequirement = unlockRequirement;
        this.defaults = {
            focus: BerryType.None,
            shouldHarvest: false,
            workTicks: 0,
            costTicks: 0,
            energy: 0,
            hired: false,
            plots: [],
            name: undefined,
            shouldCatch: false,
        };
        // Maximum Efficiency value
        this.maxEfficiency = 50;
        // Negative value so they are charged on the first tick and work on the first tick
        this.workTicks = ko.observable(-GameConstants.TICK_TIME).extend({ numeric: 0 });
        this.costTicks = ko.observable(-GameConstants.TICK_TIME).extend({ numeric: 0 });
        this.costTick = GameConstants.HOUR;
        this.cost = new Amount(+0, GameConstants.Currency.farmPoint);
        this.trainerSprite = 0;
        this.focus = ko.observable(BerryType.None);
        this.shouldHarvest = ko.observable(false).extend({ boolean: null });
        this.energy = ko.observable(0).extend({ numeric: 0 });
        this.hired = ko.observable(false).extend({ boolean: null });
        this.plots = ko.observableArray(new Array(GameConstants.FARM_PLOT_WIDTH * GameConstants.FARM_PLOT_HEIGHT).fill(0).map((v, i) => i));
        this.shouldCatch = ko.observable(false);
        SeededRand.seed(parseInt(this.name, 36));
        this.trainerSprite = SeededRand.intBetween(0, 118);
        // Negative value so they are charged on the first tick and work on the first tick
        this.workTicks(-GameConstants.TICK_TIME);
        this.costTicks(-GameConstants.TICK_TIME);
        // Set initial energy to maximum energy
        this.energy(this.maxEnergy);
        // Calculate how much to charge the player in farm points
        this.cost = new Amount(+Math.pow(100, 1 + cost * 0.08).toPrecision(2), GameConstants.Currency.farmPoint);
        // Calculate how often they work
        this.workTick = this.calcWorkTick(this.speed);
        this.tooltip = ko.pureComputed(() => `<strong>${this.name}</strong><br/>
            Energy: ${this.energy()}/${this.maxEnergy}<br/>
            Work Cycle: ${GameConstants.formatTimeFullLetters((this.workTick - this.workTicks()) / GameConstants.SECOND)}<br/>
            Next Payment: ${GameConstants.formatTimeFullLetters((this.costTick - this.costTicks()) / GameConstants.SECOND)}`);
    }
    calcWorkTick(speed) {
        speed = ((speed + 1) * 0.03) + 1;
        let time = Math.pow(GameConstants.MINUTE, speed);
        time -= time > 5 * GameConstants.MINUTE ? time % GameConstants.MINUTE : time % (30 * GameConstants.SECOND);
        return time;
    }
    isUnlocked() {
        var _a, _b;
        return (_b = (_a = this.unlockRequirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    togglePlot(plotIndex) {
        const index = this.plots().findIndex(p => p == plotIndex);
        if (index >= 0) {
            this.plots.splice(index, 1);
        }
        else {
            this.plots.push(plotIndex);
        }
        this.plots.sort((a, b) => a - b);
    }
    hire() {
        // Negative value so they are charged on the first tick and work on the first tick
        this.workTicks(-GameConstants.TICK_TIME);
        this.costTicks(-GameConstants.TICK_TIME);
        // Check the player has enough Farm Points to hire this Farm Hand
        if (!App.game.wallet.hasAmount(this.cost)) {
            Notifier.notify({
                title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
                message: `You don't have enough Farm Points to hire me...\nCost: <img src="./assets/images/currency/farmPoint.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
                type: NotificationConstants.NotificationOption.warning,
                timeout: 30 * GameConstants.SECOND,
            });
            return;
        }
        // Farm hand is hired
        this.hired(true);
        Notifier.notify({
            title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: 'Thanks for hiring me,\nI won\'t let you down!',
            type: NotificationConstants.NotificationOption.success,
            timeout: 30 * GameConstants.SECOND,
            setting: NotificationConstants.NotificationSetting.Farming.farm_hand,
        });
    }
    fire() {
        Notifier.notify({
            title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: 'Thanks for the work.\nLet me know when you\'re hiring again!',
            type: NotificationConstants.NotificationOption.info,
            timeout: 30 * GameConstants.SECOND,
            setting: NotificationConstants.NotificationSetting.Farming.farm_hand,
        });
        this.hired(false);
        return;
    }
    tick() {
        // If not hired, nothing to do
        if (!this.hired()) {
            // energy isn't full, restore energy
            if (this.energy() < this.maxEnergy) {
                this.addEnergy();
            }
            return;
        }
        // Charge player when cost tick reached
        GameHelper.incrementObservable(this.costTicks, GameConstants.TICK_TIME);
        if (this.costTicks() % this.costTick < GameConstants.TICK_TIME) {
            this.costTicks(0);
            this.charge();
        }
        // Work/Restore energy when work ticks reached
        GameHelper.incrementObservable(this.workTicks, GameConstants.TICK_TIME);
        if (this.workTicks() % this.workTick < GameConstants.TICK_TIME) {
            this.workTicks(0);
            this.work();
        }
    }
    work() {
        // Out of energy cannot work right now..
        if (!this.energy()) {
            this.addEnergy();
            return;
        }
        // flip this if they worked, otherwise restore energy points
        let worked = false;
        let workTimes = this.efficiency;
        // Harvesting berries
        if (this.shouldHarvest()) {
            let readyPlotIndex;
            do {
                readyPlotIndex = App.game.farming.plotList.findIndex((p, i) => p.isUnlocked && p.berry !== BerryType.None && p.stage() >= PlotStage.Berry && this.plots().includes(i) && !p.isSafeLocked);
                if (readyPlotIndex >= 0 && workTimes > 0) {
                    const berry = App.game.farming.plotList[readyPlotIndex].berry;
                    App.game.farming.harvest(readyPlotIndex);
                    workTimes--;
                    worked = true;
                    if (this.focus() == FarmHandBerryTypes.Replant) {
                        App.game.farming.plant(readyPlotIndex, berry);
                        workTimes--;
                    }
                }
            } while (readyPlotIndex >= 0 && workTimes > 0);
        }
        // Planting berries
        if (this.focus() != FarmHandBerryTypes.None) {
            let emptyPlotIndex;
            let berry;
            do {
                // Find empty plots
                emptyPlotIndex = App.game.farming.plotList.findIndex((p, i) => p.isUnlocked && p.berry == BerryType.None && this.plots().includes(i) && !p.isSafeLocked);
                // Plant the berry
                if (emptyPlotIndex >= 0 && workTimes > 0) {
                    // Plant the expected berry
                    switch (this.focus()) {
                        case FarmHandBerryTypes.Replant: // Re-plant last berry used
                            berry = App.game.farming.plotList[emptyPlotIndex].lastPlanted;
                            break;
                        case FarmHandBerryTypes.Random: // Plant a random berry
                            berry = Rand.fromArray(App.game.farming.farmHands.availableBerries().filter(b => b >= 0));
                            break;
                        default:
                            berry = this.focus();
                    }
                    // If we somehow didn't find a berry to use, just plant a Cheri..
                    berry = berry < 0 ? BerryType.Cheri : berry;
                    // Only plant and work if the player has a berry to plant
                    if (App.game.farming.hasBerry(berry)) {
                        App.game.farming.plant(emptyPlotIndex, berry);
                        workTimes--;
                        worked = true;
                    }
                }
            } while (emptyPlotIndex >= 0 && workTimes > 0 && App.game.farming.hasBerry(berry));
        }
        if (this.shouldCatch()) {
            // First handle plots whose wanderer might flee soon
            const prioPlots = App.game.farming.plotList.filter(p => p.wanderer && p.wanderer.distractTime() > 0 && !p.wanderer.catching());
            while (prioPlots.length > 0 && workTimes > 0) {
                const plot = prioPlots.shift();
                if (this.plots().includes(plot.index)) {
                    App.game.farming.handleWanderer(plot);
                    workTimes--;
                    worked = true;
                }
            }
            // Then handle any plot
            const plots = App.game.farming.plotList.filter(p => p.wanderer && !p.wanderer.catching());
            while (plots.length > 0 && workTimes > 0) {
                const plot = plots.shift();
                if (this.plots().includes(plot.index)) {
                    App.game.farming.handleWanderer(plot);
                    workTimes--;
                    worked = true;
                }
            }
        }
        if (!worked) {
            this.addEnergy();
        }
        else {
            this.useEnergy();
        }
    }
    addEnergy(amt = 1) {
        // Only allow up to maximum value
        this.energy(Math.min(this.maxEnergy, this.energy() + amt));
    }
    useEnergy(amt = 1) {
        // Only allow to go down to 0
        this.energy(Math.max(0, this.energy() - amt));
    }
    charge() {
        // Charge the player if they can afford it, otherwise notify that they cannot
        if (!App.game.wallet.loseAmount(this.cost)) {
            Notifier.notify({
                title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
                message: `It looks like you are a little short on Farm Points right now...\nLet me know when you're hiring again!\nCost: <img src="./assets/images/currency/farmPoint.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
                type: NotificationConstants.NotificationOption.danger,
                timeout: 30 * GameConstants.MINUTE,
            });
            this.hired(false);
            App.game.logbook.newLog(LogBookTypes.OTHER, createLogContent.unableToPayFarmHand({ name: this.name }));
            return;
        }
        // Charge the player for the hour
        Notifier.notify({
            title: `[FARM HAND] <img src="assets/images/profile/trainer-${this.trainerSprite}.png" height="24px" class="pixelated"/> ${this.name}`,
            message: `Here's your bill for the hour!\nCost: <img src="./assets/images/currency/farmPoint.svg" height="24px"/> ${this.cost.amount.toLocaleString('en-US')}`,
            type: NotificationConstants.NotificationOption.info,
            timeout: 30 * GameConstants.SECOND,
        });
    }
    toJSON() {
        const output = {
            focus: this.focus(),
            shouldHarvest: this.shouldHarvest(),
            workTicks: this.workTicks(),
            costTicks: this.costTicks(),
            energy: this.energy(),
            hired: this.hired(),
            plots: this.plots(),
            // It uses the name to look up the farmhand on load
            name: this.name,
            shouldCatch: this.shouldCatch(),
        };
        // Don't save anything that is the default option
        Object.entries(output).forEach(([key, value]) => {
            if (value === this.defaults[key]) {
                delete output[key];
            }
        });
        return output;
    }
    fromJSON(json) {
        var _a, _b, _c, _d, _e, _g, _h, _j;
        if (!json) {
            return;
        }
        this.focus((_a = json.focus) !== null && _a !== void 0 ? _a : this.defaults.focus);
        this.shouldHarvest((_b = json.shouldHarvest) !== null && _b !== void 0 ? _b : this.defaults.shouldHarvest);
        this.workTicks((_c = json.workTicks) !== null && _c !== void 0 ? _c : this.defaults.workTicks);
        this.costTicks((_d = json.costTicks) !== null && _d !== void 0 ? _d : this.defaults.costTicks);
        this.energy((_e = json.energy) !== null && _e !== void 0 ? _e : this.defaults.energy);
        this.hired((_g = json.hired) !== null && _g !== void 0 ? _g : this.defaults.hired);
        this.plots((_h = json.plots) !== null && _h !== void 0 ? _h : this.defaults.plots);
        this.shouldCatch((_j = json.shouldCatch) !== null && _j !== void 0 ? _j : this.defaults.shouldCatch);
    }
}
class FarmHands {
    static add(farmHand) {
        this.list.push(farmHand);
    }
    constructor() {
        this.MAX_HIRES = 3;
        this.requirement = new BerriesUnlockedRequirement(8);
        this.available = ko.pureComputed(() => FarmHands.list.filter(f => f.isUnlocked()));
        this.hired = ko.pureComputed(() => FarmHands.list.filter(f => f.hired()));
        this.availableBerries = ko.pureComputed(() => GameHelper.enumNumbers(FarmHandBerryTypes).filter(b => { var _a, _b; return ((_b = (_a = App.game.farming.unlockedBerries)[b]) === null || _b === void 0 ? void 0 : _b.call(_a)) || b < 0; }).sort((a, b) => a - b));
        this.canHire = ko.pureComputed(() => this.hired().length < this.MAX_HIRES);
    }
    isUnlocked() {
        return this.requirement.isCompleted();
    }
    tick() {
        // run game tick for all farmhands
        FarmHands.list.forEach(f => f.tick());
    }
    toJSON() {
        return this.available().map(f => f.toJSON());
    }
    fromJSON(json) {
        if (!json || !json.length) {
            return;
        }
        FarmHands.list.forEach(f => {
            const data = json === null || json === void 0 ? void 0 : json.find(_f => _f.name == f.name);
            if (data) {
                f.fromJSON(data);
            }
        });
    }
}
FarmHands.list = [];
// Note: Gender-neutral names used as the trainer sprite is (seeded) randomly generated
FarmHands.add(new FarmHand('Alex', 10, 1, FarmHandSpeeds.Lazy, 1, 1, new BerriesUnlockedRequirement(8)));
FarmHands.add(new FarmHand('Logan', 15, 3, FarmHandSpeeds.Slowest, 2, 4, new BerriesUnlockedRequirement(16)));
FarmHands.add(new FarmHand('Joey', 10, 5, FarmHandSpeeds.Slow, 2, 5, new BerriesUnlockedRequirement(24)));
FarmHands.add(new FarmHand('Charlie', 30, 10, FarmHandSpeeds.BelowAverage, 7, 6, new BerriesUnlockedRequirement(32)));
FarmHands.add(new FarmHand('Bailey', 10, 12, FarmHandSpeeds.Average, 7, 7, new UniqueItemOwnedRequirement('FarmHandBailey', 'purchase', 'Purchased in the Johto region.')));
FarmHands.add(new FarmHand('Kerry', 50, 16, FarmHandSpeeds.AboveAverage, 8, 8, new UniqueItemOwnedRequirement('FarmHandKerry', 'purchase', 'Purchased in the Hoenn region.')));
FarmHands.add(new FarmHand('Riley', 70, 25, FarmHandSpeeds.Fast, 8, 10, new UniqueItemOwnedRequirement('FarmHandRiley', 'purchase', 'Purchased in the Sinnoh region.')));
FarmHands.add(new FarmHand('Jamie', 65, 5, FarmHandSpeeds.Faster, 9, 10, new UniqueItemOwnedRequirement('FarmHandJamie', 'purchase', 'Purchased in the Hoenn region.')));
FarmHands.add(new FarmHand('Jessie', 100, 50, FarmHandSpeeds.Fastest, 10, 12, new BerriesUnlockedRequirement(56)));
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
class Farming {
    constructor(multiplier) {
        this.multiplier = multiplier;
        this.name = 'Farming';
        this.saveKey = 'farming';
        this.berryData = [];
        this.mutations = [];
        this.farmHands = new FarmHands();
        this.mutationCounter = 0;
        this.wanderCounter = 0;
        this.mulchCounter = 0;
        this.defaults = {
            berryList: Array(GameHelper.enumLength(BerryType) - 1).fill(0),
            unlockedBerries: Array(GameHelper.enumLength(BerryType) - 1).fill(false),
            mulchList: Array(GameHelper.enumLength(MulchType)).fill(0),
            plotList: new Array(GameConstants.FARM_PLOT_WIDTH * GameConstants.FARM_PLOT_HEIGHT).fill(null).map((value, index) => {
                const middle = Math.floor(GameConstants.FARM_PLOT_HEIGHT / 2) * GameConstants.FARM_PLOT_WIDTH + Math.floor(GameConstants.FARM_PLOT_WIDTH / 2);
                return new Plot(index === middle, BerryType.None, 0, MulchType.None, 0, index);
            }),
            shovelAmt: 0,
            mulchShovelAmt: 0,
        };
        this.berryList = this.defaults.berryList.map((v) => ko.observable(v));
        this.unlockedBerries = this.defaults.unlockedBerries.map((v) => ko.observable(v));
        this.mulchList = this.defaults.mulchList.map((v) => ko.observable(v));
        this.plotList = this.defaults.plotList;
        this.unlockedPlotCount = ko.observable(0);
        this.shovelAmt = ko.observable(this.defaults.shovelAmt);
        this.mulchShovelAmt = ko.observable(this.defaults.mulchShovelAmt);
        this.externalAuras = [];
        this.externalAuras[AuraType.Attract] = ko.pureComputed(() => this.multiplyPlotAuras(AuraType.Attract));
        this.externalAuras[AuraType.Egg] = ko.pureComputed(() => this.multiplyPlotAuras(AuraType.Egg));
        this.externalAuras[AuraType.Shiny] = ko.pureComputed(() => this.multiplyPlotAuras(AuraType.Shiny));
        this.externalAuras[AuraType.Roaming] = ko.pureComputed(() => this.multiplyPlotAuras(AuraType.Roaming));
        this.externalAuras[AuraType.Ev] = ko.pureComputed(() => this.multiplyPlotAuras(AuraType.Ev));
        this.externalAuras[AuraType.Xp] = ko.pureComputed(() => this.multiplyPlotAuras(AuraType.Xp));
        const multiplierSource = 'Farm Aura';
        this.multiplier.addBonus('shiny', () => this.externalAuras[AuraType.Shiny](), multiplierSource);
        this.multiplier.addBonus('eggStep', () => this.externalAuras[AuraType.Egg](), multiplierSource);
        this.multiplier.addBonus('roaming', () => this.externalAuras[AuraType.Roaming](), multiplierSource);
        this.multiplier.addBonus('ev', () => this.externalAuras[AuraType.Ev](), multiplierSource);
        this.multiplier.addBonus('exp', () => this.externalAuras[AuraType.Xp](), multiplierSource);
        this.highestUnlockedBerry = ko.pureComputed(() => {
            for (let i = GameHelper.enumLength(BerryType) - 2; i >= 0; i--) {
                if (this.unlockedBerries[i]()) {
                    return i;
                }
            }
            return 0;
        });
        this.possiblePlotMutations = ko.pureComputed(() => {
            const plotMutations = [...Array(GameConstants.FARM_PLOT_WIDTH * GameConstants.FARM_PLOT_HEIGHT)].map(() => []);
            App.game.farming.mutations.forEach((mutation) => {
                const isUnlocked = App.game.farming.unlockedBerries[mutation.mutatedBerry]();
                if (!isUnlocked && !mutation.hintSeen) {
                    return;
                }
                mutation.getMutationPlots().forEach((plot) => {
                    if (mutation.getTotalMutationChance(plot) > 0) {
                        plotMutations[plot].push(isUnlocked ? BerryType[mutation.mutatedBerry] : '???');
                    }
                });
            });
            return plotMutations;
        });
    }
    initialize() {
        //#region Berry Data
        //#region First Generation
        this.berryData[BerryType.Cheri] = new Berry(BerryType.Cheri, // name type
        [5, 10, 20, 30, 60], // growth times for each stage [sprout, taller, bloom, berry, death]
        2, // harvest amount
        0.5, // replant rate, 1 is 100%
        5, // farm points per harvest (farm currency)
        1, // experience per harvest (affects how fast prices of Berry Master items (mulches, shovels, etc) go back to their base cost after being bought)
        [10, 0, 0, 0, 0], // flavors [Spicy, Dry, Sweet, Bitter, Sour] (for pokeblocks and poffins)
        25, // smoothness (for pokeblocks and poffins)
        BerryColor.Red, // color
        2, // size
        BerryFirmness.Soft, // firmness
        ['This bright red Berry is very spicy and has a provocative flavor. It blooms with delicate, pretty flowers.'] // description
        // aura
        // mature plant wanderers
        );
        this.berryData[BerryType.Chesto] = new Berry(BerryType.Chesto, [5, 15, 25, 40, 80], 3, 0.5, 6, 2, [0, 10, 0, 0, 0], 25, BerryColor.Purple, 8, BerryFirmness.Super_Hard, ['This Berry\'s thick skin and fruit are very tough and dry-tasting. However, every bit of it can be eaten.']);
        this.berryData[BerryType.Pecha] = new Berry(BerryType.Pecha, [10, 35, 50, 60, 120], 4, 0.5, 7, 3, [0, 0, 10, 0, 0], 25, BerryColor.Pink, 4, BerryFirmness.Very_Soft, ['Because of its hollow inside pocket, there isn\'t a lot to eat. What can be eaten is very sweet and delicious.']);
        this.berryData[BerryType.Rawst] = new Berry(BerryType.Rawst, [15, 30, 45, 80, 160], 5, 0.5, 8, 4, [0, 0, 0, 10, 0], 25, BerryColor.Green, 3.2, BerryFirmness.Hard, ['If the leaves grow longer and curlier than average, this Berry will have a somewhat-bitter taste.']);
        this.berryData[BerryType.Aspear] = new Berry(BerryType.Aspear, [10, 40, 60, 120, 240], 6, 0.5, 9, 5, [0, 0, 0, 0, 10], 25, BerryColor.Yellow, 5, BerryFirmness.Super_Hard, ['This Berry\'s peel is hard, but the flesh inside is very juicy. It is distinguished by its bracing sourness.']);
        this.berryData[BerryType.Leppa] = new Berry(BerryType.Leppa, [100, 120, 140, 240, 480], 7, 0.5, 10, 6, [10, 0, 10, 10, 10], 20, BerryColor.Red, 2.8, BerryFirmness.Very_Hard, ['It takes longer to grow than Berries such as Cheri. The smaller Berries taste better.']);
        this.berryData[BerryType.Oran] = new Berry(BerryType.Oran, [120, 180, 240, 300, 600], 8, 0.5, 20, 7, [10, 10, 0, 10, 10], 20, BerryColor.Blue, 3.5, BerryFirmness.Super_Hard, ['Nature\'s gifts came together as one in this Berry. It has a wondrous mix of flavors that spread in the mouth.']);
        this.berryData[BerryType.Sitrus] = new Berry(BerryType.Sitrus, [150, 300, 450, 600, 1200], 9, 0.5, 30, 8, [0, 10, 10, 10, 10], 20, BerryColor.Yellow, 9.5, BerryFirmness.Very_Hard, ['Sitrus came from the same family as Oran. It is larger and smoother-tasting than Oran.']);
        //#endregion
        //#region Second Generation
        this.berryData[BerryType.Persim] = new Berry(BerryType.Persim, [20, 40, 50, 90, 180], 5, 0.4, 10, 2, [10, 10, 10, 0, 10], 20, BerryColor.Pink, 4.7, BerryFirmness.Hard, ['The more this Berry absorbs energy from sunlight, the more vividly colorful it grows.']);
        this.berryData[BerryType.Razz] = new Berry(BerryType.Razz, [100, 150, 200, 250, 500], 7, 0.4, 15, 2, [10, 10, 0, 0, 0], 20, BerryColor.Red, 12, BerryFirmness.Very_Hard, ['A small hint of spiciness lingers in the red granules surrounding this Berry. Their centers have a dry taste.']);
        this.berryData[BerryType.Bluk] = new Berry(BerryType.Bluk, [200, 250, 300, 330, 660], 9, 0.4, 20, 2, [0, 10, 10, 0, 0], 20, BerryColor.Purple, 10.8, BerryFirmness.Soft, ['Though this small, delicately-skinned Berry is blue in color, it dyes the mouth black when eaten.']);
        this.berryData[BerryType.Nanab] = new Berry(BerryType.Nanab, [25, 30, 35, 250, 500], 11, 0.4, 25, 2, [0, 0, 10, 10, 0], 20, BerryColor.Pink, 7.7, BerryFirmness.Very_Hard, ['Bitter, but with a trace of sweetness, the Nanab Berry was the seventh to be discovered in the world.']);
        this.berryData[BerryType.Wepear] = new Berry(BerryType.Wepear, [150, 350, 375, 400, 800], 12, 0.4, 30, 2, [0, 0, 0, 10, 10], 20, BerryColor.Green, 7.4, BerryFirmness.Super_Hard, ['The potent mix of bitter and sour in this Berry seems to promote digestion. The flower is white and beautiful.']);
        this.berryData[BerryType.Pinap] = new Berry(BerryType.Pinap, [30, 60, 180, 240, 480], 13, 0.4, 35, 2, [10, 0, 0, 0, 10], 20, BerryColor.Yellow, 8, BerryFirmness.Hard, ['It is said that when the sour skin is peeled, this spicy Berry can be crushed to make medicine.']);
        this.berryData[BerryType.Figy] = new Berry(BerryType.Figy, [40, 160, 230, 350, 700], 14, 0.3, 40, 3, [15, 0, 0, 0, 0], 25, BerryColor.Red, 10, BerryFirmness.Soft, ['This Berry is oddly shaped, appearing as if someone took a bite out of it. It is packed full of spicy substances.']);
        this.berryData[BerryType.Wiki] = new Berry(BerryType.Wiki, [40, 190, 210, 360, 720], 15, 0.3, 45, 3, [0, 15, 0, 0, 0], 25, BerryColor.Purple, 11.5, BerryFirmness.Hard, ['It is said that this Berry grew lumps to help Pokémon grip it, allowing propagation farther afield.']);
        this.berryData[BerryType.Mago] = new Berry(BerryType.Mago, [40, 180, 240, 370, 740], 16, 0.3, 50, 3, [0, 0, 15, 0, 0], 25, BerryColor.Pink, 12.6, BerryFirmness.Hard, ['This Berry progressively curves as it grows. The curvier the Berry, the sweeter and tastier.']);
        this.berryData[BerryType.Aguav] = new Berry(BerryType.Aguav, [40, 170, 220, 350, 700], 17, 0.3, 55, 3, [0, 0, 0, 15, 0], 25, BerryColor.Green, 6.4, BerryFirmness.Super_Hard, ['This Berry turns bitter toward the stem. The dainty flower it grows from doesn\'t absorb much sunlight.']);
        this.berryData[BerryType.Iapapa] = new Berry(BerryType.Iapapa, [40, 200, 230, 380, 760], 18, 0.3, 60, 3, [0, 0, 0, 0, 15], 25, BerryColor.Yellow, 22.3, BerryFirmness.Soft, ['This Berry is very big and sour. The juiciness of the pulp accentuates the sourness.']);
        this.berryData[BerryType.Lum] = new Berry(BerryType.Lum, [3000, 3200, 3400, 3600, 43200], 1, 0, 540, 3, [10, 10, 10, 10, 0], 25, BerryColor.Green, 3.4, BerryFirmness.Super_Hard, [
            'This Berry\'s gradual process of storing nutrients beneficial to Pokémon health causes it to mature slowly.',
            'This Berry multiplies the effect of Berry plants around it.',
        ], new Aura(AuraType.Boost, [1.01, 1.02, 1.03]));
        //#endregion
        //#region Third Generation
        this.berryData[BerryType.Pomeg] = new Berry(BerryType.Pomeg, [200, 1200, 4000, 5400, 10800], 20, 0.2, 500, 10, [10, 0, 10, 10, 0], 20, BerryColor.Red, 13.5, BerryFirmness.Very_Hard, ['When this sweetly spicy Berry\'s thick skin is peeled, many pieces of the fruit spill out.']);
        this.berryData[BerryType.Kelpsy] = new Berry(BerryType.Kelpsy, [240, 2000, 3400, 6000, 12000], 21, 0.2, 525, 10, [0, 10, 0, 10, 10], 20, BerryColor.Blue, 15, BerryFirmness.Hard, ['This Berry can be eaten as is or boiled to obtain an extract that adds a dash of flavor to food.']);
        this.berryData[BerryType.Qualot] = new Berry(BerryType.Qualot, [230, 1000, 2500, 4800, 9600], 22, 0.2, 550, 10, [10, 0, 10, 0, 10], 20, BerryColor.Pink, 11, BerryFirmness.Hard, ['Even in places of constant rain and high humidity, this Berry\'s plant grows healthy and strong.']);
        this.berryData[BerryType.Hondew] = new Berry(BerryType.Hondew, [1000, 2000, 5000, 10800, 21600], 23, 0.2, 2000, 10, [10, 10, 0, 10, 0], 20, BerryColor.Green, 16.2, BerryFirmness.Hard, ['This somewhat-rare Berry projects an image of luxury, so it is favored as a gift item.']);
        this.berryData[BerryType.Grepa] = new Berry(BerryType.Grepa, [300, 3400, 5600, 7200, 14400], 24, 0.2, 600, 10, [0, 10, 10, 0, 10], 20, BerryColor.Yellow, 14.9, BerryFirmness.Soft, ['One bite of this very tender Berry fills the mouth with its sweet and tangy flavor.']);
        this.berryData[BerryType.Tamato] = new Berry(BerryType.Tamato, [430, 1400, 4000, 8640, 17280], 25, 0.2, 625, 10, [20, 10, 0, 0, 0], 30, BerryColor.Red, 20, BerryFirmness.Soft, ['This Berry is large and spicy. When eaten during the cold season, it warms the body from inside.']);
        this.berryData[BerryType.Cornn] = new Berry(BerryType.Cornn, [1100, 4000, 8000, 9000, 18000], 26, 0.1, 700, 10, [0, 20, 10, 0, 0], 30, BerryColor.Purple, 7.5, BerryFirmness.Hard, ['Its dryness is quite strong. As a result, its true deliciousness can\'t be appreciated by just eating one or two.']);
        this.berryData[BerryType.Magost] = new Berry(BerryType.Magost, [2400, 6500, 10000, 14400, 28800], 27, 0.1, 750, 10, [0, 0, 20, 10, 0], 30, BerryColor.Pink, 14, BerryFirmness.Hard, ['The grown-up flavor and dreamy sweetness of this Berry make it a favorite of Pokémon everywhere.']);
        this.berryData[BerryType.Rabuta] = new Berry(BerryType.Rabuta, [2310, 5400, 9500, 12240, 24480], 28, 0.1, 800, 10, [0, 0, 0, 20, 10], 30, BerryColor.Green, 22.6, BerryFirmness.Soft, ['Even though it is bitter, it should be eaten peel and all. The hair on the peel cleans the stomach from the inside.']);
        this.berryData[BerryType.Nomel] = new Berry(BerryType.Nomel, [1240, 5200, 10500, 15120, 30240], 29, 0.1, 850, 10, [10, 0, 0, 0, 20], 30, BerryColor.Yellow, 28.5, BerryFirmness.Super_Hard, ['This Berry is quite sour overall, with the sourness especially concentrated at the pointed end.']);
        this.berryData[BerryType.Spelon] = new Berry(BerryType.Spelon, [2000, 7000, 12000, 15480, 30960], 30, 0.1, 900, 10, [30, 10, 0, 0, 0], 35, BerryColor.Red, 13.3, BerryFirmness.Soft, ['So spicy is the Spelon Berry that, Fire type or not, Pokémon will try to breathe fire after eating a single one.']);
        this.berryData[BerryType.Pamtre] = new Berry(BerryType.Pamtre, [3000, 10000, 16400, 18000, 36000], 31, 0.1, 950, 10, [0, 30, 10, 0, 0], 35, BerryColor.Purple, 24.4, BerryFirmness.Very_Soft, [
            'This Berry drifted from a faraway sea. It is now cultivated in the Sinnoh region.',
            'It has a tendency to expand into nearby plots.',
        ]);
        this.berryData[BerryType.Watmel] = new Berry(BerryType.Watmel, [2300, 3400, 9800, 16560, 33120], 32, 0.1, 1000, 10, [0, 0, 30, 10, 0], 35, BerryColor.Pink, 25, BerryFirmness.Soft, ['A bounty of nature that is exceedingly sweet. The Berry is huge, with some discovered that exceed 20\u2033, or 50 cm.']);
        this.berryData[BerryType.Durin] = new Berry(BerryType.Durin, [10000, 14000, 18000, 21600, 43200], 33, 0.1, 1050, 10, [0, 0, 0, 30, 10], 35, BerryColor.Green, 28, BerryFirmness.Hard, ['This Berry is tremendously bitter. Just one bite is enough to instantly stop hiccups.']);
        this.berryData[BerryType.Belue] = new Berry(BerryType.Belue, [5000, 9800, 14500, 19800, 39600], 20, 0.1, 1100, 10, [10, 0, 0, 0, 30], 35, BerryColor.Purple, 30, BerryFirmness.Very_Soft, ['This glossy and colorful Berry has a mouthwateringly delicious appearance. However, it is awfully sour.']);
        this.berryData[BerryType.Pinkan] = new Berry(BerryType.Pinkan, [1800, 3600, 7200, 14400, 28800], 3, 0.1, 2500, 15, [0, 0, 35, 0, 0], 30, BerryColor.Pink, 3.5, BerryFirmness.Hard, [
            'This Berry endemic to Pinkan Island has an incredibly sweet taste.',
            'It has a vibrant pink pigment, and it is found in such abundance on Pinkan Island that all Pokémon found there are colored Pink!',
        ], undefined, ['Pinkan Scyther']);
        //#endregion
        //#region Fourth Generation (Typed)
        this.berryData[BerryType.Occa] = new Berry(BerryType.Occa, [8090, 13200, 16000, 21960, 43920], 21, 0.05, 1200, 15, [15, 0, 10, 0, 0], 30, BerryColor.Red, 8.9, BerryFirmness.Super_Hard, [
            'This Berry is said to have grown plentiful in the tropics of the past. It boasts an intensely hot spiciness.',
            'It has a tendency to overtake nearby plants.',
        ], undefined, ['Charmander', 'Cyndaquil', 'Torchic', 'Chimchar', 'Tepig', 'Fennekin', 'Litten', 'Scorbunny', 'Fuecoco']);
        this.berryData[BerryType.Passho] = new Berry(BerryType.Passho, [490, 3600, 10800, 21600, 43200], 22, 0.05, 1300, 15, [0, 15, 0, 10, 0], 30, BerryColor.Blue, 3.3, BerryFirmness.Soft, [
            'This Berry\'s flesh is dotted with countless tiny bubbles of air that keep it afloat in water.',
            'This Berry promotes the fruiting of nearby Berry plants.',
        ], new Aura(AuraType.Harvest, [1.1, 1.2, 1.3]), ['Squirtle', 'Totodile', 'Mudkip', 'Piplup', 'Oshawott', 'Froakie', 'Popplio', 'Sobble', 'Quaxly']);
        this.berryData[BerryType.Wacan] = new Berry(BerryType.Wacan, [10, 180, 900, 1800, 3600], 2, 0.05, 250, 1, [0, 0, 15, 0, 10], 30, BerryColor.Yellow, 25, BerryFirmness.Very_Soft, [
            'Energy from lightning strikes is drawn into the plant, making the Berries grow big and rich.',
            'The same energy promotes the growth of nearby Berries.',
        ], new Aura(AuraType.Growth, [1.1, 1.2, 1.3]), ['Pikachu', 'Plusle', 'Minun', 'Pachirisu', 'Emolga', 'Dedenne', 'Togedemaru', 'Morpeko (Hangry)', 'Pawmi']);
        this.berryData[BerryType.Rindo] = new Berry(BerryType.Rindo, [3600, 7200, 16200, 28800, 57600], 24, 0.05, 1400, 15, [10, 0, 0, 15, 0], 30, BerryColor.Green, 15.5, BerryFirmness.Soft, [
            'This Berry has a disagreeable "green" flavor and scent typical of vegetables. It is rich in health-promoting fiber.',
            'It has a tendency to expand into nearby plots.',
        ], undefined, ['Bulbasaur', 'Chikorita', 'Treecko', 'Turtwig', 'Snivy', 'Chespin', 'Rowlet', 'Grookey', 'Sprigatito']);
        this.berryData[BerryType.Yache] = new Berry(BerryType.Yache, [3600, 14400, 28800, 43200, 86400], 25, 0.05, 1500, 15, [0, 10, 0, 0, 15], 30, BerryColor.Blue, 13.5, BerryFirmness.Very_Hard, [
            'This Berry has a refreshing flavor that strikes a good balance of dryness and sourness. It tastes better chilled.',
            'This Berry slows the decay of nearby Berries.',
        ], new Aura(AuraType.Decay, [0.9, 0.8, 0.7]), ['Jynx', 'Swinub', 'Spheal', 'Snover', 'Snom']);
        this.berryData[BerryType.Chople] = new Berry(BerryType.Chople, [5400, 10800, 25200, 36000, 72000], 26, 0.05, 1600, 15, [15, 0, 0, 10, 0], 30, BerryColor.Red, 7.7, BerryFirmness.Soft, [
            'This Berry contains a substance that generates heat. It can even heat up a chilly heart.',
            'Growing these Berries will promote Egg growth.',
        ], new Aura(AuraType.Egg, [1.01, 1.02, 1.03]), ['Mankey', 'Makuhita', 'Riolu', 'Scraggy', 'Crabrawler']);
        this.berryData[BerryType.Kebia] = new Berry(BerryType.Kebia, [100, 200, 400, 600, 86400], 1, 1, 50, 1, [0, 15, 0, 0, 10], 30, BerryColor.Green, 8.9, BerryFirmness.Hard, [
            'This Berry is a brilliant green on the outside. Inside, it is packed with a dry-flavored, black-colored flesh.',
            'It has a tendency to overtake nearby plants.',
            'Due to its poisonous nature, it increases the chances of mutations near it.',
        ], new Aura(AuraType.Mutation, [1.2, 1.4, 1.6]), ['Grimer', 'Spinarak', 'Gulpin', 'Skorupi', 'Salandit', 'Toxel']);
        this.berryData[BerryType.Shuca] = new Berry(BerryType.Shuca, [7200, 16200, 32400, 39600, 79200], 28, 1, 1700, 15, [10, 0, 15, 0, 0], 30, BerryColor.Yellow, 4.2, BerryFirmness.Soft, [
            'The sweetness-laden pulp has just the hint of a hard-edged and fragrant bite to it.',
            'Growing these Berries will soften the ground around it, increasing the chances of replanting.',
        ], new Aura(AuraType.Replant, [1.01, 1.02, 1.03]), ['Sandshrew', 'Larvitar', 'Numel', 'Hippopotas']);
        this.berryData[BerryType.Coba] = new Berry(BerryType.Coba, [9000, 12600, 16200, 19800, 39600], 29, 0.05, 1800, 15, [0, 10, 0, 15, 0], 30, BerryColor.Blue, 27.7, BerryFirmness.Very_Hard, ['This Berry is said to be a new kind that is a cross of two Berries brought together by winds from far away.'], undefined, ['Farfetch\'d', 'Murkrow', 'Tropius', 'Chatot']);
        this.berryData[BerryType.Payapa] = new Berry(BerryType.Payapa, [4680, 11880, 23400, 34200, 68400], 30, 0.05, 1900, 15, [0, 0, 10, 0, 15], 30, BerryColor.Purple, 25.1, BerryFirmness.Soft, [
            'This Berry is said to sense human emotions for the way it swells roundly when a person approaches.',
            'The same behavior affects nearby plants, causing additional mutations.',
        ], new Aura(AuraType.Mutation, [1.1, 1.2, 1.3]), ['Mr. Mime', 'Natu', 'Ralts', 'Chingling']);
        this.berryData[BerryType.Tanga] = new Berry(BerryType.Tanga, [450, 900, 1800, 3600, 7200], 3, 0.5, 500, 15, [20, 0, 0, 0, 10], 35, BerryColor.Green, 4.3, BerryFirmness.Very_Soft, [
            'The flower grows at the tip of this Berry. It attracts Bug Pokémon by letting its stringy petals stream out.',
            'The attracted Bug Pokémon decrease the amount of harvestable Berries in nearby plants.',
        ], new Aura(AuraType.Harvest, [0.9, 0.8, 0.7]), ['Pinsir', 'Shuckle', 'Shuckle (Corked)', 'Nincada', 'Mothim', 'Sizzlipede']);
        this.berryData[BerryType.Charti] = new Berry(BerryType.Charti, [8600, 12960, 23040, 37800, 75600], 32, 0.05, 2000, 15, [10, 20, 0, 0, 0], 35, BerryColor.Yellow, 2.8, BerryFirmness.Very_Soft, [
            'It is often used for pickles because of its very dry flavor. It can also be eaten raw for its provocative taste.',
            'This Berry plant hardens the surrounding soil, decreasing the chances of replanting.',
        ], new Aura(AuraType.Replant, [0.99, 0.98, 0.97]), ['Rhyhorn', 'Sudowoodo', 'Aron', 'Bonsly', 'Rockruff']);
        this.berryData[BerryType.Kasib] = new Berry(BerryType.Kasib, [30, 60, 120, 300, 86400], 1, 1, 25, 1, [0, 10, 20, 0, 0], 35, BerryColor.Purple, 14.4, BerryFirmness.Hard, [
            'Considered to have a special power from the olden days, this Berry is sometimes dried and used as a good-luck charm.',
            'This Berry causes other nearby Berries to wither away faster.',
        ], new Aura(AuraType.Death, [1.25, 1.5, 2.0]), ['Gastly', 'Misdreavus', 'Shedinja', 'Drifloon']);
        this.berryData[BerryType.Haban] = new Berry(BerryType.Haban, [10800, 21600, 43200, 86400, 172800], 34, 0, 4000, 15, [0, 0, 10, 20, 0], 35, BerryColor.Red, 2.3, BerryFirmness.Soft, [
            'If a large enough volume of this Berry is boiled down, its bitterness fades away. It makes a good jam.',
            'This Berry requires a lot of energy to grow, but isn\'t fussy about what it consumes, it helps other plants by removing toxins from the soil.',
        ], new Aura(AuraType.Decay, [0.8, 0.6, 0.5]), ['Dratini', 'Bagon', 'Gible', 'Druddigon', 'Drampa', 'Applin', 'Exposed Applin']);
        this.berryData[BerryType.Colbur] = new Berry(BerryType.Colbur, [2880, 10080, 19440, 27000, 54000], 35, 0.05, 2300, 15, [0, 0, 0, 10, 20], 35, BerryColor.Purple, 3.8, BerryFirmness.Super_Hard, [
            'Tiny hooks grow on the surface of this Berry. It latches on to Pokémon so it can be carried to far-off places.',
            'It has a tendency to overtake nearby plants.',
            'It also prevents Kasib from mutating.',
        ], undefined, ['Houndour', 'Absol', 'Stunky', 'Zorua', 'Impidimp']);
        this.berryData[BerryType.Babiri] = new Berry(BerryType.Babiri, [7200, 16200, 32400, 64800, 129600], 36, 0.05, 2400, 15, [25, 10, 0, 0, 0], 35, BerryColor.Green, 26.5, BerryFirmness.Super_Hard, [
            'This Berry is very tough with a strong flavor. It was used to make medicine by people in the past.',
            'This Berry plant is very hardy and resistant, making it resistant to mutations, and also decreasing the chance of mutations around it.',
        ], new Aura(AuraType.Mutation, [0.5, 0.25, 0.0]), ['Magnemite', 'Skarmory', 'Beldum', 'Bronzor', 'Cufant']);
        this.berryData[BerryType.Chilan] = new Berry(BerryType.Chilan, [240, 1430, 2970, 7200, 14400], 10, 0.05, 500, 15, [0, 25, 10, 0, 0], 35, BerryColor.Yellow, 3.3, BerryFirmness.Very_Soft, ['This Berry can be cored out and dried to make a whistle. Blowing through its hole makes an indescribable sound.'], new Aura(AuraType.Egg, [0.99, 0.98, 0.97]), ['Snorlax', 'Girafarig', 'Swablu', 'Munchlax', 'Audino', 'Skwovet']);
        this.berryData[BerryType.Roseli] = new Berry(BerryType.Roseli, [2410, 5040, 12600, 25200, 50400], 38, 0.05, 2500, 15, [0, 0, 25, 10, 0], 35, BerryColor.Pink, 3.3, BerryFirmness.Hard, [
            'This Berry is sweet with a hint of bitterness and has a lingering sweet scent. It is often dried and used to make tea.',
            'The scent of this Berry plant attracts wild Pokémon.',
        ], new Aura(AuraType.Attract, [1.02, 1.04, 1.07]), ['Clefairy', 'Togepi', 'Ralts']);
        this.berryData[BerryType.Snover] = new Berry(BerryType.Snover, [3600, 7200, 10800, 14400, 28800], 5, 0.01, 1250, 15, [0, 0, 20, 0, 10], 35, BerryColor.Green, 5, BerryFirmness.Soft, ['This berry grows around the waist of certain Snover.'], undefined, ['Snover (Berry)']);
        //#endregion
        //#region Fifth Generation
        this.berryData[BerryType.Micle] = new Berry(BerryType.Micle, [3960, 7920, 15840, 31680, 63360], 1, 0.05, 2600, 20, [0, 40, 10, 0, 0], 60, BerryColor.Green, 4.1, BerryFirmness.Soft, [
            'This Berry has a very dry flavor. It has the effect of making other food eaten at the same time taste sweet.',
            'The scent of this Berry plant repels wild Pokémon.',
        ], new Aura(AuraType.Attract, [0.99, 0.97, 0.95]), ['Hoopa']);
        this.berryData[BerryType.Custap] = new Berry(BerryType.Custap, [3240, 8280, 13320, 27360, 54720], 1, 0.05, 2700, 20, [0, 0, 40, 10, 0], 60, BerryColor.Red, 26.7, BerryFirmness.Super_Hard, [
            'The flesh underneath the Custap Berry\'s tough skin is sweet and creamy soft.',
            'This inspires Pokémon to train harder.',
        ], new Aura(AuraType.Xp, [1.005, 1.01, 1.015]), ['Burmy (No Coat)']);
        this.berryData[BerryType.Jaboca] = new Berry(BerryType.Jaboca, [4320, 8640, 16560, 33480, 66960], 1, 0.05, 2800, 20, [0, 0, 0, 40, 10], 60, BerryColor.Yellow, 3.3, BerryFirmness.Soft, [
            'The cluster of drupelets that make up this Berry pop rhythmically if the Berry is handled roughly.',
            'The sound of these Berries attracts rare wild Pokémon.',
        ], new Aura(AuraType.Roaming, [1.005, 1.01, 1.015]));
        this.berryData[BerryType.Rowap] = new Berry(BerryType.Rowap, [5760, 9000, 14040, 21240, 42480], 1, 0.05, 2900, 20, [10, 0, 0, 0, 40], 60, BerryColor.Blue, 5.2, BerryFirmness.Very_Soft, [
            'In days of old, people worked the top-shaped pieces of this Berry free and used them as toys.',
            'These berries make catching efforts worth more.',
        ], new Aura(AuraType.Ev, [1.005, 1.01, 1.015]));
        this.berryData[BerryType.Kee] = new Berry(BerryType.Kee, [4680, 9360, 18360, 36360, 72720], 1, 0.05, 3000, 20, [30, 30, 10, 10, 10], 60, BerryColor.Yellow, 5.7, BerryFirmness.Very_Hard, ['This Berry remains poisonous until fully ripened. Once ripe it has a spicy and sweet complex flavor.']);
        this.berryData[BerryType.Maranga] = new Berry(BerryType.Maranga, [5040, 10080, 20160, 40320, 80640], 1, 0.05, 8000, 20, [10, 10, 30, 30, 10], 60, BerryColor.Blue, 19.4, BerryFirmness.Very_Hard, ['This Berry resembles the Durin Berry, though its spikes are less pronounced. It is quite delicious when roasted.']);
        this.berryData[BerryType.Liechi] = new Berry(BerryType.Liechi, [21600, 43200, 86400, 172800, 345600], 0.5, 0, 10000, 20, [30, 10, 30, 0, 0], 40, BerryColor.Red, 11.1, BerryFirmness.Very_Hard, ['This Berry is surrounded by mystery. It is rumored to be imbued with the power of the sea.'], undefined, ['Manaphy']);
        this.berryData[BerryType.Ganlon] = new Berry(BerryType.Ganlon, [21600, 43200, 86400, 172800, 345600], 0.5, 0, 10000, 20, [0, 30, 10, 30, 0], 40, BerryColor.Purple, 3.3, BerryFirmness.Very_Hard, ['This Berry is surrounded by mystery. It is rumored to be imbued with the power of the land.']);
        this.berryData[BerryType.Salac] = new Berry(BerryType.Salac, [21600, 43200, 86400, 172800, 345600], 0.5, 0, 10000, 20, [0, 0, 30, 10, 30], 40, BerryColor.Green, 9.5, BerryFirmness.Very_Hard, ['This Berry is surrounded by mystery. It is rumored to be imbued with the power of the sky.']);
        this.berryData[BerryType.Petaya] = new Berry(BerryType.Petaya, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [30, 0, 0, 30, 10], 40, BerryColor.Pink, 23.7, BerryFirmness.Very_Hard, [
            'This Berry is surrounded by mystery. It is rumored to be imbued with the power of all living things.',
            'This power revitalizes and prevents other berries from withering.',
        ], undefined, ['Mew']);
        this.berryData[BerryType.Apicot] = new Berry(BerryType.Apicot, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [10, 30, 0, 0, 30], 40, BerryColor.Blue, 7.5, BerryFirmness.Hard, ['This is a very, very mystifying Berry. There is no telling how it can be used, or what may happen if it is used.']);
        this.berryData[BerryType.Lansat] = new Berry(BerryType.Lansat, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [30, 10, 30, 10, 30], 50, BerryColor.Red, 9.7, BerryFirmness.Soft, ['This is said to be a legendary Berry. Holding it supposedly brings great joy.']);
        this.berryData[BerryType.Starf] = new Berry(BerryType.Starf, [10800, 21600, 43200, 86400, 432000], 0.5, 0, 15000, 20, [30, 10, 30, 10, 30], 50, BerryColor.Green, 15.3, BerryFirmness.Super_Hard, ['This Berry is considered a mirage. It was said to be so strong that it had to be abandoned at the world\'s edge.'], new Aura(AuraType.Shiny, [1.005, 1.01, 1.015]), ['Jirachi']);
        this.berryData[BerryType.Enigma] = new Berry(BerryType.Enigma, [10800, 21600, 43200, 86400, 604800], 0.5, 0, 15000, 20, [40, 10, 0, 0, 0], 60, BerryColor.Purple, 15.5, BerryFirmness.Hard, ['A completely enigmatic Berry. It apparently has the power of the stars that fill the night sky.'], undefined, ['Detective Pikachu']);
        this.berryData[BerryType.Hopo] = new Berry(BerryType.Hopo, [10800, 21600, 43200, 86400, 604800], 1, 0, 15000, 25, [15, 40, 35, 30, 25], 50, BerryColor.Gold, 5.8, BerryFirmness.Very_Soft, ['A truly mythical Berry native to harsh northern lands. It was first created by a Pokémon believed to have shaped the world.']);
        //#endregion
        //#endregion
        //#region Mutations
        /**
         * NOTE: ONLY ADD NEW MUTATIONS AT THE END OF THE LIST. MUTATION INDEX IS USED TO STORE HINT SEEN DATA
         */
        //#region Second Generation
        // Persim
        this.mutations.push(new GrowNearBerryMutation(.02, BerryType.Persim, [
            BerryType.Pecha,
            BerryType.Oran,
        ]));
        // Razz
        this.mutations.push(new GrowNearBerryMutation(.019, BerryType.Razz, [
            BerryType.Cheri,
            BerryType.Leppa,
        ]));
        // Bluk
        this.mutations.push(new GrowNearBerryMutation(.018, BerryType.Bluk, [
            BerryType.Chesto,
            BerryType.Leppa,
        ]));
        // Nanab
        this.mutations.push(new GrowNearBerryMutation(.017, BerryType.Nanab, [
            BerryType.Pecha,
            BerryType.Aspear,
        ]));
        // Wepear
        this.mutations.push(new GrowNearBerryMutation(.016, BerryType.Wepear, [
            BerryType.Rawst,
            BerryType.Oran,
        ]));
        // Pinap
        this.mutations.push(new GrowNearBerryMutation(.015, BerryType.Pinap, [
            BerryType.Sitrus,
            BerryType.Aspear,
        ]));
        // Figy
        this.mutations.push(new GrowNearFlavorMutation(.009, BerryType.Figy, [[25, 80], [0, 5], [0, 5], [0, 5], [0, 5]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too spicy!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Cheri]();
            },
        }));
        // Wiki
        this.mutations.push(new GrowNearFlavorMutation(.008, BerryType.Wiki, [[0, 5], [25, 80], [0, 5], [0, 5], [0, 5]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too dry!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Chesto]();
            },
        }));
        // Mago
        this.mutations.push(new GrowNearFlavorMutation(.007, BerryType.Mago, [[0, 5], [0, 5], [25, 80], [0, 5], [0, 5]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too sweet!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Pecha]();
            },
        }));
        // Aguav
        this.mutations.push(new GrowNearFlavorMutation(.006, BerryType.Aguav, [[0, 5], [0, 5], [0, 5], [25, 80], [0, 5]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too bitter!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Rawst]();
            },
        }));
        // Iapapa
        this.mutations.push(new GrowNearFlavorMutation(.005, BerryType.Iapapa, [[0, 5], [0, 5], [0, 5], [0, 5], [25, 80]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings get too sour!',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Aspear]();
            },
        }));
        // Lum
        this.mutations.push(new GrowNearBerryMutation(.001, BerryType.Lum, [
            BerryType.Cheri,
            BerryType.Chesto,
            BerryType.Pecha,
            BerryType.Rawst,
            BerryType.Aspear,
            BerryType.Leppa,
            BerryType.Oran,
            BerryType.Sitrus,
        ], {
            hint: 'I\'ve heard that there\'s a legendary Berry that only appears when fully surrounded by the 8 different Berries that wild Pokémon hold!',
        }));
        //#endregion
        //#region Third Generation
        // Pomeg
        this.mutations.push(new GrowNearBerryMutation(.0005, BerryType.Pomeg, [
            BerryType.Iapapa,
            BerryType.Mago,
        ]));
        // Kelpsy
        this.mutations.push(new GrowNearBerryMutation(.0005, BerryType.Kelpsy, [
            BerryType.Chesto,
            BerryType.Persim,
        ]));
        // Qualot
        this.mutations.push(new GrowNearFlavorMutation(.0005, BerryType.Qualot, [[10, 15], [0, 0], [10, 15], [0, 0], [10, 15]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings match its flavor profile! If I recall, it tasted a little spicy, a little sweet, and a little sour at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Cheri]() &&
                    App.game.farming.unlockedBerries[BerryType.Pecha]() &&
                    App.game.farming.unlockedBerries[BerryType.Aspear]();
            },
        }));
        // Hondew
        this.mutations.push(new GrowNearFlavorMutation(.0004, BerryType.Hondew, [[15, 15], [15, 15], [0, 0], [15, 15], [0, 0]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings match its flavor profile! If I recall, it tasted fairly spicy, dry, and bitter at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Figy]() &&
                    App.game.farming.unlockedBerries[BerryType.Wiki]() &&
                    App.game.farming.unlockedBerries[BerryType.Aguav]();
            },
        }));
        // Grepa
        this.mutations.push(new GrowNearBerryMutation(.0005, BerryType.Grepa, [
            BerryType.Aguav,
            BerryType.Figy,
        ]));
        // Tamato
        this.mutations.push(new EvolveNearBerryMutation(.0005, BerryType.Tamato, BerryType.Razz, [BerryType.Pomeg]));
        // Cornn
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Cornn, [
            BerryType.Leppa,
            BerryType.Bluk,
            BerryType.Wiki,
        ]));
        // Magost
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Magost, [
            BerryType.Pecha,
            BerryType.Nanab,
            BerryType.Mago,
        ]));
        // Rabuta
        this.mutations.push(new EvolveNearBerryMutation(.0003, BerryType.Rabuta, BerryType.Aspear, [BerryType.Aguav]));
        // Nomel
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Nomel, [
            BerryType.Wepear,
            BerryType.Pinap,
        ]));
        // Spelon
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Spelon, BerryType.Tamato, [[130, 160], [0, 80], [0, 80], [0, 80], [0, 80]], {
            hint: 'I\'ve heard that a Tamato berry will change if its surroundings get extremely spicy!',
        }));
        // Pamtre
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Pamtre, BerryType.Cornn, [[0, 80], [130, 160], [0, 80], [0, 80], [0, 80]], {
            hint: 'I\'ve heard that a Cornn berry will change if its surroundings get extremely dry!',
        }));
        // Pamtre Overgrow
        this.mutations.push(new GrowNearBerryMutation(.0004, BerryType.Pamtre, [BerryType.Pamtre], { showHint: false }));
        // Watmel
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Watmel, BerryType.Magost, [[0, 80], [0, 80], [130, 160], [0, 80], [0, 80]], {
            hint: 'I\'ve heard that a Magost berry will change if its surroundings get extremely sweet!',
        }));
        // Durin
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Durin, BerryType.Rabuta, [[0, 80], [0, 80], [0, 80], [130, 160], [0, 80]], {
            hint: 'I\'ve heard that a Rabuta berry will change if its surroundings get extremely bitter!',
        }));
        // Belue
        this.mutations.push(new EvolveNearFlavorMutation(.0002, BerryType.Belue, BerryType.Nomel, [[0, 80], [0, 80], [0, 80], [0, 80], [130, 160]], {
            hint: 'I\'ve heard that a Nomel berry will change if its surroundings get extremely sour!',
        }));
        // Pinkan
        this.mutations.push(new GrowNearBerryMutation(.0005, BerryType.Pinkan, [
            BerryType.Pecha,
            BerryType.Persim,
            BerryType.Nanab,
            BerryType.Mago,
            BerryType.Qualot,
            BerryType.Magost,
            BerryType.Watmel,
        ], {
            hint: 'I\'ve heard that there\'s a special Pink Berry that only appears when surrounded by a bunch of different types of Pink Berries!',
            unlockReq: function () {
                return App.game.quests.getQuestLine('Team Rocket\'s Pinkan Theme Park').state() > QuestLineState.inactive;
            },
        }));
        //#endregion
        //#region Fourth Generation
        // Occa
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Occa, [
            BerryType.Razz,
            BerryType.Figy,
            BerryType.Tamato,
            BerryType.Spelon,
        ]));
        // Occa Parasite
        this.mutations.push(new ParasiteMutation(.0004, BerryType.Occa));
        // Passho
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Passho, [
            BerryType.Oran,
            BerryType.Chesto,
            BerryType.Kelpsy,
            BerryType.Coba,
        ]));
        // Wacan
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Wacan, [
            BerryType.Pinap,
            BerryType.Iapapa,
            BerryType.Qualot,
            BerryType.Grepa,
        ]));
        // Rindo
        this.mutations.push(new GrowNearFlavorMutation(.0001, BerryType.Rindo, [[10, 15], [0, 0], [0, 0], [15, 20], [0, 0]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings match its flavor profile! If I recall, it tasted a little spicy and fairly bitter at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Aguav]() &&
                    App.game.farming.unlockedBerries[BerryType.Cheri]();
            },
        }));
        // Rindo Overgrow
        this.mutations.push(new GrowNearBerryMutation(.0004, BerryType.Rindo, [BerryType.Rindo], { showHint: false }));
        // Yache
        this.mutations.push(new EvolveNearBerryStrictMutation(.0001, BerryType.Yache, BerryType.Passho, {}, PlotStage.Seed, {
            hint: 'I\'ve heard that growing a Passho Berry alone will cause it to change!',
        }));
        // Chople
        this.mutations.push(new OakMutation(.0001, BerryType.Chople, BerryType.Spelon, OakItemType.Magma_Stone));
        // Kebia
        this.mutations.push(new OakMutation(.0001, BerryType.Kebia, BerryType.Pamtre, OakItemType.Rocky_Helmet));
        // Kebia Parasite
        this.mutations.push(new ParasiteMutation(.0004, BerryType.Kebia));
        // Shuca
        this.mutations.push(new OakMutation(.0001, BerryType.Shuca, BerryType.Watmel, OakItemType.Sprinklotad));
        // Coba
        this.mutations.push(new GrowNearFlavorMutation(.0001, BerryType.Coba, [[0, 0], [10, 15], [0, 0], [15, 20], [0, 0]], {
            hint: 'I\'ve heard that a special Berry can appear if its surroundings match its flavor profile! If I recall, it tasted a little dry and fairly bitter at the same time.',
            unlockReq: function () {
                return App.game.farming.unlockedBerries[BerryType.Chesto]() &&
                    App.game.farming.unlockedBerries[BerryType.Aguav]();
            },
        }));
        // Payapa
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Payapa, [
            BerryType.Wiki,
            BerryType.Bluk,
            BerryType.Cornn,
            BerryType.Pamtre,
        ]));
        // Tanga
        let berryReqs = {};
        berryReqs[BerryType.Rindo] = 8;
        this.mutations.push(new GrowNearBerryStrictMutation(.0001, BerryType.Tanga, berryReqs, {
            hint: 'I\'ve heard that a special Berry can appear after being surrounded by Rindo Berries!',
        }));
        // Charti
        this.mutations.push(new OakMutation(.0001, BerryType.Charti, BerryType.Cornn, OakItemType.Cell_Battery));
        // Kasib
        // No mutation, will check withers
        // Haban
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Haban, [
            BerryType.Occa,
            BerryType.Rindo,
            BerryType.Passho,
            BerryType.Wacan,
        ]));
        // Colbur
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Colbur, [
            BerryType.Rabuta,
            BerryType.Kasib,
            BerryType.Payapa,
        ]));
        // Colbur Parasite
        this.mutations.push(new ParasiteMutation(.0004, BerryType.Colbur));
        // Babiri
        berryReqs = {};
        berryReqs[BerryType.Shuca] = 4;
        berryReqs[BerryType.Charti] = 4;
        this.mutations.push(new GrowNearBerryStrictMutation(.0001, BerryType.Babiri, berryReqs, {
            hint: 'I\'ve heard that a special Berry can appear after being surrounded by Shuca and Charti Berries!',
        }));
        // Chilan
        berryReqs = {};
        berryReqs[BerryType.Chople] = 3;
        this.mutations.push(new EvolveNearBerryMinMutation(.0001, BerryType.Chilan, BerryType.Chople, berryReqs, {
            hint: 'I\'ve heard that Chople Berries will turn into a different Berry if surrounded by more than two of their own kind.',
        }));
        // Roseli
        this.mutations.push(new GrowNearBerryMutation(.0001, BerryType.Roseli, [
            BerryType.Mago,
            BerryType.Nanab,
            BerryType.Magost,
            BerryType.Watmel,
        ]));
        // Snover
        this.mutations.push(new FieldMutation(.00002, BerryType.Snover, [{ berry: BerryType.Babiri, amountRequired: 20 }], {
            unlockReq: () => { var _a, _b; return ((_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[PokemonHelper.getPokemonByName('Snover').id]()) > 0; },
            hint: 'I\'ve heard of a Berry that can appear in a field of Babiri when Snover are around.',
        }));
        //#endregion
        //#region Fifth Generation
        // Micle
        this.mutations.push(new FieldFlavorMutation(.0003, BerryType.Micle, [0, 600, 0, 0, 0], {
            hint: 'I\'ve heard of a Berry that only appears in the driest of fields.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Pamtre](),
        }));
        // Custap
        this.mutations.push(new FieldFlavorMutation(.0003, BerryType.Custap, [0, 0, 600, 0, 0], {
            hint: 'I\'ve heard of a Berry that only appears in the sweetest of fields.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Watmel](),
        }));
        // Jaboca
        this.mutations.push(new FieldFlavorMutation(.0003, BerryType.Jaboca, [0, 0, 0, 600, 0], {
            hint: 'I\'ve heard of a Berry that only appears in the most bitter of fields.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Durin](),
        }));
        // Rowap
        this.mutations.push(new FieldFlavorMutation(.0003, BerryType.Rowap, [0, 0, 0, 0, 600], {
            hint: 'I\'ve heard of a Berry that only appears in the most sour of fields.',
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Belue](),
        }));
        // Kee
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Kee, [
            BerryType.Liechi,
            BerryType.Ganlon,
        ]));
        // Maranga
        this.mutations.push(new GrowNearBerryMutation(.0003, BerryType.Maranga, [
            BerryType.Salac,
            BerryType.Petaya,
        ]));
        // Liechi
        this.mutations.push(new FieldMutation(.00001, BerryType.Liechi, [{ berry: BerryType.Passho, amountRequired: 23 }], {
            unlockReq: () => { var _a, _b; return ((_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[PokemonHelper.getPokemonByName('Kyogre').id]()) > 0; },
        }));
        // Ganlon
        this.mutations.push(new FieldMutation(.00001, BerryType.Ganlon, [{ berry: BerryType.Shuca, amountRequired: 23 }], {
            unlockReq: () => { var _a, _b; return ((_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[PokemonHelper.getPokemonByName('Groudon').id]()) > 0; },
        }));
        // Salac
        this.mutations.push(new FieldMutation(.00001, BerryType.Salac, [{ berry: BerryType.Coba, amountRequired: 23 }], {
            unlockReq: () => { var _a, _b; return ((_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[PokemonHelper.getPokemonByName('Rayquaza').id]()) > 0; },
        }));
        // Petaya
        this.mutations.push(new PetayaMutation(.00001));
        // Apicot
        this.mutations.push(new FieldMutation(.00001, BerryType.Apicot, [{ berry: BerryType.Chilan, amountRequired: 23 }], {
            unlockReq: () => { var _a, _b; return ((_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[PokemonHelper.getPokemonByName('Palkia').id]()) > 0; },
        }));
        // Lansat
        this.mutations.push(new FieldMutation(.00001, BerryType.Lansat, [{ berry: BerryType.Roseli, amountRequired: 23 }], {
            unlockReq: () => { var _a, _b; return ((_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[PokemonHelper.getPokemonByName('Dialga').id]()) > 0; },
        }));
        // Starf
        // No mutation, obtained by wandering shiny pokemon
        // Enigma
        this.mutations.push(new EnigmaMutation(.0001));
        // Enigma Mutations
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Liechi, BerryType.Passho, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Liechi](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Ganlon, BerryType.Shuca, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Ganlon](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Salac, BerryType.Coba, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Salac](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Petaya, BerryType.Payapa, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Petaya](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Apicot, BerryType.Chilan, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Apicot](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Lansat, BerryType.Roseli, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Lansat](),
        }));
        this.mutations.push(new EvolveNearBerryMutation(.0004, BerryType.Starf, BerryType.Haban, [BerryType.Enigma], {
            showHint: false,
            unlockReq: () => App.game.farming.unlockedBerries[BerryType.Starf](),
        }));
        // Hopo
        this.mutations.push(new FieldMutation(.00001, BerryType.Hopo, [
            { berry: BerryType.Lansat, amountRequired: 2 },
            { berry: BerryType.Apicot, amountRequired: 2 },
            { berry: BerryType.Micle, amountRequired: 4 },
            { berry: BerryType.Custap, amountRequired: 4 },
            { berry: BerryType.Jaboca, amountRequired: 4 },
            { berry: BerryType.Rowap, amountRequired: 4 },
        ], {
            unlockReq: function () {
                return App.game.quests.getQuestLine('Arceus: The Deified Pokémon').state() > QuestLineState.inactive;
            },
        }));
        // Empty Mutations for hints
        // Kasib
        this.mutations.push(new BlankMutation(0, BerryType.Kasib, {
            hint: 'I\'ve heard of a Berry that only appears after a Berry plant has withered, but is repelled by Colbur plants.',
            unlockReq: () => App.game.farming.highestUnlockedBerry() >= BerryType.Occa,
        }));
        // Starf
        this.mutations.push(new BlankMutation(0, BerryType.Starf, {
            hint: 'I\'ve heard of a Berry that only appears after a Shiny Pokémon wanders and is caught near open soil.',
            unlockReq: () => App.game.farming.highestUnlockedBerry() >= BerryType.Occa,
        }));
        //#endregion
    }
    getGrowthMultiplier() {
        let multiplier = 1;
        multiplier *= App.game.oakItems.calculateBonus(OakItemType.Sprayduck);
        return multiplier;
    }
    getReplantMultiplier() {
        return 1;
    }
    getMulchDurationMultiplier() {
        return App.game.oakItems.calculateBonus(OakItemType.Sprinklotad);
    }
    getMutationMultiplier() {
        let multiplier = 1;
        multiplier *= App.game.oakItems.calculateBonus(OakItemType.Squirtbottle);
        return multiplier;
    }
    update(delta) {
        const timeToReduce = delta;
        const notifications = new Set();
        let change = false;
        // Updating Berries
        this.plotList.forEach(plot => {
            if (plot.update(timeToReduce)) {
                change = true;
            }
            if (plot.notifications) {
                plot.notifications.forEach(n => notifications.add(n));
                plot.notifications = [];
            }
        });
        // Running Mutations
        this.mutationCounter += GameConstants.TICK_TIME;
        if (this.mutationCounter >= GameConstants.MUTATION_TICK) {
            this.mutations.forEach(mutation => {
                if (mutation.mutate()) {
                    GameHelper.incrementObservable(App.game.statistics.totalBerriesMutated, 1);
                    notifications.add(FarmNotificationType.Mutated);
                    change = true;
                }
            });
            this.mutationCounter = 0;
        }
        // Wandering Pokemon
        this.wanderCounter += GameConstants.TICK_TIME;
        let wanderPokemon;
        const wanderList = [];
        if (this.wanderCounter >= GameConstants.WANDER_TICK) {
            for (let i = 0; i < App.game.farming.plotList.length; i++) {
                const plot = App.game.farming.plotList[i];
                // generate or get rid of a wanderer
                wanderPokemon = plot.generateWanderPokemon();
                if (wanderPokemon) {
                    wanderList.push(wanderPokemon);
                    notifications.add(FarmNotificationType.Wander);
                }
            }
            this.wanderCounter = 0;
        }
        if (notifications.size) {
            notifications.forEach((n) => this.handleNotification(n, wanderList));
        }
        this.farmHands.tick();
        this.mulchCounter += GameConstants.TICK_TIME;
        if (this.mulchCounter >= GameConstants.MULCH_OAK_ITEM_TICK) {
            App.game.oakItems.use(OakItemType.Sprinklotad, this.plotList.filter(value => value.isMulched()).length);
            this.mulchCounter = 0;
        }
    }
    handleNotification(farmNotiType, wanderList) {
        let message = '';
        let image = null;
        let type = NotificationConstants.NotificationOption.success;
        let sound = NotificationConstants.NotificationSound.Farming.ready_to_harvest;
        let setting = NotificationConstants.NotificationSetting.Farming.ready_to_harvest;
        switch (farmNotiType) {
            case FarmNotificationType.Ripe:
                message = 'A Berry is ready to harvest!';
                break;
            case FarmNotificationType.AboutToWither:
                message = 'A Berry plant is about to wither!';
                type = NotificationConstants.NotificationOption.warning;
                sound = NotificationConstants.NotificationSound.Farming.berry_wither;
                setting = NotificationConstants.NotificationSetting.Farming.about_to_wither;
                break;
            case FarmNotificationType.Withered:
                message = 'A Berry plant has withered!';
                type = NotificationConstants.NotificationOption.warning;
                sound = NotificationConstants.NotificationSound.Farming.berry_wither;
                setting = NotificationConstants.NotificationSetting.Farming.berry_withered;
                break;
            case FarmNotificationType.Mutated:
                message = 'A Berry plant has mutated!';
                sound = NotificationConstants.NotificationSound.Farming.berry_mutated;
                setting = NotificationConstants.NotificationSetting.Farming.berry_mutated;
                break;
            case FarmNotificationType.Replanted:
                message = 'A Berry has been replanted!';
                sound = NotificationConstants.NotificationSound.Farming.berry_replanted;
                setting = NotificationConstants.NotificationSetting.Farming.berry_replanted;
                break;
            case FarmNotificationType.Dropped:
                message = 'A Berry has been dropped!';
                sound = NotificationConstants.NotificationSound.Farming.berry_dropped;
                setting = NotificationConstants.NotificationSetting.Farming.berry_dropped;
                break;
            case FarmNotificationType.MulchRanOut:
                message = 'A plot has run out of mulch!';
                type = NotificationConstants.NotificationOption.warning;
                sound = NotificationConstants.NotificationSound.Farming.mulch_ran_out;
                setting = NotificationConstants.NotificationSetting.Farming.mulch_ran_out;
                break;
            case FarmNotificationType.Wander:
                // Only notify for one wanderer, randomly picked, shiny priorized; there will rarely be more than one
                const shinyList = wanderList.filter(w => w.shiny);
                const displayWanderer = shinyList.length ? Rand.fromArray(shinyList) : Rand.fromArray(wanderList);
                message = `A wild ${(displayWanderer.shiny ? 'shiny ' : '')}${displayWanderer.name} has wandered onto the farm!`;
                image = PokemonHelper.getImage(PokemonHelper.getPokemonByName(displayWanderer.name).id, displayWanderer.shiny, undefined, GameConstants.ShadowStatus.None);
                type = displayWanderer.shiny ? NotificationConstants.NotificationOption.warning : NotificationConstants.NotificationOption.success;
                sound = displayWanderer.shiny ? NotificationConstants.NotificationSound.General.shiny_long : NotificationConstants.NotificationSound.Farming.wandering_pokemon;
                setting = displayWanderer.shiny ? NotificationConstants.NotificationSetting.General.encountered_shiny : NotificationConstants.NotificationSetting.Farming.wandering_pokemon;
                break;
        }
        Notifier.notify({
            message,
            image,
            type,
            sound,
            setting,
        });
    }
    multiplyPlotAuras(auraType) {
        return this.plotList
            .filter(p => p.emittingAura.type() === auraType)
            .reduce((acc, p) => { var _a; return acc * ((_a = p.emittingAura.value()) !== null && _a !== void 0 ? _a : 1); }, 1);
    }
    addPlotAuras(auraType) {
        return this.plotList
            .filter(p => p.emittingAura.type() === auraType)
            .reduce((acc, p) => { var _a; return acc + ((_a = p.emittingAura.value()) !== null && _a !== void 0 ? _a : 0); }, 0);
    }
    unlockPlot(index) {
        if (this.allPlotsUnlocked()) {
            return;
        }
        if (this.canBuyPlot(index)) {
            const berryData = this.plotBerryCost(index);
            GameHelper.incrementObservable(this.berryList[berryData.type], -berryData.amount);
            const cost = this.plotFPCost(index);
            App.game.wallet.loseAmount(new Amount(cost, GameConstants.Currency.farmPoint));
            this.plotList[index].isUnlocked = true;
            this.unlockedPlotCount(this.plotList.filter(p => p.isUnlocked).length);
        }
    }
    allPlotsUnlocked() {
        return this.plotList.every(plot => plot.isUnlocked);
    }
    canBuyPlot(index) {
        const berryData = this.plotBerryCost(index);
        if (App.game.farming.berryList[berryData.type]() < berryData.amount) {
            return false;
        }
        const cost = this.plotFPCost(index);
        if (!App.game.wallet.hasAmount(new Amount(cost, GameConstants.Currency.farmPoint))) {
            return false;
        }
        return true;
    }
    plotFPCost(index) {
        const berryType = Farming.unlockMatrix[index];
        return 10 * Math.floor(Math.pow(berryType + 1, 2));
    }
    plotBerryCost(index) {
        const berryType = Farming.unlockMatrix[index];
        return { type: berryType, amount: 10 * (berryType + 1) };
    }
    //#endregion
    togglePlotSafeLock(index) {
        this.plotList[index].isSafeLocked = !this.plotList[index].isSafeLocked;
    }
    plant(index, berry) {
        const plot = this.plotList[index];
        if (!plot.isEmpty() || !plot.isUnlocked || !this.hasBerry(berry) || plot.isSafeLocked) {
            return;
        }
        GameHelper.incrementObservable(this.berryList[berry], -1);
        plot.plant(berry);
    }
    plantAll(berry) {
        this.plotList.forEach((plot, index) => {
            this.plant(index, berry);
        });
    }
    /**
     * Harvest a plot at the given index
     * @param index The index of the plot to harvest
     */
    harvest(index) {
        const plot = this.plotList[index];
        if (plot.berry === BerryType.None || plot.stage() != PlotStage.Berry || plot.isSafeLocked) {
            return;
        }
        App.game.wallet.gainFarmPoints(this.berryData[plot.berry].farmValue);
        const amount = plot.harvestAmount();
        this.gainBerry(plot.berry, amount);
        App.game.oakItems.use(OakItemType.Sprayduck, this.berryData[plot.berry].exp);
        GameHelper.incrementObservable(App.game.statistics.totalManualHarvests, 1);
        player.lowerItemMultipliers(MultiplierDecreaser.Berry, this.berryData[plot.berry].exp);
        plot.die(true);
    }
    /**
     * Try to harvest all plots
     */
    harvestAll() {
        this.plotList.forEach((plot, index) => {
            this.harvest(index);
        });
    }
    /**
     * Handles using the Berry Shovel to remove a Berry plant
     * @param index The plot index
     */
    shovel(index) {
        const plot = this.plotList[index];
        if (!plot.isUnlocked) {
            return;
        }
        if (plot.isSafeLocked) {
            return;
        }
        if (plot.isEmpty()) {
            return;
        }
        if (plot.stage() == PlotStage.Berry) {
            this.harvest(index);
            return;
        }
        if (this.shovelAmt() <= 0) {
            return;
        }
        plot.die(true);
        GameHelper.incrementObservable(this.shovelAmt, -1);
        GameHelper.incrementObservable(App.game.statistics.totalShovelsUsed, 1);
    }
    /**
     * Handles using the Mulch Shovel to remove mulch from a plot
     * @param index The plot index
     */
    shovelMulch(index) {
        const plot = this.plotList[index];
        if (!plot.isUnlocked || plot.isSafeLocked) {
            return;
        }
        if (this.mulchShovelAmt() <= 0) {
            return;
        }
        if (plot.clearMulch()) {
            GameHelper.incrementObservable(this.mulchShovelAmt, -1);
            GameHelper.incrementObservable(App.game.statistics.totalShovelsUsed, 1);
        }
    }
    /**
     * Adds mulch to a plot
     * @param index The plot index
     * @param mulch The MulchType to be added
     * @param amount The amount of mulch to apply. Defaults to 1
     */
    addMulch(index, mulch, amount = 1) {
        const plot = this.plotList[index];
        if (!this.canMulch(index, mulch)) {
            return;
        }
        amount = Math.min(this.mulchList[mulch](), amount);
        GameHelper.incrementObservable(this.mulchList[mulch], -amount);
        GameHelper.incrementObservable(App.game.statistics.totalMulchesUsed, amount);
        GameHelper.incrementObservable(App.game.statistics.mulchesUsed[mulch], amount);
        plot.mulch = +mulch;
        plot.mulchTimeLeft += GameConstants.MULCH_USE_TIME * amount;
    }
    /**
     * Attempts to add mulch to all plots
     * @param mulch The MulchType to be added
     * @param amount The amount of mulch to apply to each plot. Defaults to 1
     */
    mulchAll(mulch, amount = 1) {
        const mulchPlots = this.plotList.filter((_, index) => this.canMulch(index, mulch));
        amount *= mulchPlots.length;
        amount = Math.min(this.mulchList[mulch](), amount);
        const sharedMulch = Math.floor(amount / mulchPlots.length);
        if (sharedMulch <= 0) {
            return;
        }
        this.plotList.forEach((_, index) => {
            this.addMulch(index, mulch, sharedMulch);
        });
    }
    canMulch(index, mulch) {
        const plot = this.plotList[index];
        if (!plot.isUnlocked || !this.hasMulch(mulch) || plot.isSafeLocked) {
            return false;
        }
        if (plot.mulch != MulchType.None && plot.mulch != mulch) {
            return false;
        }
        return true;
    }
    /**
     * Gives the player a random Berry from the first 8 types
     * @param amount Amount of berries to give. Defaults to 1.
     * @param disableNotification Set to true to not notify the player. Defaults to false.
     */
    gainRandomBerry(amount = 1, disableNotification = false) {
        const berry = GameHelper.getIndexFromDistribution(GameConstants.BerryDistribution);
        if (!disableNotification) {
            Notifier.notify({
                message: `You found ${GameHelper.anOrA(BerryType[berry])} ${BerryType[berry]} Berry!`,
                image: FarmController.getBerryImage(berry),
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.route_item_found,
            });
        }
        this.gainBerry(berry, amount, false);
    }
    gainBerry(berry, amount = 1, farming = true) {
        GameHelper.incrementObservable(this.berryList[berry], Math.floor(amount));
        if (amount > 0) {
            this.unlockBerry(berry);
            GameHelper.incrementObservable(App.game.statistics.totalBerriesObtained, amount);
            GameHelper.incrementObservable(App.game.statistics.berriesObtained[berry], amount);
            if (farming === true) {
                GameHelper.incrementObservable(App.game.statistics.totalBerriesHarvested, amount);
                GameHelper.incrementObservable(App.game.statistics.berriesHarvested[berry], amount);
            }
        }
    }
    hasBerry(berry) {
        return this.berryList[berry]() > 0;
    }
    hasMulch(mulch) {
        return this.mulchList[mulch]() > 0;
    }
    canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItemType.Wailmer_pail);
    }
    unlockBerry(berry) {
        if (!this.unlockedBerries[berry]()) {
            Notifier.notify({
                message: `You've discovered the ${BerryType[berry]} Berry!`,
                image: FarmController.getBerryImage(berry),
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Farming.berry_discovered,
                sound: NotificationConstants.NotificationSound.Farming.berry_discovered,
            });
            App.game.logbook.newLog(LogBookTypes.NEW, createLogContent.registeredBerry({ berry: BerryType[berry] }));
            this.unlockedBerries[berry](true);
        }
    }
    /**
     * Checks whether a Berry plant exists on the farm
     * @param berry The Berry type
     * @param stage The stage of the Berry plant. Defaults to PlotStage.Berry
     */
    berryInFarm(berry, stage = PlotStage.Berry, ignoreFrozen = false) {
        return this.plotList.some(plot => plot.berry == berry && plot.stage() >= stage && (!ignoreFrozen || plot.mulch !== MulchType.Freeze_Mulch));
    }
    toJSON() {
        return {
            berryList: this.berryList.map(ko.unwrap),
            unlockedBerries: this.unlockedBerries.map(ko.unwrap),
            mulchList: this.mulchList.map(ko.unwrap),
            plotList: this.plotList.map(plot => plot.toJSON()),
            shovelAmt: this.shovelAmt(),
            mulchShovelAmt: this.mulchShovelAmt(),
            mutations: this.mutations.map(mutation => mutation.toJSON()),
            farmHands: this.farmHands.toJSON(),
        };
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        const savedBerries = json.berryList;
        if (savedBerries == null) {
            this.berryList = this.defaults.berryList.map((v) => ko.observable(v));
        }
        else {
            savedBerries.forEach((value, index) => {
                this.berryList[index](value);
            });
        }
        const savedUnlockedBerries = json.unlockedBerries;
        if (savedUnlockedBerries == null) {
            this.unlockedBerries = this.defaults.unlockedBerries.map((v) => ko.observable(v));
        }
        else {
            savedUnlockedBerries.forEach((value, index) => {
                this.unlockedBerries[index](value);
            });
        }
        const savedMulches = json.mulchList;
        if (savedMulches == null) {
            this.mulchList = this.defaults.mulchList.map((v) => ko.observable(v));
        }
        else {
            savedMulches.forEach((value, index) => {
                this.mulchList[index](value);
            });
        }
        const savedPlots = json.plotList;
        if (savedPlots == null) {
            this.plotList = this.defaults.plotList;
        }
        else {
            savedPlots.forEach((value, index) => {
                const plot = new Plot(false, BerryType.None, 0, MulchType.None, 0, index);
                plot.fromJSON(value);
                this.plotList[index] = plot;
            });
        }
        this.unlockedPlotCount(this.plotList.filter(p => p.isUnlocked).length);
        const shovelAmt = json.shovelAmt;
        if (shovelAmt == null) {
            this.shovelAmt = ko.observable(this.defaults.shovelAmt);
        }
        else {
            this.shovelAmt(shovelAmt);
        }
        const mulchShovelAmt = json.mulchShovelAmt;
        if (mulchShovelAmt == null) {
            this.mulchShovelAmt = ko.observable(this.defaults.mulchShovelAmt);
        }
        else {
            this.mulchShovelAmt(mulchShovelAmt);
        }
        const mutations = json.mutations;
        if (mutations) {
            this.mutations.forEach((mutation, i) => mutation.fromJSON(mutations[i]));
        }
        this.farmHands.fromJSON(json.farmHands);
    }
    static getGeneration(gen) {
        const genBounds = Farming.genBounds;
        const minBound = genBounds[gen - 1] || 0;
        const maxBound = genBounds[gen] || Infinity;
        return App.game.farming.berryData.filter(berry => berry.type >= minBound && berry.type < maxBound).map(berry => berry.type);
    }
    static getColor(color) {
        return App.game.farming.berryData.filter(berry => berry.color === color).map(berry => berry.type);
    }
    static getFirmness(firmness) {
        return App.game.farming.berryData.filter(berry => berry.firmness === firmness).map(berry => berry.type);
    }
    auraDisplay(berry, stage) {
        return `×${App.game.farming.berryData[berry].aura.auraMultipliers[stage].toLocaleString('en-US', { minimumFractionDigits: 1, maximumFractionDigits: 3 })}`;
    }
    handleWanderer(plot) {
        if (!plot.canCatchWanderer()) {
            return;
        }
        const wanderer = plot.wanderer;
        const pokemonData = PokemonHelper.getPokemonByName(wanderer.name);
        const berry = App.game.farming.berryData[plot.wanderer.berry];
        const farmPoints = Math.floor(berry.farmValue / (4 + berry.growthTime[PlotStage.Bloom] / 1800));
        const shinyModifier = wanderer.shiny ? GameConstants.WANDER_SHINY_FP_MODIFIER : 1;
        const amount = App.game.wallet.gainFarmPoints(farmPoints * shinyModifier);
        GameHelper.incrementObservable(App.game.statistics.farmWandererFarmPointsObtained, amount.amount);
        const pokeball = App.game.pokeballs.calculatePokeballToUse(pokemonData.id, wanderer.shiny, false, EncounterType.wanderer);
        if (pokeball !== GameConstants.Pokeball.None) {
            wanderer.pokeball(pokeball);
            wanderer.catching(true);
            App.game.pokeballs.usePokeball(pokeball);
            // Halved catch time in farm, it does not matter in the balance
            setTimeout(() => this.attemptCatchWanderer(plot), App.game.pokeballs.calculateCatchTime(pokeball) / 2);
        }
        else {
            this.wandererIsFleeing(plot);
        }
    }
    attemptCatchWanderer(plot) {
        const wanderer = plot.wanderer;
        const catchChance = GameConstants.clipNumber(wanderer.catchRate
            + App.game.pokeballs.getCatchBonus(wanderer.pokeball(), { pokemon: wanderer.name, encounterType: EncounterType.wanderer })
            + App.game.oakItems.calculateBonus(OakItemType.Magic_Ball)
            + (plot.mulch === MulchType.Gooey_Mulch ? GameConstants.GOOEY_MULCH_CATCH_BONUS : 0), 0, 100);
        if (Rand.chance(catchChance / 100)) { // Successfully caught
            App.game.oakItems.use(OakItemType.Magic_Ball);
            App.game.party.gainPokemonByName(wanderer.name, wanderer.shiny);
            // EV
            const partyPokemon = App.game.party.getPokemonByName(wanderer.name);
            const wandererEPGain = App.game.pokeballs.getEPBonus(wanderer.pokeball())
                * GameConstants.BASE_EP_YIELD
                * (Berry.isBaseWanderer(wanderer.name) ? GameConstants.BASE_WANDERER_EP_MODIFIER : GameConstants.WANDERER_EP_MODIFIER);
            partyPokemon.effortPoints += App.game.party.calculateEffortPoints(partyPokemon, wanderer.shiny, undefined, wandererEPGain);
            // DT
            const fakedRoute = FarmController.wandererToRoute(wanderer.name);
            const amount = Battle.gainTokens(fakedRoute.number, fakedRoute.region, wanderer.pokeball());
            GameHelper.incrementObservable(App.game.statistics.farmWandererDungeonTokensObtained, amount.amount);
            // Check for Starf berry generation
            if (wanderer.shiny) {
                const emptyPlots = App.game.farming.plotList.filter(plot => plot.isUnlocked && plot.isEmpty());
                // No Starf generation if no empty plots :(
                if (emptyPlots.length) {
                    const chosenPlot = emptyPlots[Rand.floor(emptyPlots.length)];
                    chosenPlot.plant(BerryType.Starf);
                    App.game.farming.unlockBerry(BerryType.Starf);
                }
            }
            plot.wanderer = undefined;
            return;
        }
        else if (wanderer.shiny) { // Failed to catch, Shiny
            App.game.logbook.newLog(LogBookTypes.ESCAPED, App.game.party.alreadyCaughtPokemonByName(wanderer.name, true)
                ? createLogContent.escapedShinyDupe({ pokemon: wanderer.name })
                : createLogContent.escapedShiny({ pokemon: wanderer.name }));
        }
        else if (!App.game.party.alreadyCaughtPokemonByName(wanderer.name)) { // Failed to catch, Uncaught
            App.game.logbook.newLog(LogBookTypes.ESCAPED, createLogContent.escapedWild({ pokemon: wanderer.name }));
        }
        plot.wanderer.catching(false);
        this.wandererIsFleeing(plot);
    }
    wandererIsFleeing(plot) {
        if (!plot.wanderer) {
            return;
        }
        plot.wanderer.fleeing(true);
        setTimeout(() => {
            plot.wanderer = undefined;
        }, 250);
    }
}
//#region Plot Unlocking
Farming.unlockMatrix = [
    BerryType.Kelpsy, BerryType.Mago, BerryType.Persim, BerryType.Wepear, BerryType.Qualot,
    BerryType.Wiki, BerryType.Aspear, BerryType.Cheri, BerryType.Leppa, BerryType.Aguav,
    BerryType.Nanab, BerryType.Rawst, BerryType.None, BerryType.Chesto, BerryType.Razz,
    BerryType.Pomeg, BerryType.Sitrus, BerryType.Pecha, BerryType.Oran, BerryType.Pinap,
    BerryType.Grepa, BerryType.Figy, BerryType.Bluk, BerryType.Iapapa, BerryType.Hondew,
];
Farming.genBounds = [8, 20, 36, 54, Infinity];
Farming.sizeUnitConverter = {
    [SizeUnits.cm]: (num) => `${num.toFixed(1)} cm`,
    [SizeUnits.inch]: (num) => `${(num / 2.54).toFixed(1)}\u2033`, // inches
};
class Plot {
    constructor(isUnlocked, berry, age, mulch, mulchTimeLeft, index) {
        this.index = index;
        this.saveKey = '';
        this.defaults = {
            isUnlocked: false,
            berry: BerryType.None,
            age: 0,
            mulch: MulchType.None,
            mulchTimeLeft: 0,
            isSafeLocked: false,
        };
        this._isUnlocked = ko.observable(isUnlocked);
        this._isSafeLocked = ko.observable(false);
        this._berry = ko.observable(berry).extend({ numeric: 0 });
        this._lastPlanted = ko.observable(berry).extend({ numeric: 0 });
        this._age = ko.observable(age);
        this._mulch = ko.observable(mulch).extend({ numeric: 0 });
        this._mulchTimeLeft = ko.observable(mulchTimeLeft).extend({ numeric: 3 });
        this._wanderer = ko.observable(undefined);
        this.emittingAura = {
            type: ko.pureComputed(() => {
                var _a, _b, _c;
                if (this.stage() < PlotStage.Taller || this.mulch === MulchType.Freeze_Mulch) {
                    return null;
                }
                return (_c = (_b = (_a = this.berryData) === null || _a === void 0 ? void 0 : _a.aura) === null || _b === void 0 ? void 0 : _b.auraType) !== null && _c !== void 0 ? _c : null;
            }).extend({ rateLimit: 50 }),
            value: ko.pureComputed(() => {
                var _a;
                if (!((_a = this.berryData) === null || _a === void 0 ? void 0 : _a.aura)) {
                    return null;
                }
                const boost = this.auraBoost();
                const value = this.berryData.aura.getAuraValue(this.stage());
                return value > 1 || this.berry === BerryType.Micle ? value * boost : value / boost;
            }).extend({ rateLimit: 50 }),
        };
        this.calcFormattedStageTimeLeft = ((includeGrowthMultiplier) => {
            if (this.berry === BerryType.None) {
                return '';
            }
            const growthTime = this.berryData.growthTime.find(t => this.age < t);
            const timeLeft = growthTime - this.age;
            const growthMultiplier = includeGrowthMultiplier
                ? App.game.farming.getGrowthMultiplier() * this.getGrowthMultiplier()
                : 1;
            return GameConstants.formatTime(Math.ceil(timeLeft / growthMultiplier));
        });
        this.formattedStageTimeLeft = ko.pureComputed(() => {
            return this.calcFormattedStageTimeLeft(true);
        });
        this.formattedBaseStageTimeLeft = ko.pureComputed(() => {
            return this.calcFormattedStageTimeLeft(false);
        });
        this.calcFormattedTimeLeft = ((includeGrowthMultiplier) => {
            if (this.berry === BerryType.None) {
                return '';
            }
            let timeLeft = 0;
            if (this.age < this.berryData.growthTime[3]) {
                timeLeft = this.berryData.growthTime[3] - this.age;
            }
            else {
                timeLeft = this.berryData.growthTime[4] - this.age;
            }
            const growthMultiplier = includeGrowthMultiplier
                ? App.game.farming.getGrowthMultiplier() * this.getGrowthMultiplier()
                : 1;
            return GameConstants.formatTime(Math.ceil(timeLeft / growthMultiplier));
        });
        this.formattedTimeLeft = ko.pureComputed(() => {
            return this.calcFormattedTimeLeft(true);
        });
        this.formattedBaseTimeLeft = ko.pureComputed(() => {
            return this.calcFormattedTimeLeft(false);
        });
        this.formattedMulchTimeLeft = ko.pureComputed(() => {
            if (this.mulch === MulchType.None) {
                return '';
            }
            return GameConstants.formatTime(this.mulchTimeLeft * App.game.farming.getMulchDurationMultiplier());
        });
        this.auraGrowth = ko.pureComputed(() => {
            return this.multiplyNeighbourAura(AuraType.Growth);
        });
        this.auraHarvest = ko.pureComputed(() => {
            return this.multiplyNeighbourAura(AuraType.Harvest);
        });
        this.auraMutation = ko.pureComputed(() => {
            return this.multiplyNeighbourAura(AuraType.Mutation);
        });
        this.auraReplant = ko.pureComputed(() => {
            return this.multiplyNeighbourAura(AuraType.Replant);
        });
        this.auraDeath = ko.pureComputed(() => {
            return this.berry === BerryType.Kasib ? 1 : this.maxNeighbourAura(AuraType.Death);
        });
        this.auraDecay = ko.pureComputed(() => {
            return this.multiplyNeighbourAura(AuraType.Decay);
        });
        this.auraBoost = ko.pureComputed(() => {
            return this.berry === BerryType.Lum ? 1 : this.maxNeighbourAura(AuraType.Boost);
        });
        this.formattedAuras = ko.pureComputed(() => {
            const auraStr = [];
            if (this.auraGrowth() !== 1) {
                auraStr.push(`Growth: ×${this.auraGrowth().toFixed(2)}`);
            }
            if (this.auraHarvest() !== 1) {
                auraStr.push(`Harvest: ×${this.auraHarvest().toFixed(2)}`);
            }
            if (this.auraMutation() !== 1) {
                auraStr.push(`Mutation: ×${this.auraMutation().toFixed(2)}`);
            }
            if (this.auraReplant() !== 1) {
                auraStr.push(`Replant: ×${this.auraReplant().toFixed(2)}`);
            }
            if (this.auraDeath() !== 1) {
                auraStr.push(`Death: ×${this.auraDeath().toFixed(2)}`);
            }
            if (this.auraDecay() !== 1) {
                auraStr.push(`Decay: ×${this.auraDecay().toFixed(2)}`);
            }
            if (this.auraBoost() !== 1) {
                auraStr.push(`Boost: ×${this.auraBoost().toFixed(2)}`);
            }
            return auraStr.join('<br/>');
        });
        this.isEmpty = ko.pureComputed(() => {
            return this.berry === BerryType.None;
        });
        this.isMulched = ko.pureComputed(() => this.mulch !== MulchType.None);
        this.stage = ko.pureComputed(() => {
            if (this.berry === BerryType.None) {
                return PlotStage.Seed;
            }
            return this.berryData.growthTime.findIndex(t => this.age <= t);
        });
        this.tooltip = ko.pureComputed(() => {
            const tooltip = [];
            // Time
            if (this.berry !== BerryType.None) {
                tooltip.push(`<u>${BerryType[this.berry]}</u>`);
                const timeBoostType = Settings.getSetting('farmBoostDisplay').observableValue();
                // Petaya Effect
                if (App.game.farming.berryInFarm(BerryType.Petaya, PlotStage.Berry, true) && this.berry !== BerryType.Petaya && this.stage() == PlotStage.Berry) {
                    tooltip.push('∞ until death');
                    if (timeBoostType) {
                        tooltip.push(`(altered from ${this.formattedBaseStageTimeLeft()})`);
                    }
                    // Normal Time
                }
                else {
                    const timeType = Settings.getSetting('farmDisplay').observableValue();
                    const growthMultiplierNumber = App.game.farming.getGrowthMultiplier() * this.getGrowthMultiplier();
                    const altered = growthMultiplierNumber !== 1;
                    let timetip;
                    let formattedBaseTime;
                    if (timeType === 'nextStage') {
                        const formattedTime = this.formattedStageTimeLeft();
                        formattedBaseTime = this.formattedBaseStageTimeLeft();
                        switch (this.stage()) {
                            case PlotStage.Seed:
                                timetip = `${formattedTime} until sprout`;
                                break;
                            case PlotStage.Sprout:
                                timetip = `${formattedTime} until grown`;
                                break;
                            case PlotStage.Taller:
                                timetip = `${formattedTime} until bloom`;
                                break;
                            case PlotStage.Bloom:
                                timetip = `${formattedTime} until ripe`;
                                break;
                            case PlotStage.Berry:
                                timetip = `${formattedTime} until death`;
                                break;
                        }
                    }
                    else {
                        const formattedTime = this.formattedTimeLeft();
                        formattedBaseTime = this.formattedBaseTimeLeft();
                        switch (this.stage()) {
                            case PlotStage.Seed:
                            case PlotStage.Sprout:
                            case PlotStage.Taller:
                            case PlotStage.Bloom:
                                timetip = `${formattedTime} until ripe`;
                                break;
                            case PlotStage.Berry:
                                timetip = `${formattedTime} until death`;
                                break;
                        }
                    }
                    tooltip.push(timetip);
                    if (altered && timeBoostType) {
                        tooltip.push(`(altered from ${formattedBaseTime})`);
                    }
                }
            }
            // Aura
            if (this.emittingAura.type() !== null) {
                tooltip.push('<u>Aura Emitted:</u>');
                tooltip.push(`${AuraType[this.emittingAura.type()]}: ×${this.emittingAura.value().toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`);
            }
            const auraStr = this.formattedAuras();
            if (auraStr) {
                tooltip.push('<u>Aura Received:</u>');
                tooltip.push(auraStr);
            }
            // Mulch
            if (this.mulch !== MulchType.None) {
                const mulchTime = this.formattedMulchTimeLeft();
                tooltip.push('<u>Mulch</u>');
                tooltip.push(`${MulchType[this.mulch].replace('_Mulch', '')} : ${mulchTime}`);
            }
            // Wanderer
            if (this.wanderer) {
                tooltip.push(`A wild <strong>${PokemonHelper.displayName(this.wanderer.name)()}</strong> is wandering around`);
            }
            // Mutation
            const possibleMutations = App.game.farming.possiblePlotMutations()[this.index];
            if (possibleMutations.length) {
                tooltip.push('<u>Possible Mutations</u>');
                possibleMutations.forEach((mutation) => tooltip.push(mutation));
            }
            return tooltip.join('<br/>');
        });
        this.notifications = [];
    }
    /**
     * Handles updating the berry plant
     * @param seconds Number of seconds to add to the plants age
     * @returns Whether the plot stage has changed this update
     */
    update(seconds) {
        // Updating Berry
        let change = false;
        if (this.berry !== BerryType.None) {
            const growthTime = seconds * App.game.farming.getGrowthMultiplier() * this.getGrowthMultiplier();
            const oldAge = this.age;
            this.age += growthTime;
            // Checking for Petaya Berries
            if (App.game.farming.berryInFarm(BerryType.Petaya, PlotStage.Berry, true) && this.berry !== BerryType.Petaya) {
                this.age = Math.min(this.age, this.berryData.growthTime[3] + 1);
            }
            const updatedStage = this.stageUpdated(oldAge, this.age);
            if (updatedStage !== PlotStage.Seed) {
                change = true;
            }
            if (updatedStage === PlotStage.Berry) {
                this.notifications.push(FarmNotificationType.Ripe);
                change = true;
            }
            if (!this._hasWarnedAboutToWither && this.age + 15 > this.berryData.growthTime[4]) {
                this.notifications.push(FarmNotificationType.AboutToWither);
                this._hasWarnedAboutToWither = true;
            }
            if (this.age > this.berryData.growthTime[4]) {
                this.die();
                change = true;
            }
        }
        // Updating Mulch
        if (this.mulch !== MulchType.None) {
            this.mulchTimeLeft = Math.max(this.mulchTimeLeft - seconds / App.game.farming.getMulchDurationMultiplier(), 0);
            if (this.mulchTimeLeft === 0) {
                this.notifications.push(FarmNotificationType.MulchRanOut);
                this.mulch = MulchType.None;
            }
        }
        return change;
    }
    stageUpdated(oldAge, newAge) {
        const oldStage = this.berryData.growthTime.findIndex(t => oldAge < t);
        const newStage = this.berryData.growthTime.findIndex(t => newAge < t);
        if (oldStage !== newStage) {
            return newStage;
        }
        return PlotStage.Seed;
    }
    /**
     * Handles planting a berry on the plot
     * @param berry The BerryType
     */
    plant(berry) {
        this.berry = berry;
        this.lastPlanted = berry;
        this.age = 0;
        this.notifications = [];
        this._hasWarnedAboutToWither = false;
    }
    /**
     * Returns how many berries will be harvested
     */
    harvestAmount() {
        return Math.floor(Math.max(1, this.berryData.harvestAmount * this.getHarvestMultiplier()));
    }
    /**
     * Handles killing the berry plant
     * @param harvested Whether this death was due to the player harvesting manually, or by withering
     */
    die(harvested = false) {
        var _a;
        (_a = this.wanderer) === null || _a === void 0 ? void 0 : _a.distract();
        if (!harvested) {
            // Withered Berry plant drops half of the berries
            const amount = Math.max(1, Math.ceil(this.harvestAmount() / 2));
            if (amount) {
                App.game.farming.gainBerry(this.berry, amount);
                this.notifications.push(FarmNotificationType.Dropped);
            }
            // Check for Banetteite drop if Kasib died
            if (this.berry == BerryType.Kasib) {
                if (player.highestRegion() >= GameConstants.Region.kalos && App.game.party.alreadyCaughtPokemonByName('Banette') && !player.hasMegaStone(GameConstants.MegaStoneType.Banettite)) {
                    if (Rand.chance(0.05)) {
                        player.gainMegaStone(GameConstants.MegaStoneType.Banettite);
                    }
                }
            }
            // Check if berry replants itself
            const replantChance = Math.min(1, this.berryData.replantRate * App.game.farming.getReplantMultiplier() * this.getReplantMultiplier());
            if (Rand.chance(replantChance)) {
                this.age = 0;
                this.notifications.push(FarmNotificationType.Replanted);
                GameHelper.incrementObservable(App.game.statistics.totalBerriesReplanted, 1);
                return;
            }
            this.notifications.push(FarmNotificationType.Withered);
            // Check for Kasib berry mutation/replant chance
            if (App.game.farming.highestUnlockedBerry() >= BerryType.Occa) {
                if (!App.game.farming.berryInFarm(BerryType.Colbur)) {
                    if (Rand.chance(0.05)) {
                        this.notifications.push(FarmNotificationType.Mutated);
                        this.berry = BerryType.Kasib;
                        this.age = 0;
                        App.game.farming.unlockBerry(BerryType.Kasib);
                        return;
                    }
                }
            }
        }
        // Reset plant
        this.berry = BerryType.None;
        this.age = 0;
    }
    generateWanderPokemon() {
        // Ticking the wanderer
        if (this.wanderer) {
            if (this.wanderer.tick()) {
                this.wanderer = undefined;
            }
            return undefined;
        }
        // Check if plot is eligible for wandering Pokemon
        if (!this.isUnlocked || this.berry === BerryType.None || this.stage() !== PlotStage.Berry) {
            return undefined;
        }
        // Chance to generate wandering Pokemon
        if (Rand.chance(GameConstants.WANDER_RATE * App.game.farming.externalAuras[AuraType.Attract]())) {
            // Get a random Pokemon from the list of possible encounters
            const wanderer = PokemonFactory.generateWandererData(this);
            this.wanderer = wanderer;
            // Add to log book
            if (wanderer.shiny) {
                App.game.logbook.newLog(LogBookTypes.SHINY, App.game.party.alreadyCaughtPokemonByName(wanderer.name, true)
                    ? createLogContent.shinyWanderDupe({ pokemon: wanderer.name })
                    : createLogContent.shinyWander({ pokemon: wanderer.name }));
            }
            else {
                App.game.logbook.newLog(LogBookTypes.WANDER, createLogContent.wildWander({ pokemon: wanderer.name }));
            }
            return wanderer;
        }
        return undefined;
    }
    /**
     * Gets the growth multiplier for this plot
     */
    getGrowthMultiplier() {
        var _a;
        let multiplier = (_a = {
            [MulchType.Boost_Mulch]: GameConstants.BOOST_MULCH_MULTIPLIER,
            [MulchType.Amaze_Mulch]: GameConstants.AMAZE_MULCH_GROWTH_MULTIPLIER,
            [MulchType.Freeze_Mulch]: GameConstants.FREEZE_MULCH_MULTIPLIER,
        }[this.mulch]) !== null && _a !== void 0 ? _a : 1;
        if (this.stage() !== PlotStage.Berry) {
            multiplier *= this.auraGrowth();
        }
        else {
            multiplier *= this.auraDecay();
            // Handle Death Aura
            if (this.berry !== BerryType.Kasib) {
                multiplier *= this.auraDeath();
            }
        }
        return multiplier;
    }
    /**
     * Gets the harvest multiplier for this plot
     */
    getHarvestMultiplier() {
        let multiplier = 1;
        if (this.mulch === MulchType.Rich_Mulch) {
            multiplier = GameConstants.RICH_MULCH_MULTIPLIER;
        }
        else if (this.mulch === MulchType.Amaze_Mulch) {
            multiplier = GameConstants.AMAZE_MULCH_PRODUCE_MULTIPLIER;
        }
        multiplier *= this.auraHarvest();
        return multiplier;
    }
    /**
     * Gets the replant multiplier for this plot
     */
    getReplantMultiplier() {
        let multiplier = 1;
        if (this.mulch === MulchType.Rich_Mulch) {
            multiplier = GameConstants.RICH_MULCH_MULTIPLIER;
        }
        else if (this.mulch === MulchType.Amaze_Mulch) {
            multiplier = GameConstants.AMAZE_MULCH_PRODUCE_MULTIPLIER;
        }
        multiplier *= this.auraReplant();
        return multiplier;
    }
    /**
     * Gets the mutation multiplier for this plot
     */
    getMutationMultiplier() {
        let multiplier = 1;
        if (this.mulch === MulchType.Surprise_Mulch) {
            multiplier = GameConstants.SURPRISE_MULCH_MULTIPLIER;
        }
        else if (this.mulch === MulchType.Amaze_Mulch) {
            multiplier = GameConstants.AMAZE_MULCH_MUTATE_MULTIPLIER;
        }
        multiplier *= this.auraMutation();
        return multiplier;
    }
    multiplyNeighbourAura(auraType) {
        return this.neighbours()
            .filter(p => p.emittingAura.type() === auraType)
            .reduce((acc, plot) => { var _a; return acc * ((_a = plot.emittingAura.value()) !== null && _a !== void 0 ? _a : 1); }, 1);
    }
    maxNeighbourAura(auraType) {
        return Math.max(1, ...this.neighbours().filter(p => p.emittingAura.type() === auraType).map(p => { var _a; return (_a = p.emittingAura.value()) !== null && _a !== void 0 ? _a : 1; }));
    }
    /**
     * returns true if the plot had mulch.
     */
    clearMulch() {
        const wasMulched = this.mulch != MulchType.None;
        if (wasMulched) {
            this.mulch = MulchType.None;
            this.mulchTimeLeft = 0;
        }
        return wasMulched;
    }
    fromJSON(json) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (json == null) {
            return;
        }
        this.isUnlocked = (_a = json.isUnlocked) !== null && _a !== void 0 ? _a : this.defaults.isUnlocked;
        this.berry = (_b = json.berry) !== null && _b !== void 0 ? _b : this.defaults.berry;
        this.age = (_c = json.age) !== null && _c !== void 0 ? _c : this.defaults.age;
        this.mulch = (_d = json.mulch) !== null && _d !== void 0 ? _d : this.defaults.mulch;
        this.mulchTimeLeft = (_e = json.mulchTimeLeft) !== null && _e !== void 0 ? _e : this.defaults.mulchTimeLeft;
        this.lastPlanted = (_g = (_f = json.lastPlanted) !== null && _f !== void 0 ? _f : json.berry) !== null && _g !== void 0 ? _g : this.defaults.berry;
        this.isSafeLocked = (_h = json.isSafeLocked) !== null && _h !== void 0 ? _h : this.defaults.isSafeLocked;
        this.wanderer = WandererPokemon.fromJSON(json.wanderer);
    }
    toJSON() {
        var _a;
        return {
            isUnlocked: this.isUnlocked,
            berry: this.berry,
            lastPlanted: this.lastPlanted,
            age: this.age,
            mulch: this.mulch,
            mulchTimeLeft: this.mulchTimeLeft,
            isSafeLocked: this.isSafeLocked,
            wanderer: (_a = this.wanderer) === null || _a === void 0 ? void 0 : _a.toJSON(),
        };
    }
    /**
     * Finds the plot indices that are around the plot in a 3x3 square
     * @param index The plot index
     */
    static findNearPlots(index) {
        const plots = [];
        const posX = index % GameConstants.FARM_PLOT_WIDTH;
        const posY = (index - posX) / GameConstants.FARM_PLOT_HEIGHT;
        for (let y = posY - 1; y <= posY + 1; y++) {
            for (let x = posX - 1; x <= posX + 1; x++) {
                if (y < 0 || y > GameConstants.FARM_PLOT_HEIGHT - 1 || x < 0 || x > GameConstants.FARM_PLOT_WIDTH - 1) {
                    continue;
                }
                if (y === posY && x === posX) {
                    continue;
                }
                const id = y * GameConstants.FARM_PLOT_HEIGHT + x;
                plots.push(id);
            }
        }
        return plots;
    }
    neighbours() {
        return Plot.findNearPlots(this.index).map(i => App.game.farming.plotList[i]);
    }
    canCatchWanderer() {
        return this.wanderer && !this.wanderer.catching() && !this.wanderer.fleeing();
    }
    /**
     * Finds the plot indices that are directly next to the plot (aka a plus sign)
     * @param index The plot index
     */
    static findPlusPlots(index, filter) {
        const posX = index % GameConstants.FARM_PLOT_WIDTH;
        const posY = (index - posX) / GameConstants.FARM_PLOT_HEIGHT;
        const possiblePlots = [[posY - 1, posX], [posY, posX - 1], [posY, posX + 1], [posY + 1, posX]];
        return possiblePlots.filter(([y, x]) => {
            return y >= 0 && y < GameConstants.FARM_PLOT_HEIGHT && x >= 0 && x < GameConstants.FARM_PLOT_WIDTH;
        }).map(([y, x]) => y * GameConstants.FARM_PLOT_HEIGHT + x);
    }
    get berryData() {
        return App.game.farming.berryData[this.berry];
    }
    // Knockout getters
    get isUnlocked() {
        return this._isUnlocked();
    }
    set isUnlocked(value) {
        this._isUnlocked(value);
    }
    get isSafeLocked() {
        return this._isSafeLocked();
    }
    set isSafeLocked(value) {
        this._isSafeLocked(value);
    }
    get berry() {
        return this._berry();
    }
    set berry(berry) {
        this._berry(berry);
    }
    get lastPlanted() {
        return this._lastPlanted();
    }
    set lastPlanted(berry) {
        this._lastPlanted(berry);
    }
    get age() {
        return this._age();
    }
    set age(value) {
        this._age(value);
    }
    get mulch() {
        return this._mulch();
    }
    set mulch(value) {
        this._mulch(value);
    }
    get mulchTimeLeft() {
        return this._mulchTimeLeft();
    }
    set mulchTimeLeft(value) {
        this._mulchTimeLeft(value);
    }
    get wanderer() {
        return this._wanderer();
    }
    set wanderer(wanderer) {
        this._wanderer(wanderer);
    }
}
class WandererPokemon {
    constructor(name, berry, catchRate, shiny = false, distractTime = 0) {
        this.name = name;
        this.berry = berry;
        this.catchRate = catchRate;
        this.shiny = shiny;
        this.catching = ko.observable(false);
        this.pokeball = ko.observable(GameConstants.Pokeball.None);
        this.distractTime = ko.observable(distractTime);
        this.fleeing = ko.observable(false);
    }
    // If distracted for long enough, flees
    tick() {
        if (!this.distractTime() || this.catching() || this.fleeing()) {
            return false;
        }
        GameHelper.incrementObservable(this.distractTime, GameConstants.WANDER_TICK);
        if (this.distractTime() >= 5 * GameConstants.MINUTE) {
            return true;
        }
        return false;
    }
    // Happens when plot.dies() is used
    distract() {
        GameHelper.incrementObservable(this.distractTime, 1);
    }
    static fromJSON(wanderer) {
        if (wanderer) {
            return new WandererPokemon(wanderer.name, wanderer.berry, wanderer.catchRate, wanderer.shiny, wanderer.distractTime);
        }
        return undefined;
    }
    toJSON() {
        const json = { name: this.name, berry: this.berry, catchRate: this.catchRate, shiny: this.shiny, distractTime: this.distractTime() };
        return json;
    }
}
class Aura {
    constructor(auraType, auraMultipliers) {
        this.auraType = auraType;
        this.auraMultipliers = auraMultipliers;
    }
    getAuraValue(stage) {
        if (!stage || stage < PlotStage.Taller) {
            return 1;
        }
        return this.auraMultipliers[stage - 2];
    }
}
class Mutation {
    constructor(mutationChance, mutatedBerry, options) {
        var _a;
        this._mutationChance = mutationChance;
        this.mutatedBerry = mutatedBerry;
        this._hint = options === null || options === void 0 ? void 0 : options.hint;
        this._unlockReq = options === null || options === void 0 ? void 0 : options.unlockReq;
        this.showHint = (_a = options === null || options === void 0 ? void 0 : options.showHint) !== null && _a !== void 0 ? _a : true;
        this._hintSeen = ko.observable(false);
    }
    toJSON() {
        return this.hintSeen;
    }
    fromJSON(hintSeen) {
        this.hintSeen = !!hintSeen;
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        if (!this._unlockReq) {
            return true;
        }
        return this._unlockReq();
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (!this.showHint) {
            return '';
        }
        if (this._hint) {
            return this._hint;
        }
        return '';
    }
    /**
     * Handles getting the mutation chance
     * @param idx The plot index
     */
    mutationChance(idx) {
        return this._mutationChance;
    }
    /**
     * Update tag for mutations. Returns true if this mutation will occur
     */
    mutate() {
        if (!this.unlocked) {
            return false;
        }
        const plots = this.getMutationPlots();
        if (!plots.length) {
            return false;
        }
        let mutated = false;
        plots.forEach((idx) => {
            const willMutate = Rand.chance(this.getTotalMutationChance(idx));
            if (!willMutate) {
                return;
            }
            this.handleMutation(idx);
            App.game.oakItems.use(OakItemType.Squirtbottle);
            mutated = true;
        });
        return mutated;
    }
    getTotalMutationChance(plotIndex) {
        return this.mutationChance(plotIndex)
            * App.game.farming.getMutationMultiplier()
            * App.game.farming.plotList[plotIndex].getMutationMultiplier();
    }
    get hintSeen() {
        return this._hintSeen();
    }
    set hintSeen(bool) {
        this._hintSeen(bool);
    }
}
/// <reference path="../Mutation.ts" />
/**
 * A Blank Mutation to be used to store hint data.
 * This is mostly because the Mutation framework controls the hints, but some mutations are outside of the Mutation framework
 */
class BlankMutation extends Mutation {
    getMutationPlots() {
        return [];
    }
    handleMutation(index) {
        return;
    }
}
/// <reference path="../Mutation.ts" />
/**
 * Mutation that occurs on an empty Plot
 */
class GrowMutation extends Mutation {
    constructor(mutationChance, mutatedBerry, options) {
        super(mutationChance, mutatedBerry, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = [];
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (!plot.isEmpty()) {
                return;
            }
            plots.push(idx);
        });
        return plots;
    }
    /**
     * Handles updating the farm with the mutation
     * @param index The plot index to mutate
     */
    handleMutation(index) {
        const plot = App.game.farming.plotList[index];
        plot.berry = this.mutatedBerry;
        plot.age = 0;
        plot.notifications = [];
        App.game.farming.unlockBerry(this.mutatedBerry);
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation to produce the Enigma Berry
 */
class EnigmaMutation extends GrowMutation {
    constructor(mutationChance) {
        super(mutationChance, BerryType.Enigma, {
            unlockReq: function () {
                return EnigmaMutation.getReqs().every(req => App.game.farming.unlockedBerries[req]());
            },
        });
        this.hintsSeen = Array(4).fill(false).map(val => ko.observable(val));
        this.lastIndex = ko.observable(null);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        const reqs = EnigmaMutation.getReqs();
        return plots.filter((idx) => {
            const nearPlots = Plot.findPlusPlots(idx);
            if (nearPlots.length !== 4) {
                return false;
            }
            return nearPlots.every((idx, n) => {
                const plot = App.game.farming.plotList[idx];
                if (!plot.isUnlocked) {
                    return false;
                }
                if (plot.isEmpty()) {
                    return false;
                }
                if (plot.stage() !== PlotStage.Berry) {
                    return false;
                }
                if (plot.berry !== reqs[n]) {
                    return false;
                }
                return true;
            });
        });
    }
    /**
     * Returns a list of 4 Berry types to cause the mutation
     */
    static getReqs() {
        SeededRand.seed(+player.trainerId);
        // Getting possible Berries
        // Only Gen 3 and 4 Berries so there isn't as big of a growth discrepancy (e.g. Cheri and Haban)
        let berryTypes = Farming.getGeneration(2).concat(Farming.getGeneration(3));
        // Remove parasite Berries, as having four sides for mutation requirements means parasite
        // mutations can make it difficult to have all four plants fully grown.
        // Also remove Babiri since they'll stop mutations
        berryTypes = berryTypes.filter(berry => {
            return ![BerryType.Occa, BerryType.Kebia, BerryType.Colbur, BerryType.Babiri].includes(berry);
        });
        return [...new Array(4)].map((_) => SeededRand.fromArray(berryTypes));
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    generateIndex() {
        if (this.lastIndex()) {
            return;
        }
        this.lastIndex(Rand.fromArray([...new Array(this.hintsSeen.length)].map((_, i) => i).filter(i => !this.hintsSeen[i]())));
    }
    resetIndex() {
        this.lastIndex(null);
    }
    get partialHint() {
        if (this.lastIndex() === null) {
            if (this.hintsSeen.every(s => s())) {
                return this.hint;
            }
            this.generateIndex();
            this.hintsSeen[this.lastIndex()](true);
        }
        return `There's a mysterious berry that requires ${this.getHint(this.lastIndex())}.`;
    }
    getHint(idx) {
        let direction = '';
        switch (idx) {
            case 0:
                direction = 'north';
                break;
            case 1:
                direction = 'west';
                break;
            case 2:
                direction = 'east';
                break;
            case 3:
                direction = 'south';
        }
        return `a ${BerryType[EnigmaMutation.getReqs()[idx]]} Berry to the ${direction}`;
    }
    /**
     * Handles getting the full hint for the BerryDex
     */
    get hint() {
        const hints = [];
        const unlocked = App.game.farming.unlockedBerries[this.mutatedBerry]();
        this.hintsSeen.forEach((hintSeen, idx) => {
            if (!hintSeen() && !unlocked) {
                return false;
            }
            hints.push(this.getHint(idx));
        });
        let tempHint = `There's a mysterious berry that requires ${hints.join(', ').replace(/, ([\w\s]+)$/, ' and $1')}`;
        if (hints.length === 0) {
            tempHint += 'a specific configuration of Berries';
        }
        tempHint += (hints.length !== 4) ? '. However, there\'s still something missing...' : '.';
        return tempHint;
    }
    toJSON() {
        return { seen: this.hintsSeen.map(h => h()), last: this.lastIndex() };
    }
    fromJSON(hints) {
        const hintsSeen = hints.seen;
        if (Array.isArray(hintsSeen)) {
            hintsSeen.forEach((value, index) => {
                if (value) {
                    this.hintSeen = true;
                }
                this.hintsSeen[index](value);
            });
        }
        if (hints.last !== null) {
            this.lastIndex(hints.last);
        }
    }
}
/// <reference path="../Mutation.ts" />
/**
 * Mutation that occurs on a Berry plant that is PlotStage.Taller or older.
 */
class EvolveMutation extends Mutation {
    constructor(mutationChance, mutatedBerry, originalBerry, options) {
        super(mutationChance, mutatedBerry, options);
        this.originalBerry = originalBerry;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = [];
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            if (this.originalBerry && plot.berry !== this.originalBerry) {
                return;
            }
            // Babiri Berries can't mutate
            if (plot.berry === BerryType.Babiri) {
                return;
            }
            plots.push(idx);
        });
        return plots;
    }
    /**
     * Handles updating the farm with the mutation.
     * Mutations will keep the new Berry plant in the same stage as it was previously
     * @param index The plot index to mutate
     */
    handleMutation(index) {
        const plot = App.game.farming.plotList[index];
        const currentStage = plot.stage();
        let newAge = 0;
        if (currentStage !== PlotStage.Seed) {
            newAge = App.game.farming.berryData[this.mutatedBerry].growthTime[currentStage - 1] + 1;
        }
        plot.berry = this.mutatedBerry;
        plot.age = newAge;
        plot.notifications = [];
        App.game.farming.unlockBerry(this.mutatedBerry);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for unlocked original berry
        if (this.originalBerry && !App.game.farming.unlockedBerries[this.originalBerry]()) {
            return false;
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveMutation.ts" />
/**
 * Mutation that requires a specific environment near a Berry plot.
 */
class EvolveNearMutation extends EvolveMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            const nearPlots = Plot.findNearPlots(idx);
            return this.nearPlotsFitRequirements(nearPlots);
        });
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires at least some amount of specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class EvolveNearBerryMinMutation extends EvolveNearMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const currentReqs = {};
        plots.forEach((idx) => {
            const plot = App.game.farming.plotList[idx];
            if (plot.stage() !== PlotStage.Berry) {
                return;
            }
            if (!currentReqs[plot.berry]) {
                currentReqs[plot.berry] = 1;
            }
            else {
                currentReqs[plot.berry] += 1;
            }
        });
        return Object.keys(this.berryReqs).every(key => currentReqs[key] !== undefined && currentReqs[key] >= this.berryReqs[key]);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        for (const berry of Object.keys(this.berryReqs)) {
            if (!App.game.farming.unlockedBerries[berry]()) {
                return false;
            }
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires specific Berry plants near a Berry plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class EvolveNearBerryMutation extends EvolveNearMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        return this.berryReqs.every((req) => {
            return plots.some((plot) => {
                return this.checkRequirement(plot, req);
            });
        });
    }
    /**
     * Checks an individual plot for a Berry requirement
     */
    checkRequirement(index, berryReq) {
        const plot = App.game.farming.plotList[index];
        if (!plot.isUnlocked) {
            return false;
        }
        if (plot.berry !== berryReq) {
            return false;
        }
        if (plot.stage() !== PlotStage.Berry) {
            return false;
        }
        return true;
    }
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        const berryType = this.originalBerry !== undefined ? BerryType[this.originalBerry] : 'some';
        if (this.berryReqs.length === 0) {
            return `I've heard that ${berryType} Berries can spontaneously change!`;
        }
        let str = `I've heard that growing ${berryType} Berries`;
        str += ` near ${this.berryReqs.map(b => BerryType[b]).join(', ').replace(/, ([\w\s]+)$/, ' and $1')} Berries`;
        str += ' can cause it to change!';
        return str;
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        if (!this.berryReqs.every(req => App.game.farming.unlockedBerries[req]())) {
            return false;
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires very specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class EvolveNearBerryStrictMutation extends EvolveNearMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, berryReqs, neighborStageReq, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.berryReqs = berryReqs;
        this.neighborStageReq = neighborStageReq;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const currentReqs = {};
        plots.forEach((idx) => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < this.neighborStageReq) {
                return;
            }
            if (!currentReqs[plot.berry]) {
                currentReqs[plot.berry] = 1;
            }
            else {
                currentReqs[plot.berry] += 1;
            }
        });
        return GameHelper.shallowEqual(this.berryReqs, currentReqs);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        for (const berry of Object.keys(this.berryReqs)) {
            if (!App.game.farming.unlockedBerries[berry]()) {
                return false;
            }
        }
        return super.unlocked;
    }
}
/// <reference path="./EvolveNearMutation.ts" />
/**
 * Mutation that requires specific flavored Berry plants near a Berry plot
 * Will check the surround plots for the flavors of the nearby Berry plants. Must be in the range of the flavorReqs
 */
class EvolveNearFlavorMutation extends EvolveNearMutation {
    /**
     * Constructor for a FlavorMutation
     * @param mutationChance The chance of the mutation occuring
     * @param mutatedBerry The mutated BerryType
     * @param flavorReqs The flavor requirements for the mutation to occur
     * @param options The additional MutationOptions
     */
    constructor(mutationChance, mutatedBerry, originalBerry, flavorReqs, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.flavorRatio = [0.5, 0.75, 1]; // Determines how much flavor a Berry plant has before fully mature.
        this.flavorReqs = flavorReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const nearFlavors = [0, 0, 0, 0, 0];
        plots.forEach(idx => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            const berryFlavors = App.game.farming.berryData[plot.berry].flavors.map(x => x.value * this.flavorRatio[plot.stage() - 2]);
            for (let j = 0; j < 5; j++) {
                nearFlavors[j] += berryFlavors[j];
            }
        });
        return this.flavorReqs.every((value, idx) => value[0] <= nearFlavors[idx] && nearFlavors[idx] <= value[1]);
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation that requires a total amount of flavor in the field
 */
class FieldFlavorMutation extends GrowMutation {
    constructor(mutationChance, mutatedBerry, fieldFlavor, options) {
        super(mutationChance, mutatedBerry, options);
        this.flavorRatio = [0.5, 0.75, 1]; // Determines how much flavor a Berry plant has before fully mature.
        this.fieldFlavor = fieldFlavor;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const emptyPlots = super.getMutationPlots();
        const nearFlavors = [0, 0, 0, 0, 0];
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            const berryFlavors = App.game.farming.berryData[plot.berry].flavors.map(x => x.value * this.flavorRatio[plot.stage() - 2]);
            for (let j = 0; j < 5; j++) {
                nearFlavors[j] += berryFlavors[j];
            }
        });
        const reqMatched = this.fieldFlavor.every((value, idx) => value <= nearFlavors[idx]);
        if (reqMatched) {
            return emptyPlots;
        }
        return [];
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation that requires a number of Berry plants in the farm
 */
class FieldMutation extends GrowMutation {
    constructor(mutationChance, mutatedBerry, fieldBerries, options) {
        super(mutationChance, mutatedBerry, options);
        this.fieldBerries = fieldBerries;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const emptyPlots = super.getMutationPlots();
        const fieldPlots = Array(this.fieldBerries.length).fill(0);
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            this.fieldBerries.forEach((fb, index) => {
                if (plot.berry === fb.berry && plot.stage() === PlotStage.Berry) {
                    fieldPlots[index] += 1;
                }
            });
        });
        if (fieldPlots.every((fp, index) => fp >= this.fieldBerries[index].amountRequired)) {
            return emptyPlots;
        }
        return [];
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        if (this.fieldBerries.some((fb) => !App.game.farming.unlockedBerries[fb.berry]())) {
            return false;
        }
        return super.unlocked;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        const berries = this.fieldBerries.map((fb) => BerryType[fb.berry]).join(', ');
        return `Legends tell of a mysterious Berry that only appears in a field of ${berries} Berries.`;
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation that requires a specific environment near an empty plot.
 */
class GrowNearMutation extends GrowMutation {
    constructor(mutationChance, mutatedBerry, options) {
        super(mutationChance, mutatedBerry, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            const nearPlots = Plot.findNearPlots(idx);
            return this.nearPlotsFitRequirements(nearPlots);
        });
    }
}
/// <reference path="./GrowNearMutation.ts" />
/**
 * Mutation that requires specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class GrowNearBerryMutation extends GrowNearMutation {
    constructor(mutationChance, mutatedBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        return this.berryReqs.every((req) => {
            return plots.some((plot) => {
                return this.checkRequirement(plot, req);
            });
        });
    }
    /**
     * Checks an individual plot for a Berry requirement
     */
    checkRequirement(index, berryReq) {
        const plot = App.game.farming.plotList[index];
        if (!plot.isUnlocked) {
            return false;
        }
        if (plot.berry !== berryReq) {
            return false;
        }
        if (plot.stage() !== PlotStage.Berry) {
            return false;
        }
        return true;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        if (this.berryReqs.length === 1) {
            return `I've heard that growing ${BerryType[this.berryReqs[0]]} Berries can spread a new Berry into nearby empty plots!`;
        }
        if (this.berryReqs.length >= 2) {
            return `I've heard that growing ${this.berryReqs.map(b => BerryType[b]).join(', ').replace(/, ([\w\s]+)$/, ' and $1')} Berries near each other will produce something interesting!`;
        }
        return '';
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        if (!this.berryReqs.every(req => App.game.farming.unlockedBerries[req]())) {
            return false;
        }
        return super.unlocked;
    }
}
/// <reference path="./GrowNearMutation.ts" />
/**
 * Mutation that requires very specific Berry plants near an empty plot.
 * The required Berry plants must be in the Berry stage for mutations to occur.
 */
class GrowNearBerryStrictMutation extends GrowNearMutation {
    constructor(mutationChance, mutatedBerry, berryReqs, options) {
        super(mutationChance, mutatedBerry, options);
        this.berryReqs = berryReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const currentReqs = {};
        plots.forEach((idx) => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() !== PlotStage.Berry) {
                return;
            }
            if (!currentReqs[plot.berry]) {
                currentReqs[plot.berry] = 1;
            }
            else {
                currentReqs[plot.berry] += 1;
            }
        });
        return GameHelper.shallowEqual(this.berryReqs, currentReqs);
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        for (const berry of Object.keys(this.berryReqs)) {
            if (!App.game.farming.unlockedBerries[berry]()) {
                return false;
            }
        }
        return super.unlocked;
    }
}
/// <reference path="./GrowNearMutation.ts" />
/**
 * Mutation that requires specific flavored Berry plants near an empty plot
 * Will check the surround plots for the flavors of the nearby Berry plants. Must be in the range of the flavorReqs
 */
class GrowNearFlavorMutation extends GrowNearMutation {
    /**
     * Constructor for a FlavorMutation
     * @param mutationChance The chance of the mutation occuring
     * @param mutatedBerry The mutated BerryType
     * @param flavorReqs The flavor requirements for the mutation to occur
     * @param options The additional MutationOptions
     */
    constructor(mutationChance, mutatedBerry, flavorReqs, options) {
        super(mutationChance, mutatedBerry, options);
        this.flavorRatio = [0.5, 0.75, 1]; // Determines how much flavor a Berry plant has before fully mature.
        this.flavorReqs = flavorReqs;
    }
    /**
     * Determines if the plots near fit the requirements
     * @param plots The list of nearby plots
     */
    nearPlotsFitRequirements(plots) {
        const nearFlavors = [0, 0, 0, 0, 0];
        plots.forEach(idx => {
            const plot = App.game.farming.plotList[idx];
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() < PlotStage.Taller) {
                return;
            }
            const berryFlavors = App.game.farming.berryData[plot.berry].flavors.map(x => x.value * this.flavorRatio[plot.stage() - 2]);
            for (let j = 0; j < 5; j++) {
                nearFlavors[j] += berryFlavors[j];
            }
        });
        return this.flavorReqs.every((value, idx) => value[0] <= nearFlavors[idx] && nearFlavors[idx] <= value[1]);
    }
    /**
     * Handles getting the mutation chance.
     * Will decrease the mutation chance if the mutatedBerry already exists around this one.
     * @param idx The plot index
     */
    mutationChance(idx) {
        const sameBerries = Plot.findNearPlots(idx).filter(plotIndex => {
            return App.game.farming.plotList[plotIndex].berry === this.mutatedBerry;
        }).length;
        return super.mutationChance(idx) * Math.pow(4, -sameBerries);
    }
}
/// <reference path="./EvolveMutation.ts" />
/**
 * Mutation that applies to a current Berry plant based on the active state of Oak Items
 */
class OakMutation extends EvolveMutation {
    constructor(mutationChance, mutatedBerry, originalBerry, oakItem, options) {
        super(mutationChance, mutatedBerry, originalBerry, options);
        this.oakItem = oakItem;
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            const plot = App.game.farming.plotList[idx];
            return this.plotFitRequirements(plot, idx);
        });
    }
    /**
     * Checks whether a plot fits the requirements for a mutation
     * @param plot The Plot
     * @param idx The Plot index
     */
    plotFitRequirements(plot, idx) {
        if (!App.game.oakItems.isActive(this.oakItem)) {
            return false;
        }
        if (this.originalBerry && plot.berry !== this.originalBerry) {
            return false;
        }
        return true;
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check Oak Item unlock status
        if (!App.game.oakItems.isUnlocked(this.oakItem)) {
            return false;
        }
        return super.unlocked;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        return `I've heard that using the ${App.game.oakItems.itemList[this.oakItem].displayName} can cause ${BerryType[this.originalBerry]} Berries to change!`;
    }
}
/// <reference path="./EvolveNearBerryMutation.ts" />
/**
 * Parasite Mutation
 */
class ParasiteMutation extends EvolveNearBerryMutation {
    constructor(mutationChance, berry) {
        super(mutationChance, berry, undefined, [berry], { showHint: false });
    }
    /**
     * Determines which plots can mutate. Excludes the parasite berry
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const plots = super.getMutationPlots();
        return plots.filter((idx) => {
            return App.game.farming.plotList[idx].berry !== this.mutatedBerry;
        });
    }
}
/// <reference path="./GrowMutation.ts" />
/**
 * Mutation for the Petaya Berry. Requires all 18 typed Berries to be in the field.
 */
class PetayaMutation extends GrowMutation {
    constructor(mutationChance, options) {
        super(mutationChance, BerryType.Petaya, options);
    }
    /**
     * Determines which plots can mutate
     * @return The plot indices that can mutate
     */
    getMutationPlots() {
        const emptyPlots = super.getMutationPlots();
        const fieldPlots = {};
        App.game.farming.plotList.forEach((plot, idx) => {
            if (!plot.isUnlocked) {
                return;
            }
            if (plot.isEmpty()) {
                return;
            }
            if (plot.stage() !== PlotStage.Berry) {
                return;
            }
            if (!fieldPlots[plot.berry]) {
                fieldPlots[plot.berry] = 1;
            }
            else {
                fieldPlots[plot.berry] += 1;
            }
        });
        const requiredBerries = Farming.getGeneration(3);
        if (requiredBerries.every(berry => fieldPlots[berry])) {
            return emptyPlots;
        }
        return [];
    }
    /**
     * Determines whether the player can even cause this mutation
     */
    get unlocked() {
        // Check for Berry requirements
        const requiredBerries = Farming.getGeneration(3);
        if (!requiredBerries.every(berry => App.game.farming.unlockedBerries[berry]())) {
            return false;
        }
        return super.unlocked;
    }
    /**
     * Handles getting the hint for this mutation for the Kanto Berry Master
     */
    get hint() {
        if (super.hint) {
            return super.hint;
        }
        return 'Legends tell of a mysterious Berry that only appears while surrounded by all types of Berries.';
    }
}
///<reference path="../../declarations/globals.d.ts"/>
class PokemonFactory {
    /**
     * Generate a wild pokemon based on route, region and the dataList.
     * @param route route that the player is on.
     * @param region region that the player is in.
     * @returns {any}
     */
    static generateWildPokemon(route, region, subRegion) {
        if (!MapHelper.validRoute(route, region)) {
            return new BattlePokemon('MissingNo.', 0, PokemonType.None, PokemonType.None, 0, 0, 0, 0, new Amount(0, GameConstants.Currency.money), false, 0, GameConstants.BattlePokemonGender.NoGender, GameConstants.ShadowStatus.None, EncounterType.route);
        }
        let name;
        const roaming = PokemonFactory.roamingEncounter(route, region, subRegion);
        if (roaming) {
            name = PokemonFactory.generateRoamingEncounter(region, subRegion);
        }
        else {
            name = Rand.fromArray(RouteHelper.getAvailablePokemonList(route, region));
        }
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const routeAvgHp = (region, route) => {
            const poke = [...new Set(Object.values(Routes.getRoute(region, route).pokemon).flat().map(p => { var _a; return (_a = p.pokemon) !== null && _a !== void 0 ? _a : p; }).flat())];
            const total = poke.map(p => pokemonMap[p].base.hitpoints).reduce((s, a) => s + a, 0);
            return total / poke.length;
        };
        // TODO this monster formula needs to be improved. Preferably with graphs :D
        // Health has a +/- 10% variable based on base health stat compared to the average of the route
        const maxHealth = Math.round(PokemonFactory.routeHealth(route, region) * (0.9 + (basePokemon.hitpoints / routeAvgHp(region, route)) / 10));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const level = this.routeLevel(route, region);
        const money = this.routeMoney(route, region);
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        const heldItem = this.generateHeldItem(basePokemon.heldItem, GameConstants.ROUTE_HELD_ITEM_MODIFIER, shiny);
        const gender = this.generateGender(basePokemon.gender.femaleRatio, basePokemon.gender.type);
        const encounterType = roaming ? EncounterType.roamer : EncounterType.route;
        if (shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${PokemonHelper.displayName(name)()}! ✨`,
                pokemonImage: PokemonHelper.getImage(id, shiny, basePokemon.gender, GameConstants.ShadowStatus.None),
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.General.encountered_shiny,
            });
        }
        if (roaming) {
            Notifier.notify({
                message: `You encountered a roaming ${name}!`,
                pokemonImage: PokemonHelper.getImage(id, shiny, basePokemon.gender, GameConstants.ShadowStatus.None),
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.roaming,
                setting: NotificationConstants.NotificationSetting.General.encountered_roaming,
            });
            App.game.logbook.newLog(LogBookTypes.ROAMER, (shiny
                ? App.game.party.alreadyCaughtPokemon(id, true)
                    ? createLogContent.roamerShinyDupe
                    : createLogContent.roamerShiny
                : createLogContent.roamer)({
                location: Routes.getRoute(player.region, player.route).routeName,
                pokemon: name,
            }));
        }
        const ep = GameConstants.BASE_EP_YIELD * (roaming ? GameConstants.ROAMER_EP_MODIFIER : 1);
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, level, catchRate, exp, new Amount(money, GameConstants.Currency.money), shiny, 1, gender, GameConstants.ShadowStatus.None, encounterType, heldItem, ep);
    }
    static routeLevel(route, region) {
        return Math.floor(20 * Math.pow(MapHelper.normalizeRoute(route, region), (1 / 2.25)));
    }
    static routeHealth(route, region) {
        const regionRoute = Routes.regionRoutes.find((routeData) => routeData.region === region && routeData.number === route);
        if (regionRoute === null || regionRoute === void 0 ? void 0 : regionRoute.routeHealth) {
            return regionRoute.routeHealth;
        }
        route = MapHelper.normalizeRoute(route, region);
        const health = Math.max(20, Math.floor(Math.pow((100 * Math.pow(route, 2.2) / 12), 1.15) * (1 + region / 20))) || 20;
        return health;
    }
    static routeMoney(route, region, useRandomDeviation = true) {
        route = MapHelper.normalizeRoute(route, region);
        //If it's not random, we take the mean value (truncated)
        const deviation = useRandomDeviation ? Rand.intBetween(-25, 25) : 12;
        const money = Math.max(10, 3 * route + 5 * Math.pow(route, 1.15) + deviation);
        return money;
    }
    static routeDungeonTokens(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        const tokens = Math.max(1, 6 * Math.pow(route * 2 / (2.8 / (1 + region / 3)), 1.08));
        return tokens;
    }
    /**
     * Calculate if a shiny has spawned.
     * @param chance Base chance, should be from GameConstants.SHINY_CHANCE.*
     * @returns {boolean}
     */
    static generateShiny(chance, skipBonus = false) {
        const bonus = skipBonus ? 1 : App.game.multiplier.getBonus('shiny');
        if (Rand.chance(chance / bonus)) {
            App.game.oakItems.use(OakItemType.Shiny_Charm);
            return true;
        }
        return false;
    }
    static generatePartyPokemon(id, shiny = false, gender = GameConstants.BattlePokemonGender.NoGender, shadow = GameConstants.ShadowStatus.None) {
        const dataPokemon = PokemonHelper.getPokemonById(id);
        return new PartyPokemon(dataPokemon.id, dataPokemon.name, dataPokemon.evolutions, dataPokemon.attack, dataPokemon.eggCycles, shiny, gender, shadow);
    }
    /**
     * Generate a Gym trainer pokemon based on gymName, index and the dataList.
     * @param gymName name of the gym that the player is fighting.
     * @param index index of the Pokémon that is being generated.
     * @returns {any}
     */
    static generateGymPokemon(gym, index) {
        const pokemon = gym.getPokemonList()[index];
        const basePokemon = PokemonHelper.getPokemonByName(pokemon.name);
        const exp = basePokemon.exp;
        const shiny = pokemon.shiny ? pokemon.shiny : this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        const gender = this.generateGender(basePokemon.gender.femaleRatio, basePokemon.gender.type);
        const shadow = pokemon.shadow;
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        if (shiny && !pokemon.shiny) {
            GameHelper.incrementObservable(App.game.statistics.totalShinyTrainerPokemonSeen);
        }
        return new BattlePokemon(pokemon.name, basePokemon.id, basePokemon.type1, basePokemon.type2, pokemon.maxHealth, pokemon.level, catchRate, exp, new Amount(0, GameConstants.Currency.money), shiny, GameConstants.GYM_GEMS, gender, shadow, EncounterType.trainer);
    }
    static generateDungeonPokemon(name, chestsOpened, baseHealth, level, mimic = false) {
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const maxHealth = Math.floor(baseHealth * (1 + (chestsOpened / 5)));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const money = 0;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_DUNGEON);
        const heldItem = this.generateHeldItem(basePokemon.heldItem, GameConstants.DUNGEON_HELD_ITEM_MODIFIER, shiny);
        const gender = this.generateGender(basePokemon.gender.femaleRatio, basePokemon.gender.type);
        if (shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${PokemonHelper.displayName(name)()}! ✨`,
                pokemonImage: PokemonHelper.getImage(id, shiny, basePokemon.gender, GameConstants.ShadowStatus.None),
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.General.encountered_shiny,
            });
        }
        const ep = GameConstants.BASE_EP_YIELD * (mimic ? GameConstants.DUNGEON_BOSS_EP_MODIFIER : GameConstants.DUNGEON_EP_MODIFIER);
        const et = mimic ? EncounterType.mimic : EncounterType.dungeon;
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, level, catchRate, exp, new Amount(money, GameConstants.Currency.money), shiny, GameConstants.DUNGEON_GEMS, gender, GameConstants.ShadowStatus.None, et, heldItem, ep);
    }
    static generateDungeonTrainerPokemon(pokemon, chestsOpened, baseHealth, level, isBoss, trainerPokemon = 1) {
        const name = pokemon.name;
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const maxHealth = Math.floor(baseHealth * (1 + (chestsOpened / 5)) / (isBoss ? 1 : Math.pow(trainerPokemon, 0.75)));
        const exp = basePokemon.exp;
        const shiny = pokemon.shiny ? pokemon.shiny : this.generateShiny(GameConstants.SHINY_CHANCE_DUNGEON);
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        // Reward 2% or 5% (boss) of dungeon DT cost when the trainer mons are defeated
        const money = 0;
        const gender = this.generateGender(basePokemon.gender.femaleRatio, basePokemon.gender.type);
        const shadow = pokemon.shadow;
        const ep = GameConstants.BASE_EP_YIELD * (isBoss ? GameConstants.DUNGEON_BOSS_EP_MODIFIER : GameConstants.DUNGEON_EP_MODIFIER);
        if (shiny && !pokemon.shiny) {
            GameHelper.incrementObservable(App.game.statistics.totalShinyTrainerPokemonSeen);
        }
        return new BattlePokemon(name, basePokemon.id, basePokemon.type1, basePokemon.type2, maxHealth, level, catchRate, exp, new Amount(money, GameConstants.Currency.money), shiny, GameConstants.DUNGEON_GEMS, gender, shadow, EncounterType.trainer, undefined, ep);
    }
    static generateDungeonBoss(bossPokemon, chestsOpened) {
        const name = bossPokemon.name;
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const maxHealth = Math.floor(bossPokemon.baseHealth * (1 + (chestsOpened / 5)));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const money = 0;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_DUNGEON);
        const heldItem = this.generateHeldItem(basePokemon.heldItem, GameConstants.DUNGEON_BOSS_HELD_ITEM_MODIFIER, shiny);
        const gender = this.generateGender(basePokemon.gender.femaleRatio, basePokemon.gender.type);
        if (shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${PokemonHelper.displayName(name)()}! ✨`,
                pokemonImage: PokemonHelper.getImage(id, shiny, basePokemon.gender, GameConstants.ShadowStatus.None),
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.General.encountered_shiny,
            });
        }
        const ep = GameConstants.BASE_EP_YIELD * GameConstants.DUNGEON_BOSS_EP_MODIFIER;
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, bossPokemon.level, catchRate, exp, new Amount(money, GameConstants.Currency.money), shiny, GameConstants.DUNGEON_BOSS_GEMS, gender, GameConstants.ShadowStatus.None, EncounterType.dungeonBoss, heldItem, ep);
    }
    static generateTemporaryBattlePokemon(battle, index) {
        const pokemon = battle.getPokemonList()[index];
        const basePokemon = PokemonHelper.getPokemonByName(pokemon.name);
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const encounterType = battle.optionalArgs.isTrainerBattle
            ? EncounterType.trainer
            : App.game.gameState === GameConstants.GameState.dungeon
                ? EncounterType.dungeon
                : EncounterType.route;
        const exp = basePokemon.exp;
        const shiny = pokemon.shiny ? pokemon.shiny : this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        const gender = this.generateGender(basePokemon.gender.femaleRatio, basePokemon.gender.type);
        const shadow = pokemon.shadow;
        if (shiny && !pokemon.shiny && battle.optionalArgs.isTrainerBattle) {
            GameHelper.incrementObservable(App.game.statistics.totalShinyTrainerPokemonSeen);
        }
        return new BattlePokemon(pokemon.name, basePokemon.id, basePokemon.type1, basePokemon.type2, pokemon.maxHealth, pokemon.level, catchRate, exp, new Amount(0, GameConstants.Currency.money), shiny, GameConstants.GYM_GEMS, gender, shadow, encounterType);
    }
    static generateRoamingEncounter(region, subRegion) {
        const possible = RoamingPokemonList.getSubRegionalGroupRoamers(region, RoamingPokemonList.findGroup(region, subRegion.id));
        // Double the chance of encountering a roaming Pokemon you have not yet caught
        return Rand.fromWeightedArray(possible, possible.map(r => App.game.party.alreadyCaughtPokemonByName(r.pokemon.name) ? 1 : 2)).pokemon.name;
    }
    static roamingEncounter(routeNum, region, subRegion) {
        // Map to the route numbers
        const route = Routes.getRoute(region, routeNum);
        const routes = Routes.getRoutesByRegion(region).filter(r => RoamingPokemonList.findGroup(region, r.subRegion || 0) == RoamingPokemonList.findGroup(region, subRegion.id));
        // Check if the dice rolls in their favor
        const encounter = PokemonFactory.roamingChance(route, routes, region, subRegion);
        if (!encounter) {
            return false;
        }
        // There is likely to be a roamer available, so we can check this last
        const roamingPokemon = RoamingPokemonList.getSubRegionalGroupRoamers(region, RoamingPokemonList.findGroup(region, subRegion.id));
        if (!routes || !routes.length || !roamingPokemon || !roamingPokemon.length) {
            return false;
        }
        // Roaming encounter
        return true;
    }
    static roamingChance(curRoute, allRoutes, region, subRegion, max = GameConstants.ROAMING_MAX_CHANCE, min = GameConstants.ROAMING_MIN_CHANCE, skipBonus = false) {
        var _a;
        const bonus = skipBonus ? 1 : App.game.multiplier.getBonus('roaming');
        const maxRoute = allRoutes.length - 1;
        const routeInd = allRoutes.indexOf(curRoute);
        // Check if we should have increased chances on this route (3 x rate)
        const increasedChance = ((_a = RoamingPokemonList.getIncreasedChanceRouteBySubRegionGroup(player.region, RoamingPokemonList.findGroup(region, subRegion.id))()) === null || _a === void 0 ? void 0 : _a.number) == (curRoute === null || curRoute === void 0 ? void 0 : curRoute.number);
        const roamingChance = (max + ((min - max) * (maxRoute - routeInd) / (maxRoute))) / ((increasedChance ? GameConstants.ROAMING_INCREASED_CHANCE : 1) * bonus);
        return Rand.chance(roamingChance);
    }
    static catchRateHelper(baseCatchRate, noVariation = false) {
        const catchVariation = noVariation ? 0 : Rand.intBetween(-3, 3);
        const catchRateRaw = Math.floor(Math.pow(baseCatchRate, 0.75)) + catchVariation;
        return GameConstants.clipNumber(catchRateRaw, 0, 100);
    }
    static generateHeldItem(item, modifier, shiny) {
        var _a, _b;
        if (!item || !BagHandler.displayName(item)) {
            return null;
        }
        if (!((_b = (_a = item.requirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true)) {
            return null;
        }
        if (shiny) {
            return item;
        }
        let chance = GameConstants.HELD_ITEM_CHANCE;
        // Apply drop chance by item type
        switch (item.type) {
            case ItemType.underground:
                chance = GameConstants.HELD_UNDERGROUND_ITEM_CHANCE;
                break;
        }
        // Apply drop chance by item ID
        switch (item.id) {
            case 'Griseous_Orb':
                chance = GameConstants.GRISEOUS_ITEM_CHANCE;
                break;
            case 'Black_DNA':
            case 'White_DNA':
                chance = GameConstants.DNA_ITEM_CHANCE;
                break;
            case 'Solar_light':
            case 'Lunar_light':
            case 'Pure_light':
                chance = GameConstants.LIGHT_ITEM_CHANCE;
                break;
            case 'Crystallized_shadow':
                chance = GameConstants.SHADOW_ITEM_CHANCE;
                break;
            case 'Rusted_Sword':
            case 'Rusted_Shield':
                chance = GameConstants.RUST_ITEM_CHANCE;
                break;
            case 'Black_mane_hair':
            case 'White_mane_hair':
                chance = GameConstants.MANE_ITEM_CHANCE;
                break;
            case 'Magikarp_Biscuit':
                chance = GameConstants.HELD_MAGIKARP_BISCUIT;
                break;
            case 'Rare_Candy':
                chance = GameConstants.HELD_CANDY_ITEM_CHANCE;
                break;
            case 'Christmas_present':
                chance = GameConstants.CHRISTMAS_ITEM_CHANCE;
                break;
        }
        chance /= modifier;
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.Dowsing_machine)()) {
            chance /= 1.5;
        }
        if (Rand.chance(chance)) {
            return item;
        }
        return null;
    }
    // Gender functions
    /**
     * generateGender but using Pokemon ID
     */
    static generateGenderById(id) {
        const pokemon = PokemonHelper.getPokemonById(id);
        return this.generateGender(pokemon.gender.femaleRatio, pokemon.gender.type);
    }
    /**
     * Calculate which gender has the pokemon.
     * @param chance Base chance, should be from GameConstants under Gender Ratio comment
     * @param genderType Gender type (Genderless, male only, etc.), should be from GameConstants under Gender Types comment
     * @returns GameConstants.BattlePokemonGender
     */
    static generateGender(chance, genderType) {
        let gender;
        switch (genderType) {
            case GameConstants.Genders.Genderless:
                gender = GameConstants.BattlePokemonGender.NoGender;
                break;
            case GameConstants.Genders.MaleFemale:
                if (Rand.chance(chance)) { // Female
                    gender = GameConstants.BattlePokemonGender.Female;
                }
                else { // Male
                    gender = GameConstants.BattlePokemonGender.Male;
                }
                break;
            default:
                console.warn('Invalid gender');
        }
        return gender;
    }
    static generateWandererData(plot) {
        const berry = plot.berryData;
        const mulch = plot.mulch;
        const availablePokemon = [];
        const weights = [];
        berry.wander.forEach((p, i) => {
            if (pokemonMap[p].nativeRegion <= player.highestRegion()) {
                availablePokemon.push(p);
                weights.push(mulch === MulchType.Gooey_Mulch && i >= Berry.baseWander.length ? 2 : 1);
            }
        });
        const pokemon = Rand.fromWeightedArray(availablePokemon, weights);
        const pokemonData = pokemonMap[pokemon];
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_FARM);
        const catchChance = PokemonFactory.catchRateHelper(pokemonData.catchRate + 25, true);
        const wanderer = new WandererPokemon(pokemon, berry.type, catchChance, shiny);
        return wanderer;
    }
}
PokemonFactory;
class TownContent {
    addParent(parent) {
        this.parent = parent;
    }
    areaStatus() {
        return [this.isUnlocked() ? areaStatus.completed : areaStatus.locked];
    }
    isUnlocked() {
        return this.requirements.every(requirement => requirement.isCompleted());
    }
    clears() {
        return undefined;
    }
    isVisible() {
        if (this.requirements.some(r => r instanceof DevelopmentRequirement || (r instanceof MultiRequirement && r.requirements.some(r2 => r2 instanceof DevelopmentRequirement)))) {
            return this.isUnlocked();
        }
        return true;
    }
    protectedOnclick() {
        var _a;
        if (!this.isVisible()) {
            return;
        }
        const reqsList = [];
        (_a = this.requirements) === null || _a === void 0 ? void 0 : _a.forEach(requirement => {
            if (!requirement.isCompleted()) {
                reqsList.push(requirement.hint());
            }
        });
        if (reqsList.length) {
            Notifier.notify({
                message: `You don't have access yet.\n<i>${reqsList.join('\n')}</i>`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
        else {
            this.onclick();
        }
    }
    constructor(requirements = []) {
        this.tooltip = undefined;
        this.requirements = requirements;
    }
}
class DockTownContent extends TownContent {
    cssClass() {
        return 'btn btn-info';
    }
    isVisible() {
        return player.highestRegion() > 0;
    }
    onclick() {
        MapHelper.openShipModal();
    }
    text() {
        return 'Dock';
    }
}
class BattleFrontierTownContent extends TownContent {
    cssClass() {
        return 'btn btn-primary';
    }
    onclick() {
        App.game.battleFrontier.enter();
    }
    text() {
        return 'Enter Battle Frontier';
    }
}
class NextRegionTownContent extends TownContent {
    cssClass() {
        return 'btn btn-warning';
    }
    isVisible() {
        return MapHelper.ableToTravel();
    }
    onclick() {
        $('#nextRegionModal').modal('show');
    }
    text() {
        return `Travel to ${GameConstants.camelCaseToString(GameConstants.Region[player.highestRegion() + 1])}`;
    }
}
class MoveToDungeon extends TownContent {
    constructor(dungeon, visibleRequirement = undefined) {
        super([]);
        this.dungeon = dungeon;
        this.visibleRequirement = visibleRequirement;
    }
    cssClass() {
        return 'btn btn-secondary';
    }
    text() {
        return this.dungeon.name;
    }
    isVisible() {
        var _a, _b;
        return (_b = (_a = this.visibleRequirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    onclick() {
        MapHelper.moveToTown(this.dungeon.name);
    }
    isUnlocked() {
        return TownList[this.dungeon.name].isUnlocked();
    }
    areaStatus() {
        return [areaStatus[MapHelper.calculateTownCssClass(this.dungeon.name)]];
    }
    clears() {
        if (!QuestLineHelper.isQuestLineCompleted('Tutorial Quests')) {
            return undefined;
        }
        return App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(this.dungeon.name)]();
    }
}
class MoveToTown extends TownContent {
    constructor(townName, visibleRequirement = undefined, includeAreaStatus = true) {
        super([]);
        this.townName = townName;
        this.visibleRequirement = visibleRequirement;
        this.includeAreaStatus = includeAreaStatus;
    }
    cssClass() {
        return 'btn btn-secondary';
    }
    text() {
        return this.townName;
    }
    isVisible() {
        var _a, _b;
        return (_b = (_a = this.visibleRequirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    onclick() {
        MapHelper.moveToTown(this.townName);
    }
    isUnlocked() {
        return TownList[this.townName].isUnlocked();
    }
    areaStatus() {
        if (this.includeAreaStatus) {
            return [areaStatus[MapHelper.calculateTownCssClass(this.townName)]];
        }
        else {
            return [areaStatus.completed];
        }
    }
}
class AccessGym extends TownContent {
    // only use for gyms that disappear from a town
    constructor(gym, requirement) {
        super([]);
        this.gym = gym;
        this.requirement = requirement;
    }
    cssClass() {
        return this.gym.cssClass();
    }
    text() {
        return this.gym.buttonText;
    }
    isVisible() {
        var _a, _b;
        return (_b = (_a = this.requirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    onclick() {
        GymRunner.startGym(this.gym);
    }
}
class WeatherAppTownContent extends TownContent {
    cssClass() {
        return 'btn btn-secondary';
    }
    isVisible() {
        return WeatherApp.isUnlocked();
    }
    onclick() {
        WeatherApp.openWeatherAppModal();
    }
    text() {
        return 'Open the Castform App';
    }
}
class PickStarterContent extends TownContent {
    cssClass() {
        return 'btn btn-warning';
    }
    isVisible() {
        return player.regionStarters[player.region]() == GameConstants.Starter.None;
    }
    onclick() {
        $('#pickStarterModal').modal('show');
    }
    areaStatus() {
        return [this.isVisible() ? areaStatus.uncaughtPokemon : areaStatus.completed];
    }
    text() {
        return 'Pick your Starter';
    }
}
/// <reference path="../../declarations/TemporaryScriptTypes.d.ts" />
///<reference path="../pokemons/PokemonFactory.ts"/>
///<reference path="../../declarations/requirements/OneFromManyRequirement.d.ts"/>
///<reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="../towns/TownContent.ts"/>
/**
 * Gym class.
 */
class Gym extends TownContent {
    cssClass() {
        if (App.game.badgeCase.hasBadge(this.badgeReward)) {
            return 'btn btn-success';
        }
        return 'btn btn-secondary';
    }
    text() {
        return this.buttonText;
    }
    isVisible() {
        var _a, _b, _c;
        if ((_a = this.optionalArgs) === null || _a === void 0 ? void 0 : _a.hideUntilUnlocked) {
            return this.isUnlocked();
        }
        else if ((_b = this.optionalArgs) === null || _b === void 0 ? void 0 : _b.visibleRequirement) {
            return (_c = this.optionalArgs.visibleRequirement) === null || _c === void 0 ? void 0 : _c.isCompleted();
        }
        else {
            return super.isVisible();
        }
    }
    onclick() {
        GymRunner.startGym(this);
    }
    areaStatus() {
        const states = [];
        if (!this.isUnlocked()) {
            return [areaStatus.locked];
        }
        if (!App.game.badgeCase.hasBadge(this.badgeReward)) {
            states.push(areaStatus.incomplete);
        }
        if (this.isThereQuestAtLocation()) {
            states.push(areaStatus.questAtLocation);
        }
        if (!this.isAchievementsComplete()) {
            states.push(areaStatus.missingAchievement);
        }
        return states;
    }
    clears() {
        return App.game.statistics.gymsDefeated[GameConstants.getGymIndex(this.town)]();
    }
    constructor(leaderName, town, pokemons, badgeReward, moneyReward, defeatMessage, requirements = [], rewardFunction = () => { }, { quest = true, achievement = true, champion = false, } = {}, optionalArgs = {}) {
        super(requirements);
        this.leaderName = leaderName;
        this.pokemons = pokemons;
        this.badgeReward = badgeReward;
        this.moneyReward = moneyReward;
        this.defeatMessage = defeatMessage;
        this.rewardFunction = rewardFunction;
        this.optionalArgs = optionalArgs;
        this.tooltip = 'Battle Gym Leaders to earn badges';
        this.flags = {
            quest: true,
            achievement: true,
            champion: false,
        };
        this.town = town;
        this.flags.quest = quest;
        this.flags.achievement = achievement;
        this.flags.champion = champion;
        if (optionalArgs.displayName) {
            this.buttonText = optionalArgs.displayName;
        }
        else if (!town.includes('Elite') && !town.includes('Champion') && !town.includes('Supreme')) {
            this.buttonText = `${leaderName}'s Gym`;
        }
        else {
            this.buttonText = town;
        }
    }
    isAchievementsComplete() {
        const gymIndex = GameConstants.getGymIndex(this.town);
        return AchievementHandler.achievementList.every(achievement => {
            return !(achievement.property instanceof ClearGymRequirement && achievement.property.gymIndex === gymIndex && !achievement.isCompleted());
        });
    }
    isThereQuestAtLocation() {
        return App.game.quests.currentQuests().some(q => {
            return q instanceof DefeatGymQuest && q.gymTown == this.town;
        });
    }
    static getLeaderByBadge(badge) {
        for (const item in GymList) {
            const gym = GymList[item];
            if (BadgeEnums[gym.badgeReward] == BadgeEnums[BadgeEnums[badge]]) {
                return gym.leaderName;
            }
        }
        return 'Brock';
    }
    firstWinReward() {
        // Give the player this gyms badge
        App.game.badgeCase.gainBadge(this.badgeReward);
        // Show the badge modal
        $('#receiveBadgeModal').modal('show');
        // Run the first time reward function
        this.rewardFunction();
    }
    autoRestartReward() {
        const [modifier] = GameConstants.GymAutoRepeatRewardTiers.find(([, threshold]) => this.clears() >= threshold);
        return this.moneyReward * modifier;
    }
    get imagePath() {
        var _a;
        return `assets/images/npcs/${(_a = this.imageName) !== null && _a !== void 0 ? _a : this.leaderName}.png`;
    }
    getPokemonList() {
        return this.pokemons.filter((p) => p.requirements.every((r => r.isCompleted())));
    }
    get imageName() {
        return this.optionalArgs.imageName;
    }
    get displayName() {
        return this.optionalArgs.displayName;
    }
    get autoRestartTooltip() {
        var _a;
        let tooltip = 'Auto Restart Gym<br/>';
        const clears = (_a = this.clears()) !== null && _a !== void 0 ? _a : 0;
        const cost = clears >= 100 ? 0 : this.moneyReward * 2;
        if (cost === 0) {
            tooltip += 'Cost: Free!<br/>';
        }
        else {
            tooltip += `Cost: <img src="assets/images/currency/money.svg" height="18px"/> ${cost.toLocaleString('en-US')} per battle<br/>`;
        }
        tooltip += '<br/><span class="text-success">10 Clears - Unlock auto-gym</span><br/>';
        tooltip += `<span class="${(clears >= 100 ? 'text-success' : 'text-muted')}">100 Clears - Free auto-gym</span>`;
        GameConstants.GymAutoRepeatRewardTiers.slice(0, -1).reverse().forEach(([modifier, threshold]) => {
            tooltip += `<br/><span class="${(clears >= threshold ? 'text-success' : 'text-muted')}">${threshold.toLocaleString()}
                Clears - ${modifier.toLocaleString('en-US', { style: 'percent' })} reward</span>`;
        });
        if (clears < 250) {
            tooltip += '<br/><br/><i class="text-warning">You will not receive Pokédollars for clearing the gym.</i>';
        }
        return tooltip;
    }
}
class GymBattle extends Battle {
    static pokemonAttack() {
        if (GymRunner.running()) {
            super.pokemonAttack();
        }
    }
    static clickAttack() {
        if (GymRunner.running()) {
            super.clickAttack();
        }
    }
    /**
     * Award the player with exp, and go to the next pokemon
     */
    static defeatPokemon() {
        this.enemyPokemon().defeat(true);
        // Make gym "route" regionless
        App.game.breeding.progressEggsBattle(this.gym.badgeReward * 3 + 1, GameConstants.Region.none);
        this.index(this.index() + 1);
        if (this.index() >= this.gym.getPokemonList().length) {
            GymRunner.gymWon(this.gym);
        }
        else {
            this.generateNewEnemy();
        }
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
    }
    /**
     * Reset the counter.
     */
    static generateNewEnemy() {
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateGymPokemon(this.gym, this.index()));
    }
}
GymBattle.index = ko.observable(0);
GymBattle.totalPokemons = ko.observable(0);
GymBattle.pokemonsDefeatedComputable = ko.pureComputed(() => {
    return GymBattle.index();
});
GymBattle.pokemonsUndefeatedComputable = ko.pureComputed(() => {
    return GymBattle.totalPokemons() - GymBattle.index();
});
const GymList = {};
// Kanto Gyms
GymList['Pewter City'] = new Gym('Brock', 'Pewter City', [
    new GymPokemon('Geodude', 693, 12),
    new GymPokemon('Onix', 1399, 14),
], BadgeEnums.Boulder, 250, 'I took you for granted, and so I lost. As proof of your victory, I confer on you this... the official Pokémon League BoulderBadge.', [new RouteKillRequirement(10, GameConstants.Region.kanto, 2)]);
GymList['Cerulean City'] = new Gym('Misty', 'Cerulean City', [
    new GymPokemon('Staryu', 4000, 18),
    new GymPokemon('Starmie', 6800, 21),
], BadgeEnums.Cascade, 500, 'Wow! You\'re too much, all right! You can have the CascadeBadge to show that you beat me.', [new RouteKillRequirement(10, GameConstants.Region.kanto, 4)], () => {
    App.game.quests.getQuestLine('Team Rocket').beginQuest(0, undefined, true);
});
GymList['Vermilion City'] = new Gym('Lt. Surge', 'Vermilion City', [
    new GymPokemon('Voltorb', 10780, 21),
    new GymPokemon('Pikachu', 13540, 18),
    new GymPokemon('Raichu', 15675, 24),
], BadgeEnums.Thunder, 1000, 'Now that\'s a shocker! You\'re the real deal, kid! Fine, then, take the ThunderBadge!', [
    new TemporaryBattleRequirement('Blue 3'),
    new GymBadgeRequirement(BadgeEnums.Cascade),
]);
GymList['Celadon City'] = new Gym('Erika', 'Celadon City', [
    new GymPokemon('Victreebel', 38810, 29),
    new GymPokemon('Tangela', 30340, 24),
    new GymPokemon('Vileplume', 36400, 29),
], BadgeEnums.Rainbow, 1500, 'Oh! I concede defeat. You are remarkably strong. I must confer on you the RainbowBadge.', [new RouteKillRequirement(10, GameConstants.Region.kanto, 7)]);
GymList['Saffron City'] = new Gym('Sabrina', 'Saffron City', [
    new GymPokemon('Kadabra', 23040, 38),
    new GymPokemon('Mr. Mime', 25600, 37),
    new GymPokemon('Venomoth', 28400, 38),
    new GymPokemon('Alakazam', 35380, 43),
], BadgeEnums.Marsh, 2500, 'This loss shocks me! But a loss is a loss. I admit I didn\'t work hard enough to win. You earned the MarshBadge.', [new QuestLineStepCompletedRequirement('Team Rocket', 3)]);
GymList['Fuchsia City'] = new Gym('Koga', 'Fuchsia City', [
    new GymPokemon('Koffing', 30780, 37),
    new GymPokemon('Muk', 32460, 39),
    new GymPokemon('Koffing', 36430, 37),
    new GymPokemon('Weezing', 37430, 43),
], BadgeEnums.Soul, 3500, 'Humph! You have proven your worth! Here! Take the Soul Badge!', [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 18),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 15),
    ]),
], () => {
    App.game.keyItems.gainKeyItem(KeyItemType.Safari_ticket, true);
    App.game.quests.getQuestLine('Mining Expedition').beginQuest(0, undefined, true);
});
GymList['Cinnabar Island'] = new Gym('Blaine', 'Cinnabar Island', [
    new GymPokemon('Growlithe', 37430, 42),
    new GymPokemon('Ponyta', 42340, 40),
    new GymPokemon('Rapidash', 45230, 42),
    new GymPokemon('Arcanine', 50290, 47),
], BadgeEnums.Volcano, 5000, 'I have burned down to nothing! Not even ashes remain! You have earned the VolcanoBadge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokémon Mansion'))], () => {
    App.game.quests.getQuestLine('Bill\'s Errand').beginQuest(0, undefined, true);
});
GymList['Viridian City'] = new Gym('Giovanni', 'Viridian City', [
    new GymPokemon('Rhyhorn', 45230, 45),
    new GymPokemon('Dugtrio', 47530, 42),
    new GymPokemon('Nidoqueen', 48740, 44),
    new GymPokemon('Nidoking', 48350, 45),
    new GymPokemon('Rhyhorn', 55000, 50),
], BadgeEnums.Earth, 6000, 'Ha! That was a truly intense fight. You have won! As proof, here is the Earth Badge!', [
    new GymBadgeRequirement(BadgeEnums.Thunder),
    new GymBadgeRequirement(BadgeEnums.Rainbow),
    new GymBadgeRequirement(BadgeEnums.Marsh),
    new QuestLineCompletedRequirement('Bill\'s Errand'),
], () => {
    App.game.keyItems.gainKeyItem(KeyItemType.Gem_case, true);
    App.game.quests.getQuestLine('Persons of Interest').beginQuest(0, undefined, true);
}, undefined, { imageName: 'Team Rocket Boss Giovanni' });
// Kanto Elite 4
GymList['Elite Lorelei'] = new Gym('Lorelei', 'Elite Lorelei', [
    new GymPokemon('Dewgong', 45330, 52),
    new GymPokemon('Cloyster', 48300, 51),
    new GymPokemon('Slowbro', 52000, 52),
    new GymPokemon('Jynx', 57000, 54),
    new GymPokemon('Lapras', 60250, 54),
], BadgeEnums.Elite_Lorelei, 7500, '...Things shouldn\'t be this way!', [new GymBadgeRequirement(BadgeEnums.Earth)], undefined, undefined, { battleBackground: 'Ice' });
GymList['Elite Bruno'] = new Gym('Bruno', 'Elite Bruno', [
    new GymPokemon('Onix', 45330, 51),
    new GymPokemon('Hitmonchan', 48300, 53),
    new GymPokemon('Hitmonlee', 52000, 53),
    new GymPokemon('Onix', 57000, 54),
    new GymPokemon('Machamp', 60250, 56),
], BadgeEnums.Elite_Bruno, 7500, 'Why? How could I lose?', [new GymBadgeRequirement(BadgeEnums.Elite_Lorelei)], undefined, undefined, { battleBackground: 'Cave' });
GymList['Elite Agatha'] = new Gym('Agatha', 'Elite Agatha', [
    new GymPokemon('Gengar', 45330, 54),
    new GymPokemon('Golbat', 48300, 54),
    new GymPokemon('Haunter', 52000, 53),
    new GymPokemon('Arbok', 57000, 56),
    new GymPokemon('Gengar', 60250, 58),
], BadgeEnums.Elite_Agatha, 7500, 'Oh, my! You\'re something special, child!', [new GymBadgeRequirement(BadgeEnums.Elite_Bruno)], undefined, undefined, { battleBackground: 'Graveyard' });
GymList['Elite Lance'] = new Gym('Lance', 'Elite Lance', [
    new GymPokemon('Gyarados', 48300, 56),
    new GymPokemon('Dragonair', 52000, 54),
    new GymPokemon('Dragonair', 57000, 54),
    new GymPokemon('Aerodactyl', 60250, 58),
    new GymPokemon('Dragonite', 66000, 60),
], BadgeEnums.Elite_Lance, 7500, 'That\'s it! I hate to admit it, but you are a Pokémon master!', [new GymBadgeRequirement(BadgeEnums.Elite_Agatha)], undefined, undefined, { battleBackground: 'GemCave' });
// Kanto Champion
GymList['Champion Blue'] = new Gym('Blue', 'Champion Blue', [
    new GymPokemon('Pidgeot', 52340, 59),
    new GymPokemon('Alakazam', 56320, 57),
    new GymPokemon('Rhydon', 58340, 59),
    new GymPokemon('Exeggutor', 57520, 59, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Gyarados', 65340, 61, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Charizard', 70000, 63, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Arcanine', 57520, 59, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Exeggutor', 65340, 61, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Blastoise', 70000, 63, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Gyarados', 57520, 59, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Arcanine', 65340, 61, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Venusaur', 70000, 63, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Gyarados', 57520, 59, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
    new GymPokemon('Arcanine', 65340, 61, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
    new GymPokemon('Venusaur', 70000, 63, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
], BadgeEnums.Elite_KantoChampion, 10000, 'NO! That can\'t be! You beat me at my best! After all that work to become the League Champ? My reign is over already? It\'s not fair!', [new GymBadgeRequirement(BadgeEnums.Elite_Lance)], () => { }, { champion: true }, { battleBackground: 'GemCave' });
//Johto Gyms
GymList['Violet City'] = new Gym('Falkner', 'Violet City', [
    new GymPokemon('Pidgey', 108000, 7),
    new GymPokemon('Pidgeotto', 112000, 9),
], BadgeEnums.Zephyr, 500, '...Darn! My Dad\'s cherished bird Pokémon... All right. Take this. It\'s the official Pokémon League Zephyr Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sprout Tower'))]);
GymList['Azalea Town'] = new Gym('Bugsy', 'Azalea Town', [
    new GymPokemon('Metapod', 103000, 14),
    new GymPokemon('Kakuna', 101500, 14),
    new GymPokemon('Scyther', 119000, 16),
], BadgeEnums.Hive, 1000, 'Whoa, amazing! You\'re an expert on Pokémon! My research isn\'t complete yet. Ok, you win. Take this Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Slowpoke Well'))]);
GymList['Goldenrod City'] = new Gym('Whitney', 'Goldenrod City', [
    new GymPokemon('Clefairy', 130000, 18),
    new GymPokemon('Miltank', 170000, 20),
], BadgeEnums.Plain, 1500, '...Sniff... What? What do you want? A badge? Oh, right. I forgot. Here\'s the Plain Badge.', [new RouteKillRequirement(10, GameConstants.Region.johto, 34)]);
GymList['Ecruteak City'] = new Gym('Morty', 'Ecruteak City', [
    new GymPokemon('Gastly', 127000, 21),
    new GymPokemon('Haunter', 128000, 21),
    new GymPokemon('Gengar', 132000, 25),
    new GymPokemon('Haunter', 130000, 23),
], BadgeEnums.Fog, 2500, 'I\'m not good enough yet... All right. This Badge is yours.', [new GymBadgeRequirement(BadgeEnums.Plain)], () => {
    App.game.quests.getQuestLine('Team Rocket Again').beginQuest(0, undefined, true);
    App.game.quests.getQuestLine('The Sick Ampharos').beginQuest(0, undefined, true);
});
GymList['Cianwood City'] = new Gym('Chuck', 'Cianwood City', [
    new GymPokemon('Primeape', 177000, 27),
    new GymPokemon('Poliwrath', 183000, 30),
], BadgeEnums.Storm, 3500, 'Wha? Huh? I lost? How about that! You\'re worthy of the Storm Badge!', [new QuestLineStepCompletedRequirement('The Sick Ampharos', 2)]);
GymList['Olivine City'] = new Gym('Jasmine', 'Olivine City', [
    new GymPokemon('Magnemite', 177000, 30),
    new GymPokemon('Magnemite', 178000, 30),
    new GymPokemon('Steelix', 182000, 35),
], BadgeEnums.Mineral, 4000, '...You are a better trainer than me, in both skill and kindness. In accordance with League rules, I confer upon you this Badge.', [new QuestLineCompletedRequirement('The Sick Ampharos')]);
GymList['Mahogany Town'] = new Gym('Pryce', 'Mahogany Town', [
    new GymPokemon('Seel', 190000, 27),
    new GymPokemon('Dewgong', 192500, 29),
    new GymPokemon('Piloswine', 196000, 31),
], BadgeEnums.Glacier, 5000, 'Ah, I am impressed by your prowess. With your strong will, I know you will overcome all life\'s obstacles. You are worthy of this Badge!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Rocket\'s Hideout'))]);
GymList['Blackthorn City'] = new Gym('Clair', 'Blackthorn City', [
    new GymPokemon('Dragonair', 205000, 37),
    new GymPokemon('Dragonair', 205000, 37),
    new GymPokemon('Dragonair', 218000, 37),
    new GymPokemon('Kingdra', 220000, 40),
], BadgeEnums.Rising, 7500, 'Here, this is the Rising Badge... Hurry up! Take it!', [new GymBadgeRequirement(BadgeEnums.Glacier)]);
//Johto Elite 4
GymList['Elite Will'] = new Gym('Will', 'Elite Will', [
    new GymPokemon('Xatu', 245330, 40),
    new GymPokemon('Exeggutor', 248300, 41),
    new GymPokemon('Slowbro', 252000, 41),
    new GymPokemon('Jynx', 257000, 41),
    new GymPokemon('Xatu', 260250, 42),
], BadgeEnums.Elite_Will, 10000, 'Even though I was defeated, I won\'t change my course. I will continue battling until I stand above all Trainers! Now move on and experience the true ferocity of the Elite Four.', [new TemporaryBattleRequirement('Silver 5')]);
GymList['Elite Koga'] = new Gym('Koga2', 'Elite Koga', [
    new GymPokemon('Ariados', 245330, 40),
    new GymPokemon('Venomoth', 248300, 41),
    new GymPokemon('Forretress', 252000, 43),
    new GymPokemon('Muk', 257000, 42),
    new GymPokemon('Crobat', 260250, 44),
], BadgeEnums.Elite_Koga, 10000, 'I subjected you to everything I could muster. But my efforts failed. I must hone my skills. Go on to the next room, and put your abilities to the test!', [new GymBadgeRequirement(BadgeEnums.Elite_Will)], undefined, undefined, { displayName: 'Elite Koga' });
GymList['Elite Bruno2'] = new Gym('Bruno2', 'Elite Bruno2', [
    new GymPokemon('Hitmontop', 245330, 42),
    new GymPokemon('Hitmonlee', 248300, 42),
    new GymPokemon('Hitmonchan', 252000, 42),
    new GymPokemon('Onix', 257000, 43),
    new GymPokemon('Machamp', 260250, 46),
], BadgeEnums.Elite_Bruno2, 10000, 'Having lost, I have no right to say anything… Go face your next challenge!', [new GymBadgeRequirement(BadgeEnums.Elite_Koga)], undefined, undefined, { displayName: 'Elite Bruno' });
GymList['Elite Karen'] = new Gym('Karen', 'Elite Karen', [
    new GymPokemon('Umbreon', 248300, 42),
    new GymPokemon('Vileplume', 252000, 42),
    new GymPokemon('Murkrow', 257000, 44),
    new GymPokemon('Gengar', 260250, 45),
    new GymPokemon('Houndoom', 266000, 47),
], BadgeEnums.Elite_Karen, 10000, 'Strong Pokémon. Weak Pokémon. That is only the selfish perception of people. Truly skilled Trainers should try to win with the Pokémon they love best. I like your style. You understand what\'s important. Go on — — the Champion is waiting.', [new GymBadgeRequirement(BadgeEnums.Elite_Bruno2)]);
// Johto Champion
GymList['Champion Lance'] = new Gym('Lance2', 'Champion Lance', [
    new GymPokemon('Gyarados', 258300, 44),
    new GymPokemon('Dragonite', 262000, 47),
    new GymPokemon('Charizard', 264000, 46),
    new GymPokemon('Aerodactyl', 260250, 46),
    new GymPokemon('Dragonite', 270000, 47),
    new GymPokemon('Dragonite', 270000, 50),
], BadgeEnums.Elite_JohtoChampion, 13000, '…It\'s over. But it\'s an odd feeling. I\'m not angry that I lost. In fact, I feel happy. Happy that I witnessed the rise of a great new Champion!', [new GymBadgeRequirement(BadgeEnums.Elite_Karen)], () => { }, { champion: true });
// Hoenn Gyms
GymList['Rustboro City'] = new Gym('Roxanne', 'Rustboro City', [
    new GymPokemon('Geodude', 382900, 12),
    new GymPokemon('Geodude', 382900, 12),
    new GymPokemon('Nosepass', 410200, 15),
], BadgeEnums.Stone, 1000, 'So… I lost… It seems that I still have much more to learn… I understand. The Pokémon League\'s rules state that Trainers are to be given this if they defeat a Gym Leader. Please accept the official Pokémon League Stone Badge.', [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)]);
GymList['Dewford Town'] = new Gym('Brawly', 'Dewford Town', [
    new GymPokemon('Machop', 424000, 16),
    new GymPokemon('Meditite', 424000, 16),
    new GymPokemon('Makuhita', 444000, 19),
], BadgeEnums.Knuckle, 2000, 'Whoah, wow! You made a much bigger splash than I expected! You swamped me! Okay, you\'ve got me. Take this Gym Badge!', [new TemporaryBattleRequirement('May 2')]);
GymList['Mauville City'] = new Gym('Wattson', 'Mauville City', [
    new GymPokemon('Voltorb', 452000, 20),
    new GymPokemon('Electrike', 448000, 20),
    new GymPokemon('Magneton', 483000, 22),
    new GymPokemon('Manectric', 448000, 24),
], BadgeEnums.Dynamo, 3000, 'Wahahahah! Fine, I lost! You ended up giving me a thrill! Take this Badge!', [new TemporaryBattleRequirement('Wally 1')], () => {
    App.game.quests.getQuestLine('Land vs. Water').beginQuest(0, undefined, true);
});
GymList['Lavaridge Town'] = new Gym('Flannery', 'Lavaridge Town', [
    new GymPokemon('Numel', 472000, 24),
    new GymPokemon('Slugma', 472000, 24),
    new GymPokemon('Camerupt', 492000, 26),
    new GymPokemon('Torkoal', 524000, 29),
], BadgeEnums.Heat, 4000, 'Oh... I guess I was trying too hard... I... I\'ve only recently become a Gym Leader. I tried too hard to be someone I\'m not. I have to do things my natural way. If I don\'t, my Pokémon will be confused. Thanks for teaching me that. For that, you deserve this.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Jagged Pass'))]);
GymList['Petalburg City'] = new Gym('Norman', 'Petalburg City', [
    new GymPokemon('Spinda', 490000, 27),
    new GymPokemon('Vigoroth', 530000, 27),
    new GymPokemon('Linoone', 560000, 29),
    new GymPokemon('Slaking', 596000, 31),
], BadgeEnums.Balance, 5000, '… I… I can\'t… I can\'t believe it. I lost to you? But, rules are rules! Here, take this.', [
    new GymBadgeRequirement(BadgeEnums.Knuckle),
    new GymBadgeRequirement(BadgeEnums.Heat),
]);
GymList['Fortree City'] = new Gym('Winona', 'Fortree City', [
    new GymPokemon('Swablu', 605000, 29),
    new GymPokemon('Tropius', 650000, 29),
    new GymPokemon('Pelipper', 630000, 30),
    new GymPokemon('Skarmory', 667000, 31),
    new GymPokemon('Altaria', 669000, 33),
], BadgeEnums.Feather, 6000, 'Never before have I seen a Trainer command Pokémon with more grace than I... In recognition of your prowess, I present to you this Gym Badge.', [new TemporaryBattleRequirement('Kecleon 1')]);
GymList['Mossdeep City'] = new Gym('Tate & Liza', 'Mossdeep City', [
    new GymPokemon('Claydol', 702000, 41),
    new GymPokemon('Xatu', 703000, 41),
    new GymPokemon('Lunatone', 702000, 42),
    new GymPokemon('Solrock', 703000, 42),
], BadgeEnums.Mind, 8000, 'What? Our combination... was shattered! It can\'t be helped. You\'ve won... So, in recognition, take this Gym Badge.', [new RouteKillRequirement(10, GameConstants.Region.hoenn, 125)]);
GymList['Sootopolis City'] = new Gym('Juan', 'Sootopolis City', [
    new GymPokemon('Luvdisc', 798000, 41),
    new GymPokemon('Whiscash', 813000, 41),
    new GymPokemon('Sealeo', 823400, 43),
    new GymPokemon('Crawdaunt', 842000, 43),
    new GymPokemon('Kingdra', 865000, 46),
], BadgeEnums.Rain, 10000, 'Ahahaha, excellent! Very well, you are the winner. From you, I sense the brilliant shine of skill that will overcome all. However, compared with me or even Wallace, you are lacking in elegance. Perhaps I should make you a loan of my outfit? ... Hahaha, I merely jest! Rather than my clothes, I shall reward you with this, the Rain Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sky Pillar'))]);
// Hoenn Elite 4
GymList['Elite Sidney'] = new Gym('Sidney', 'Elite Sidney', [
    new GymPokemon('Mightyena', 972000, 46),
    new GymPokemon('Shiftry', 980000, 48),
    new GymPokemon('Cacturne', 1002000, 46),
    new GymPokemon('Crawdaunt', 1015000, 48),
    new GymPokemon('Absol', 1020000, 49),
], BadgeEnums.Elite_Sidney, 15000, 'Well, listen to what this loser has to say. You\'ve got what it takes to go far. Now, go on to the next room and enjoy your next battle!', [
    new GymBadgeRequirement(BadgeEnums.Feather),
    new TemporaryBattleRequirement('Wally 2'),
]);
GymList['Elite Phoebe'] = new Gym('Phoebe', 'Elite Phoebe', [
    new GymPokemon('Dusclops', 1036700, 48),
    new GymPokemon('Banette', 1038000, 49),
    new GymPokemon('Sableye', 1052000, 50),
    new GymPokemon('Banette', 1038000, 49),
    new GymPokemon('Dusclops', 1063000, 51),
], BadgeEnums.Elite_Phoebe, 15000, 'There\'s a definite bond between you and your Pokémon, too. I didn\'t recognize it, so it\'s only natural that I lost. Yup, I\'d like to see how far your bond will carry you. Go ahead, move to the next room.', [new GymBadgeRequirement(BadgeEnums.Elite_Sidney)]);
GymList['Elite Glacia'] = new Gym('Glacia', 'Elite Glacia', [
    new GymPokemon('Sealeo', 1082000, 50),
    new GymPokemon('Glalie', 1072000, 50),
    new GymPokemon('Sealeo', 1086000, 52),
    new GymPokemon('Glalie', 1076000, 52),
    new GymPokemon('Walrein', 1100000, 53),
], BadgeEnums.Elite_Glacia, 15000, 'Advance to the next room. And there, confirm the truly fearsome side of the Pokémon League.', [new GymBadgeRequirement(BadgeEnums.Elite_Phoebe)]);
GymList['Elite Drake'] = new Gym('Drake', 'Elite Drake', [
    new GymPokemon('Shelgon', 1064000, 52),
    new GymPokemon('Altaria', 1072000, 54),
    new GymPokemon('Kingdra', 1076000, 53),
    new GymPokemon('Flygon', 1076000, 53),
    new GymPokemon('Salamence', 1157000, 55),
], BadgeEnums.Elite_Drake, 15000, 'You deserve every credit for coming this far as a Trainer of Pokémon. You do seem to know what is needed. Yes, what a Trainer needs is a virtuous heart. Pokémon touch the good hearts of Trainers and learn good from wrong. They touch the good hearts of Trainers and grow strong. Go! Go onwards! The Champion is waiting!', [new GymBadgeRequirement(BadgeEnums.Elite_Glacia)]);
// Hoenn Champion
GymList['Champion Wallace'] = new Gym('Wallace', 'Champion Wallace', [
    new GymPokemon('Wailord', 1202000, 57),
    new GymPokemon('Tentacruel', 1164000, 55),
    new GymPokemon('Ludicolo', 1184000, 56),
    new GymPokemon('Whiscash', 1172000, 56),
    new GymPokemon('Gyarados', 1163000, 56),
    new GymPokemon('Milotic', 1182000, 58),
], BadgeEnums.Elite_HoennChampion, 16000, 'I, the Champion, fall in defeat… That was wonderful work. You were elegant, infuriatingly so. And yet it was utterly glorious! Kudos to you! You are a truly noble Pokémon Trainer!', [new GymBadgeRequirement(BadgeEnums.Elite_Drake)], () => { }, { champion: true });
// Orange league gyms
GymList['Mikan Island'] = new Gym('Cissy', 'Mikan Island', [
    new GymPokemon('Seadra', 2307500, 24),
    new GymPokemon('Blastoise', 2307500, 24),
], BadgeEnums['Coral-Eye'], 10000, 'I can see why you made it so far in the Indigo League, and I bet you\'ll do pretty well in the Orange League.\n' +
    'This is the Coral-Eye Badge of the Mikan Gym, to prove that you won your match!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tanoby Ruins'))]);
GymList['Navel Island'] = new Gym('Danny', 'Navel Island', [
    new GymPokemon('Geodude', 923000, 24),
    new GymPokemon('Nidoqueen', 923000, 24),
    new GymPokemon('Machoke', 923000, 24),
    new GymPokemon('Scyther', 923000, 24),
    new GymPokemon('Electrode', 923000, 24),
], BadgeEnums.Sea_Ruby, 10000, 'You and the others were great.\nNow I\'d like to give you and your fellow challengers something you really deserve. The Sea Ruby badge. It\'s yours.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lost Cave'))]);
GymList['Trovita Island'] = new Gym('Rudy', 'Trovita Island', [
    new GymPokemon('Electabuzz', 1538333, 24),
    new GymPokemon('Exeggutor', 1538333, 24),
    new GymPokemon('Starmie', 1538333, 24),
], BadgeEnums.Spike_Shell, 10000, 'Nice job, guys. Here are your Spike Shell badges, guys.', [new RouteKillRequirement(10, GameConstants.Region.kanto, 41)]);
GymList['Kumquat Island'] = new Gym('Luana', 'Kumquat Island', [
    new GymPokemon('Alakazam', 2307500, 24),
    new GymPokemon('Marowak', 2307500, 24),
], BadgeEnums.Jade_Star, 10000, 'You did a fine job.\nAnd now, as Kumquat Island gym leader, and a member of the Orange Crew, I happily present this token of your victory.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Icefall Cave'))]);
// Orange league champion
GymList['Supreme Gym Leader Drake'] = new Gym('Supreme Gym Leader Drake', 'Supreme Gym Leader Drake', [
    new GymPokemon('Ditto', 899520, 38),
    new GymPokemon('Onix', 899520, 39),
    new GymPokemon('Gengar', 899520, 40),
    new GymPokemon('Venusaur', 899520, 40),
    new GymPokemon('Electabuzz', 899520, 41),
    new GymPokemon('Dragonite', 1124400, 37),
], BadgeEnums.Elite_OrangeChampion, 12000, 'You really deserve that trophy. You\'re a great Pokémon trainer.', [
    new GymBadgeRequirement(BadgeEnums['Coral-Eye']),
    new GymBadgeRequirement(BadgeEnums.Sea_Ruby),
    new GymBadgeRequirement(BadgeEnums.Spike_Shell),
    new GymBadgeRequirement(BadgeEnums.Jade_Star),
]);
// Orre Gyms
GymList['Cipher Admin Ein'] = new Gym('Cipher Admin Ein', 'Cipher Admin Ein', [
    new GymPokemon('Crobat', 12099520, 48),
    new GymPokemon('Pelipper', 12099520, 49),
    new GymPokemon('Rhydon', 12099520, 50),
    new GymPokemon('Starmie', 12099520, 49),
    new GymPokemon('Manectric', 12099520, 50),
], BadgeEnums.Elite_F_Disk, 12000, 'Urrrgh… What unbelievable power…', [new QuestLineCompletedRequirement('Shadows in the Desert')], undefined, undefined, { displayName: 'Challenge Ein' });
GymList['Cipher Admin Miror B.'] = new Gym('Cipher Admin Miror B', 'Cipher Admin Miror B.', [
    new GymPokemon('Ludicolo', 11599520, 44),
    new GymPokemon('Ludicolo', 11599520, 45),
    new GymPokemon('Loudred', 11599520, 46),
    new GymPokemon('Golduck', 11599520, 45),
    new GymPokemon('Armaldo', 11599520, 43),
], BadgeEnums.Elite_L_Disk, 12000, 'I\'m an awesome dancer… But I can\'t win in battles!', [new QuestLineCompletedRequirement('Shadows in the Desert')], undefined, undefined, { displayName: 'Challenge Miror B.' });
GymList['Cipher Admin Dakim'] = new Gym('Cipher Admin Dakim', 'Cipher Admin Dakim', [
    new GymPokemon('Claydol', 11999520, 46),
    new GymPokemon('Forretress', 11999520, 45),
    new GymPokemon('Flygon', 11999520, 46),
    new GymPokemon('Whiscash', 11999520, 46),
    new GymPokemon('Houndoom', 11999520, 47),
], BadgeEnums.Elite_R_Disk, 12000, 'This can\'t be! The mighty Dakim loses again?', [new QuestLineCompletedRequirement('Shadows in the Desert')], undefined, undefined, { displayName: 'Challenge Dakim' });
GymList['Cipher Admin Venus'] = new Gym('Cipher Admin Venus', 'Cipher Admin Venus', [
    new GymPokemon('Bellossom', 12299520, 47),
    new GymPokemon('Misdreavus', 12299520, 47),
    new GymPokemon('Raichu', 12299520, 48),
    new GymPokemon('Wigglytuff', 12299520, 48),
    new GymPokemon('Milotic', 12299520, 48),
], BadgeEnums.Elite_U_Disk, 12000, 'I shall forget that I ever battled with you. Yes, that\'s what I\'ll do. Ohohohoh!', [new QuestLineCompletedRequirement('Shadows in the Desert')], undefined, undefined, { displayName: 'Challenge Venus' });
GymList['Cipher Admin Lovrina'] = new Gym(//Kalos E4 difficulty, plus 10% per Orre Colosseum boss
'Cipher Admin Lovrina', 'Cipher Admin Lovrina', [
    new GymPokemon('Shuckle', 30994948, 100),
    new GymPokemon('Milotic', 30994948, 100),
    new GymPokemon('Wobbuffet', 30994948, 100),
    new GymPokemon('Blissey', 30994948, 100),
    new GymPokemon('Misdreavus', 30994948, 100),
    new GymPokemon('Meganium', 30994948, 100),
], BadgeEnums.Elite_ColosseumLovrina, 65000, 'I was so impressed by your toughness! Because you are so tough, I\'ll let you be the first member in my fan club! Doesn\'t that so make your day?', [new QuestLineCompletedRequirement('Gale of Darkness')], undefined, undefined, { displayName: 'Challenge Lovrina' });
GymList['Cipher Admin Snattle'] = new Gym('Cipher Admin Snattle', 'Cipher Admin Snattle', [
    new GymPokemon('Electrode', 34094443, 100),
    new GymPokemon('Gengar', 34094443, 100),
    new GymPokemon('Muk', 34094443, 100),
    new GymPokemon('Glalie', 34094443, 100),
    new GymPokemon('Regirock', 34094443, 100),
    new GymPokemon('Regice', 34094443, 100),
], BadgeEnums.Elite_ColosseumSnattle, 70000, 'In the near future, when I become the Governor of Orre, I shall appoint you as my official secretary. Let that be a motivation for you to constantly better your skills!', [new GymBadgeRequirement(BadgeEnums.Elite_ColosseumLovrina)], undefined, undefined, { displayName: 'Challenge Snattle' });
GymList['Cipher Admin Gorigan'] = new Gym('Cipher Admin Gorigan', 'Cipher Admin Gorigan', [
    new GymPokemon('Salamence', 37503887, 100),
    new GymPokemon('Granbull', 37503887, 100),
    new GymPokemon('Arcanine', 37503887, 100),
    new GymPokemon('Tauros', 37503887, 100),
    new GymPokemon('Hitmontop', 37503887, 100),
    new GymPokemon('Gyarados', 37503887, 100),
], BadgeEnums.Elite_ColosseumGorigan, 85000, 'You\'re some kind of special! You\'re worthy of sharing my camaraderie as a friend.', [new GymBadgeRequirement(BadgeEnums.Elite_ColosseumSnattle)], undefined, undefined, { displayName: 'Challenge Gorigan' });
GymList['Cipher Admin Ardos'] = new Gym('Cipher Admin Ardos', 'Cipher Admin Ardos', [
    new GymPokemon('Sceptile', 41254276, 100),
    new GymPokemon('Charizard', 41254276, 100),
    new GymPokemon('Gengar', 41254276, 100),
    new GymPokemon('Aerodactyl', 41254276, 100),
    new GymPokemon('Tauros', 41254276, 100),
    new GymPokemon('Starmie', 41254276, 100),
], BadgeEnums.Elite_ColosseumArdos, 100000, 'In all of Orre, I\'ve never seen a Pokémon Trainer of your caliber. You appear to be the biggest threat to Cipher. To make sure my underlings watch you with caution, I give you the title “Cipher\'s Biggest Enemy.”', [new GymBadgeRequirement(BadgeEnums.Elite_ColosseumGorigan)], undefined, undefined, { displayName: 'Challenge Ardos' });
GymList['Cipher Admin Eldes'] = new Gym('Cipher Admin Eldes', 'Cipher Admin Eldes', [
    new GymPokemon('Latios', 45379704, 100),
    new GymPokemon('Latias', 45379704, 100),
    new GymPokemon('Gengar', 45379704, 100),
    new GymPokemon('Metagross', 45379704, 100),
    new GymPokemon('Snorlax', 45379704, 100),
    new GymPokemon('Tauros', 45379704, 100),
], BadgeEnums.Elite_ColosseumEldes, 128000, 'I\'m satisfied that I was able to battle to my heart\'s content. I would like to confer on you the title “Eldes\'s Top Rival.”', [new GymBadgeRequirement(BadgeEnums.Elite_ColosseumArdos)], undefined, undefined, { displayName: 'Challenge Eldes' });
//Sinnoh Gyms
GymList['Oreburgh City'] = new Gym('Roark', 'Oreburgh City', [
    new GymPokemon('Geodude', 1338000, 12),
    new GymPokemon('Onix', 1342000, 12),
    new GymPokemon('Cranidos', 1342000, 14),
], BadgeEnums.Coal, 250, 'This is embarrassing... I went and lost to a Trainer who didn\'t have a single Gym Badge... But that\'s tough. You were strong, and I was weak. That\'s all there is. According to Pokémon League rules, I have to give you our Gym Badge since you\'ve beaten me, the Leader. Heres your official Pokémon League Coal Badge.', [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)], () => {
    App.game.quests.getQuestLine('A New World').beginQuest(0, undefined, true);
});
GymList['Eterna City'] = new Gym('Gardenia', 'Eterna City', [
    new GymPokemon('Turtwig', 1433000, 20),
    new GymPokemon('Cherrim (Overcast)', 1437500, 20),
    new GymPokemon('Roserade', 1439000, 22),
], BadgeEnums.Forest, 400, 'I might\'ve said it before, but you\'re really tough! Wasn\'t it hard for you to raise your Pokémon to be so good? I guess that\'s a measure of how much you love your Pokémon. In recognition of that, I proudly grant you this!"', [new GymBadgeRequirement(BadgeEnums.Coal)]);
GymList['Hearthome City'] = new Gym('Fantina', 'Hearthome City', [
    new GymPokemon('Duskull', 1450000, 24),
    new GymPokemon('Haunter', 1480000, 24),
    new GymPokemon('Mismagius', 1480000, 26),
], BadgeEnums.Relic, 740, 'I am dumbfounded! So very, very strong! You, your Pokémon, so strong! Your power is admirable! I shall honor it with this Gym Badge!"', [new GymBadgeRequirement(BadgeEnums.Forest)]);
GymList['Veilstone City'] = new Gym('Maylene', 'Veilstone City', [
    new GymPokemon('Meditite', 1537000, 28),
    new GymPokemon('Machoke', 1538000, 29),
    new GymPokemon('Lucario', 1540000, 32),
], BadgeEnums.Cobble, 1200, '...OK. You win. That was a tough loss. I learned a lot from it. Please, accept this Gym Badge.', [new GymBadgeRequirement(BadgeEnums.Relic)]);
GymList['Pastoria City'] = new Gym('Crasher Wake', 'Pastoria City', [
    new GymPokemon('Gyarados', 1687000, 33),
    new GymPokemon('Quagsire', 1693000, 34),
    new GymPokemon('Floatzel', 1693000, 37),
], BadgeEnums.Fen, 2500, 'It seems the undertow pulled me under... But I had a great time battling with you! You\'ve earned this!', [new TemporaryBattleRequirement('Barry 4')]);
GymList['Canalave City'] = new Gym('Byron', 'Canalave City', [
    new GymPokemon('Magneton', 1767000, 37),
    new GymPokemon('Steelix', 1772000, 38),
    new GymPokemon('Bastiodon', 1768000, 41),
], BadgeEnums.Mine, 4800, 'You were strong enough to take down my prized team of Pokémon. In recognition of that power, I give you this: the Mine Badge!', [new TemporaryBattleRequirement('Barry 5')]);
GymList['Snowpoint City'] = new Gym('Candice', 'Snowpoint City', [
    new GymPokemon('Sneasel', 1872500, 40),
    new GymPokemon('Piloswine', 1876000, 40),
    new GymPokemon('Abomasnow', 1870000, 42),
    new GymPokemon('Froslass', 1870000, 44),
], BadgeEnums.Icicle, 8000, 'Wow! You\'re great! You\'ve earned my respect! I think your focus and will bowled us over totally. Oh, that\'s right! I\'m supposed to give you this!', [new GymBadgeRequirement(BadgeEnums.Mine)]);
GymList['Sunyshore City'] = new Gym('Volkner', 'Sunyshore City', [
    new GymPokemon('Jolteon', 1965000, 46),
    new GymPokemon('Raichu', 1965000, 46),
    new GymPokemon('Luxray', 1978000, 48),
    new GymPokemon('Electivire', 1980000, 50),
], BadgeEnums.Beacon, 12000, '...Hehehe. Hahahah! ...That was the most fun I\'ve had in a battle since...I don\'t know when! It\'s also made me excited to know you and your team will keep battling to greater heights! This is your eighth Gym Badge. You\'ve earned this!', [new GymBadgeRequirement(BadgeEnums.Icicle)]);
//Sinnoh Elite 4
GymList['Elite Aaron'] = new Gym('Aaron', 'Elite Aaron', [
    new GymPokemon('Yanmega', 2545330, 49),
    new GymPokemon('Scizor', 2548300, 49),
    new GymPokemon('Vespiquen', 2552000, 50),
    new GymPokemon('Heracross', 2557000, 51),
    new GymPokemon('Drapion', 2560250, 53),
], BadgeEnums.Elite_Aaron, 18000, 'I lost with the most beautiful and toughest of the bug Pokémon... We lost because I wasn\'t good enough... That\'s it! Back to training camp! Let\'s hear it for me! No... That was wrong... Anyway... Go on to the next room! Three Trainers are waiting for you. They are all tougher than me.', [new TemporaryBattleRequirement('Barry 6')]);
GymList['Elite Bertha'] = new Gym('Bertha', 'Elite Bertha', [
    new GymPokemon('Whiscash', 2645330, 50),
    new GymPokemon('Gliscor', 2648300, 53),
    new GymPokemon('Hippowdon', 2652000, 52),
    new GymPokemon('Golem', 2657000, 52),
    new GymPokemon('Rhyperior', 2660250, 55),
], BadgeEnums.Elite_Bertha, 18000, 'You\'re quite something, youngster. I like how you and your Pokémon earned the win by working as one. That\'s what makes you so strong. Ahahaha! I think that you can go as far as you want.', [new GymBadgeRequirement(BadgeEnums.Elite_Aaron)]);
GymList['Elite Flint'] = new Gym('Flint', 'Elite Flint', [
    new GymPokemon('Houndoom', 2845330, 52),
    new GymPokemon('Flareon', 2848300, 55),
    new GymPokemon('Rapidash', 2852000, 53),
    new GymPokemon('Infernape', 2857000, 55),
    new GymPokemon('Magmortar', 2860250, 57),
], BadgeEnums.Elite_Flint, 18000, '.........Keep going...I know your spirit burns hot. Your whole team does.', [new GymBadgeRequirement(BadgeEnums.Elite_Bertha)]);
GymList['Elite Lucian'] = new Gym('Lucian', 'Elite Lucian', [
    new GymPokemon('Mr. Mime', 3048300, 53),
    new GymPokemon('Espeon', 3052000, 55),
    new GymPokemon('Bronzong', 3057000, 54),
    new GymPokemon('Alakazam', 3060250, 56),
    new GymPokemon('Gallade', 3066000, 59),
], BadgeEnums.Elite_Lucian, 18000, 'Congratulations. You have beaten the Elite Four. However, that doesn\'t mean you\'re done with the Pokémon league. There remains the Champion. I should warn you—the Champion is far stronger than the Elite Four. Now, go on. Step through the doorway to your final battle.', [new GymBadgeRequirement(BadgeEnums.Elite_Flint)]);
// Sinnoh Champion
GymList['Champion Cynthia'] = new Gym('Cynthia', 'Champion Cynthia', [
    new GymPokemon('Spiritomb', 3458300, 58),
    new GymPokemon('Roserade', 3462000, 58),
    new GymPokemon('Togekiss', 3464000, 60),
    new GymPokemon('Lucario', 3460250, 60),
    new GymPokemon('Milotic', 3470000, 58),
    new GymPokemon('Garchomp', 3570000, 62),
], BadgeEnums.Elite_SinnohChampion, 32000, 'That was excellent. Truly, an outstanding battle. You gave the support your Pokémon needed to maximize their power. And you guided them with certainty to secure victory. You have both passion and calculating coolness. Together, you and your Pokémon can overcome any challenge that may come your way. Those are the impressions I got from our battle. I\'m glad I got to take part in the crowning of Sinnoh\'s new Champion!', [new GymBadgeRequirement(BadgeEnums.Elite_Lucian)], () => { }, { champion: true });
//Unova Gyms
GymList['Aspertia City'] = new Gym('Cheren', 'Aspertia City', [
    new GymPokemon('Patrat', 3458300, 12),
    new GymPokemon('Pidove', 3462000, 12),
    new GymPokemon('Lillipup', 3464000, 14),
], BadgeEnums.Basic, 500, 'That battle has made me feel really glad you were my first challenger as a Gym Leader… I give you this in honor of the strength you and your Pokémon showed!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Floccesy Ranch'))]);
GymList['Virbank City'] = new Gym('Roxie', 'Virbank City', [
    new GymPokemon('Koffing', 3658300, 17),
    new GymPokemon('Grimer', 3662000, 17),
    new GymPokemon('Whirlipede', 3664000, 19),
], BadgeEnums.Toxic, 800, 'Sigh! What are you doing losing, Roxie?! Well…I guess that means you\'re strong! This stinks, but I gave it everything I had, and I feel revitalized and refreshed now! Here! Proof that you beat me!', [new GymBadgeRequirement(BadgeEnums.Basic)], () => {
    App.game.quests.getQuestLine('Hollow Truth and Ideals').beginQuest(0, undefined, true);
});
GymList['Castelia City'] = new Gym('Burgh', 'Castelia City', [
    new GymPokemon('Dwebble', 3858300, 24),
    new GymPokemon('Shelmet', 3862000, 24),
    new GymPokemon('Karrablast', 3964000, 24),
    new GymPokemon('Leavanny', 4064000, 26),
], BadgeEnums.Insect, 1500, 'Oh hoo… You are very strong indeed! I guess it\'s no surprise I lost. Here! Take this Insect Badge! I think it\'ll suit you!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Castelia Sewers'))]);
GymList['Nimbasa City'] = new Gym('Elesa', 'Nimbasa City', [
    new GymPokemon('Emolga', 4258300, 30),
    new GymPokemon('Flaaffy', 4262000, 30),
    new GymPokemon('Joltik', 4464000, 30),
    new GymPokemon('Zebstrika', 4464000, 32),
], BadgeEnums.Bolt, 2600, 'Well… Now you… you\'re an even more wonderful Trainer than I expected. Your sweet fighting style swept me off my feet! Take this!', [new GymBadgeRequirement(BadgeEnums.Insect)]);
GymList['Driftveil City'] = new Gym('Clay', 'Driftveil City', [
    new GymPokemon('Krokorok', 4658300, 34),
    new GymPokemon('Sandslash', 4662000, 34),
    new GymPokemon('Onix', 4864000, 34),
    new GymPokemon('Excadrill', 5064000, 36),
], BadgeEnums.Quake, 4800, 'Phew… You\'re really somethin\'! Li\'l whippersnapper Trainers who pack a real punch keep showin\' up one after another. Mrmph. Here! Take this!', [new GymBadgeRequirement(BadgeEnums.Bolt)]);
GymList['Mistralton City'] = new Gym('Skyla', 'Mistralton City', [
    new GymPokemon('Swoobat', 5458300, 40),
    new GymPokemon('Skarmory', 6062000, 40),
    new GymPokemon('Sigilyph', 5664000, 40),
    new GymPokemon('Swanna', 5864000, 42),
], BadgeEnums.Jet, 7600, 'You\'re an amazing Pokémon Trainer. My Pokémon and I are happy because for the first time in quite a while--about two years, I\'d say--we could fight with our full strength. This is an official League Gym Badge. But this is just a stepping-stone.', [new GymBadgeRequirement(BadgeEnums.Quake)]);
GymList['Opelucid City'] = new Gym('Drayden', 'Opelucid City', [
    new GymPokemon('Druddigon', 6558300, 50),
    new GymPokemon('Flygon', 6662000, 50),
    new GymPokemon('Altaria', 6464000, 50),
    new GymPokemon('Haxorus', 6964000, 52),
], BadgeEnums.Legend, 14000, 'Wonderful. I\'m grateful that we had a chance to meet and battle. It reminded me that Pokémon battles are about working with others to meet our challenges together.', [new GymBadgeRequirement(BadgeEnums.Jet)]);
GymList['Humilau City'] = new Gym('Marlon', 'Humilau City', [
    new GymPokemon('Wailord', 7458300, 53),
    new GymPokemon('Mantine', 7262000, 53),
    new GymPokemon('Carracosta', 7064000, 53),
    new GymPokemon('Jellicent', 7464000, 55),
], BadgeEnums.Wave, 27000, 'You don\'t just look strong, you\'re strong fo\' reals! Eh, I was swept away, too! Oh yeah, yo. I was so surprised that I forgot! I gotta give this to you!', [new GymBadgeRequirement(BadgeEnums.Legend)]);
//Unova Elite 4
GymList['Elite Shauntal'] = new Gym('Shauntal', 'Elite Shauntal', [
    new GymPokemon('Cofagrigus', 10957000, 60),
    new GymPokemon('Drifblim', 10957000, 60),
    new GymPokemon('Golurk', 10957000, 60),
    new GymPokemon('Banette', 10957000, 60),
    new GymPokemon('Chandelure', 11960250, 62),
], BadgeEnums.Elite_Shauntal, 32000, 'My Pokémon and the challenger\'s Pokémon. Everyone battled even though they were hurt... Thank you.', [new GymBadgeRequirement(BadgeEnums.Wave)]);
GymList['Elite Marshal'] = new Gym('Marshal', 'Elite Marshal', [
    new GymPokemon('Throh', 10957000, 60),
    new GymPokemon('Sawk', 10957000, 60),
    new GymPokemon('Mienshao', 10957000, 60),
    new GymPokemon('Lucario', 10957000, 60),
    new GymPokemon('Conkeldurr', 11960250, 62),
], BadgeEnums.Elite_Marshal, 32000, 'Whew! Well done! As your battles continue, aim for even greater heights!', [new GymBadgeRequirement(BadgeEnums.Wave)]);
GymList['Elite Grimsley'] = new Gym('Grimsley', 'Elite Grimsley', [
    new GymPokemon('Liepard', 10945330, 60),
    new GymPokemon('Scrafty', 10948300, 60),
    new GymPokemon('Krookodile', 10952000, 60),
    new GymPokemon('Absol', 10957000, 60),
    new GymPokemon('Bisharp', 11960250, 62),
], BadgeEnums.Elite_Grimsley, 32000, 'Whether or not you get to fight at full strength, whether or not luck smiles on you--none of that matters. Only results matter. And a loss is a loss. See, victory shines like a bright light. And right now, you and your Pokémon are shining brilliantly.', [new GymBadgeRequirement(BadgeEnums.Wave)]);
GymList['Elite Caitlin'] = new Gym('Caitlin', 'Elite Caitlin', [
    new GymPokemon('Musharna', 10957000, 60),
    new GymPokemon('Sigilyph', 10957000, 60),
    new GymPokemon('Reuniclus', 10957000, 60),
    new GymPokemon('Gothitelle', 10957000, 60),
    new GymPokemon('Metagross', 11960250, 62),
], BadgeEnums.Elite_Caitlin, 32000, 'You and your Pokémon are both excellent and elegant. To have been able to battle against such a splendid team... My Pokémon and I learned a lot! I offer you my thanks.', [new GymBadgeRequirement(BadgeEnums.Wave)]);
// Unova Champion
GymList['Champion Iris'] = new Gym('Iris', 'Champion Iris', [
    new GymPokemon('Hydreigon', 12458300, 61),
    new GymPokemon('Druddigon', 12462000, 61),
    new GymPokemon('Archeops', 12464000, 61),
    new GymPokemon('Aggron', 12460250, 61),
    new GymPokemon('Lapras', 12470000, 61),
    new GymPokemon('Haxorus', 14570000, 63),
], BadgeEnums.Elite_UnovaChampion, 64000, 'I\'m upset I couldn\'t win! But you know what? More than that, I\'m happy! I mean, come on. By having a serious battle, you and your Pokémon, and me and my Pokémon, we all got to know one another better than before! Yep, we sure did! OK, let\'s go!', [
    new GymBadgeRequirement(BadgeEnums.Elite_Shauntal),
    new GymBadgeRequirement(BadgeEnums.Elite_Marshal),
    new GymBadgeRequirement(BadgeEnums.Elite_Grimsley),
    new GymBadgeRequirement(BadgeEnums.Elite_Caitlin),
], () => { }, { champion: true });
//Kalos Gyms
GymList['Santalune City'] = new Gym('Viola', 'Santalune City', [
    new GymPokemon('Surskit', 13737400, 10),
    new GymPokemon('Vivillon (Meadow)', 17395730, 12),
], BadgeEnums.Bug, 800, 'Young Trainer, you... No, it wasn\'t you alone. You and your Pokémon have shown me a whole new depth of field! Fantastic! Just fantastic!', [new RouteKillRequirement(10, GameConstants.Region.kalos, 3)]);
GymList['Cyllage City'] = new Gym('Grant', 'Cyllage City', [
    new GymPokemon('Amaura', 16937530, 25),
    new GymPokemon('Tyrunt', 19837400, 25),
], BadgeEnums.Cliff, 1700, 'There are some things that seem out of reach no matter how hard you try. However, it\'s important that you never give up--no matter the opponent or the odds. I could tell from our battle that you and your Pokémon understand that. To commemorate such an impressive show of teamwork, please accept the Cliff Badge!', [new GymBadgeRequirement(BadgeEnums.Bug)]);
GymList['Shalour City'] = new Gym('Korrina', 'Shalour City', [
    new GymPokemon('Mienfoo', 21558300, 29),
    new GymPokemon('Machoke', 22062000, 28),
    new GymPokemon('Hawlucha', 22362000, 32),
], BadgeEnums.Rumble, 3800, 'Oh! I have been defeated! Alack, alay! Lady Korrina gave a terrible display! This is it. I must give up my title and admit that your strength far exceeds-- Just teasing! But here\'s your Badge. Boy, you\'ll be rolling in \'em soon!', [new TemporaryBattleRequirement('Calem 1')]);
GymList['Coumarine City'] = new Gym('Ramos', 'Coumarine City', [
    new GymPokemon('Jumpluff', 25508300, 30),
    new GymPokemon('Weepinbell', 27562000, 31),
    new GymPokemon('Gogoat', 29502000, 34),
], BadgeEnums.Plant, 5500, 'Yeh believe in yer Pokémon... And they believe in yeh, too... Mighty oaks from acorns grow. Go on, then. Yeh\'ve earned it. Here\'s yer own Plant Badge, sprout.', [new TemporaryBattleRequirement('Calem 2')]);
GymList['Lumiose City'] = new Gym('Clemont', 'Lumiose City', [
    new GymPokemon('Emolga', 30058300, 35),
    new GymPokemon('Magneton', 31062000, 35),
    new GymPokemon('Heliolisk', 32062000, 37),
], BadgeEnums.Voltage, 9000, 'Oh, Bonnie... When will you learn there\'s no shame in losing? I\'m glad whenever I get to learn something new thanks to strong challengers like you here.', [new QuestLineStepCompletedRequirement('A Beautiful World', 11)]);
GymList['Laverre City'] = new Gym('Valerie', 'Laverre City', [
    new GymPokemon('Mawile', 33058300, 38),
    new GymPokemon('Mr. Mime', 36462000, 38),
    new GymPokemon('Sylveon', 38062000, 42),
], BadgeEnums.Fairy, 16000, 'Yes... That was a fine battle. I shall reward you for this great victory. This is the Fairy Badge. It is yours now. Its beauty is captivating, is it not? ... ... ... ... ... ... Ah... Do forgive me. I was so captivated, I forgot for a moment that it is yours.', [new GymBadgeRequirement(BadgeEnums.Voltage)]);
GymList['Anistar City'] = new Gym('Olympia', 'Anistar City', [
    new GymPokemon('Sigilyph', 40058300, 44),
    new GymPokemon('Slowking', 42062000, 45),
    new GymPokemon('Meowstic', 44462000, 48),
], BadgeEnums.Psychic, 30000, 'Now, the Psychic Badge. A testament to your skill. Proof of your power.', [new TemporaryBattleRequirement('Calem 4')]);
GymList['Snowbelle City'] = new Gym('Wulfric', 'Snowbelle City', [
    new GymPokemon('Abomasnow', 46558300, 56),
    new GymPokemon('Cryogonal', 47654830, 55),
    new GymPokemon('Avalugg', 50062000, 59),
], BadgeEnums.Iceberg, 52000, 'Impressive! Your Pokémon fought with great courage. I can tell that you\'ve trained your Pokémon well.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokémon Village'))]);
//Kalos Elite 4
GymList['Elite Malva'] = new Gym('Malva', 'Elite Malva', [
    new GymPokemon('Pyroar', 46492423, 63),
    new GymPokemon('Torkoal', 46791055, 63),
    new GymPokemon('Chandelure', 46794200, 63),
    new GymPokemon('Talonflame', 47223450, 65),
], BadgeEnums.Elite_Malva, 64000, 'What news... So a new challenger has defeated Malva of the Elite Four!', [new GymBadgeRequirement(BadgeEnums.Iceberg)]);
GymList['Elite Siebold'] = new Gym('Siebold', 'Elite Siebold', [
    new GymPokemon('Clawitzer', 46492423, 63),
    new GymPokemon('Gyarados', 47094530, 63),
    new GymPokemon('Starmie', 47094530, 63),
    new GymPokemon('Barbaracle', 47223450, 65),
], BadgeEnums.Elite_Siebold, 64000, 'I shall store my memory of you and your Pokémon forever away within my heart.', [new GymBadgeRequirement(BadgeEnums.Iceberg)]);
GymList['Elite Wikstrom'] = new Gym('Wikstrom', 'Elite Wikstrom', [
    new GymPokemon('Klefki', 46492423, 63),
    new GymPokemon('Probopass', 47094530, 63),
    new GymPokemon('Scizor', 47094530, 63),
    new GymPokemon('Aegislash (Shield)', 47223450, 65),
], BadgeEnums.Elite_Wikstrom, 64000, 'Glorious! The trust that you share with your honorable Pokémon surpasses even mine!', [new GymBadgeRequirement(BadgeEnums.Iceberg)]);
GymList['Elite Drasna'] = new Gym('Drasna', 'Elite Drasna', [
    new GymPokemon('Dragalge', 46492423, 63),
    new GymPokemon('Druddigon', 47094530, 63),
    new GymPokemon('Altaria', 47094530, 63),
    new GymPokemon('Noivern', 47223450, 65),
], BadgeEnums.Elite_Drasna, 64000, 'Oh, dear me. That sure was a quick battle... I do hope you\'ll come back again sometime!', [new GymBadgeRequirement(BadgeEnums.Iceberg)]);
// Kalos Champion
GymList['Champion Diantha'] = new Gym('Diantha', 'Champion Diantha', [
    new GymPokemon('Hawlucha', 40365050, 64),
    new GymPokemon('Tyrantrum', 41691225, 65),
    new GymPokemon('Aurorus', 41691225, 65),
    new GymPokemon('Gourgeist (Average)', 41767141, 65),
    new GymPokemon('Goodra', 42027136, 66),
    new GymPokemon('Mega Gardevoir', 42371780, 68),
], BadgeEnums.Elite_KalosChampion, 128000, 'Witnessing the noble spirits of you and your Pokémon in battle has really touched my heart...', [
    new GymBadgeRequirement(BadgeEnums.Elite_Malva),
    new GymBadgeRequirement(BadgeEnums.Elite_Siebold),
    new GymBadgeRequirement(BadgeEnums.Elite_Wikstrom),
    new GymBadgeRequirement(BadgeEnums.Elite_Drasna),
], () => { }, { champion: true });
//Alola Gyms
GymList['Iki Town'] = new Gym('Hala', 'Iki Town', [
    new GymPokemon('Machop', 62058739, 15),
    new GymPokemon('Makuhita', 62058739, 15),
    new GymPokemon('Crabrawler', 63069612, 16),
], BadgeEnums.Melemele_Stamp, 16000, 'The results come as no surprise to me. What a fine Trainer...and what fine Pokémon, too! Accept this Z-Crystal! It allows Trainers to share their power with their partner Pokémon!</br><img width="100" src="assets/images/items/zCrystal/Fightinium Z.svg"/></br>With this victory... you have cleared all of the trials of Melemele Island, the first of Alola\'s islands! The Melemele stamp is proof of your accomplishments.', [new MultiRequirement([new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 10), new TemporaryBattleRequirement('Hau 3')])], undefined, undefined, { displayName: 'Hala\'s Grand Trial' });
GymList['Konikoni City'] = new Gym('Olivia', 'Konikoni City', [
    new GymPokemon('Anorith', 81530244, 27),
    new GymPokemon('Lileep', 81530244, 27),
    new GymPokemon('Lycanroc (Midnight)', 83170680, 28),
], BadgeEnums.Akala_Stamp, 30000, 'How lovely. Diamonds only sparkle after coal is pushed to its absolute limit. Here. The Rock-type Z-Crystal... The Rockium Z is all yours!</br><img width="100" src="assets/images/items/zCrystal/Rockium Z.svg"/></br>I think your journey will hold many surprises. And I hope it holds many joys.', [new QuestLineStepCompletedRequirement('Symbiotic Relations', 8)], undefined, undefined, { displayName: 'Olivia\'s Grand Trial' });
GymList['Malie City'] = new Gym('Nanu', 'Malie City', [
    new GymPokemon('Sableye', 101710296, 43),
    new GymPokemon('Krokorok', 101710296, 43),
    new GymPokemon('Alolan Persian', 103271750, 44),
], BadgeEnums.Ula_Ula_Stamp, 52000, 'Hmph... heh. Let me fix your team up for you. Here. This is yours.</br><img width="100" src="assets/images/items/zCrystal/Darkinium Z.svg"/></br>There. Congratulations or whatever. You\'ve officially finished your Ula\'ula trials. You\'ve got somewhere else to be, don\'t you? Try not to destroy the whole place.', [new TemporaryBattleRequirement('Gladion 2')], undefined, undefined, { displayName: 'Nanu\'s Grand Trial' });
GymList['Exeggutor Island'] = new Gym('Hapu', 'Exeggutor Island', [
    new GymPokemon('Alolan Dugtrio', 85759429, 47, new QuestLineStepCompletedRequirement('Emissary of Light', 4, GameConstants.AchievementOption.less)),
    new GymPokemon('Gastrodon (East)', 85759429, 47, new QuestLineStepCompletedRequirement('Emissary of Light', 4, GameConstants.AchievementOption.less)),
    new GymPokemon('Flygon', 85759429, 47, new QuestLineStepCompletedRequirement('Emissary of Light', 4, GameConstants.AchievementOption.less)),
    new GymPokemon('Mudsdale', 86977838, 48, new QuestLineStepCompletedRequirement('Emissary of Light', 4, GameConstants.AchievementOption.less)),
    new GymPokemon('Golurk', 91233435, 53, new QuestLineStepCompletedRequirement('Emissary of Light', 4)),
    new GymPokemon('Gastrodon (East)', 91233435, 53, new QuestLineStepCompletedRequirement('Emissary of Light', 4)),
    new GymPokemon('Flygon', 91233435, 53, new QuestLineStepCompletedRequirement('Emissary of Light', 4)),
    new GymPokemon('Mudsdale', 92529615, 54, new QuestLineStepCompletedRequirement('Emissary of Light', 4)),
], BadgeEnums.Poni_Stamp, 64000, 'You have succeeded in your final grand trial! That was enjoyable. Looks like I cannot beat you even when I am not holding back... Take your Ground-type Z-Crystal then... This Groundium Z is yours!</br><img width="100" src="assets/images/items/zCrystal/Groundium Z.svg"/></br>Then go on with you two! Head straight through here and find the altar!', [new QuestLineCompletedRequirement('Emissary of Light')], undefined, undefined, { displayName: 'Hapu\'s Grand Trial' });
//Alola Elite 4
// modified from base HP, keep them roughly the same difficulty
// regular mons base HP: 91879987
// ace pokemon base HP: 92856372
GymList['Elite Molayne'] = new Gym('Molayne', 'Elite Molayne', [
    new GymPokemon('Klefki', 78883047, 56),
    new GymPokemon('Bisharp', 84369882, 56),
    new GymPokemon('Magnezone', 82982134, 56),
    new GymPokemon('Metagross', 84733765, 56),
    new GymPokemon('Alolan Dugtrio', 95774052, 57),
], BadgeEnums.Elite_Molayne, 100000, 'That Kukui... He certainly found an interesting Trainer for me to face!', [new GymBadgeRequirement(BadgeEnums.Poni_Stamp)]);
GymList['Elite Olivia'] = new Gym('Olivia', 'Elite Olivia', [
    new GymPokemon('Armaldo', 81025320, 56),
    new GymPokemon('Cradily', 74381821, 56),
    new GymPokemon('Gigalith', 140708180, 56),
    new GymPokemon('Probopass', 85174188, 56),
    new GymPokemon('Lycanroc (Midnight)', 150439372, 57),
], BadgeEnums.Elite_Olivia, 100000, 'I don\'t see the same look in your eyes that I saw when we first met on Akala Island. Have you had some experiences that you\'ll carry with you in your heart forever? Well, it\'s time for you to move on.', [new GymBadgeRequirement(BadgeEnums.Poni_Stamp)]);
GymList['Elite Acerola'] = new Gym('Acerola', 'Elite Acerola', [
    new GymPokemon('Banette', 94589428, 56),
    new GymPokemon('Drifblim', 87179189, 56),
    new GymPokemon('Dhelmise', 91179189, 56),
    new GymPokemon('Froslass', 91691988, 56),
    new GymPokemon('Palossand', 103277813, 57),
], BadgeEnums.Elite_Acerola, 100000, 'I\'m...I\'m speechless! You\'ve done me in!', [new GymBadgeRequirement(BadgeEnums.Poni_Stamp)]);
GymList['Elite Kahili'] = new Gym('Kahili', 'Elite Kahili', [
    new GymPokemon('Braviary', 86420587, 56),
    new GymPokemon('Hawlucha', 109446185, 56),
    new GymPokemon('Oricorio (Baile)', 103127826, 56),
    new GymPokemon('Mandibuzz', 89123587, 56),
    new GymPokemon('Toucannon', 91392090, 57),
], BadgeEnums.Elite_Kahili, 100000, 'It\'s frustrating to me as a member of the Elite Four, but it seems your strength is the real deal.', [new GymBadgeRequirement(BadgeEnums.Poni_Stamp)]);
// Alola Champion
GymList['Champion Hau'] = new Gym('Hau', 'Champion Hau', [
    new GymPokemon('Alolan Raichu', 91545555, 59),
    new GymPokemon('Tauros', 89636471, 58),
    new GymPokemon('Noivern', 89636471, 58),
    new GymPokemon('Crabominable', 91545555, 59),
    new GymPokemon('Flareon', 89636471, 58, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Grass)),
    new GymPokemon('Primarina', 96725389, 60, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Grass)),
    new GymPokemon('Vaporeon', 89636471, 58, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Fire)),
    new GymPokemon('Decidueye', 96725389, 60, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Fire)),
    new GymPokemon('Leafeon', 89636471, 58, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Water)),
    new GymPokemon('Incineroar', 96725389, 60, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Water)),
], BadgeEnums.Champion_Stamp, 150000, 'We\'re gonna keep moving forward, by staying at full power all the time!', [
    new GymBadgeRequirement(BadgeEnums.Elite_Molayne),
    new GymBadgeRequirement(BadgeEnums.Elite_Olivia),
    new GymBadgeRequirement(BadgeEnums.Elite_Acerola),
    new GymBadgeRequirement(BadgeEnums.Elite_Kahili),
], () => { }, { champion: true });
// Magikarp Jump Gyms
GymList['Friend League'] = new Gym('Karson', // red cap
'Friend League', [new GymPokemon('Magikarp', 472500, 20)], BadgeEnums.Friend_League, 10000, 'Your Karp is really Magic!', [new RouteKillRequirement(10, GameConstants.Region.alola, 31)], () => {
    Notifier.notify({
        message: 'You were awarded a Magikarp Biscuit!',
        type: NotificationConstants.NotificationOption.success,
        image: ItemList.Magikarp_Biscuit.image,
    });
    player.gainItem('Magikarp_Biscuit', 1);
}, undefined, { imageName: 'Jump Champ Red' });
GymList['Quick League'] = new Gym('Koichiro', // blue cap
'Quick League', [new GymPokemon('Magikarp Skelly', 945000, 20)], BadgeEnums.Quick_League, 10500, 'Looks like I flailed...', [new TemporaryBattleRequirement('Magikarp Jump Koylee')], () => {
    Notifier.notify({
        message: 'You were awarded a Magikarp Biscuit!',
        type: NotificationConstants.NotificationOption.success,
        image: ItemList.Magikarp_Biscuit.image,
    });
    player.gainItem('Magikarp_Biscuit', 1);
}, undefined, { imageName: 'Jump Champ Blue' });
GymList['Heavy League'] = new Gym('Kareign', // green cap
'Heavy League', [new GymPokemon('Magikarp Orange Two-Tone', 2362500, 20)], BadgeEnums.Heavy_League, 11000, 'Karpe Diem', [new TemporaryBattleRequirement('Magikarp Jump Karpen')], () => {
    Notifier.notify({
        message: 'You were awarded a Magikarp Biscuit!',
        type: NotificationConstants.NotificationOption.success,
        image: ItemList.Magikarp_Biscuit.image,
    });
    player.gainItem('Magikarp_Biscuit', 1);
}, undefined, {
    displayName: 'Kareign\'s Heavy League Gym',
    imageName: 'Jump Champ Green',
});
GymList['Great League'] = new Gym('Karbuck', // blue cap
'Great League', [new GymPokemon('Magikarp', 3780000, 20)], BadgeEnums.Great_League, 11500, 'Guess ya got me. Hook, line and sinker!', [new TemporaryBattleRequirement('Magikarp Jump Karpress')], () => {
    Notifier.notify({
        message: 'You were awarded a Magikarp Biscuit!',
        type: NotificationConstants.NotificationOption.success,
        image: ItemList.Magikarp_Biscuit.image,
    });
    player.gainItem('Magikarp_Biscuit', 1);
}, undefined, { imageName: 'Jump Champ Blue' });
GymList['Fast League'] = new Gym('Kareign 2', // green cap
'Fast League', [new GymPokemon('Magikarp Pink Dapples', 7087500, 20)], BadgeEnums.Fast_League, 12000, 'This life is not for me... I will become a Karpenter now...', [new TemporaryBattleRequirement('Magikarp Jump Karson')], () => {
    Notifier.notify({
        message: 'You were awarded a Magikarp Biscuit!',
        type: NotificationConstants.NotificationOption.success,
        image: ItemList.Magikarp_Biscuit.image,
    });
    player.gainItem('Magikarp_Biscuit', 1);
}, undefined, {
    displayName: 'Kareign\'s Fast League Gym',
    imageName: 'Jump Champ Green',
});
GymList['Luxury League'] = new Gym('Jump Champ', // red cap
'Luxury League', [new GymPokemon('Magikarp Pink Orca', 9450000, 20)], BadgeEnums.Luxury_League, 12500, 'Just wait \'til my Magikarp evolves and you will all see how great I am! <i>Cries</i>', [new TemporaryBattleRequirement('Magikarp Jump Karbuck')], () => {
    Notifier.notify({
        message: 'You were awarded a Magikarp Biscuit!',
        type: NotificationConstants.NotificationOption.success,
        image: ItemList.Magikarp_Biscuit.image,
    });
    player.gainItem('Magikarp_Biscuit', 1);
}, undefined, {
    displayName: 'Jump Champ\'s Luxury League Gym',
    imageName: 'Jump Champ Red',
});
GymList['Heal League'] = new Gym('Karami', // blue cap
'Heal League', [new GymPokemon('Magikarp Purple Bubbles', 14175000, 20)], BadgeEnums.Heal_League, 12500, 'I\'m getting more old than my rod...', [new TemporaryBattleRequirement('Magikarp Jump Karpella 2')], () => {
    Notifier.notify({
        message: 'You were awarded a Magikarp Biscuit!',
        type: NotificationConstants.NotificationOption.success,
        image: ItemList.Magikarp_Biscuit.image,
    });
    player.gainItem('Magikarp_Biscuit', 1);
}, undefined, { imageName: 'Jump Champ Blue' });
GymList['Ultra League'] = new Gym('Jump Champ 2', // red cap
'Ultra League', [new GymPokemon('Magikarp Brown Tiger', 18900000, 20)], BadgeEnums.Ultra_League, 12500, 'I knew I smelled something fishy...', [new TemporaryBattleRequirement('Magikarp Jump Koylee 2')], () => {
    Notifier.notify({
        message: 'You were awarded a Magikarp Biscuit!',
        type: NotificationConstants.NotificationOption.success,
        image: ItemList.Magikarp_Biscuit.image,
    });
    player.gainItem('Magikarp_Biscuit', 1);
}, undefined, {
    displayName: 'Jump Champ\'s Ultra League Gym',
    imageName: 'Jump Champ Red',
});
GymList['E4 League'] = new Gym('Jump Champ 3', // red cap
'E4 League', [new GymPokemon('Magikarp Orange Forehead', 28350000, 20)], BadgeEnums.E4_League, 12500, 'That jump really splashed!', [new TemporaryBattleRequirement('Magikarp Jump Karpella 3')], () => {
    Notifier.notify({
        message: 'You were awarded a Magikarp Biscuit!',
        type: NotificationConstants.NotificationOption.success,
        image: ItemList.Magikarp_Biscuit.image,
    });
    player.gainItem('Magikarp_Biscuit', 1);
}, undefined, {
    displayName: 'Jump Champ\'s Elite League Gym',
    imageName: 'Jump Champ Red',
});
GymList['Master League'] = new Gym('Magikarp', 'Master League', [new GymPokemon('Magikarp', 37800000, 20)], BadgeEnums.Master_League, 13000, 'Mayor Karp will be proud of you!', [new TemporaryBattleRequirement('Magikarp Jump Tykarp 2')], () => {
    Notifier.notify({
        message: 'You were awarded a Magikarp Biscuit!',
        type: NotificationConstants.NotificationOption.success,
        image: ItemList.Magikarp_Biscuit.image,
    });
    player.gainItem('Magikarp_Biscuit', 1);
});
//Galar Leaders
GymList.Turffield = new Gym('Milo', 'Turffield', [
    new GymPokemon('Gossifleur', 110892836, 19),
    new GymPokemon('Eldegoss', 123214264, 20),
], BadgeEnums.Galar_Grass, 40000, 'The power of Grass has wilted... What an incredible Gym Challenger!', [new RouteKillRequirement(10, GameConstants.Region.galar, 13)]);
GymList.Hulbury = new Gym('Nessa', 'Hulbury', [
    new GymPokemon('Goldeen', 119044213, 22),
    new GymPokemon('Arrokuda', 119044213, 23),
    new GymPokemon('Gigantamax Drednaw', 122651613, 24),
], BadgeEnums.Galar_Water, 60000, 'I may proudly be the strongest member of this Gym, but I was totally washed away!', [new TemporaryBattleRequirement('Hop 4')]);
GymList.Motostoke = new Gym('Kabu', 'Motostoke', [
    new GymPokemon('Ninetales', 125012841, 25),
    new GymPokemon('Arcanine', 125012841, 25),
    new GymPokemon('Gigantamax Centiskorch', 132826144, 27),
], BadgeEnums.Galar_Fire, 60000, 'I\'m often regarded as the first real roadblock of the Gym Challenge, and yet you defeated me! Clearly, your talent surpassed my many years of experience. I still have much to learn!', [new TemporaryBattleRequirement('Marnie 1')]);
GymList['Stow-on-Side1'] = new Gym('Bea', 'Stow-on-Side1', [
    new GymPokemon('Hitmontop', 131352402, 34),
    new GymPokemon('Pangoro', 131352402, 34),
    new GymPokemon('Sirfetch\'d', 131352402, 35),
    new GymPokemon('Gigantamax Machamp', 142075062, 36),
], BadgeEnums.Galar_Fighting, 80000, 'Your strength nearly made me want to turn and run in my bare feet.', [new TemporaryBattleRequirement('Hop 5')], 
// Starts Galar story quest if both Stow-on-Side gyms are defeated.
() => {
    if (App.game.badgeCase.hasBadge(BadgeEnums.Galar_Ghost)) {
        App.game.quests.getQuestLine('The Darkest Day').beginQuest(0, undefined, true);
    }
}, undefined, { displayName: 'Bea\'s Stow-on-Side Gym' });
GymList['Stow-on-Side2'] = new Gym('Allister', 'Stow-on-Side2', [
    new GymPokemon('Galarian Yamask', 131352402, 34),
    new GymPokemon('Mimikyu', 131352402, 34),
    new GymPokemon('Cursola', 131352402, 35),
    new GymPokemon('Gigantamax Gengar', 142075062, 36),
], BadgeEnums.Galar_Ghost, 80000, 'Maybe my mask... kept me from seeing just how strong you really are...', [new TemporaryBattleRequirement('Hop 5')], 
// Starts Galar story quest if both Stow-on-Side gyms are defeated.
() => {
    if (App.game.badgeCase.hasBadge(BadgeEnums.Galar_Fighting)) {
        App.game.quests.getQuestLine('The Darkest Day').beginQuest(0, undefined, true);
    }
}, undefined, { displayName: 'Allister\'s Stow-on-Side Gym' });
GymList.Ballonlea = new Gym('Opal', 'Ballonlea', [
    new GymPokemon('Galarian Weezing', 135999999, 36),
    new GymPokemon('Mawile', 135999999, 36),
    new GymPokemon('Togekiss', 135999999, 37),
    new GymPokemon('Gigantamax Alcremie', 147097917, 38),
], BadgeEnums.Galar_Fairy, 80000, 'Your pink is still lacking, but you\'re an excellent Trainer with some excellent Pokémon.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glimwood Tangle'))]);
GymList.Circhester1 = new Gym('Gordie', 'Circhester1', [
    new GymPokemon('Barbaracle', 140246069, 40),
    new GymPokemon('Shuckle', 140246069, 40),
    new GymPokemon('Stonjourner', 140246069, 41),
    new GymPokemon('Gigantamax Coalossal', 151694727, 42),
], BadgeEnums.Galar_Rock, 80000, 'I just want to climb into a hole... Well, I guess it\'d be more like falling from here.', [new RouteKillRequirement(10, GameConstants.Region.galar, 26)], undefined, undefined, { displayName: 'Gordie\'s Circhester Gym' });
GymList.Circhester2 = new Gym('Melony', 'Circhester2', [
    new GymPokemon('Frosmoth', 140246069, 40),
    new GymPokemon('Galarian Darmanitan', 140246069, 40),
    new GymPokemon('Eiscue (Ice Face)', 140246069, 41, new WeatherRequirement([WeatherType.Clear, WeatherType.Overcast, WeatherType.Rain, WeatherType.Thunderstorm, WeatherType.Snow, WeatherType.Hail, WeatherType.Blizzard, WeatherType.Sandstorm, WeatherType.Fog, WeatherType.Windy])),
    new GymPokemon('Eiscue (Noice Face)', 140246069, 41, new WeatherRequirement([WeatherType.Harsh_Sunlight])),
    new GymPokemon('Gigantamax Lapras', 151694727, 42),
], BadgeEnums.Galar_Ice, 80000, 'I think you took breaking the ice a little too literally...', [new RouteKillRequirement(10, GameConstants.Region.galar, 26)], undefined, undefined, { displayName: 'Melony\'s Circhester Gym' });
GymList.Spikemuth = new Gym('Piers', 'Spikemuth', [
    new GymPokemon('Scrafty', 145552675, 44),
    new GymPokemon('Malamar', 145552675, 45),
    new GymPokemon('Skuntank', 145552675, 45),
    new GymPokemon('Obstagoon', 157434528, 46),
], BadgeEnums.Galar_Dark, 96000, 'Me an\' my team gave it our best. Let\'s meet up again for a battle some time...', [new TemporaryBattleRequirement('Marnie 2')]);
GymList.Hammerlocke = new Gym('Raihan', 'Hammerlocke', [
    new GymPokemon('Gigalith', 151276613, 46),
    new GymPokemon('Flygon', 151276613, 47),
    new GymPokemon('Sandaconda', 151276613, 46),
    new GymPokemon('Gigantamax Duraludon', 163625773, 48),
], BadgeEnums.Galar_Dragon, 128000, 'I might have lost, but I still look good. Maybe I should snap a quick selfie...', [new GymBadgeRequirement(BadgeEnums.Galar_Dark)]);
GymList['Elite Trainer Marnie'] = new Gym('Marnie', 'Elite Trainer Marnie', [
    new GymPokemon('Liepard', 160047044, 47),
    new GymPokemon('Toxicroak', 160047044, 47),
    new GymPokemon('Scrafty', 160047044, 47),
    new GymPokemon('Morpeko', 165478757, 48),
    new GymPokemon('Gigantamax Grimmsnarl', 171568449, 49),
], BadgeEnums.Elite_Marnie, 150000, 'OK, so I lost... but I got to see a lot of the good points of you and your Pokémon!', [new RouteKillRequirement(10, GameConstants.Region.galar, 26)]);
GymList['Elite Gym Leader Bede'] = new Gym('Bede', 'Elite Gym Leader Bede', [
    new GymPokemon('Mawile', 160047044, 51),
    new GymPokemon('Sylveon', 160047044, 51),
    new GymPokemon('Gardevoir', 160047044, 51),
    new GymPokemon('Galarian Rapidash', 165478757, 52),
    new GymPokemon('Gigantamax Hatterene', 171568449, 53),
], BadgeEnums.Elite_Bede, 150000, 'I couldn\'t win, but at least I was able to show everyone how great Fairy types are.', [new GymBadgeRequirement(BadgeEnums.Elite_Marnie)], undefined, undefined, { imageName: 'Gym Leader Bede' });
GymList['Elite Trainer Hop'] = new Gym('Hop', 'Elite Trainer Hop', [
    new GymPokemon('Dubwool', 173506298, 59),
    new GymPokemon('Pincurchin', 168817428, 58),
    new GymPokemon('Snorlax', 168817428, 58),
    new GymPokemon('Corviknight', 179511126, 60),
    new GymPokemon('Gigantamax Inteleon', 189335021, 59, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Grass)),
    new GymPokemon('Gigantamax Rillaboom', 189335021, 59, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Fire)),
    new GymPokemon('Gigantamax Cinderace', 189335021, 59, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Water)),
], BadgeEnums.Elite_Hop, 200000, 'Thanks, mate. I\'m really glad you were the one here with me.', [new GymBadgeRequirement(BadgeEnums.Elite_Bede)]);
// Galar Champion
GymList['Champion Leon'] = new Gym('Leon', 'Champion Leon', [
    new GymPokemon('Aegislash (Shield)', 177587812, 62),
    new GymPokemon('Dragapult', 177587812, 62),
    new GymPokemon('Haxorus', 177587812, 63),
    new GymPokemon('Seismitoad', 181534208, 64, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Grass)),
    new GymPokemon('Cinderace', 187453801, 64, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Grass)),
    new GymPokemon('Mr. Rime', 181534208, 64, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Fire)),
    new GymPokemon('Inteleon', 187453801, 64, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Fire)),
    new GymPokemon('Rhyperior', 181534208, 64, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Water)),
    new GymPokemon('Rillaboom', 187453801, 64, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Water)),
    new GymPokemon('Gigantamax Charizard', 197319950, 65),
], BadgeEnums.Elite_GalarChampion, 250000, 'My time as Champion is over... But what a champion time it\'s been! Thank you for the greatest battle I\'ve ever had!', [new QuestLineStepCompletedRequirement('The Darkest Day', 19)], () => { }, { champion: true });
// Armor + Crown gyms
GymList['Elite Gym Leader Klara'] = new Gym('Klara', 'Elite Gym Leader Klara', [
    new GymPokemon('Galarian Slowking', 281126897, 68),
    new GymPokemon('Galarian Weezing', 281126897, 68),
    new GymPokemon('Drapion', 281126897, 68),
    new GymPokemon('Scolipede', 287045163, 69),
    new GymPokemon('Galarian Slowbro', 295923049, 70),
], BadgeEnums.Elite_ArmorPoison, 150000, 'Aww, come on! What a drag! But...I guess it was also kinda fun!', [new QuestLineCompletedRequirement('The Dojo\'s Armor')]);
GymList['Elite Gym Leader Avery'] = new Gym('Avery', 'Elite Gym Leader Avery', [
    new GymPokemon('Galarian Slowbro', 281126897, 68),
    new GymPokemon('Swoobat', 281126897, 68),
    new GymPokemon('Galarian Rapidash', 281126897, 68),
    new GymPokemon('Alakazam', 287045163, 69),
    new GymPokemon('Galarian Slowking', 295923049, 70),
], BadgeEnums.Elite_ArmorPsychic, 150000, 'More! I require more! Show me your Stored Power!', [new QuestLineCompletedRequirement('The Dojo\'s Armor')]);
GymList['Elite Dojo Matron Honey'] = new Gym('Honey', 'Elite Dojo Matron Honey', [
    new GymPokemon('Galarian Darmanitan', 238066328, 73),
    new GymPokemon('Gallade', 238066328, 74),
    new GymPokemon('Salazzle', 243078251, 73),
    new GymPokemon('Togekiss', 243078251, 75),
    new GymPokemon('Gigantamax Venusaur', 250596135, 75),
    new GymPokemon('Gigantamax Blastoise', 250596135, 75),
], BadgeEnums.Elite_ArmorMatron, 250000, 'That was a delight! Nice battling, love!', [
    new MultiRequirement([
        new GymBadgeRequirement(BadgeEnums.Elite_ArmorPoison),
        new GymBadgeRequirement(BadgeEnums.Elite_ArmorPsychic),
    ]),
]);
GymList['Elite Dojo Master Mustard'] = new Gym('Mustard', 'Elite Dojo Master Mustard', [
    new GymPokemon('Mienshao', 243689942, 73),
    new GymPokemon('Luxray', 243689942, 73),
    new GymPokemon('Lycanroc (Midday)', 248820300, 75),
    new GymPokemon('Kommo-o', 248820300, 75),
    new GymPokemon('Gigantamax Urshifu (Single Strike)', 256515729, 75),
    new GymPokemon('Gigantamax Urshifu (Rapid Strike)', 256515729, 75),
], BadgeEnums.Elite_ArmorChampion, 250000, 'That strength of yours doesn\'t bend easily!', [new GymBadgeRequirement(BadgeEnums.Elite_ArmorMatron)], undefined, undefined, { imageName: 'Mustard Elite' });
GymList['Elite Trainer Peony'] = new Gym('Peony', 'Elite Trainer Peony', [
    new GymPokemon('Perrserker', 305387462, 74),
    new GymPokemon('Bronzong', 299090814, 73),
    new GymPokemon('Scizor', 299090814, 73),
    new GymPokemon('Aggron', 305387462, 74),
    new GymPokemon('Copperajah', 314832436, 74),
], BadgeEnums.Elite_CrownChampion, 250000, 'Gone and got stronger again, have you? Ah well! Hats off to you-in more ways than one!', [
    new MultiRequirement([
        new QuestLineCompletedRequirement('The Crown of Galar'),
        new QuestLineCompletedRequirement('The Birds of the Dyna Tree'),
        new QuestLineCompletedRequirement('The Ancient Golems'),
    ]),
], undefined, undefined, { imageName: 'Peony Elite' });
// Hisui Gyms
GymList['Grandtree Arena'] = new Gym('Lord of the Woods: Kleavor', 'Grandtree Arena', [new GymPokemon('Noble Kleavor', 76658268, 70)], BadgeEnums.Noble_Kleavor, 128000, 'You defeated Lord Kleavor once again!', [new DevelopmentRequirement()], undefined, undefined, { displayName: 'Lord Kleavor', imageName: '../pokemon/900.01' });
GymList['Brava Arena'] = new Gym('Lady of the Ridge: Lilligant', 'Brava Arena', [new GymPokemon('Noble Lilligant', 76658268, 70)], BadgeEnums.Noble_Lilligant, 128000, 'You defeated Lady Lilligant once again!', [new DevelopmentRequirement()], undefined, undefined, { displayName: 'Lady Lilligant', imageName: '../pokemon/549.02' });
GymList['Molten Arena'] = new Gym('Lord of the Isles: Arcanine', 'Molten Arena', [new GymPokemon('Noble Arcanine', 76658268, 70)], BadgeEnums.Noble_Arcanine, 128000, 'You defeated Lord Arcanine once again!', [new DevelopmentRequirement()], undefined, undefined, { displayName: 'Lord Arcanine', imageName: '../pokemon/59.02' });
GymList['Moonview Arena'] = new Gym('Lord of the Hollow: Electrode', 'Moonview Arena', [new GymPokemon('Noble Electrode', 76658268, 70)], BadgeEnums.Noble_Electrode, 128000, 'You defeated Lord Electrode once again!', [new DevelopmentRequirement()], undefined, undefined, { displayName: 'Lord Electrode', imageName: '../pokemon/101.02' });
GymList['Icepeak Arena'] = new Gym('Lord of the Tundra: Avalugg', 'Icepeak Arena', [new GymPokemon('Noble Avalugg', 76658268, 70)], BadgeEnums.Noble_Avalugg, 128000, 'You defeated Lord Avalugg once again!', [new DevelopmentRequirement()], undefined, undefined, { displayName: 'Lord Avalugg', imageName: '../pokemon/713.02' });
GymList['Temple of Sinnoh'] = new Gym('Volo', 'Temple of Sinnoh', [
    new GymPokemon('Spiritomb', 348526193, 68),
    new GymPokemon('Roserade', 348526193, 68),
    new GymPokemon('Togekiss', 348526193, 68),
    new GymPokemon('Hisuian Arcanine', 348526193, 68),
    new GymPokemon('Lucario', 348526193, 68),
    new GymPokemon('Garchomp', 348526193, 68),
    new GymPokemon('Giratina (Altered)', 348526193, 70, new TemporaryBattleRequirement('Volo 3')),
    new GymPokemon('Giratina (Origin)', 348526193, 70, new TemporaryBattleRequirement('Volo 3')),
], BadgeEnums.Azure, 128000, 'Why? Why you?! Why do you have the blessing of Arceus?!', [new DevelopmentRequirement()], () => { }, { champion: true }, { displayName: 'Pokémon Wielder Volo' });
// Paldea Gyms
GymList.Cortondo = new Gym('Katy', 'Cortondo', [
    new GymPokemon('Nymble', 203123316, 14),
    new GymPokemon('Tarountula', 203123316, 14),
    new GymPokemon('Teddiursa', 203123316, 15),
], BadgeEnums.Bug_Gym, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)]);
GymList.Artazon = new Gym('Brassius', 'Artazon', [
    new GymPokemon('Petilil', 203123316, 16),
    new GymPokemon('Smoliv', 203123316, 14),
    new GymPokemon('Sudowoodo', 203123316, 17),
], BadgeEnums.Grass_Gym, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)]);
GymList.Levincia = new Gym('Iono', 'Levincia', [
    new GymPokemon('Wattrel', 203123316, 23),
    new GymPokemon('Bellibolt', 203123316, 23),
    new GymPokemon('Luxio', 203123316, 23),
    new GymPokemon('Mismagius', 203123316, 24),
], BadgeEnums.Electric_Gym, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)]);
GymList.Cascarrafa = new Gym('Kofu', 'Cascarrafa', [
    new GymPokemon('Veluza', 203123316, 29),
    new GymPokemon('Wugtrio', 203123316, 29),
    new GymPokemon('Crabominable', 203123316, 30),
], BadgeEnums.Water_Gym, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)]);
GymList.Medali = new Gym('Larry', 'Medali', [
    new GymPokemon('Komala', 203123316, 35),
    new GymPokemon('Dudunsparce (Two-Segment)', 203123316, 35),
    new GymPokemon('Staraptor', 203123316, 36),
], BadgeEnums.Normal_Gym, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)]);
GymList.Montenevera = new Gym('Ryme', 'Montenevera', [
    new GymPokemon('Banette', 203123316, 41),
    new GymPokemon('Mimikyu', 203123316, 41),
    new GymPokemon('Houndstone', 203123316, 41),
    new GymPokemon('Toxtricity (Low Key)', 203123316, 42),
], BadgeEnums.Ghost_Gym, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)]);
GymList.Alfornada = new Gym('Tulip', 'Alfornada', [
    new GymPokemon('Farigiraf', 203123316, 44),
    new GymPokemon('Gardevoir', 203123316, 44),
    new GymPokemon('Espathra', 203123316, 44),
    new GymPokemon('Florges (Red)', 203123316, 45),
], BadgeEnums.Psychic_Gym, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)]);
GymList['Glaseado Mountain'] = new Gym('Grusha', 'Glaseado Mountain', [
    new GymPokemon('Frosmoth', 203123316, 47),
    new GymPokemon('Beartic', 203123316, 47),
    new GymPokemon('Cetitan', 203123316, 47),
    new GymPokemon('Altaria', 203123316, 48),
], BadgeEnums.Ice_Gym, 250000, '', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glaseado Mountain'))]);
GymList['Elite Rika'] = new Gym('Rika', 'Elite Rika', [
    new GymPokemon('Whiscash', 203123316, 57),
    new GymPokemon('Camerupt', 203123316, 57),
    new GymPokemon('Donphan', 203123316, 57),
    new GymPokemon('Dugtrio', 203123316, 57),
    new GymPokemon('Clodsire', 203123316, 58),
], BadgeEnums.Elite_Rika, 250000, '', [new GymBadgeRequirement(BadgeEnums.Bug_Gym), new GymBadgeRequirement(BadgeEnums.Grass_Gym), new GymBadgeRequirement(BadgeEnums.Electric_Gym), new GymBadgeRequirement(BadgeEnums.Water_Gym), new GymBadgeRequirement(BadgeEnums.Normal_Gym), new GymBadgeRequirement(BadgeEnums.Ghost_Gym), new GymBadgeRequirement(BadgeEnums.Psychic_Gym), new GymBadgeRequirement(BadgeEnums.Ice_Gym)]);
GymList['Elite Poppy'] = new Gym('Poppy', 'Elite Poppy', [
    new GymPokemon('Copperajah', 203123316, 58),
    new GymPokemon('Magnezone', 203123316, 58),
    new GymPokemon('Bronzong', 203123316, 58),
    new GymPokemon('Corviknight', 203123316, 58),
    new GymPokemon('Tinkaton', 203123316, 59),
], BadgeEnums.Elite_Poppy, 250000, '', [new GymBadgeRequirement(BadgeEnums.Elite_Rika)]);
GymList['Elite Larry'] = new Gym('Larry', 'Elite Larry', [
    new GymPokemon('Tropius', 203123316, 59),
    new GymPokemon('Oricorio (Pom-Pom)', 203123316, 59),
    new GymPokemon('Altaria', 203123316, 59),
    new GymPokemon('Staraptor', 203123316, 59),
    new GymPokemon('Flamigo', 203123316, 60),
], BadgeEnums.Elite_Larry, 250000, '', [new GymBadgeRequirement(BadgeEnums.Elite_Poppy)]);
GymList['Elite Hassel'] = new Gym('Hassel', 'Elite Hassel', [
    new GymPokemon('Noivern', 203123316, 60),
    new GymPokemon('Haxorus', 203123316, 60),
    new GymPokemon('Dragalge', 203123316, 60),
    new GymPokemon('Flapple', 203123316, 60),
    new GymPokemon('Baxcalibur', 203123316, 61),
], BadgeEnums.Elite_Hassel, 250000, '', [new GymBadgeRequirement(BadgeEnums.Elite_Larry)]);
GymList['Top Champion Geeta'] = new Gym('Geeta', 'Top Champion Geeta', [
    new GymPokemon('Espathra', 203123316, 61),
    new GymPokemon('Gogoat', 203123316, 61),
    new GymPokemon('Veluza', 203123316, 61),
    new GymPokemon('Avalugg', 203123316, 61),
    new GymPokemon('Kingambit', 203123316, 61),
    new GymPokemon('Glimmora', 203123316, 62),
], BadgeEnums.Elite_PaldeaChampion, 250000, '', [new GymBadgeRequirement(BadgeEnums.Elite_Hassel)], () => { }, { champion: true });
GymList['Champion Nemona'] = new Gym('Nemona', 'Champion Nemona', [
    new GymPokemon('Lycanroc (Midday)', 203123316, 65),
    new GymPokemon('Goodra', 203123316, 65),
    new GymPokemon('Dudunsparce (Three-Segment)', 203123316, 65),
    new GymPokemon('Orthworm', 203123316, 65),
    new GymPokemon('Pawmot', 203123316, 65),
    new GymPokemon('Quaquaval', 203123316, 66, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Meowscarada', 203123316, 66, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Skeledirge', 203123316, 66, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
], BadgeEnums.Elite_Nemona, 250000, '', [new GymBadgeRequirement(BadgeEnums.Elite_PaldeaChampion)], undefined, undefined, { hideUntilUnlocked: true });
GymList['Segin Squad\'s Base'] = new Gym('Giacomo', 'Segin Squad\'s Base', [
    new GymPokemon('Pawniard', 203123316, 21),
    new GymPokemon('Segin Starmobile', 203123316, 20),
], BadgeEnums.Dark_Star, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)], undefined, undefined, { displayName: 'Giacomo of Team Star' });
GymList['Schedar Squad\'s Base'] = new Gym('Mela', 'Schedar Squad\'s Base', [
    new GymPokemon('Torkoal', 203123316, 27),
    new GymPokemon('Schedar Starmobile', 203123316, 26),
], BadgeEnums.Fire_Star, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)], undefined, undefined, { displayName: 'Mela of Team Star' });
GymList['Navi Squad\'s Base'] = new Gym('Atticus', 'Navi Squad\'s Base', [
    new GymPokemon('Skuntank', 203123316, 32),
    new GymPokemon('Muk', 203123316, 32),
    new GymPokemon('Revavroom', 203123316, 33),
    new GymPokemon('Navi Starmobile', 203123316, 32),
], BadgeEnums.Poison_Star, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)], undefined, undefined, { displayName: 'Atticus of Team Star' });
GymList['Ruchbah Squad\'s Base'] = new Gym('Ortega', 'Ruchbah Squad\'s Base', [
    new GymPokemon('Azumarill', 203123316, 50),
    new GymPokemon('Wigglytuff', 203123316, 50),
    new GymPokemon('Dachsbun', 203123316, 51),
    new GymPokemon('Ruchbah Starmobile', 203123316, 50),
], BadgeEnums.Fairy_Star, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)], undefined, undefined, { displayName: 'Ortega of Team Star' });
GymList['Caph Squad\'s Base'] = new Gym('Eri', 'Caph Squad\'s Base', [
    new GymPokemon('Toxicroak', 203123316, 55),
    new GymPokemon('Passimian', 203123316, 55),
    new GymPokemon('Lucario', 203123316, 55),
    new GymPokemon('Annihilape', 203123316, 56),
    new GymPokemon('Caph Starmobile', 203123316, 56),
], BadgeEnums.Fighting_Star, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)], undefined, undefined, { displayName: 'Eri of Team Star' });
GymList['Director Clavell'] = new Gym('Clavell', 'Director Clavell', [
    new GymPokemon('Oranguru', 203123316, 60),
    new GymPokemon('Abomasnow', 203123316, 60),
    new GymPokemon('Polteageist', 203123316, 60),
    new GymPokemon('Amoonguss', 203123316, 60, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Houndoom', 203123316, 60, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Gyarados', 203123316, 60, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Gyarados', 203123316, 60, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Amoonguss', 203123316, 60, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Houndoom', 203123316, 60, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Skeledirge', 203123316, 61, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Quaquaval', 203123316, 61, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Meowscarada', 203123316, 61, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
], BadgeEnums.Elite_Clavell, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)], undefined, undefined, { displayName: 'Director Clavell', hideUntilUnlocked: true });
GymList['Penny of Team Star'] = new Gym('Penny', 'Penny of Team Star', [
    new GymPokemon('Umbreon', 203123316, 62),
    new GymPokemon('Vaporeon', 203123316, 62),
    new GymPokemon('Jolteon', 203123316, 62),
    new GymPokemon('Flareon', 203123316, 62),
    new GymPokemon('Leafeon', 203123316, 62),
    new GymPokemon('Sylveon', 203123316, 63),
], BadgeEnums.Elite_Penny, 250000, '', [new GymBadgeRequirement(BadgeEnums.Elite_Clavell)], undefined, undefined, { displayName: 'Penny of Team Star', hideUntilUnlocked: true });
GymList['Stony Cliff Titan'] = new Gym('Stony Cliff Titan', 'Stony Cliff Titan', [new GymPokemon('Titan Klawf', 203123316, 16)], BadgeEnums.Rock_Titan, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)], undefined, undefined, { imageName: '../pokemon/950.01' });
GymList['Open Sky Titan'] = new Gym('Open Sky Titan', 'Open Sky Titan', [new GymPokemon('Titan Bombirdier', 203123316, 20)], BadgeEnums.Flying_Titan, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)], undefined, undefined, { imageName: '../pokemon/962.01' });
GymList['Lurking Steel Titan'] = new Gym('Lurking Steel Titan', 'Lurking Steel Titan', [new GymPokemon('Titan Orthworm', 203123316, 29)], BadgeEnums.Steel_Titan, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)], undefined, undefined, { imageName: '../pokemon/968.01' });
GymList['Asado Desert'] = new Gym('Quaking Earth Titan', 'Asado Desert', [
    new GymPokemon('Titan Great Tusk', 203123316, 45),
    new GymPokemon('Titan Iron Treads', 203123316, 45),
], BadgeEnums.Ground_Titan, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)]);
GymList['Casseroya Lake'] = new Gym('False Dragon Titan', 'Casseroya Lake', [
    new GymPokemon('Titan Dondozo', 203123316, 56),
    new GymPokemon('Titan Tatsugiri', 203123316, 57),
], BadgeEnums.Dragon_Titan, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)]);
GymList['Pokémon Trainer Arven'] = new Gym('Arven', 'Pokémon Trainer Arven', [
    new GymPokemon('Greedent', 203123316, 58),
    new GymPokemon('Cloyster', 203123316, 59),
    new GymPokemon('Scovillain', 203123316, 60),
    new GymPokemon('Toedscruel', 203123316, 61),
    new GymPokemon('Garganacl', 203123316, 62),
    new GymPokemon('Mabosstiff', 203123316, 63),
], BadgeEnums.Elite_Arven, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)], undefined, undefined, { displayName: 'Arven', hideUntilUnlocked: true });
GymList['AI Sada'] = new Gym('AI Sada', 'AI Sada', [
    new GymPokemon('Slither Wing', 203123316, 66),
    new GymPokemon('Scream Tail', 203123316, 66),
    new GymPokemon('Brute Bonnet', 203123316, 66),
    new GymPokemon('Flutter Mane', 203123316, 66),
    new GymPokemon('Sandy Shocks', 203123316, 66),
    new GymPokemon('Roaring Moon', 203123316, 67),
], BadgeEnums.Scarlet, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)], undefined, undefined, { displayName: 'AI Sada' });
GymList['AI Turo'] = new Gym('AI Turo', 'AI Turo', [
    new GymPokemon('Iron Moth', 203123316, 66),
    new GymPokemon('Iron Bundle', 203123316, 66),
    new GymPokemon('Iron Hands', 203123316, 66),
    new GymPokemon('Iron Jugulis', 203123316, 66),
    new GymPokemon('Iron Thorns', 203123316, 66),
    new GymPokemon('Iron Valiant', 203123316, 67),
], BadgeEnums.Violet, 250000, '', [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)], undefined, undefined, { displayName: 'AI Turo' });
/// <reference path="../../declarations/TemporaryScriptTypes.d.ts" />
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/enums/Badges.d.ts" />
class GymRunner {
    static startGym(gym, autoRestart = false, initialRun = true) {
        GymRunner.initialRun = initialRun;
        GymRunner.autoRestart(autoRestart);
        GymRunner.running(false);
        GymRunner.gymObservable(gym);
        App.game.gameState = GameConstants.GameState.idle;
        DungeonRunner.timeBonus(FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute));
        GymRunner.timeLeft(GameConstants.GYM_TIME * GymRunner.timeBonus());
        GymRunner.timeLeftPercentage(100);
        GymBattle.gym = gym;
        GymBattle.totalPokemons(gym.getPokemonList().length);
        GymBattle.index(0);
        GymBattle.generateNewEnemy();
        App.game.gameState = GameConstants.GameState.gym;
        GymRunner.running(true);
        GymRunner.resetGif();
        setTimeout(() => {
            GymRunner.hideGif();
        }, GameConstants.GYM_COUNTDOWN);
    }
    static hideGif() {
        $('#gymGoContainer').hide();
    }
    static resetGif() {
        // If the user doesn't want the animation, just return
        if (!Settings.getSetting('showGymGoAnimation').value) {
            return;
        }
        if (!GymRunner.autoRestart() || GymRunner.initialRun) {
            $('#gymGoContainer').show();
            setTimeout(() => {
                $('#gymGo').attr('src', 'assets/gifs/go.gif');
            }, 0);
        }
    }
    static tick() {
        if (!GymRunner.running()) {
            return;
        }
        if (GymRunner.timeLeft() < 0) {
            GymRunner.gymLost();
        }
        GymRunner.timeLeft(GymRunner.timeLeft() - GameConstants.GYM_TICK);
        GymRunner.timeLeftPercentage(Math.floor(GymRunner.timeLeft() / (GameConstants.GYM_TIME * FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute)) * 100));
        const currentFluteBonus = FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute);
        if (currentFluteBonus != GymRunner.timeBonus()) {
            if (currentFluteBonus > GymRunner.timeBonus()) {
                if (GymRunner.timeBonus() === 1) {
                    GymRunner.timeBonus(currentFluteBonus);
                    GymRunner.timeLeft(GymRunner.timeLeft() * GymRunner.timeBonus());
                }
                else {
                    GymRunner.timeLeft(GymRunner.timeLeft() / GymRunner.timeBonus());
                    GymRunner.timeBonus(currentFluteBonus);
                    GymRunner.timeLeft(GymRunner.timeLeft() * GymRunner.timeBonus());
                }
            }
            else {
                GymRunner.timeLeft(GymRunner.timeLeft() / GymRunner.timeBonus());
                GymRunner.timeBonus(currentFluteBonus);
            }
        }
    }
    static gymLost() {
        if (GymRunner.running()) {
            GymRunner.running(false);
            Notifier.notify({
                message: `It appears you are not strong enough to defeat ${GymBattle.gym.leaderName.replace(/\d/g, '')}.`,
                type: NotificationConstants.NotificationOption.danger,
            });
            App.game.gameState = GameConstants.GameState.town;
        }
    }
    static gymWon(gym) {
        if (GymRunner.running()) {
            GymRunner.running(false);
            Notifier.notify({
                message: `Congratulations, you defeated ${GymBattle.gym.leaderName.replace(/\d/g, '')}!`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.General.gym_won,
            });
            // If this is the first time defeating this gym
            if (!App.game.badgeCase.hasBadge(gym.badgeReward)) {
                gym.firstWinReward();
            }
            GameHelper.incrementObservable(App.game.statistics.gymsDefeated[GameConstants.getGymIndex(gym.town)]);
            // Auto restart gym battle
            if (GymRunner.autoRestart()) {
                const clears = App.game.statistics.gymsDefeated[GameConstants.getGymIndex(gym.town)]();
                const cost = clears >= 100 ? 0 : (GymRunner.gymObservable().moneyReward || 10) * 2;
                const amt = new Amount(cost, GameConstants.Currency.money);
                const reward = GymRunner.gymObservable().autoRestartReward();
                // If the player can afford it, restart the gym
                if (cost === 0 || App.game.wallet.loseAmount(amt)) {
                    if (reward > 0) {
                        App.game.wallet.gainMoney(reward);
                    }
                    GymRunner.startGym(GymRunner.gymObservable(), GymRunner.autoRestart(), false);
                    return;
                }
            }
            // Award money for defeating gym
            App.game.wallet.gainMoney(gym.moneyReward);
            // Send the player back to a town state
            App.game.gameState = GameConstants.GameState.town;
        }
    }
    static getEnvironmentArea() {
        const gym = GymRunner.gymObservable();
        return gym.optionalArgs.environment;
    }
    static getBattleBackgroundImage() {
        const gym = GymRunner.gymObservable();
        return gym.optionalArgs.battleBackground;
    }
}
GymRunner.timeLeft = ko.observable(GameConstants.GYM_TIME);
GymRunner.timeLeftPercentage = ko.observable(100);
GymRunner.timeBonus = ko.observable(1);
GymRunner.gymObservable = ko.observable(GymList['Pewter City']);
GymRunner.running = ko.observable(false);
GymRunner.autoRestart = ko.observable(false);
GymRunner.initialRun = true;
GymRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(GymRunner.timeLeft() / 100) / 10).toFixed(1);
});
document.addEventListener('DOMContentLoaded', () => {
    $('#receiveBadgeModal').on('hidden.bs.modal', () => {
        if (GymBattle.gym.badgeReward == BadgeEnums.Soul) {
            KeyItemController.showGainModal(KeyItemType.Safari_ticket);
        }
        if (GymBattle.gym.badgeReward == BadgeEnums.Earth) {
            KeyItemController.showGainModal(KeyItemType.Gem_case);
        }
    });
});
GymRunner;
/**
 * Static class as an API for handling items.
 */
class BagHandler {
    /**
     * Gets the display name for the item
     * @param item The item identifier
     */
    static displayName(item) {
        if (!item) {
            return '';
        }
        switch (item.type) {
            case ItemType.item:
                return this.getItem(item.id).displayName;
            case ItemType.underground:
                return this.getUndergroundItem(item.id).displayName;
            case ItemType.berry:
                return `${BerryType[this.getBerry(item.id)]} Berry`;
            case ItemType.gem:
                return `${PokemonType[this.getGem(item.id)]} Gem`;
        }
    }
    /**
     * Gets the image path for the item
     * @param item The item identifier
     */
    static image(item) {
        if (!item) {
            return '';
        }
        switch (item.type) {
            case ItemType.item:
                return this.getItem(item.id).image;
            case ItemType.underground:
                return this.getUndergroundItem(item.id).image;
            case ItemType.berry:
                return FarmController.getBerryImage(this.getBerry(item.id));
            case ItemType.gem:
                return Gems.image(this.getGem(item.id));
        }
    }
    /**
     * Gets the amount observable for the item. NOTE: You shouldn't use this to modify the amount, as there might
     * be some additional code that needs to be run via the base gainItem API calls. Use BagHandler.gainItem instead.
     * @param item The item identifier
     */
    static amount(item) {
        if (!item) {
            return null;
        }
        switch (item.type) {
            case ItemType.item:
                return player.itemList[this.getItem(item.id).name];
            case ItemType.underground:
                return player.itemList[this.getUndergroundItem(item.id).itemName]();
            case ItemType.berry:
                return App.game.farming.berryList[this.getBerry(item.id)];
            case ItemType.gem:
                return App.game.gems.gemWallet[this.getGem(item.id)];
        }
    }
    /**
     * Handles updating the amount for an item. This should be used instead of modifying the amount observable
     * directly, as the base method might have additional handling.
     * @param item The item identifier
     * @param amount The amount to be added to the Bag. Defaults to 1.
     */
    static gainItem(item, amount = 1) {
        if (!item) {
            return;
        }
        switch (item.type) {
            case ItemType.item:
                this.getItem(item.id).gain(amount);
                return;
            case ItemType.underground:
                UndergroundController.gainMineItem(this.getUndergroundItem(item.id).id, amount);
                return;
            case ItemType.berry:
                App.game.farming.gainBerry(this.getBerry(item.id), amount, false);
                return;
            case ItemType.gem:
                App.game.gems.gainGems(amount, this.getGem(item.id));
                return;
        }
    }
    static isAvailable(item) {
        if (!item) {
            return false;
        }
        switch (item.type) {
            case ItemType.item:
                return this.getItem(item.id).isAvailable() && !this.getItem(item.id).isSoldOut();
            case ItemType.underground:
                return !this.getUndergroundItem(item.id).requirement || this.getUndergroundItem(item.id).requirement.isCompleted();
            case ItemType.berry:
            case ItemType.gem:
            default:
                return true;
        }
    }
    //#region Item getters
    static getItem(id) {
        return ItemList[id];
    }
    static getUndergroundItem(id) {
        if (typeof id === 'string') {
            return UndergroundItems.getByName(id);
        }
        else {
            return UndergroundItems.getById(id);
        }
    }
    static getBerry(id) {
        if (typeof id === 'string') {
            id = App.game.farming.berryData.findIndex((_, idx) => BerryType[idx] === id);
        }
        return id;
    }
    static getGem(id) {
        if (typeof id === 'string') {
            id = PokemonType[id];
        }
        return id;
    }
}
BagHandler;
class EvolutionStone extends PokerusIndicatingItem {
    constructor(type, basePrice, currency = GameConstants.Currency.questPoint, displayName, unlockedRegion, options) {
        super(GameConstants.StoneType[type], basePrice, currency, options, displayName, 'An evolution item. See your Item Bag for more information.', 'evolution');
        this.pokemonWithEvolution = ko.pureComputed(() => PartyController.getPokemonsWithEvolution(this.type));
        this.getCaughtStatus = ko.pureComputed(() => {
            const statuses = this.pokemonWithEvolution().flatMap((pokemon) => PartyController.getStoneEvolutionsCaughtData(pokemon.id, this.type));
            return statuses.length > 0
                ? statuses.reduce((lowest, { status }) => Math.min(lowest, status), CaughtStatus.CaughtShiny)
                : undefined;
        });
        this.getPokerusStatus = ko.pureComputed(() => {
            const statuses = this.pokemonWithEvolution().flatMap((pokemon) => PartyController.getStoneEvolutionsPokerusData(pokemon.id, this.type));
            return statuses.length > 0
                ? statuses.reduce((lowest, { status }) => Math.min(lowest, status), GameConstants.Pokerus.Resistant)
                : undefined;
        });
        this.getPokerusProgress = ko.pureComputed(() => {
            const statuses = this.pokemonWithEvolution().flatMap((pokemon) => PartyController.getStoneEvolutionsPokerusData(pokemon.id, this.type));
            if (statuses.length > 0) {
                const current = statuses.reduce((progress, { evs }) => progress += Math.min(50, evs), 0);
                const total = statuses.length * 50;
                return total === current ? 'All Pokémon are resistant!' : `EVs until all Pokémon are resistant: ${current} / ${total}`;
            }
            else {
                return undefined;
            }
        });
        this.type = type;
        this.unlockedRegion = unlockedRegion;
    }
    gain(n) {
        player.gainItem(GameConstants.StoneType[this.type], n);
    }
    use(amount, pokemon) {
        const partyPokemon = App.game.party.getPokemon(PokemonHelper.getPokemonByName(pokemon).id);
        const shiny = partyPokemon.useStone(this.type);
        return shiny;
    }
    init() {
        // If a region has already been manually set
        if (this.unlockedRegion > GameConstants.Region.none) {
            return false;
        }
        // Get a list of evolutions that use this stone, set the unlock region to the lowest region
        this.unlockedRegion = Math.min(...pokemonList.filter((p) => 
        // Filter to only include pokemon that make use of this evolution stone
        p.nativeRegion > GameConstants.Region.none
            && p.evolutions != undefined
            && p.evolutions.some(e => e.trigger === EvoTrigger.STONE && e.stone == this.type)).map((p) => 
        // Map to the native region for evolutions that use this stone
        Math.min(...p.evolutions.filter(e => e.trigger === EvoTrigger.STONE && e.stone == this.type)
            .map((e) => Math.max(p.nativeRegion, PokemonHelper.calcNativeRegion(e.evolvedPokemon)))
            .filter((r) => r > GameConstants.Region.none))));
    }
}
// TODO: Set prices for different kinds of stones
ItemList.Leaf_stone = new EvolutionStone(GameConstants.StoneType.Leaf_stone, 2500, undefined, 'Leaf Stone');
ItemList.Fire_stone = new EvolutionStone(GameConstants.StoneType.Fire_stone, 2500, undefined, 'Fire Stone');
ItemList.Water_stone = new EvolutionStone(GameConstants.StoneType.Water_stone, 2500, undefined, 'Water Stone');
ItemList.Thunder_stone = new EvolutionStone(GameConstants.StoneType.Thunder_stone, 2500, undefined, 'Thunder Stone');
ItemList.Moon_stone = new EvolutionStone(GameConstants.StoneType.Moon_stone, 2500, undefined, 'Moon Stone');
ItemList.Linking_cord = new EvolutionStone(GameConstants.StoneType.Linking_cord, 2500, undefined, 'Linking Cord');
ItemList.Sun_stone = new EvolutionStone(GameConstants.StoneType.Sun_stone, 2500, undefined, 'Sun Stone');
ItemList.Soothe_bell = new EvolutionStone(GameConstants.StoneType.Soothe_bell, 2500, undefined, 'Soothe Bell');
ItemList.Metal_coat = new EvolutionStone(GameConstants.StoneType.Metal_coat, 2500, undefined, 'Metal Coat');
ItemList.Kings_rock = new EvolutionStone(GameConstants.StoneType.Kings_rock, 2500, undefined, 'King\'s Rock');
ItemList.Upgrade = new EvolutionStone(GameConstants.StoneType.Upgrade, 2500, undefined, 'Upgrade');
ItemList.Dragon_scale = new EvolutionStone(GameConstants.StoneType.Dragon_scale, 2500, undefined, 'Dragon Scale');
ItemList.Prism_scale = new EvolutionStone(GameConstants.StoneType.Prism_scale, 2500, undefined, 'Prism Scale');
ItemList.Deepsea_tooth = new EvolutionStone(GameConstants.StoneType.Deepsea_tooth, 2500, undefined, 'Deep Sea Tooth');
ItemList.Deepsea_scale = new EvolutionStone(GameConstants.StoneType.Deepsea_scale, 2500, undefined, 'Deep Sea Scale');
ItemList.Shiny_stone = new EvolutionStone(GameConstants.StoneType.Shiny_stone, 2500, undefined, 'Shiny Stone');
ItemList.Dusk_stone = new EvolutionStone(GameConstants.StoneType.Dusk_stone, 2500, undefined, 'Dusk Stone');
ItemList.Dawn_stone = new EvolutionStone(GameConstants.StoneType.Dawn_stone, 2500, undefined, 'Dawn Stone');
ItemList.Razor_claw = new EvolutionStone(GameConstants.StoneType.Razor_claw, 2500, undefined, 'Razor Claw');
ItemList.Razor_fang = new EvolutionStone(GameConstants.StoneType.Razor_fang, 2500, undefined, 'Razor Fang');
ItemList.Electirizer = new EvolutionStone(GameConstants.StoneType.Electirizer, 2500, undefined, 'Electirizer');
ItemList.Magmarizer = new EvolutionStone(GameConstants.StoneType.Magmarizer, 2500, undefined, 'Magmarizer');
ItemList.Protector = new EvolutionStone(GameConstants.StoneType.Protector, 2500, undefined, 'Protector');
ItemList.Dubious_disc = new EvolutionStone(GameConstants.StoneType.Dubious_disc, 2500, undefined, 'Dubious Disc');
ItemList.Reaper_cloth = new EvolutionStone(GameConstants.StoneType.Reaper_cloth, 2500, undefined, 'Reaper Cloth');
ItemList.Black_DNA = new EvolutionStone(GameConstants.StoneType.Black_DNA, 2500, undefined, 'Black DNA');
ItemList.White_DNA = new EvolutionStone(GameConstants.StoneType.White_DNA, 2500, undefined, 'White DNA');
ItemList.Sachet = new EvolutionStone(GameConstants.StoneType.Sachet, 2500, undefined, 'Sachet');
ItemList.Whipped_dream = new EvolutionStone(GameConstants.StoneType.Whipped_dream, 2500, undefined, 'Whipped Dream');
ItemList.Key_stone = new EvolutionStone(GameConstants.StoneType.Key_stone, 250, GameConstants.Currency.battlePoint, 'Key Stone', GameConstants.Region.kalos, { multiplier: 1.1, multiplierDecrease: false });
ItemList.Ice_stone = new EvolutionStone(GameConstants.StoneType.Ice_stone, 2500, undefined, 'Ice Stone');
ItemList.Solar_light = new EvolutionStone(GameConstants.StoneType.Solar_light, 2500, undefined, 'Solar Light');
ItemList.Lunar_light = new EvolutionStone(GameConstants.StoneType.Lunar_light, 2500, undefined, 'Lunar Light');
ItemList.Pure_light = new EvolutionStone(GameConstants.StoneType.Pure_light, 2500, undefined, 'Pure Light');
ItemList.Crystallized_shadow = new EvolutionStone(GameConstants.StoneType.Crystallized_shadow, 2500, undefined, 'Crystallized Shadow');
ItemList.Sweet_apple = new EvolutionStone(GameConstants.StoneType.Sweet_apple, 5000, undefined, 'Sweet Apple');
ItemList.Tart_apple = new EvolutionStone(GameConstants.StoneType.Tart_apple, 5000, undefined, 'Tart Apple');
ItemList.Cracked_pot = new EvolutionStone(GameConstants.StoneType.Cracked_pot, 5000, undefined, 'Cracked Pot');
ItemList.Galarica_cuff = new EvolutionStone(GameConstants.StoneType.Galarica_cuff, 5000, undefined, 'Galarica Cuff');
ItemList.Galarica_wreath = new EvolutionStone(GameConstants.StoneType.Galarica_wreath, 5000, undefined, 'Galarica Wreath');
ItemList.Black_mane_hair = new EvolutionStone(GameConstants.StoneType.Black_mane_hair, 2500, undefined, 'Black Mane Hair');
ItemList.White_mane_hair = new EvolutionStone(GameConstants.StoneType.White_mane_hair, 2500, undefined, 'White Mane Hair');
ItemList.Black_augurite = new EvolutionStone(GameConstants.StoneType.Black_augurite, 500, undefined, 'Black Augurite');
ItemList.Peat_block = new EvolutionStone(GameConstants.StoneType.Peat_block, 5000, GameConstants.Currency.diamond, 'Peat Block');
ItemList.Auspicious_armor = new EvolutionStone(GameConstants.StoneType.Auspicious_armor, 5000, undefined, 'Auspicious Armor');
ItemList.Malicious_armor = new EvolutionStone(GameConstants.StoneType.Malicious_armor, 5000, undefined, 'Malicious Armor');
ItemList.Leaders_crest = new EvolutionStone(GameConstants.StoneType.Leaders_crest, 5000, undefined, 'Leader\'s Crest');
ItemList.Gimmighoul_coin = new EvolutionStone(GameConstants.StoneType.Gimmighoul_coin, 5000, undefined, 'Gimmighoul Coin');
ItemList.Syrupy_apple = new EvolutionStone(GameConstants.StoneType.Syrupy_apple, 5000, undefined, 'Syrupy Apple');
ItemList.Unremarkable_teacup = new EvolutionStone(GameConstants.StoneType.Unremarkable_teacup, 5000, undefined, 'Unremarkable Teacup');
ItemList.Metal_alloy = new EvolutionStone(GameConstants.StoneType.Metal_alloy, 5000, undefined, 'Metal Alloy');
/// <reference path="../../declarations/items/Item.d.ts"/>
class FarmHandItem extends Item {
    constructor(farmHandName, basePrice, currency = GameConstants.Currency.farmPoint) {
        super(`FarmHand${farmHandName}`, basePrice, currency, { maxAmount: 1 }, `Farm Hand ${farmHandName}`);
        this.farmHandName = farmHandName;
    }
    get farmHand() {
        return FarmHands.list.find(f => f.name == this.farmHandName);
    }
    get description() {
        var _a, _b, _c, _d, _e;
        const farmHand = this.farmHand;
        return `Cost: <img alt="Farm Points" src="assets/images/currency/farmPoint.svg" width="20px">&nbsp;${((_b = (_a = farmHand === null || farmHand === void 0 ? void 0 : farmHand.cost) === null || _a === void 0 ? void 0 : _a.amount) !== null && _b !== void 0 ? _b : 0).toLocaleString('en-US')}/hour<br/>
        Work Speed: ${GameConstants.formatTimeFullLetters(((_c = farmHand === null || farmHand === void 0 ? void 0 : farmHand.workTick) !== null && _c !== void 0 ? _c : GameConstants.MINUTE) / 1000)}<br/>
        Efficiency: ${((_d = farmHand === null || farmHand === void 0 ? void 0 : farmHand.efficiency) !== null && _d !== void 0 ? _d : 0).toLocaleString('en-US')}<br/>
        Max Energy: ${((_e = farmHand === null || farmHand === void 0 ? void 0 : farmHand.maxEnergy) !== null && _e !== void 0 ? _e : 0).toLocaleString('en-US')}`;
    }
    isAvailable() {
        var _a, _b;
        const purchased = (_b = (_a = this.farmHand) === null || _a === void 0 ? void 0 : _a.isUnlocked()) !== null && _b !== void 0 ? _b : true;
        return super.isAvailable() && !purchased;
    }
    get image() {
        var _a;
        const trainerID = ((_a = this.farmHand) === null || _a === void 0 ? void 0 : _a.trainerSprite) || 0;
        return `assets/images/profile/trainer-${trainerID}.png`;
    }
}
// Berry Masters
ItemList.FarmHandBailey = new FarmHandItem('Bailey', 50000, GameConstants.Currency.farmPoint); // Johto (50k)
ItemList.FarmHandKerry = new FarmHandItem('Kerry', 100000, GameConstants.Currency.farmPoint); // Hoenn (100k)
ItemList.FarmHandRiley = new FarmHandItem('Riley', 200000, GameConstants.Currency.farmPoint); // Sinnoh (200k)
//ItemList['FarmHandJessie']   = new FarmHandItem('Jessie', 500000, GameConstants.Currency.farmPoint); // Alola (500k) (not implemented)
// Battle Frontier
ItemList.FarmHandJamie = new FarmHandItem('Jamie', 20000, GameConstants.Currency.battlePoint);
/// <reference path="../../declarations/items/Item.d.ts"/>
class HatcheryHelperItem extends Item {
    constructor(hatcheryHelperName, basePrice, currency = GameConstants.Currency.money) {
        super(`HatcheryHelper${hatcheryHelperName}`, basePrice, currency, { maxAmount: 1 }, `Hatchery Helper ${hatcheryHelperName}`);
        this.hatcheryHelperName = hatcheryHelperName;
    }
    get hatcheryHelper() {
        return HatcheryHelpers.list.find(f => f.name == this.hatcheryHelperName);
    }
    get description() {
        var _a, _b, _c, _d, _e;
        const hatcheryHelper = this.hatcheryHelper;
        return `Cost: <img src="assets/images/currency/${GameConstants.Currency[(_a = hatcheryHelper === null || hatcheryHelper === void 0 ? void 0 : hatcheryHelper.cost) === null || _a === void 0 ? void 0 : _a.currency]}.svg" width="20px">&nbsp;${((_c = (_b = hatcheryHelper === null || hatcheryHelper === void 0 ? void 0 : hatcheryHelper.cost) === null || _b === void 0 ? void 0 : _b.amount) !== null && _c !== void 0 ? _c : 0).toLocaleString('en-US')}/hatch<br/>
        Step Efficiency: ${((_d = hatcheryHelper === null || hatcheryHelper === void 0 ? void 0 : hatcheryHelper.stepEfficiencyBase) !== null && _d !== void 0 ? _d : 0).toLocaleString('en-US')}%<br/>
        Attack Efficiency: ${((_e = hatcheryHelper === null || hatcheryHelper === void 0 ? void 0 : hatcheryHelper.attackEfficiencyBase) !== null && _e !== void 0 ? _e : 0).toLocaleString('en-US')}%`;
    }
    isAvailable() {
        var _a, _b;
        const purchased = (_b = (_a = this.hatcheryHelper) === null || _a === void 0 ? void 0 : _a.isUnlocked()) !== null && _b !== void 0 ? _b : true;
        return super.isAvailable() && !purchased;
    }
    get image() {
        var _a;
        const trainerID = ((_a = this.hatcheryHelper) === null || _a === void 0 ? void 0 : _a.trainerSprite) || 0;
        return `assets/images/profile/trainer-${trainerID}.png`;
    }
}
// Berry Masters
ItemList.HatcheryHelperJasmine = new HatcheryHelperItem('Jasmine', 10000000, GameConstants.Currency.money);
ItemList.HatcheryHelperDakota = new HatcheryHelperItem('Dakota', 100000, GameConstants.Currency.dungeonToken);
ItemList.HatcheryHelperCameron = new HatcheryHelperItem('Cameron', 100000, GameConstants.Currency.farmPoint);
ItemList.HatcheryHelperCarey = new HatcheryHelperItem('Carey', 10000, GameConstants.Currency.questPoint);
ItemList.HatcheryHelperKris = new HatcheryHelperItem('Kris', 8000, GameConstants.Currency.diamond);
ItemList.HatcheryHelperNoel = new HatcheryHelperItem('Noel', 20000, GameConstants.Currency.battlePoint);
ItemList.HatcheryHelperLeslie = new HatcheryHelperItem('Leslie', 10000, GameConstants.Currency.money);
/// <reference path="../../declarations/items/Item.d.ts"/>
class HeldItem extends Item {
    constructor(name, basePrice, currency, shopOptions, displayName, description, regionUnlocked, canUse) {
        super(name, basePrice, currency, shopOptions, displayName, description, 'heldItems');
        this.canUse = canUse;
        this.regionUnlocked = regionUnlocked;
    }
    static getSortedHeldItems() {
        const sortedHeldItems = Object.values(ItemList).filter(i => i instanceof HeldItem).sort((a, b) => {
            return a.regionUnlocked - b.regionUnlocked;
        });
        return {
            attack: {
                title: 'Pokémon Restricted',
                items: sortedHeldItems.filter(i => i instanceof PokemonRestrictedAttackBonusHeldItem),
            },
            typeRestricted: {
                title: 'Type Restricted',
                items: sortedHeldItems.filter(i => i instanceof TypeRestrictedAttackBonusHeldItem),
            },
            ev: {
                title: 'EV Gain',
                items: sortedHeldItems.filter(i => i instanceof EVsGainedBonusHeldItem),
            },
            exp: {
                title: 'EXP Gain',
                items: sortedHeldItems.filter(i => i instanceof ExpGainedBonusHeldItem),
            },
            other: {
                title: 'Other',
                items: sortedHeldItems.filter(i => i.constructor.name === 'AttackBonusHeldItem' || i.constructor.name === 'HeldItem'),
            },
        };
    }
    isUnlocked() {
        return player.highestRegion() >= this.regionUnlocked;
    }
}
HeldItem.heldItemSelected = ko.observable(undefined);
class AttackBonusHeldItem extends HeldItem {
    constructor(name, basePrice, currency, shopOptions, displayName, _attackBonus, regionUnlocked, pokemonDescription = 'the Pokémon', canUse = (pokemon) => true, applyBonus = () => true, additionDescription = '') {
        super(name, basePrice, currency, shopOptions, displayName, `A held item that ${_attackBonus > 1 ? 'raises' : 'lowers'} the attack of ${pokemonDescription} by ${(Math.abs(_attackBonus - 1)).toLocaleString('en-US', { style: 'percent', minimumFractionDigits: 0, maximumFractionDigits: 0 })}${additionDescription}.`, regionUnlocked, canUse);
        this._attackBonus = _attackBonus;
        this.applyBonus = applyBonus;
    }
    get attackBonus() {
        return this.applyBonus() ? this._attackBonus : 1;
    }
}
class PokemonRestrictedAttackBonusHeldItem extends AttackBonusHeldItem {
    constructor(name, basePrice, currency, shopOptions, displayName, _attackBonus, regionUnlocked, pokemonDescription, canUse) {
        super(name, basePrice, currency, shopOptions, displayName, _attackBonus, regionUnlocked, pokemonDescription, canUse);
    }
}
class TypeRestrictedAttackBonusHeldItem extends AttackBonusHeldItem {
    constructor(name, basePrice, currency, shopOptions, displayName, _attackBonus, type, regionUnlocked) {
        super(name, basePrice, currency, shopOptions, displayName, _attackBonus, regionUnlocked, `${GameHelper.anOrA(PokemonType[type])} ${PokemonType[type]}-type Pokémon`, (pokemon) => {
            const dataPokemon = PokemonHelper.getPokemonById(pokemon.id);
            return dataPokemon.type1 == type || dataPokemon.type2 == type;
        });
    }
}
class HybridAttackBonusHeldItem extends AttackBonusHeldItem {
    constructor(name, basePrice, currency, shopOptions, displayName, attackBonus, _clickAttackBonus, regionUnlocked, canUse = (pokemon) => true, applyBonus = () => true) {
        super(name, basePrice, currency, shopOptions, displayName, attackBonus, regionUnlocked, undefined, canUse, applyBonus, ` and ${_clickAttackBonus > 1 ? 'raises' : 'lowers'} its click attack contribution by ${(Math.abs(_clickAttackBonus - 1) * 100).toFixed(0)}%`);
        this._clickAttackBonus = _clickAttackBonus;
    }
    get clickAttackBonus() {
        return this.applyBonus() ? this._clickAttackBonus : 1;
    }
}
class EVsGainedBonusHeldItem extends HeldItem {
    constructor(name, basePrice, currency, shopOptions, displayName, gainedBonus, regionUnlocked) {
        super(name, basePrice, currency, shopOptions, displayName, `A held item that increases EV gains for the holding Pokémon by ${(gainedBonus - 1).toLocaleString('en-US', { style: 'percent', minimumFractionDigits: 0, maximumFractionDigits: 0 })}.`, regionUnlocked, (pokemon) => {
            return pokemon.pokerus > GameConstants.Pokerus.Uninfected;
        });
        this.gainedBonus = gainedBonus;
    }
}
class ExpGainedBonusHeldItem extends HeldItem {
    constructor(name, basePrice, currency, shopOptions, displayName, gainedBonus, regionUnlocked, pokemonDescription = 'the holding Pokémon', canUse = (pokemon) => true) {
        super(name, basePrice, currency, shopOptions, displayName, `A held item that earns ${pokemonDescription} ${(gainedBonus - 1).toLocaleString('en-US', { style: 'percent', minimumFractionDigits: 0, maximumFractionDigits: 0 })} bonus Experience Points.`, regionUnlocked, canUse);
        this.gainedBonus = gainedBonus;
    }
}
ItemList.Wonder_Chest = new ExpGainedBonusHeldItem('Wonder_Chest', 10000, GameConstants.Currency.money, undefined, 'Wonder Chest', 1.25, GameConstants.Region.johto);
ItemList.Miracle_Chest = new ExpGainedBonusHeldItem('Miracle_Chest', 30000, GameConstants.Currency.money, { visible: new MaxRegionRequirement(GameConstants.Region.sinnoh) }, 'Miracle Chest', 1.5, GameConstants.Region.sinnoh);
ItemList.Joy_Scent = new ExpGainedBonusHeldItem('Joy_Scent', 10000, GameConstants.Currency.money, undefined, 'Joy Scent', 1.75, GameConstants.Region.hoenn, ' the holding Shadow Pokémon', (p) => p.shadow >= GameConstants.ShadowStatus.Shadow);
ItemList.Excite_Scent = new ExpGainedBonusHeldItem('Excite_Scent', 10000, GameConstants.Currency.money, undefined, 'Excite Scent', 2, GameConstants.Region.hoenn, 'the holding Shadow Pokémon', (p) => p.shadow >= GameConstants.ShadowStatus.Shadow);
ItemList.Vivid_Scent = new ExpGainedBonusHeldItem('Vivid_Scent', 10000, GameConstants.Currency.money, undefined, 'Vivid Scent', 2.5, GameConstants.Region.hoenn, 'the holding Shadow Pokémon', (p) => p.shadow >= GameConstants.ShadowStatus.Shadow);
ItemList.Muscle_Band = new AttackBonusHeldItem('Muscle_Band', 1000, GameConstants.Currency.battlePoint, undefined, 'Muscle Band', 1.05, GameConstants.Region.hoenn);
// Pokemon specific items
ItemList.Light_Ball = new PokemonRestrictedAttackBonusHeldItem('Light_Ball', 10000, GameConstants.Currency.money, undefined, 'Light Ball', 1.3, GameConstants.Region.johto, 'Pikachu', (pokemon) => Math.floor(pokemon.id) == 25);
ItemList.Lucky_Punch = new PokemonRestrictedAttackBonusHeldItem('Lucky_Punch', 10000, GameConstants.Currency.money, undefined, 'Lucky Punch', 1.3, GameConstants.Region.sinnoh, 'Happiny, Chansey or Blissey', (pokemon) => Math.floor(pokemon.id) == 440 || Math.floor(pokemon.id) == 113 || Math.floor(pokemon.id) == 242);
ItemList.Quick_Powder = new PokemonRestrictedAttackBonusHeldItem('Quick_Powder', 10000, GameConstants.Currency.money, undefined, 'Quick Powder', 1.3, GameConstants.Region.kalos, 'Ditto', (pokemon) => Math.floor(pokemon.id) == 132);
ItemList.Thick_Club = new PokemonRestrictedAttackBonusHeldItem('Thick_Club', 10000, GameConstants.Currency.money, undefined, 'Thick Club', 1.3, GameConstants.Region.alola, 'Cubone or Marowak', (pokemon) => Math.floor(pokemon.id) == 104 || Math.floor(pokemon.id) == 105);
ItemList.Soul_Dew = new PokemonRestrictedAttackBonusHeldItem('Soul_Dew', 10000, GameConstants.Currency.money, undefined, 'Soul Dew', 1.5, GameConstants.Region.hoenn, 'Latias or Latios', (pokemon) => Math.floor(pokemon.id) == 380 || Math.floor(pokemon.id) == 381);
ItemList.Adamant_Orb = new PokemonRestrictedAttackBonusHeldItem('Adamant_Orb', 10000, GameConstants.Currency.money, undefined, 'Adamant Orb', 1.5, GameConstants.Region.sinnoh, 'Dialga', (pokemon) => Math.floor(pokemon.id) == 483);
ItemList.Lustrous_Orb = new PokemonRestrictedAttackBonusHeldItem('Lustrous_Orb', 10000, GameConstants.Currency.money, undefined, 'Lustrous Orb', 1.5, GameConstants.Region.sinnoh, 'Palkia', (pokemon) => Math.floor(pokemon.id) == 484);
ItemList.Griseous_Orb = new PokemonRestrictedAttackBonusHeldItem('Griseous_Orb', 10000, GameConstants.Currency.money, undefined, 'Griseous Orb', 1.5, GameConstants.Region.sinnoh, 'Giratina', (pokemon) => Math.floor(pokemon.id) == 487);
ItemList.Gracidea = new PokemonRestrictedAttackBonusHeldItem('Gracidea', 200000, GameConstants.Currency.farmPoint, undefined, 'Gracidea', 1.5, GameConstants.Region.sinnoh, 'Shaymin', (pokemon) => Math.floor(pokemon.id) == 492);
ItemList.Burn_Drive = new PokemonRestrictedAttackBonusHeldItem('Burn_Drive', 10000, GameConstants.Currency.money, undefined, 'Burn Drive', 1.5, GameConstants.Region.unova, 'Genesect', (pokemon) => pokemon.id == 649 || pokemon.id == 649.01 || pokemon.id == 649.05 || pokemon.id == 649.06);
ItemList.Chill_Drive = new PokemonRestrictedAttackBonusHeldItem('Chill_Drive', 10000, GameConstants.Currency.money, undefined, 'Chill Drive', 1.5, GameConstants.Region.unova, 'Genesect', (pokemon) => pokemon.id == 649 || pokemon.id == 649.02 || pokemon.id == 649.05 || pokemon.id == 649.07);
ItemList.Douse_Drive = new PokemonRestrictedAttackBonusHeldItem('Douse_Drive', 10000, GameConstants.Currency.money, undefined, 'Douse Drive', 1.5, GameConstants.Region.unova, 'Genesect', (pokemon) => pokemon.id == 649 || pokemon.id == 649.03 || pokemon.id == 649.05 || pokemon.id == 649.08);
ItemList.Shock_Drive = new PokemonRestrictedAttackBonusHeldItem('Shock_Drive', 10000, GameConstants.Currency.money, undefined, 'Shock Drive', 1.5, GameConstants.Region.unova, 'Genesect', (pokemon) => pokemon.id == 649 || pokemon.id == 649.04 || pokemon.id == 649.05 || pokemon.id == 649.09);
ItemList.Great_Twisted_Spoon = new PokemonRestrictedAttackBonusHeldItem('Great_Twisted_Spoon', 10000, GameConstants.Currency.money, undefined, 'Great Twisted Spoon', 1.5, GameConstants.Region.kalos, 'Mewtwo', (pokemon) => Math.floor(pokemon.id) == 150);
ItemList.Leek = new PokemonRestrictedAttackBonusHeldItem('Leek', 10000, GameConstants.Currency.money, undefined, 'Leek', 1.3, GameConstants.Region.galar, 'Farfetch\'d or Sirfetch\'d', (pokemon) => Math.floor(pokemon.id) == 83 || Math.floor(pokemon.id) == 865);
ItemList.Rusted_Sword = new PokemonRestrictedAttackBonusHeldItem('Rusted_Sword', 10000, GameConstants.Currency.money, undefined, 'Rusted Sword', 1.5, GameConstants.Region.galar, 'Zacian', (pokemon) => Math.floor(pokemon.id) == 888);
ItemList.Rusted_Shield = new PokemonRestrictedAttackBonusHeldItem('Rusted_Shield', 10000, GameConstants.Currency.money, undefined, 'Rusted Shield', 1.5, GameConstants.Region.galar, 'Zamazenta', (pokemon) => Math.floor(pokemon.id) == 889);
ItemList.Wellspring_Mask = new PokemonRestrictedAttackBonusHeldItem('Wellspring_Mask', 10000, GameConstants.Currency.money, undefined, 'Wellspring Mask', 1.5, GameConstants.Region.paldea, 'Ogerpon', (pokemon) => pokemon.id == 1017 || pokemon.id == 1017.01 || pokemon.id == 1017.04 || pokemon.id == 1017.05);
ItemList.Hearthflame_Mask = new PokemonRestrictedAttackBonusHeldItem('Hearthflame_Mask', 10000, GameConstants.Currency.money, undefined, 'Hearthflame Mask', 1.5, GameConstants.Region.paldea, 'Ogerpon', (pokemon) => pokemon.id == 1017 || pokemon.id == 1017.02 || pokemon.id == 1017.04 || pokemon.id == 1017.06);
ItemList.Cornerstone_Mask = new PokemonRestrictedAttackBonusHeldItem('Cornerstone_Mask', 10000, GameConstants.Currency.money, undefined, 'Cornerstone Mask', 1.5, GameConstants.Region.paldea, 'Ogerpon', (pokemon) => pokemon.id == 1017 || pokemon.id == 1017.03 || pokemon.id == 1017.04 || pokemon.id == 1017.07);
ItemList.Booster_Energy = new PokemonRestrictedAttackBonusHeldItem('Booster_Energy', 10000, GameConstants.Currency.money, undefined, 'Booster Energy', 1.33, GameConstants.Region.paldea, /*16 Pokémon. Probably too many to list.*/ 'Paradox Pokémon', (pokemon) => [984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 1005, 1006, 1009, 1010, 1020, 1021, 1022, 1023].includes(Math.floor(pokemon.id)));
// Type specific items
ItemList.Black_Belt = new TypeRestrictedAttackBonusHeldItem('Black_Belt', 10000, GameConstants.Currency.money, undefined, 'Black Belt', 1.2, PokemonType.Fighting, GameConstants.Region.johto);
ItemList.Black_Glasses = new TypeRestrictedAttackBonusHeldItem('Black_Glasses', 10000, GameConstants.Currency.money, undefined, 'Black Glasses', 1.2, PokemonType.Dark, GameConstants.Region.johto);
ItemList.Charcoal = new TypeRestrictedAttackBonusHeldItem('Charcoal', 10000, GameConstants.Currency.money, undefined, 'Charcoal', 1.2, PokemonType.Fire, GameConstants.Region.johto);
ItemList.Dragon_Fang = new TypeRestrictedAttackBonusHeldItem('Dragon_Fang', 10000, GameConstants.Currency.money, undefined, 'Dragon Fang', 1.2, PokemonType.Dragon, GameConstants.Region.johto);
ItemList.Magnet = new TypeRestrictedAttackBonusHeldItem('Magnet', 10000, GameConstants.Currency.money, undefined, 'Magnet', 1.2, PokemonType.Electric, GameConstants.Region.johto);
ItemList.Metal_Powder = new TypeRestrictedAttackBonusHeldItem('Metal_Powder', 10000, GameConstants.Currency.money, undefined, 'Metal Powder', 1.2, PokemonType.Steel, GameConstants.Region.johto);
ItemList.Miracle_Seed = new TypeRestrictedAttackBonusHeldItem('Miracle_Seed', 10000, GameConstants.Currency.money, undefined, 'Miracle Seed', 1.2, PokemonType.Grass, GameConstants.Region.johto);
ItemList.Mystic_Water = new TypeRestrictedAttackBonusHeldItem('Mystic_Water', 10000, GameConstants.Currency.money, undefined, 'Mystic Water', 1.2, PokemonType.Water, GameConstants.Region.johto);
ItemList.Never_Melt_Ice = new TypeRestrictedAttackBonusHeldItem('Never_Melt_Ice', 10000, GameConstants.Currency.money, undefined, 'Never-Melt Ice', 1.2, PokemonType.Ice, GameConstants.Region.johto);
ItemList.Fairy_Feather = new TypeRestrictedAttackBonusHeldItem('Fairy_Feather', 10000, GameConstants.Currency.money, undefined, 'Fairy Feather', 1.2, PokemonType.Fairy, GameConstants.Region.johto);
ItemList.Poison_Barb = new TypeRestrictedAttackBonusHeldItem('Poison_Barb', 10000, GameConstants.Currency.money, undefined, 'Poison Barb', 1.2, PokemonType.Poison, GameConstants.Region.johto);
ItemList.Rock_Incense = new TypeRestrictedAttackBonusHeldItem('Rock_Incense', 10000, GameConstants.Currency.money, undefined, 'Rock Incense', 1.2, PokemonType.Rock, GameConstants.Region.johto);
ItemList.Sharp_Beak = new TypeRestrictedAttackBonusHeldItem('Sharp_Beak', 10000, GameConstants.Currency.money, undefined, 'Sharp Beak', 1.2, PokemonType.Flying, GameConstants.Region.johto);
ItemList.Silk_Scarf = new TypeRestrictedAttackBonusHeldItem('Silk_Scarf', 10000, GameConstants.Currency.money, undefined, 'Silk Scarf', 1.2, PokemonType.Normal, GameConstants.Region.johto);
ItemList.Silver_Powder = new TypeRestrictedAttackBonusHeldItem('Silver_Powder', 10000, GameConstants.Currency.money, undefined, 'Silver Powder', 1.2, PokemonType.Bug, GameConstants.Region.johto);
ItemList.Soft_Sand = new TypeRestrictedAttackBonusHeldItem('Soft_Sand', 10000, GameConstants.Currency.money, undefined, 'Soft Sand', 1.2, PokemonType.Ground, GameConstants.Region.johto);
ItemList.Spell_Tag = new TypeRestrictedAttackBonusHeldItem('Spell_Tag', 10000, GameConstants.Currency.money, undefined, 'Spell Tag', 1.2, PokemonType.Ghost, GameConstants.Region.johto);
ItemList.Twisted_Spoon = new TypeRestrictedAttackBonusHeldItem('Twisted_Spoon', 10000, GameConstants.Currency.money, undefined, 'Twisted Spoon', 1.2, PokemonType.Psychic, GameConstants.Region.johto);
ItemList.Agile_Scroll = new HybridAttackBonusHeldItem('Agile_Scroll', 10000, GameConstants.Currency.money, undefined, 'Agile Scroll', 0.5, 2.0, GameConstants.Region.hisui);
ItemList.Strong_Scroll = new HybridAttackBonusHeldItem('Strong_Scroll', 10000, GameConstants.Currency.money, undefined, 'Strong Scroll', 2.0, 0.5, GameConstants.Region.hisui);
ItemList.Power_Herb = new AttackBonusHeldItem('Power_Herb', undefined, GameConstants.Currency.money, undefined, 'Power Herb', 1.5, GameConstants.Region.alola, undefined, (pokemon) => true, () => App.game.gameState == GameConstants.GameState.dungeon && DungeonRunner.fightingBoss(), ' against Dungeon Bosses');
ItemList.Macho_Brace = new EVsGainedBonusHeldItem('Macho_Brace', 1500, GameConstants.Currency.questPoint, undefined, 'Macho Brace', 1.5, GameConstants.Region.sinnoh);
ItemList.Power_Bracer = new EVsGainedBonusHeldItem('Power_Bracer', 2000, GameConstants.Currency.questPoint, undefined, 'Power Bracer', 2, GameConstants.Region.alola);
ItemList.Everstone = new HeldItem('Everstone', 10000, GameConstants.Currency.money, undefined, 'Everstone', 'Stops the holder from evolving due to level or a stone being used. Also prevents new baby Pokémon from hatching.', GameConstants.Region.kanto, (pokemon) => {
    var _a;
    // level or stone evo
    if ((_a = pokemon.evolutions) === null || _a === void 0 ? void 0 : _a.length) {
        for (const evo of pokemon.evolutions) {
            if (evo.trigger === EvoTrigger.LEVEL || evo.trigger === EvoTrigger.STONE) {
                return true;
            }
        }
    }
    // babies
    const baby = pokemonBabyPrevolutionMap[pokemon.name];
    return baby !== undefined && pokemon.name != baby;
});
/// <reference path="../../declarations/items/Item.d.ts"/>
class ZCrystalItem extends Item {
    constructor(type) {
        const description = `Allows ${PokemonType[type]}-type Pokémon to use Z-Moves for the next battle. They then need to rest a bit.`;
        super(GameConstants.zCrystalItemType[type], Infinity, undefined, { maxAmount: 1 }, undefined, description, 'zCrystal');
        this.type = type;
    }
    use() {
        App.game.zMoves.activate(this.type);
        player.gainItem(this.name, 1);
        return true;
    }
    isSoldOut() {
        return ItemHandler.hasItem(this.name);
    }
    checkCanUse() {
        if (App.game.challenges.list.disableBattleItems.active()) {
            Notifier.notify({
                title: 'Challenge Mode',
                message: 'Battle Items are Disabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (App.game.zMoves.isActive()) {
            return false;
        }
        if (!ItemHandler.hasItem(this.name)) {
            Notifier.notify({
                message: `You don't have the ${this.displayName}...`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        return true;
    }
}
GameConstants.zCrystalItemType.forEach((name, type) => {
    ItemList[name] = new ZCrystalItem(type);
});
class MegaStone {
    constructor(pokemonId, pokemonBaseAttack, pokemonAttack) {
        this.pokemonId = pokemonId;
        this.pokemonAttack = pokemonAttack;
        this.saveKey = 'megastone';
        this.attackRequired = pokemonBaseAttack * 500;
    }
    getImage() {
        return `assets/images/megaStone/${this.pokemonId}.png`;
    }
    getTooltipText() {
        if (this.canEvolve()) {
            return 'Use a Key Stone to Mega Evolve.';
        }
        else {
            return `Needs at least ${this.attackRequired.toLocaleString('en-US')} attack to Mega Evolve.`;
        }
    }
    canEvolve() {
        return this.pokemonAttack() >= this.attackRequired;
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
///<reference path="../../declarations/enums/CaughtStatus.d.ts"/>
class Party {
    constructor(multiplier) {
        this.multiplier = multiplier;
        this.name = 'Pokemon Party';
        this.saveKey = 'party';
        this.defaults = {
            caughtPokemon: [],
        };
        this.pokemonAttackObservable = ko.pureComputed(() => {
            return App.game.party.calculatePokemonAttack();
        }).extend({ rateLimit: 1000 });
        this.clickAttackBreakdown = ko.pureComputed(() => {
            let numShiny = 0, numResistant = 0, numPurified = 0;
            this.activePartyPokemon.forEach((p) => {
                if (p.shiny) {
                    numShiny += 1;
                }
                if (p.pokerus >= GameConstants.Pokerus.Resistant) {
                    numResistant += 1;
                }
                if (p.shadow >= GameConstants.ShadowStatus.Purified) {
                    numPurified += 1;
                }
            });
            return {
                caughtPokemon: this.activePartyPokemon.length,
                shinyPokemon: numShiny,
                resistantPokemon: numResistant,
                purifiedPokemon: numPurified,
                xClickModifier: EffectEngineRunner.isActive(ItemList.xClick.name)() ? ItemList.xClick.multiplyBy : 1,
                blackFluteModifier: FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Black_Flute),
                rockyHelmetModifier: App.game.oakItems.calculateBonus(OakItemType.Rocky_Helmet),
                baseClickAttack: Number(App.game.party.calculateBaseClickAttack().toFixed(4)),
            };
        });
        this._caughtPokemon = ko.observableArray([]);
        this.hasMaxLevelPokemon = ko.pureComputed(() => {
            return this.caughtPokemon.some(p => p.level === 100);
        }).extend({ rateLimit: 1000 });
        this.hasShadowPokemon = ko.computed(() => {
            return this.caughtPokemon.some(p => p.shadow === GameConstants.ShadowStatus.Shadow);
        }).extend({ rateLimit: 1000 });
        // This will be completely rebuilt each time a pokemon is caught.
        // Not ideal but still better than mutliple locations scanning through the list to find what they want
        this._caughtPokemonLookup = ko.computed(() => {
            return this.caughtPokemon.reduce((map, p) => {
                map.set(p.id, p);
                return map;
            }, new Map());
        });
        this.calculateBaseClickAttack = ko.computed(() => {
            // Base power
            // Shiny pokemon help with a 100% boost
            // Resistant pokemon give a 100% boost
            const partyClickBonus = this.activePartyPokemon.reduce((total, p) => total + p.clickAttackBonus(), 1);
            return Math.pow(partyClickBonus, 1.4);
        });
    }
    gainPokemonByName(name, shiny, suppressNotification, gender, shadow) {
        const pokemon = pokemonMap[name];
        this.gainPokemonById(pokemon.id, shiny, suppressNotification, gender, shadow);
    }
    gainPokemonById(id, shiny = false, suppressNewCatchNotification = false, gender = PokemonFactory.generateGenderById(id), shadow = GameConstants.ShadowStatus.None) {
        const isShadow = shadow === GameConstants.ShadowStatus.Shadow;
        PokemonHelper.incrementPokemonStatistics(id, GameConstants.PokemonStatisticsType.Captured, shiny, gender, shadow);
        const newCatch = !this.alreadyCaughtPokemon(id);
        const newShiny = shiny && !this.alreadyCaughtPokemon(id, true);
        const newShadow = isShadow && !this.alreadyCaughtPokemon(id, false, true);
        if (newCatch) {
            // Create new party pokemon
            this._caughtPokemon.push(PokemonFactory.generatePartyPokemon(id, shiny, gender, shadow));
            // Keep caughtPokemon array sorted by ID
            this._caughtPokemon.sort((a, b) => a.id - b.id);
        }
        // Update existing party pokemon
        const partyPokemon = this.getPokemon(id);
        if (newShiny) {
            partyPokemon.shiny = true;
        }
        if (newShadow) {
            partyPokemon.shadow = GameConstants.ShadowStatus.Shadow;
        }
        // Properties of the PartyPokemon used for notifications -- shininess, shadow status, etc. comes from this catch
        const { name, displayName } = partyPokemon;
        // Notifications
        if (newCatch && !suppressNewCatchNotification) {
            Notifier.notify({
                message: `You have captured ${GameHelper.anOrA(name)} ${displayName}!`,
                pokemonImage: PokemonHelper.getImage(id, shiny, gender, shadow),
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.General.new_catch,
                setting: NotificationConstants.NotificationSetting.General.new_catch,
            });
        }
        if (newShiny) {
            Notifier.notify({
                message: `✨ You have captured a shiny ${displayName}! ✨`,
                pokemonImage: PokemonHelper.getImage(id, shiny, gender, shadow),
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.new_catch,
                setting: NotificationConstants.NotificationSetting.General.new_catch,
            });
        }
        if (newShadow) {
            Notifier.notify({
                message: `You have captured a shadow ${displayName}!`,
                pokemonImage: PokemonHelper.getImage(id, shiny, gender, shadow),
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.new_catch,
                setting: NotificationConstants.NotificationSetting.General.new_catch,
            });
        }
        // Logbook entries
        if (newCatch) {
            App.game.logbook.newLog(LogBookTypes.CAUGHT, createLogContent.captured({ pokemon: name }));
        }
        if (shiny) {
            // Both new and duplicate shinies get logged
            const shinyLogContent = newShiny ? createLogContent.capturedShiny : createLogContent.capturedShinyDupe;
            App.game.logbook.newLog(LogBookTypes.CAUGHT, shinyLogContent({ pokemon: name }));
        }
        if (newShadow) {
            App.game.logbook.newLog(LogBookTypes.CAUGHT, createLogContent.capturedShadow({ pokemon: name }));
        }
    }
    removePokemonByName(name) {
        this._caughtPokemon.remove(p => p.name == name);
    }
    gainExp(exp = 0, level = 1, trainer = false) {
        const multBonus = this.multiplier.getBonus('exp', true);
        const trainerBonus = trainer ? 1.5 : 1;
        const expTotal = Math.floor(exp * level * trainerBonus * multBonus / 9);
        let shadowExpGained = 0;
        for (const pokemon of this.caughtPokemon) {
            const exp = pokemon.gainExp(expTotal);
            if (pokemon.shadow >= GameConstants.ShadowStatus.Shadow) {
                shadowExpGained += exp;
            }
        }
        App.game.purifyChamber.gainFlow(shadowExpGained);
    }
    /**
     * Calculate the attack of all your Pokémon
     * @param type1
     * @param type2 types of the enemy we're calculating damage against.
     * @returns {number} damage to be done.
     */
    calculatePokemonAttack(type1 = PokemonType.None, type2 = PokemonType.None, ignoreRegionMultiplier = false, region = player.region, includeBreeding = false, useBaseAttack = false, overrideWeather, ignoreLevel = false, includeTempBonuses = true, subregion = player.subregion) {
        let attack = 0;
        const pokemon = this.partyPokemonActiveInSubRegion(region, subregion);
        const ignoreRegionMultiplierOrMKJ = ignoreRegionMultiplier || region == GameConstants.Region.alola && subregion == GameConstants.AlolaSubRegions.MagikarpJump;
        for (const p of pokemon) {
            attack += this.calculateOnePokemonAttack(p, type1, type2, region, ignoreRegionMultiplierOrMKJ, includeBreeding, useBaseAttack, overrideWeather, ignoreLevel, includeTempBonuses);
        }
        const bonus = this.multiplier.getBonus('pokemonAttack');
        return Math.round(attack * bonus);
    }
    calculateOnePokemonAttack(pokemon, type1 = PokemonType.None, type2 = PokemonType.None, region = player.region, ignoreRegionMultiplier = false, includeBreeding = false, useBaseAttack = false, overrideWeather, ignoreLevel = false, includeTempBonuses = true) {
        var _a;
        let multiplier = 1, attack = 0;
        const pAttack = useBaseAttack ? pokemon.baseAttack : (ignoreLevel ? pokemon.calculateAttack(ignoreLevel) : pokemon.attack);
        const nativeRegion = PokemonHelper.calcNativeRegion(pokemon.name);
        const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
        // Check if the pokemon is in their native region
        if (!ignoreRegionMultiplier && nativeRegion != region && nativeRegion != GameConstants.Region.none) {
            // Check if the challenge mode is active
            if (App.game.challenges.list.regionalAttackDebuff.active()) {
                // Pokemon only retain a % of their total damage in other regions based on highest region.
                multiplier = this.getRegionAttackMultiplier();
            }
        }
        // Check if the Pokemon is currently breeding (no attack)
        if (includeBreeding || !pokemon.breeding) {
            if (type1 == PokemonType.None) {
                attack = pAttack * multiplier;
            }
            else {
                attack = pAttack * TypeHelper.getAttackModifier(dataPokemon.type1, dataPokemon.type2, type1, type2) * multiplier;
            }
        }
        // Weather boost
        const weather = Weather.weatherConditions[overrideWeather !== null && overrideWeather !== void 0 ? overrideWeather : Weather.currentWeather()];
        (_a = weather.multipliers) === null || _a === void 0 ? void 0 : _a.forEach(value => {
            if (value.type == dataPokemon.type1) {
                attack *= value.multiplier;
            }
            if (value.type == dataPokemon.type2) {
                attack *= value.multiplier;
            }
        });
        // Should we take flute boost into account
        if (includeTempBonuses) {
            FluteEffectRunner.activeGemTypes().forEach(value => {
                if (value == dataPokemon.type1) {
                    attack *= GameConstants.FLUTE_TYPE_ATTACK_MULTIPLIER;
                }
                if (value == dataPokemon.type2) {
                    attack *= GameConstants.FLUTE_TYPE_ATTACK_MULTIPLIER;
                }
            });
            attack *= App.game.zMoves.getMultiplier(dataPokemon.type1, dataPokemon.type2);
        }
        return attack;
    }
    getRegionAttackMultiplier(highestRegion = player.highestRegion()) {
        // between 0.2 -> 1 based on highest region
        return Math.min(1, Math.max(0.2, 0.1 + (highestRegion / 10)));
    }
    calculateEffortPoints(pokemon, shiny, shadow, number = GameConstants.BASE_EP_YIELD, ignore = false) {
        if (pokemon.pokerus < GameConstants.Pokerus.Contagious) {
            return 0;
        }
        if (ignore) {
            return 0;
        }
        let EPNum = number * App.game.multiplier.getBonus('ev');
        if (pokemon.heldItem() && pokemon.heldItem() instanceof EVsGainedBonusHeldItem) {
            EPNum *= pokemon.heldItem().gainedBonus;
        }
        if (shiny) {
            EPNum *= GameConstants.SHINY_EP_MODIFIER;
        }
        if (shadow == GameConstants.ShadowStatus.Shadow) {
            EPNum *= GameConstants.SHADOW_EP_MODIFIER;
        }
        return Math.floor(EPNum);
    }
    getPokemon(id) {
        return this._caughtPokemonLookup().get(id);
    }
    getPokemonByName(name) {
        return this._caughtPokemonLookup().get(pokemonMap[name].id);
    }
    partyPokemonActiveInSubRegion(region, subregion) {
        let caughtPokemon = this.caughtPokemon;
        if (region == GameConstants.Region.alola && subregion == GameConstants.AlolaSubRegions.MagikarpJump) {
            // Only magikarps can attack in magikarp jump subregion
            caughtPokemon = caughtPokemon.filter((p) => Math.floor(p.id) == 129);
        }
        return caughtPokemon;
    }
    alreadyCaughtPokemonByName(name, shiny = false) {
        return this.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(name).id, shiny);
    }
    alreadyCaughtPokemon(id, shiny = false, shadow = false, purified = false) {
        const pokemon = this.getPokemon(id);
        if (pokemon) {
            const shinyOkay = (!shiny || pokemon.shiny);
            const shadowOkay = (!shadow || (pokemon.shadow > GameConstants.ShadowStatus.None));
            const purifiedOkay = (!purified || (pokemon.shadow == GameConstants.ShadowStatus.Purified));
            return shinyOkay && shadowOkay && purifiedOkay;
        }
        return false;
    }
    calculateClickAttack(useItem = false) {
        const clickAttack = this.calculateBaseClickAttack();
        const bonus = this.multiplier.getBonus('clickAttack', useItem);
        return Math.floor(clickAttack * bonus);
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        const caughtPokemonSave = json.caughtPokemon;
        const caughtPokemon = caughtPokemonSave.map(caughtPoke => {
            const partyPokemon = PokemonFactory.generatePartyPokemon(caughtPoke.id);
            partyPokemon.fromJSON(caughtPoke);
            return partyPokemon;
        });
        this._caughtPokemon(caughtPokemon);
    }
    initialize() {
    }
    toJSON() {
        return {
            caughtPokemon: this._caughtPokemon().map(x => x.toJSON()),
        };
    }
    update(delta) {
        // This method intentionally left blank
    }
    get caughtPokemon() {
        return this._caughtPokemon();
    }
    get activePartyPokemon() {
        return this.partyPokemonActiveInSubRegion(player.region, player.subregion);
    }
}
/// <reference path="../../declarations/party/LevelType.d.ts" />
var PartyPokemonSaveKeys;
(function (PartyPokemonSaveKeys) {
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["attackBonusPercent"] = 0] = "attackBonusPercent";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["attackBonusAmount"] = 1] = "attackBonusAmount";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["vitaminsUsed"] = 2] = "vitaminsUsed";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["exp"] = 3] = "exp";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["breeding"] = 4] = "breeding";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["shiny"] = 5] = "shiny";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["category"] = 6] = "category";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["levelEvolutionTriggered"] = 7] = "levelEvolutionTriggered";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["pokerus"] = 8] = "pokerus";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["effortPoints"] = 9] = "effortPoints";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["heldItem"] = 10] = "heldItem";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["defaultFemaleSprite"] = 11] = "defaultFemaleSprite";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["hideShinyImage"] = 12] = "hideShinyImage";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["nickname"] = 13] = "nickname";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["shadow"] = 14] = "shadow";
    PartyPokemonSaveKeys[PartyPokemonSaveKeys["showShadowImage"] = 15] = "showShadowImage";
})(PartyPokemonSaveKeys || (PartyPokemonSaveKeys = {}));
class PartyPokemon {
    constructor(id, name, evolutions, baseAttack, eggCycles, shiny = false, gender, shadow) {
        this.id = id;
        this.name = name;
        this.evolutions = evolutions;
        this.baseAttack = baseAttack;
        this.eggCycles = eggCycles;
        this.gender = gender;
        this.exp = 0;
        this.defaults = {
            attackBonusPercent: 0,
            attackBonusAmount: 0,
            vitaminsUsed: {},
            exp: 0,
            breeding: false,
            shiny: false,
            category: [0],
            levelEvolutionTriggered: false,
            pokerus: GameConstants.Pokerus.Uninfected,
            effortPoints: 0,
            defaultFemaleSprite: false,
            hideShinyImage: false,
            nickname: '',
            shadow: GameConstants.ShadowStatus.None,
            showShadowImage: false,
        };
        this.clickAttackBonus = ko.pureComputed(() => {
            // Caught + Shiny + Resistant + Purified
            const bonus = 1 + +this.shiny + +(this.pokerus >= GameConstants.Pokerus.Resistant) + +(this.shadow == GameConstants.ShadowStatus.Purified);
            const heldItemMultiplier = this.heldItem() instanceof HybridAttackBonusHeldItem ? this.heldItem().clickAttackBonus : 1;
            return bonus * heldItemMultiplier;
        });
        this.totalVitaminsUsed = ko.pureComputed(() => {
            return Object.values(this.vitaminsUsed).reduce((sum, obs) => sum + obs(), 0);
        });
        this.vitaminUsesRemaining = ko.pureComputed(() => {
            // Allow 5 for every region visited (including Kanto)
            return (player.highestRegion() + 1) * 5 - this.totalVitaminsUsed();
        });
        this.calculateEVAttackBonus = ko.pureComputed(() => {
            if (this.pokerus < GameConstants.Pokerus.Contagious) {
                return 1;
            }
            return (this.evs() < 50) ? (1 + 0.01 * this.evs()) : (Math.pow(this.evs(), Math.log(1.5) / Math.log(50)));
        });
        this.getEggSteps = ko.pureComputed(() => {
            const div = 300;
            const extraCycles = (this.vitaminsUsed[GameConstants.VitaminType.Calcium]() + this.vitaminsUsed[GameConstants.VitaminType.Protein]()) / 2;
            const steps = App.game.breeding.getSteps(this.eggCycles + extraCycles);
            return steps <= div ? steps : Math.round((Math.pow((steps / div), (1 - this.vitaminsUsed[GameConstants.VitaminType.Carbos]() / 70))) * div);
        });
        this.getBreedingAttackBonus = ko.pureComputed(() => {
            const attackBonusPercent = (GameConstants.BREEDING_ATTACK_BONUS + this.vitaminsUsed[GameConstants.VitaminType.Calcium]()) / 100;
            const proteinBoost = this.vitaminsUsed[GameConstants.VitaminType.Protein]();
            let attackBonus = (this.baseAttack * attackBonusPercent) + proteinBoost;
            if (Settings.getSetting('breedingEfficiencyAllModifiers').observableValue()) {
                attackBonus *= this.calculateEVAttackBonus() * this.heldItemAttackBonus() * this.shadowAttackBonus();
            }
            return attackBonus;
        });
        this.heldItemAttackBonus = ko.pureComputed(() => {
            return this.heldItem && this.heldItem() instanceof AttackBonusHeldItem ? this.heldItem().attackBonus : 1;
        });
        this.shadowAttackBonus = ko.pureComputed(() => {
            return this.shadow == GameConstants.ShadowStatus.Shadow ? 0.8 : (this.shadow == GameConstants.ShadowStatus.Purified ? 1.2 : 1);
        });
        this.breedingEfficiency = ko.pureComputed(() => {
            const breedingAttackBonus = this.getBreedingAttackBonus();
            return (breedingAttackBonus / this.getEggSteps()) * GameConstants.EGG_CYCLE_MULTIPLIER;
        });
        this.isHatchable = ko.pureComputed(() => {
            return !(this.breeding || this.level < 100);
        });
        this.isHatchableFiltered = ko.pureComputed(() => {
            return this.isHatchable() && this.matchesHatcheryFilters();
        });
        this.matchesHatcheryFilters = ko.pureComputed(() => {
            if (this.id <= 0) {
                return false;
            }
            // Check if search matches englishName or displayName
            const nameFilterSetting = Settings.getSetting('breedingNameFilter');
            if (nameFilterSetting.observableValue() != '') {
                const nameFilter = nameFilterSetting.regex();
                const displayName = PokemonHelper.displayName(this.name)();
                const partyName = this.displayName;
                if (!nameFilter.test(displayName) && !nameFilter.test(this.name) && !(partyName != undefined && nameFilter.test(partyName))) {
                    return false;
                }
            }
            // Check if search matches species number
            const idFilter = Settings.getSetting('breedingIDFilter').observableValue();
            if (idFilter > -1 && idFilter != Math.floor(this.id)) {
                return false;
            }
            // Check based on categories
            const categoryFilter = Settings.getSetting('breedingCategoryFilter').observableValue();
            // Categorized only
            if (categoryFilter == -2 && this.isUncategorized()) {
                return false;
            }
            // Selected category
            if (categoryFilter >= 0 && !this.category.includes(categoryFilter)) {
                return false;
            }
            // Check based on shiny status
            const shinyFilter = Settings.getSetting('breedingShinyFilter').observableValue();
            if (shinyFilter >= 0 && +this.shiny !== shinyFilter) {
                return false;
            }
            // Check based on native region
            const unlockedRegionsMask = (2 << player.highestRegion()) - 1;
            const regionFilterMask = Settings.getSetting('breedingRegionFilter').observableValue() & unlockedRegionsMask;
            if (regionFilterMask !== unlockedRegionsMask) {
                const nativeRegion = PokemonHelper.calcNativeRegion(this.name);
                // With the region filter active, regionless pokemon should be shown only if no regions are selected
                const nativeRegionInFilter = nativeRegion !== GameConstants.Region.none ?
                    (1 << nativeRegion) & regionFilterMask :
                    regionFilterMask === 0;
                if (!nativeRegionInFilter) {
                    return false;
                }
            }
            // Check based on Pokerus status
            const pokerusFilter = Settings.getSetting('breedingPokerusFilter').observableValue();
            if (pokerusFilter > -1 && this.pokerus !== pokerusFilter) {
                return false;
            }
            const uniqueTransformationFilter = Settings.getSetting('breedingUniqueTransformationFilter').observableValue();
            const pokemon = PokemonHelper.getPokemonById(this.id);
            // Only Base Pokémon with Mega available
            if (uniqueTransformationFilter == 'mega-available' && !PokemonHelper.hasMegaEvolution(pokemon.name)) {
                return false;
            }
            // Only Base Pokémon without Mega Evolution
            if (uniqueTransformationFilter == 'mega-unobtained' && !PokemonHelper.hasUncaughtMegaEvolution(pokemon.name)) {
                return false;
            }
            // Only Mega Pokémon
            if (uniqueTransformationFilter == 'mega-evolution' && !PokemonHelper.isMegaEvolution(pokemon.name)) {
                return false;
            }
            // Check to exclude alternate forms
            const hideAltFilter = Settings.getSetting('breedingHideAltFilter').observableValue();
            if (hideAltFilter && !Number.isInteger(pokemon.id)) {
                // Don't exclude alt forms native to a different region, as they're considered a main form for that region's progression
                const nativeRegion = PokemonHelper.calcNativeRegion(this.name);
                const hasBaseFormInSameRegion = pokemonList.some((p) => Math.floor(p.id) == Math.floor(pokemon.id) && p.id < pokemon.id && PokemonHelper.calcNativeRegion(p.name) == nativeRegion);
                if (hasBaseFormInSameRegion) {
                    return false;
                }
            }
            // Check if either of the types match
            const type1 = Settings.getSetting('breedingType1Filter').observableValue();
            const type2 = Settings.getSetting('breedingType2Filter').observableValue();
            if (type1 !== null || type2 !== null) {
                const { type: types } = pokemonMap[this.name];
                if ([type1, type2].includes(PokemonType.None)) {
                    const type = (type1 == PokemonType.None) ? type2 : type1;
                    if (!BreedingController.isPureType(this, type)) {
                        return false;
                    }
                }
                else if ((type1 !== null && !types.includes(type1)) || (type2 !== null && !types.includes(type2))) {
                    return false;
                }
            }
            return true;
        });
        this.giveHeldItem = (heldItem) => {
            if (!this.heldItem() || heldItem.name != this.heldItem().name) {
                if (heldItem && !heldItem.canUse(this)) {
                    Notifier.notify({
                        message: `This Pokémon cannot use ${heldItem.displayName}.`,
                        type: NotificationConstants.NotificationOption.warning,
                    });
                    return;
                }
                if (player.amountOfItem(heldItem.name) < 1) {
                    Notifier.notify({
                        message: `You don't have any ${heldItem.displayName} left.`,
                        type: NotificationConstants.NotificationOption.warning,
                    });
                    return;
                }
            }
            if (this.heldItem() && Settings.getSetting('confirmChangeHeldItem').value) {
                Notifier.confirm({
                    title: 'Remove held item',
                    message: 'Held items are one time use only.\nRemoved items will be lost.\nAre you sure you want to remove it?',
                    confirm: 'Remove',
                    type: NotificationConstants.NotificationOption.warning,
                }).then((confirmed) => {
                    if (confirmed) {
                        this.addOrRemoveHeldItem(heldItem);
                    }
                });
            }
            else { // Notifier.confirm is async
                this.addOrRemoveHeldItem(heldItem);
            }
        };
        this.isUncategorized = ko.pureComputed(() => this.category[0] === 0 && this.category.length === 1);
        this.vitaminsUsed = Object.fromEntries(GameHelper.enumNumbers(GameConstants.VitaminType).map((vitamin) => {
            return [vitamin, ko.observable(0).extend({ numeric: 0 })];
        }));
        this._breeding = ko.observable(false).extend({ boolean: null });
        this._shiny = ko.observable(shiny).extend({ boolean: null });
        this._level = ko.observable(1).extend({ numeric: 0 });
        this._attackBonusPercent = ko.observable(0).extend({ numeric: 0 });
        this._attackBonusAmount = ko.observable(0).extend({ numeric: 0 });
        this._category = ko.observableArray([0]);
        this._translatedName = PokemonHelper.displayName(name);
        this._pokerus = ko.observable(GameConstants.Pokerus.Uninfected).extend({ numeric: 0 });
        this._effortPoints = ko.observable(0).extend({ numeric: 0 });
        this.evs = ko.pureComputed(() => {
            return Math.floor(this.calculateEVs());
        });
        const resistantSub = this.evs.subscribe((newValue) => {
            // Change Pokerus status to Resistant when reaching 50 EVs
            if (this.pokerus && newValue >= 50) {
                // Only notify if not yet Resistant, i.e. not when game loads already-Resistant party members
                if (this.pokerus < GameConstants.Pokerus.Resistant) {
                    this.pokerus = GameConstants.Pokerus.Resistant;
                    // Log and notify player
                    Notifier.notify({
                        message: `${this.name} has become Resistant to Pokérus.`,
                        pokemonImage: PokemonHelper.getImage(this.id),
                        type: NotificationConstants.NotificationOption.info,
                        sound: NotificationConstants.NotificationSound.General.pokerus,
                        setting: NotificationConstants.NotificationSetting.General.pokerus,
                    });
                    App.game.logbook.newLog(LogBookTypes.NEW, createLogContent.resistantToPokerus({ pokemon: this.name }));
                }
                resistantSub.dispose();
            }
        });
        this.heldItem = ko.observable(undefined);
        this.defaultFemaleSprite = ko.observable(false);
        this.hideShinyImage = ko.observable(false);
        this._nickname = ko.observable();
        this._nickname.subscribe((value) => {
            if (value === this._translatedName()) {
                AchievementHandler.unlockAchievement('A cat named Cat');
            }
        });
        this._displayName = ko.pureComputed(() => this._nickname() ? this._nickname() : this._translatedName());
        this._shadow = ko.observable(shadow);
        this._showShadowImage = ko.observable(false);
        this._attack = ko.computed(() => this.calculateAttack());
        this._canUseHeldItem = ko.pureComputed(() => { var _a; return (_a = this.heldItem()) === null || _a === void 0 ? void 0 : _a.canUse(this); });
        this._canUseHeldItem.subscribe((canUse) => {
            if (!canUse && this.heldItem()) {
                this.addOrRemoveHeldItem(this.heldItem());
            }
        });
        this._category.subscribe((newValue) => {
            if (!newValue.length) {
                this._category.push(0); // add None category
            }
            else if (newValue.length > 1) {
                this.removeCategory(0); // remove None category
            }
        });
    }
    calculateAttack(ignoreLevel = false) {
        const attackBonusMultiplier = 1 + (this.attackBonusPercent / 100);
        const levelMultiplier = ignoreLevel ? 1 : this.level / 100;
        const evsMultiplier = this.calculateEVAttackBonus();
        const heldItemMultiplier = this.heldItemAttackBonus();
        const shadowMultiplier = this.shadowAttackBonus();
        return Math.max(1, Math.floor((this.baseAttack * attackBonusMultiplier + this.attackBonusAmount) * levelMultiplier * evsMultiplier * heldItemMultiplier * shadowMultiplier));
    }
    canCatchPokerus() {
        return App.game.keyItems.hasKeyItem(KeyItemType.Pokerus_virus);
    }
    calculatePokerusTypes() {
        var _a;
        // Egg can't hatch and valid Egg has pokerus
        const eggTypes = new Set();
        for (let i = 0; i < App.game.breeding.eggList.length; i++) {
            if (i > App.game.breeding.hatcheryHelpers.hired().length - 1) {
                const egg = App.game.breeding.eggList[i]();
                if (!egg.canHatch() && !egg.isNone()) {
                    const pokerus = (_a = App.game.party.getPokemon(pokemonMap[egg.pokemon].id)) === null || _a === void 0 ? void 0 : _a.pokerus;
                    if (pokerus && pokerus >= GameConstants.Pokerus.Contagious) {
                        eggTypes.add(PokemonHelper.getPokemonByName(pokemonMap[App.game.breeding.eggList[i]().pokemon].name).type1);
                        eggTypes.add(PokemonHelper.getPokemonByName(pokemonMap[App.game.breeding.eggList[i]().pokemon].name).type2);
                    }
                }
            }
        }
        if (eggTypes.has(PokemonType.None)) {
            eggTypes.delete(PokemonType.None);
        }
        return eggTypes;
    }
    calculatePokerus(index) {
        const eggTypes = this.calculatePokerusTypes();
        for (let i = index; i < App.game.breeding.eggList.length; i++) {
            const pokemon = App.game.breeding.eggList[i]().partyPokemon();
            if (pokemon && pokemon.pokerus == GameConstants.Pokerus.Uninfected) {
                const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
                if (eggTypes.has(dataPokemon.type1) || eggTypes.has(dataPokemon.type2)) {
                    pokemon.pokerus = GameConstants.Pokerus.Infected;
                }
            }
        }
    }
    calculateLevelFromExp() {
        const levelType = PokemonHelper.getPokemonByName(this.name).levelType;
        for (let i = this.level - 1; i < levelRequirements[levelType].length; i++) {
            if (levelRequirements[levelType][i] > this.exp) {
                return Math.min(i, App.game.badgeCase.maxLevel());
            }
        }
        return this.level;
    }
    calculateEVs() {
        const power = App.game.challenges.list.slowEVs.active.peek() ? GameConstants.EP_CHALLENGE_MODIFIER : 1;
        return this._effortPoints() / GameConstants.EP_EV_RATIO / power;
    }
    gainExp(exp) {
        const expGained = exp * this.getExpMultiplier();
        if (this.level < App.game.badgeCase.maxLevel()) {
            this.exp += expGained;
            const oldLevel = this.level;
            const newLevel = this.calculateLevelFromExp();
            if (oldLevel !== newLevel) {
                this.level = newLevel;
                this.checkForLevelEvolution();
            }
        }
        return expGained;
    }
    getExpMultiplier() {
        let result = 1;
        if (this.heldItem() && this.heldItem() instanceof ExpGainedBonusHeldItem) {
            result *= this.heldItem().gainedBonus;
        }
        return result;
    }
    gainLevels(amount) {
        if (amount < 0) {
            throw new Error(`PartyPokemon ${this.name} cannot gain negative levels!`);
        }
        const oldLevel = this.level;
        const newLevel = Math.min(this.level + amount, App.game.badgeCase.maxLevel());
        if (oldLevel !== newLevel) {
            this.level = newLevel;
            // Adjust exp to match
            const levelType = PokemonHelper.getPokemonByName(this.name).levelType;
            this.exp = levelRequirements[levelType][newLevel - 1];
            // Just leveled up so...
            this.checkForLevelEvolution();
        }
        return newLevel - oldLevel;
    }
    checkForLevelEvolution() {
        if (this.breeding || this.evolutions == null || this.evolutions.length == 0) {
            return;
        }
        for (const evo of this.evolutions) {
            if (evo.trigger === EvoTrigger.LEVEL && EvolutionHandler.isSatisfied(evo)) {
                EvolutionHandler.evolve(evo);
            }
        }
    }
    canUseStone(stoneType) {
        var _a;
        return ((_a = this.evolutions) === null || _a === void 0 ? void 0 : _a.filter((evo) => evo.trigger === EvoTrigger.STONE
            && evo.stone == stoneType
            && EvolutionHandler.isSatisfied(evo)).length) > 0;
    }
    useStone(stoneType) {
        const possibleEvolutions = [];
        for (const evo of this.evolutions) {
            if (evo.trigger === EvoTrigger.STONE && evo.stone == stoneType && EvolutionHandler.isSatisfied(evo)) {
                possibleEvolutions.push(evo);
            }
        }
        if (possibleEvolutions.length !== 0) {
            return EvolutionHandler.evolve(Rand.fromArray(possibleEvolutions));
        }
        return false;
    }
    useVitamin(vitamin, amount) {
        if (App.game.challenges.list.disableVitamins.active()) {
            Notifier.notify({
                title: 'Challenge Mode',
                message: 'Vitamins are disabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return;
        }
        if (this.breeding) {
            Notifier.notify({
                message: 'Vitamins cannot be modified for Pokémon in the hatchery or queue.',
                type: NotificationConstants.NotificationOption.warning,
            });
            return;
        }
        const usesRemaining = this.vitaminUsesRemaining();
        // If no more vitamins can be used on this Pokemon
        if (!usesRemaining) {
            Notifier.notify({
                message: 'This Pokémon cannot increase their power any higher!',
                type: NotificationConstants.NotificationOption.warning,
            });
            return;
        }
        // The lowest number of amount they want to use, total in inventory, uses remaining for this Pokemon
        amount = Math.min(amount, player.itemList[GameConstants.VitaminType[vitamin]](), usesRemaining);
        // Apply the vitamin
        if (ItemHandler.useItem(GameConstants.VitaminType[vitamin], amount)) {
            GameHelper.incrementObservable(this.vitaminsUsed[vitamin], amount);
        }
    }
    removeVitamin(vitamin, amount) {
        if (this.breeding) {
            Notifier.notify({
                message: 'Vitamins cannot be modified for Pokémon in the hatchery or queue.',
                type: NotificationConstants.NotificationOption.warning,
            });
            return;
        }
        const vitaminName = GameConstants.VitaminType[vitamin];
        amount = Math.min(amount, this.vitaminsUsed[vitamin]());
        if (amount <= 0) {
            Notifier.notify({
                message: `This Pokémon doesn't have any ${vitaminName} to remove!`,
                type: NotificationConstants.NotificationOption.warning,
            });
            return;
        }
        GameHelper.incrementObservable(this.vitaminsUsed[vitamin], -amount);
        GameHelper.incrementObservable(player.itemList[vitaminName], amount);
    }
    setVitaminAmount(vitamin, amount) {
        if (this.breeding || isNaN(amount) || amount < 0) {
            return;
        }
        const diff = Math.floor(amount) - this.vitaminsUsed[vitamin]();
        if (diff === 0) {
            return;
        }
        else if (diff > 0) {
            this.useVitamin(vitamin, diff);
        }
        else if (diff < 0) {
            this.removeVitamin(vitamin, Math.abs(diff));
        }
    }
    useConsumable(type, amount) {
        var _a;
        const itemName = GameConstants.ConsumableType[type];
        if (!player.itemList[itemName]()) {
            return Notifier.notify({
                message: `You do not have any more ${ItemList[itemName].displayName}`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        switch (type) {
            case GameConstants.ConsumableType.Rare_Candy:
            case GameConstants.ConsumableType.Magikarp_Biscuit:
                amount = Math.min(amount, player.itemList[itemName]());
                if (this.breeding) {
                    return Notifier.notify({
                        message: `You cannot use ${ItemList[itemName].displayName} on Pokémon in the hatchery.`,
                        type: NotificationConstants.NotificationOption.danger,
                    });
                }
                const curAttack = this.calculateAttack(true);
                const bonus = GameConstants.BREEDING_ATTACK_BONUS * ((_a = ItemList[itemName].bonusMultiplier) !== null && _a !== void 0 ? _a : 1);
                GameHelper.incrementObservable(this._attackBonusPercent, bonus * amount);
                Notifier.notify({
                    message: `${this.displayName} gained ${this.calculateAttack(true) - curAttack} attack points`,
                    type: NotificationConstants.NotificationOption.success,
                    pokemonImage: PokemonHelper.getImage(this.id),
                });
                const levelsGained = this.gainLevels(amount);
                if (levelsGained === 0) {
                    // Rare Candies cause level evolutions even at max level
                    this.checkForLevelEvolution();
                }
                break;
            default:
        }
        GameHelper.incrementObservable(player.itemList[itemName], -amount);
        Notifier.notify({
            message: `You used ${amount} of ${ItemList[itemName].displayName}`,
            type: NotificationConstants.NotificationOption.success,
            image: ItemList[itemName].image,
        });
    }
    addOrRemoveHeldItem(heldItem) {
        if (this.heldItem() && this.heldItem().name == heldItem.name) {
            this.heldItem(undefined);
        }
        else {
            player.loseItem(heldItem.name, 1);
            this.heldItem(heldItem);
        }
    }
    addCategory(id) {
        if (id === 0) {
            this.resetCategory();
        }
        else if (!this.category.includes(id)) {
            this._category.push(id);
        }
    }
    removeCategory(id) {
        if (id === 0 && this.category.length === 1) {
            // Can't remove None category without another category present
            return;
        }
        const index = this.category.indexOf(id);
        if (index > -1) {
            this._category.splice(index, 1);
        }
    }
    toggleCategory(id) {
        if (this.category.includes(id)) {
            this.removeCategory(id);
        }
        else {
            this.addCategory(id);
        }
    }
    resetCategory() {
        this.category = [...this.defaults.category];
    }
    getCategorySortValues() {
        return PokemonCategories.categories().map((c, i) => [c.id, i])
            .filter(([id, _]) => this.category.includes(id))
            .map(([_, index]) => index);
    }
    fromJSON(json) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        if (json == null) {
            return;
        }
        if (json.id == null) {
            return;
        }
        this.attackBonusPercent = (_a = json[PartyPokemonSaveKeys.attackBonusPercent]) !== null && _a !== void 0 ? _a : this.defaults.attackBonusPercent;
        this.attackBonusAmount = (_b = json[PartyPokemonSaveKeys.attackBonusAmount]) !== null && _b !== void 0 ? _b : this.defaults.attackBonusAmount;
        if (json[PartyPokemonSaveKeys.vitaminsUsed]) {
            Object.entries(json[PartyPokemonSaveKeys.vitaminsUsed]).forEach(([i, v]) => {
                this.vitaminsUsed[i](v !== null && v !== void 0 ? v : 0);
            });
        }
        this.exp = (_c = json[PartyPokemonSaveKeys.exp]) !== null && _c !== void 0 ? _c : this.defaults.exp;
        this.breeding = (_d = json[PartyPokemonSaveKeys.breeding]) !== null && _d !== void 0 ? _d : this.defaults.breeding;
        this.shiny = (_e = json[PartyPokemonSaveKeys.shiny]) !== null && _e !== void 0 ? _e : this.defaults.shiny;
        this.category = (_f = json[PartyPokemonSaveKeys.category]) !== null && _f !== void 0 ? _f : [...this.defaults.category];
        this.level = this.calculateLevelFromExp();
        this.pokerus = (_g = json[PartyPokemonSaveKeys.pokerus]) !== null && _g !== void 0 ? _g : this.defaults.pokerus;
        this.effortPoints = (_h = json[PartyPokemonSaveKeys.effortPoints]) !== null && _h !== void 0 ? _h : this.defaults.effortPoints;
        this.heldItem(json[PartyPokemonSaveKeys.heldItem] && ItemList[json[PartyPokemonSaveKeys.heldItem]] instanceof HeldItem ? ItemList[json[PartyPokemonSaveKeys.heldItem]] : undefined);
        this.defaultFemaleSprite((_j = json[PartyPokemonSaveKeys.defaultFemaleSprite]) !== null && _j !== void 0 ? _j : this.defaults.defaultFemaleSprite);
        this.hideShinyImage((_k = json[PartyPokemonSaveKeys.hideShinyImage]) !== null && _k !== void 0 ? _k : this.defaults.hideShinyImage);
        this._nickname(json[PartyPokemonSaveKeys.nickname] || this.defaults.nickname);
        this.shadow = (_l = json[PartyPokemonSaveKeys.shadow]) !== null && _l !== void 0 ? _l : this.defaults.shadow;
        this._showShadowImage((_m = json[PartyPokemonSaveKeys.showShadowImage]) !== null && _m !== void 0 ? _m : this.defaults.showShadowImage);
    }
    toJSON() {
        var _a;
        const output = {
            id: this.id,
            [PartyPokemonSaveKeys.attackBonusPercent]: this.attackBonusPercent,
            [PartyPokemonSaveKeys.attackBonusAmount]: this.attackBonusAmount,
            [PartyPokemonSaveKeys.vitaminsUsed]: ko.toJS(this.vitaminsUsed),
            [PartyPokemonSaveKeys.exp]: this.exp,
            [PartyPokemonSaveKeys.breeding]: this.breeding,
            [PartyPokemonSaveKeys.shiny]: this.shiny,
            [PartyPokemonSaveKeys.category]: this.isUncategorized() ? undefined : this.category,
            [PartyPokemonSaveKeys.pokerus]: this.pokerus,
            [PartyPokemonSaveKeys.effortPoints]: this.effortPoints,
            [PartyPokemonSaveKeys.heldItem]: (_a = this.heldItem()) === null || _a === void 0 ? void 0 : _a.name,
            [PartyPokemonSaveKeys.defaultFemaleSprite]: this.defaultFemaleSprite(),
            [PartyPokemonSaveKeys.hideShinyImage]: this.hideShinyImage(),
            [PartyPokemonSaveKeys.nickname]: this.nickname || undefined,
            [PartyPokemonSaveKeys.shadow]: this.shadow,
            [PartyPokemonSaveKeys.showShadowImage]: this._showShadowImage(),
        };
        // Don't save anything that is the default option
        Object.entries(output).forEach(([key, value]) => {
            const defaultValue = this.defaults[PartyPokemonSaveKeys[key]];
            if (Array.isArray(value) && Array.isArray(defaultValue)) {
                // Compare array contents
                if (value.length === defaultValue.length && value.every((v, i) => v === defaultValue[i])) {
                    delete output[key];
                }
            }
            else if (value === defaultValue) {
                delete output[key];
            }
        });
        return output;
    }
    // Knockout getters/setter
    get level() {
        return this._level();
    }
    set level(level) {
        this._level(level);
    }
    get attack() {
        return this._attack();
    }
    get attackBonusAmount() {
        return this._attackBonusAmount();
    }
    set attackBonusAmount(attackBonusAmount) {
        this._attackBonusAmount(attackBonusAmount);
    }
    get attackBonusPercent() {
        return this._attackBonusPercent();
    }
    set attackBonusPercent(attackBonusPercent) {
        this._attackBonusPercent(attackBonusPercent);
    }
    get breeding() {
        return this._breeding();
    }
    set breeding(bool) {
        this._breeding(bool);
    }
    get pokerus() {
        return this._pokerus();
    }
    set pokerus(index) {
        this._pokerus(index);
    }
    get effortPoints() {
        return this._effortPoints();
    }
    set effortPoints(amount) {
        this._effortPoints(amount);
    }
    get shiny() {
        return this._shiny();
    }
    set shiny(bool) {
        this._shiny(bool);
    }
    get category() {
        return this._category();
    }
    set category(value) {
        this._category(value);
    }
    get nickname() {
        return this._nickname();
    }
    set nickname(nickname) {
        this._nickname(nickname);
    }
    get displayName() {
        return this._displayName();
    }
    get shadow() {
        return this._shadow();
    }
    set shadow(value) {
        this._shadow(value);
    }
    get showShadowImage() {
        return this._showShadowImage();
    }
    set showShadowImage(value) {
        this._showShadowImage(value);
    }
}
class EvolutionHandler {
    static isSatisfied(data) {
        return data.restrictions.every(req => req.isCompleted());
    }
    static evolve(data, notification = false) {
        var _a, _b;
        // compare to false because it could be undefined
        if (((_a = beforeEvolve[data.trigger]) === null || _a === void 0 ? void 0 : _a.call(beforeEvolve, data)) === false) {
            return false;
        }
        const evolvedPokemon = data.evolvedPokemon;
        // This Pokemon is from a region we haven't reached yet
        if (PokemonHelper.calcNativeRegion(evolvedPokemon) > player.highestRegion()) {
            return false;
        }
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_STONE);
        const newPokemon = !App.game.party.alreadyCaughtPokemonByName(evolvedPokemon);
        if (newPokemon || shiny || notification) {
            // Notify the player if they haven't already caught the evolution, or notifications are forced
            Notifier.notify({
                message: `Your ${PokemonHelper.displayName(data.basePokemon)()} evolved into ${shiny ? 'a shiny' : GameHelper.anOrA(evolvedPokemon)} ${PokemonHelper.displayName(evolvedPokemon)()}!`,
                pokemonImage: PokemonHelper.getImage(PokemonHelper.getPokemonByName(evolvedPokemon).id, shiny, undefined, GameConstants.ShadowStatus.None),
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.General.new_catch,
                setting: NotificationConstants.NotificationSetting.General.new_catch,
            });
        }
        // Add shiny to logbook
        if (shiny) {
            App.game.logbook.newLog(LogBookTypes.SHINY, App.game.party.alreadyCaughtPokemonByName(evolvedPokemon, true)
                ? createLogContent.evolvedShinyDupe({ basePokemon: data.basePokemon, evolvedPokemon })
                : createLogContent.evolvedShiny({ basePokemon: data.basePokemon, evolvedPokemon }));
        }
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(evolvedPokemon).id, shiny, true);
        const evolvedPartyPokemon = App.game.party.getPokemonByName(evolvedPokemon);
        if (newPokemon && App.game.challenges.list.realEvolutions.active()) {
            const basePartyPokemon = App.game.party.getPokemon(PokemonHelper.getPokemonByName(data.basePokemon).id);
            // Calculate and transfer the flat attack bonus rather than bonus percent.
            // Include all damage sources except held item and the Shadow debuff. Purified bonus is included.
            const bonusAttack = (basePartyPokemon.baseAttack * (1 + basePartyPokemon.attackBonusPercent / 100) + basePartyPokemon.attackBonusAmount)
                * Math.max(1, basePartyPokemon.shadowAttackBonus()) - basePartyPokemon.baseAttack;
            evolvedPartyPokemon.exp = basePartyPokemon.exp;
            evolvedPartyPokemon.level = basePartyPokemon.level;
            evolvedPartyPokemon.effortPoints = basePartyPokemon.effortPoints;
            evolvedPartyPokemon.pokerus = basePartyPokemon.pokerus;
            evolvedPartyPokemon.shiny = evolvedPartyPokemon.shiny || basePartyPokemon.shiny;
            evolvedPartyPokemon.attackBonusAmount = bonusAttack;
            evolvedPartyPokemon.vitaminsUsed = basePartyPokemon.vitaminsUsed;
            evolvedPartyPokemon.nickname = basePartyPokemon.nickname;
            evolvedPartyPokemon.category = basePartyPokemon.category;
            if ((_b = basePartyPokemon.heldItem()) === null || _b === void 0 ? void 0 : _b.canUse(evolvedPartyPokemon)) {
                evolvedPartyPokemon.heldItem(basePartyPokemon.heldItem());
            }
            App.game.party.removePokemonByName(data.basePokemon);
        }
        // EVs
        if (!newPokemon) {
            evolvedPartyPokemon.effortPoints += App.game.party.calculateEffortPoints(evolvedPartyPokemon, shiny, GameConstants.ShadowStatus.None, GameConstants.STONE_EP_YIELD);
        }
        return shiny;
    }
}
class Pokeball {
    constructor(type, catchBonus, catchTime, description, unlockRequirement = new MultiRequirement(), quantity = 0) {
        this.type = type;
        this.catchBonus = catchBonus;
        this.catchTime = catchTime;
        this.description = description;
        this.unlockRequirement = unlockRequirement;
        this.quantity = ko.observable(quantity);
    }
    unlocked() {
        return this.unlockRequirement.isCompleted();
    }
}
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="Pokeball.ts" />
class Pokeballs {
    constructor() {
        this.name = 'Pokeballs';
        this.saveKey = 'pokeballs';
        this.defaults = {};
        this.pokeballs = [
            new Pokeball(GameConstants.Pokeball.Pokeball, () => 0, 1250, 'A standard Poké Ball', undefined, 25),
            new Pokeball(GameConstants.Pokeball.Greatball, () => 5, 1000, '+5% chance to catch'),
            new Pokeball(GameConstants.Pokeball.Ultraball, () => 10, 750, '+10% chance to catch'),
            new Pokeball(GameConstants.Pokeball.Masterball, () => 100, 500, '100% chance to catch'),
            new Pokeball(GameConstants.Pokeball.Fastball, () => 0, 500, 'Reduced catch time', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Quickball, (opts) => {
                var _a, _b;
                if (opts.encounterType === EncounterType.wanderer) {
                    return 0;
                }
                if (App.game.gameState == GameConstants.GameState.fighting && player.route) {
                    const kills = ((_b = (_a = App.game.statistics.routeKills[GameConstants.Region[player.region]]) === null || _a === void 0 ? void 0 : _a[player.route]) === null || _b === void 0 ? void 0 : _b.call(_a)) || 0;
                    // between 15 (0 kills) → 0 (4012 kills)
                    return Math.min(15, Math.max(0, Math.pow(16, 1 - Math.pow(Math.max(0, kills - 10), 0.6) / 145) - 1));
                }
                if (App.game.gameState == GameConstants.GameState.dungeon) {
                    return Math.min(15, Math.pow(DungeonRunner.timeLeftPercentage(), 2) / 500);
                }
                return 0;
            }, 1000, 'Increased catch rate on routes with less Pokémon defeated', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Timerball, (opts) => {
                var _a, _b;
                if (opts.encounterType === EncounterType.wanderer) {
                    return 0;
                }
                if (App.game.gameState == GameConstants.GameState.fighting && player.route) {
                    const kills = ((_b = (_a = App.game.statistics.routeKills[GameConstants.Region[player.region]]) === null || _a === void 0 ? void 0 : _a[player.route]) === null || _b === void 0 ? void 0 : _b.call(_a)) || 0;
                    // between 0 (0 kills) → 15 (9920 kills)
                    return Math.min(15, Math.max(0, Math.pow(16, Math.pow(kills, 0.6) / 250) - 1));
                }
                if (App.game.gameState == GameConstants.GameState.dungeon) {
                    const maxBonus = 15;
                    const timeLeftPercent = DungeonRunner.timeLeftPercentage();
                    const timeLeftPercentWhenMax = 15;
                    return (timeLeftPercentWhenMax < timeLeftPercent) ? (200 / timeLeftPercent - 2) : maxBonus;
                }
                return 0;
            }, 1000, 'Increased catch rate on routes with more Pokémon defeated', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Duskball, (opts) => {
                const now = new Date();
                // If player in a dungeon or it's night time
                if ((App.game.gameState == GameConstants.GameState.dungeon && opts.encounterType !== EncounterType.wanderer) || [DayCyclePart.Dawn, DayCyclePart.Night].includes(DayCycle.currentDayCyclePart())) {
                    return 15;
                }
                return 0;
            }, 1000, 'Increased catch rate at night time or in dungeons', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Luxuryball, () => 0, 1250, 'A Luxury Poké Ball, awards a random currency for catches', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Diveball, (opts) => {
                if (opts.encounterType === EncounterType.wanderer) {
                    return 0;
                }
                // If area is a water environment,
                if (MapHelper.getCurrentEnvironments().includes('Water')) {
                    return 15;
                }
                return 0;
            }, 1250, 'Increased catch rate in water environments', new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)),
            new Pokeball(GameConstants.Pokeball.Lureball, (opts) => {
                if (opts.encounterType === EncounterType.wanderer) {
                    return 0;
                }
                if (App.game.gameState == GameConstants.GameState.fighting && player.route) {
                    const hasLandPokemon = Routes.getRoute(player.region, player.route).pokemon.land.length > 0;
                    const isWaterPokemon = Routes.getRoute(player.region, player.route).pokemon.water.includes(Battle.enemyPokemon().name);
                    // If route has Land Pokémon and the current pokémon is a Water Pokémon
                    if (hasLandPokemon && isWaterPokemon) {
                        return 15;
                    }
                }
                return 0;
            }, 1250, 'Increased catch rate on fished Pokémon', new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)),
            new Pokeball(GameConstants.Pokeball.Nestball, (opts) => {
                if (opts.encounterType === EncounterType.wanderer) {
                    return 0;
                }
                const highestRegionRoutes = Routes.getRoutesByRegion(player.highestRegion());
                const maxRoute = MapHelper.normalizeRoute(highestRegionRoutes[highestRegionRoutes.length - 1].number, player.highestRegion());
                let currentRoute;
                if (App.game.gameState == GameConstants.GameState.dungeon) {
                    // Use equivalent route difficulty for dungeons
                    currentRoute = DungeonRunner.dungeon.difficultyRoute;
                }
                else {
                    currentRoute = player.route;
                }
                currentRoute = MapHelper.normalizeRoute(currentRoute, player.region);
                // Increased rate for earlier routes and dungeons, scales with regional progression
                return Math.min(15, Math.max(1, player.highestRegion()) * Math.max(1, (maxRoute / currentRoute)));
            }, 1250, 'Increased catch rate on earlier routes', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Repeatball, (opts) => {
                const amountCaught = App.game.statistics.pokemonCaptured[pokemonMap[opts.pokemon].id]();
                return Math.min(15, Math.pow(amountCaught, 2) / 5000);
            }, 1250, 'Increased catch rate for Pokémon captured more times, plus higher EV gains', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
            new Pokeball(GameConstants.Pokeball.Beastball, () => {
                return 10;
            }, 1000, 'Can only be used on Ultra Beasts', new TemporaryBattleRequirement('Anabel')),
            new Pokeball(GameConstants.Pokeball.Moonball, (opts) => {
                const moonCycleMod = MoonCycle.currentMoonCyclePhase();
                const moonCycleBonus = MoonCycle.catchChanceBonus(moonCycleMod);
                if (GameConstants.MoonEvoPokemon.has(opts.pokemon)) {
                    return Math.min(20, moonCycleBonus + 10);
                }
                return moonCycleBonus;
            }, 1250, 'Increased catch rate by the light of the moon', new RouteKillRequirement(10, GameConstants.Region.johto, 34)),
        ];
        this.selectedTitle = ko.observable('');
        this.selectedSelection = ko.observable();
    }
    initialize() {
        let subscription;
        this.selectedSelection.subscribe((selection) => {
            if (subscription) {
                subscription.dispose();
            }
            subscription = selection.subscribe(value => {
                var _a;
                // switch to Ultraball if Masterball is selected
                if (value == GameConstants.Pokeball.Masterball && App.game.challenges.list.disableMasterballs.active()) {
                    selection(GameConstants.Pokeball.Ultraball);
                    Notifier.notify({
                        title: 'Challenge Mode',
                        message: 'Master Balls are disabled!',
                        type: NotificationConstants.NotificationOption.danger,
                    });
                }
                else if (!((_a = this.pokeballs[value]) === null || _a === void 0 ? void 0 : _a.unlocked())) {
                    selection(GameConstants.Pokeball.None);
                }
            });
        });
    }
    /**
     * Checks the players preferences to see what pokéball needs to be used on the next throw.
     * Checks from the players pref to the most basic ball to see if the player has any.
     * @param id the pokemon we are trying to catch.
     * @param isShiny if the Pokémon is shiny.
     * @returns {GameConstants.Pokeball} pokéball to use.
     */
    calculatePokeballToUse(id, isShiny, isShadow, origEncounterType) {
        var _a, _b, _c, _d, _e;
        const alreadyCaught = App.game.party.alreadyCaughtPokemon(id);
        const alreadyCaughtShiny = App.game.party.alreadyCaughtPokemon(id, true);
        const alreadyCaughtShadow = App.game.party.alreadyCaughtPokemon(id, false, true);
        const pokemon = PokemonHelper.getPokemonById(id);
        const isUltraBeast = GameConstants.UltraBeastType[pokemon.name] != undefined;
        const encounterType = isUltraBeast ? EncounterType.ultraBeast : origEncounterType;
        const pref = (_d = (_c = App.game.pokeballFilters.findMatch({
            caught: alreadyCaught,
            caughtShiny: alreadyCaughtShiny,
            caughtShadow: alreadyCaughtShadow,
            shadow: isShadow,
            shiny: isShiny,
            pokerus: (_a = App.game.party.getPokemon(id)) === null || _a === void 0 ? void 0 : _a.pokerus,
            pokemonType: [pokemon.type1, pokemon.type2],
            encounterType,
            category: (_b = App.game.party.getPokemon(id)) === null || _b === void 0 ? void 0 : _b.category,
        })) === null || _c === void 0 ? void 0 : _c.ball()) !== null && _d !== void 0 ? _d : GameConstants.Pokeball.None;
        if (pref == GameConstants.Pokeball.Beastball) {
            if (isUltraBeast && this.pokeballs[GameConstants.Pokeball.Beastball].quantity() > 0) {
                return GameConstants.Pokeball.Beastball;
            }
            else {
                return GameConstants.Pokeball.None;
            }
        }
        else if (isUltraBeast) {
            return GameConstants.Pokeball.None;
        }
        if (((_e = this.pokeballs[pref]) === null || _e === void 0 ? void 0 : _e.quantity()) > 0) {
            return pref;
        }
        else {
            // Use a lesser, Pokédollar purchaseable, ball if we have one
            let use = GameConstants.Pokeball.None;
            const maxToCheck = Math.min(pref, GameConstants.Pokeball.Ultraball);
            for (let i = maxToCheck; i >= 0; i--) {
                if (this.pokeballs[i].quantity() > 0) {
                    use = i;
                    break;
                }
            }
            return use;
        }
    }
    calculateCatchTime(ball) {
        return this.pokeballs[ball].catchTime;
    }
    gainPokeballs(ball, amount, purchase = true) {
        GameHelper.incrementObservable(this.pokeballs[ball].quantity, amount);
        GameHelper.incrementObservable(App.game.statistics.pokeballsObtained[ball], amount);
        if (purchase === true) {
            GameHelper.incrementObservable(App.game.statistics.pokeballsPurchased[ball], amount);
        }
    }
    usePokeball(ball) {
        GameHelper.incrementObservable(this.pokeballs[ball].quantity, -1);
        GameHelper.incrementObservable(App.game.statistics.pokeballsUsed[ball]);
    }
    getCatchBonus(ball, options) {
        var _a, _b;
        const opts = Object.assign({ pokemon: (_a = Battle.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.name, encounterType: (_b = Battle.enemyPokemon()) === null || _b === void 0 ? void 0 : _b.encounterType }, options);
        return this.pokeballs[ball].catchBonus(opts);
    }
    getBallQuantity(ball) {
        const pokeball = this.pokeballs[ball];
        return pokeball ? pokeball.quantity() : 0;
    }
    getEPBonus(ball) {
        const pokeballType = this.pokeballs[ball].type;
        return pokeballType == GameConstants.Pokeball.Repeatball ? GameConstants.REPEATBALL_EP_MODIFIER : 1;
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        if (json.pokeballs != null) {
            json.pokeballs.map((amt, type) => this.pokeballs[type].quantity(amt));
        }
    }
    toJSON() {
        return {
            'pokeballs': this.pokeballs.map(p => p.quantity()),
        };
    }
    update(delta) {
        // This method intentionally left blank
    }
}
class PokedexHelper {
    static initialize() {
        pokedexFilterSettingKeys.forEach((filter) => {
            Settings.getSetting(filter).observableValue.subscribe(() => {
                PokedexHelper.scrollToTop();
                PokedexHelper.resetPokedexFlag.notifySubscribers();
            });
        });
        DisplayObservables.modalState.pokedexModalObservable.subscribe((modalState) => {
            // Resetting scrolling only works before modal is fully hidden
            if (modalState === 'hide') {
                PokedexHelper.scrollToTop();
            }
        });
    }
    static getBackgroundColors(name) {
        const pokemon = PokemonHelper.getPokemonByName(name);
        if (!this.pokemonSeen(pokemon.id)()) {
            return 'grey';
        }
        if (pokemon.type2 == PokemonType.None) {
            return GameConstants.TypeColor[pokemon.type1];
        }
        return `linear-gradient(90deg,${GameConstants.TypeColor[pokemon.type1]} 50%, ${GameConstants.TypeColor[pokemon.type2]} 50%)`;
    }
    /**
     * Returns true if you have seen the pokemon
     * @param {number} id
     * @returns {boolean}
     */
    static pokemonSeen(id) {
        return ko.pureComputed(() => {
            try {
                return App.game.statistics.pokemonEncountered[id]() > 0 || App.game.statistics.pokemonDefeated[id]() > 0 || App.game.statistics.pokemonCaptured[id]() > 0 || App.game.party.alreadyCaughtPokemon(id) || App.game.statistics.pokemonSeen[id]() > 0;
            }
            catch (error) {
                return false;
            }
        });
    }
    static formatSearch(value) {
        if (/[^\d]/.test(value)) {
            // non-integer, use as name filter
            Settings.setSettingByName('pokedexNameFilter', value);
            Settings.setSettingByName('pokedexIDFilter', -1);
        }
        else {
            // integer, use as ID filter
            Settings.setSettingByName('pokedexIDFilter', (value != '' ? +value : -1));
            Settings.setSettingByName('pokedexNameFilter', '');
        }
    }
    static getSearchString() {
        const name = Settings.getSetting('pokedexNameFilter').value;
        const id = Settings.getSetting('pokedexIDFilter').value;
        return id == -1 ? name : id;
    }
    static getList() {
        // Peek a computed to avoid subscribing to 1000s of statistics
        const highestDex = ko.pureComputed(() => {
            const highestSeen = App.game.statistics.pokemonSeen.highestID;
            const highestEncountered = App.game.statistics.pokemonEncountered.highestID;
            const highestDefeated = App.game.statistics.pokemonDefeated.highestID;
            const highestCaught = App.game.statistics.pokemonCaptured.highestID;
            const highestRegionID = player.hasBeatenChampOfRegion() ? GameConstants.MaxIDPerRegion[player.highestRegion()] : -1;
            return Math.max(highestSeen, highestEncountered, highestDefeated, highestCaught, highestRegionID);
        }).peek();
        const shadowPokemon = PokemonHelper.getAllShadowPokemon.peek();
        return pokemonList.filter((pokemon) => {
            var _a, _b;
            // Checks based on caught/shiny status
            const alreadyCaught = App.game.party.alreadyCaughtPokemon(pokemon.id);
            const alreadyCaughtShiny = App.game.party.alreadyCaughtPokemon(pokemon.id, true);
            const alreadyCaughtShadow = App.game.party.alreadyCaughtPokemon(pokemon.id, false, true);
            const alreadyCaughtPurified = App.game.party.alreadyCaughtPokemon(pokemon.id, false, true, true);
            // If the Pokemon shouldn't be unlocked yet
            const nativeRegion = PokemonHelper.calcNativeRegion(pokemon.name);
            if (nativeRegion > player.highestRegion() || nativeRegion == GameConstants.Region.none && !alreadyCaught) {
                return false;
            }
            // If not showing this region
            const region = Settings.getSetting('pokedexRegionFilter').observableValue();
            if (region != null && region != nativeRegion) {
                return false;
            }
            // Event Pokemon
            if (pokemon.id <= 0 && !alreadyCaught) {
                return false;
            }
            // If we haven't seen a pokemon this high yet
            if (pokemon.id > highestDex) {
                return false;
            }
            const nameFilterSetting = Settings.getSetting('pokedexNameFilter');
            if (nameFilterSetting.observableValue() != '') {
                const nameFilter = nameFilterSetting.regex();
                const displayName = PokemonHelper.displayName(pokemon.name)();
                const partyName = (_a = App.game.party.getPokemonByName(pokemon.name)) === null || _a === void 0 ? void 0 : _a.displayName;
                if (!nameFilter.test(displayName) && !nameFilter.test(pokemon.name) && !(partyName != undefined && nameFilter.test(partyName))) {
                    return false;
                }
            }
            // Check ID
            const filterID = Settings.getSetting('pokedexIDFilter').observableValue();
            if (filterID > -1 && filterID != Math.floor(pokemon.id)) {
                return false;
            }
            // Check if either of the types match
            const type1 = Settings.getSetting('pokedexType1Filter').observableValue();
            const type2 = Settings.getSetting('pokedexType2Filter').observableValue();
            if ([type1, type2].includes(PokemonType.None)) {
                const type = (type1 == PokemonType.None) ? type2 : type1;
                if (!PokedexHelper.isPureType(pokemon, type)) {
                    return false;
                }
            }
            else if ((type1 != null && !pokemon.type.includes(type1)) || (type2 != null && !pokemon.type.includes(type2))) {
                return false;
            }
            const hasBaseFormInSameRegion = () => pokemonList.some((p) => Math.floor(p.id) == Math.floor(pokemon.id) && p.id < pokemon.id && PokemonHelper.calcNativeRegion(p.name) == nativeRegion);
            // Alternate forms that we haven't caught yet
            if (!alreadyCaught && pokemon.id != Math.floor(pokemon.id) && hasBaseFormInSameRegion()) {
                return false;
            }
            // Hide uncaught base forms if alternate non-regional form is caught
            if (!alreadyCaught && pokemon.id == Math.floor(pokemon.id) &&
                App.game.party.caughtPokemon.some((p) => Math.floor(p.id) == pokemon.id && PokemonHelper.calcNativeRegion(p.name) == nativeRegion)) {
                return false;
            }
            const caughtStatus = Settings.getSetting('pokedexCaughtFilter').observableValue();
            // Only uncaught
            if (caughtStatus == 'uncaught' && alreadyCaught) {
                return false;
            }
            // All caught
            if (caughtStatus == 'caught' && !alreadyCaught) {
                return false;
            }
            // Only caught not shiny
            if (caughtStatus == 'caught-not-shiny' && (!alreadyCaught || alreadyCaughtShiny)) {
                return false;
            }
            // Only caught shiny
            if (caughtStatus == 'caught-shiny' && !alreadyCaughtShiny) {
                return false;
            }
            // Only caught not shadow
            if (caughtStatus == 'caught-not-shadow' && (!alreadyCaught || alreadyCaughtShadow || !shadowPokemon.has(pokemon.name))) {
                return false;
            }
            // Only caught shadow
            if (caughtStatus == 'caught-shadow' && (!alreadyCaughtShadow || alreadyCaughtPurified)) {
                return false;
            }
            // Only caught purified
            if (caughtStatus == 'caught-purified' && !alreadyCaughtPurified) {
                return false;
            }
            /* Only base form if alternate exist (Unown, Basculin, ...)
             * Mainline regional forms are shown as they are part of dex completion
             */
            if (Settings.getSetting('pokedexHideAltFilter').observableValue() && !Number.isInteger(pokemon.id) && hasBaseFormInSameRegion()) {
                return false;
            }
            // Only pokemon with a hold item
            if (Settings.getSetting('pokedexHeldItemFilter').observableValue() && !BagHandler.displayName(pokemon.heldItem)) {
                return false;
            }
            // Only pokemon with this pokerus status
            const pokerusFilter = Settings.getSetting('pokedexPokerusFilter').observableValue();
            if (pokerusFilter != -1 && pokerusFilter !== ((_b = App.game.party.getPokemon(pokemon.id)) === null || _b === void 0 ? void 0 : _b.pokerus)) {
                return false;
            }
            // Only pokemon with selected category
            const categoryFilter = Settings.getSetting('pokedexCategoryFilter').observableValue();
            if (categoryFilter != -1) {
                if (!alreadyCaught) {
                    return false;
                }
                const partyPokemon = App.game.party.getPokemon(pokemon.id);
                // Categorized only
                if (categoryFilter == -2 && partyPokemon.isUncategorized()) {
                    return false;
                }
                // Selected category
                if (categoryFilter >= 0 && !partyPokemon.category.includes(categoryFilter)) {
                    return false;
                }
            }
            const uniqueTransformation = Settings.getSetting('pokedexUniqueTransformationFilter').observableValue();
            // Only Base Pokémon with Mega available
            if (uniqueTransformation == 'mega-available' && !PokemonHelper.hasMegaEvolution(pokemon.name)) {
                // Another option: !(pokemon as PokemonListData).evolutions?.some((p) => p.restrictions.some(p => p instanceof MegaEvolveRequirement))
                return false;
            }
            // Only Base Pokémon without Mega Evolution
            if (uniqueTransformation == 'mega-unobtained' && !PokemonHelper.hasUncaughtMegaEvolution(pokemon.name)) {
                return false;
            }
            // Only Mega Pokémon
            if (uniqueTransformation == 'mega-evolution' && !PokemonHelper.isMegaEvolution(pokemon.name)) {
                return false;
            }
            return true;
        });
    }
    // Gender ratio
    static getGenderRatioData(pokemon) {
        const genderType = pokemon.gender.type;
        const genderRatio = pokemon.gender.femaleRatio;
        const genderObject = { 'male': 0, 'female': 0 };
        // console.log(pokemon);
        genderObject.male = 100 - (100 * genderRatio);
        genderObject.female = 100 * genderRatio;
        return genderObject;
    }
    static isPureType(pokemon, type) {
        return (pokemon.type.length === 1 && (type == null || pokemon.type[0] === type));
    }
    static scrollToTop() {
        document.querySelector('#pokedex-pokemon-list-container .scrolling-div-pokedex').scrollTop = 0;
    }
    static filteredListPartyPokemon() {
        return PokedexHelper.filteredList().map((p) => App.game.party.getPokemon(p.id)).filter((p) => p !== undefined);
    }
}
PokedexHelper.filteredList = ko.pureComputed(() => {
    if (PokedexHelper.cachedFilteredList && DisplayObservables.modalState.pokedexModal !== 'show') {
        return PokedexHelper.cachedFilteredList;
    }
    PokedexHelper.cachedFilteredList = PokedexHelper.getList();
    return PokedexHelper.cachedFilteredList;
});
// Flag for the LazyLoader
PokedexHelper.resetPokedexFlag = ko.computed(() => DisplayObservables.modalState.pokedexModal === 'hidden');
class PokedexPokemon {
    constructor(name, id, type1, type2, kills, catches, shiny) {
        this.name = name;
        this.id = id;
        this.type1 = type1;
        this.type2 = type2;
        this.kills = kills;
        this.catches = catches;
        this.shiny = shiny;
    }
}
/// <reference path="../../declarations/TemporaryScriptTypes.d.ts" />
var PokemonLocationType;
(function (PokemonLocationType) {
    PokemonLocationType[PokemonLocationType["Route"] = 0] = "Route";
    PokemonLocationType[PokemonLocationType["Roaming"] = 1] = "Roaming";
    PokemonLocationType[PokemonLocationType["Dungeon"] = 2] = "Dungeon";
    PokemonLocationType[PokemonLocationType["DungeonBoss"] = 3] = "DungeonBoss";
    PokemonLocationType[PokemonLocationType["DungeonChest"] = 4] = "DungeonChest";
    PokemonLocationType[PokemonLocationType["Evolution"] = 5] = "Evolution";
    PokemonLocationType[PokemonLocationType["Egg"] = 6] = "Egg";
    PokemonLocationType[PokemonLocationType["Baby"] = 7] = "Baby";
    PokemonLocationType[PokemonLocationType["Shop"] = 8] = "Shop";
    PokemonLocationType[PokemonLocationType["Fossil"] = 9] = "Fossil";
    PokemonLocationType[PokemonLocationType["Safari"] = 10] = "Safari";
    PokemonLocationType[PokemonLocationType["BattleFrontier"] = 11] = "BattleFrontier";
    PokemonLocationType[PokemonLocationType["Wandering"] = 12] = "Wandering";
    PokemonLocationType[PokemonLocationType["Discord"] = 13] = "Discord";
    PokemonLocationType[PokemonLocationType["QuestLineReward"] = 14] = "QuestLineReward";
    PokemonLocationType[PokemonLocationType["TempBattleReward"] = 15] = "TempBattleReward";
    PokemonLocationType[PokemonLocationType["GymReward"] = 16] = "GymReward";
    PokemonLocationType[PokemonLocationType["DungeonReward"] = 17] = "DungeonReward";
    PokemonLocationType[PokemonLocationType["Trade"] = 18] = "Trade";
    PokemonLocationType[PokemonLocationType["GiftNPC"] = 19] = "GiftNPC";
    PokemonLocationType[PokemonLocationType["ShadowPokemon"] = 20] = "ShadowPokemon";
    PokemonLocationType[PokemonLocationType["DreamOrb"] = 21] = "DreamOrb";
    PokemonLocationType[PokemonLocationType["BattleCafe"] = 22] = "BattleCafe";
    PokemonLocationType[PokemonLocationType["SafariItem"] = 23] = "SafariItem";
})(PokemonLocationType || (PokemonLocationType = {}));
class PokemonLocations {
    static getCache(cacheName) {
        let cache = this.pokemonLocationsCache[cacheName];
        if (!cache) {
            this.pokemonLocationsCache[cacheName] = cache = {};
        }
        return cache;
    }
    // RegionalCache is an array of caches, allowing the results from different maxRegions to co-exist
    static getRegionalCache(cacheName) {
        let cache = this.pokemonLocationsCache[cacheName];
        if (!cache) {
            this.pokemonLocationsCache[cacheName] = cache = [];
        }
        return cache;
    }
    static initRegionalCacheLine(cache, maxRegion, defaultValue) {
        const cacheLine = cache[maxRegion] = {};
        return this.initCacheLine(cacheLine, defaultValue);
    }
    static initCacheLine(cacheLine, defaultValue) {
        this.pokemonNames.forEach(name => cacheLine[name] = new defaultValue());
        return cacheLine;
    }
    static getPokemonRegionRoutes(pokemonName, maxRegion = GameConstants.Region.none) {
        const cache = this.getRegionalCache(this.getPokemonRegionRoutes.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, Object);
        Routes.regionRoutes.forEach(routeData => {
            var _a;
            const region = routeData.region;
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none && region > maxRegion) {
                return false;
            }
            Object.entries(routeData.pokemon).forEach(([encounterType, pokemon]) => {
                new Set(Object.values(pokemon).flat()).forEach((name) => {
                    if (name instanceof SpecialRoutePokemon) {
                        return false;
                    }
                    if (!cacheLine[name][region]) {
                        cacheLine[name][region] = new Array;
                    }
                    cacheLine[name][region].push({ route: routeData.number });
                });
            });
            (_a = routeData.pokemon.special) === null || _a === void 0 ? void 0 : _a.forEach(special => {
                special.pokemon.forEach((name) => {
                    if (!cacheLine[name][region]) {
                        cacheLine[name][region] = new Array;
                    }
                    cacheLine[name][region].push({ route: routeData.number, requirements: special.req });
                });
            });
            return true;
        });
        return cacheLine[pokemonName];
    }
    static getPokemonDungeons(pokemonName, maxRegion = GameConstants.Region.none) {
        const cache = this.getRegionalCache(this.getPokemonDungeons.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, (Array));
        Object.entries(dungeonList).forEach(([dungeonName, dungeon]) => {
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none) {
                const region = GameConstants.RegionDungeons.findIndex(d => d.includes(dungeonName));
                if (region > maxRegion) {
                    return false;
                }
            }
            // Dungeon Grunt
            dungeon.enemyList.forEach((enemy) => {
                var _a;
                // Skip trainers
                if (enemy instanceof DungeonTrainer) {
                    return;
                }
                if (typeof enemy === 'string') {
                    cacheLine[enemy].push({ dungeon: dungeonName });
                }
                else if (enemy.hasOwnProperty('pokemon')) {
                    cacheLine[enemy.pokemon].push({
                        dungeon: dungeonName,
                        requirements: (_a = enemy === null || enemy === void 0 ? void 0 : enemy.options) === null || _a === void 0 ? void 0 : _a.requirement,
                    });
                }
            });
        });
        return cacheLine[pokemonName];
    }
    static getPokemonBossDungeons(pokemonName, maxRegion = GameConstants.Region.none) {
        const cache = this.getRegionalCache(this.getPokemonBossDungeons.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, (Array));
        Object.entries(dungeonList).forEach(([dungeonName, dungeon]) => {
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none) {
                const region = GameConstants.RegionDungeons.findIndex(d => d.includes(dungeonName));
                if (region > maxRegion) {
                    return false;
                }
            }
            // Dungeon Boss
            dungeon.availableBosses(false, true).forEach(boss => {
                var _a;
                const data = {
                    dungeon: dungeonName,
                    requirements: (_a = boss.options) === null || _a === void 0 ? void 0 : _a.requirement,
                };
                cacheLine[boss.name].push(data);
            });
        });
        return cacheLine[pokemonName];
    }
    static getPokemonChestDungeons(pokemonName, maxRegion = GameConstants.Region.none) {
        const cache = this.getRegionalCache(this.getPokemonChestDungeons.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, (Array));
        Object.entries(dungeonList).forEach(([dungeonName, dungeon]) => {
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none) {
                const region = GameConstants.RegionDungeons.findIndex(d => d.includes(dungeonName));
                if (region > maxRegion) {
                    return false;
                }
            }
            // Dungeon Chest
            Object.values(dungeon.lootTable).flat().forEach(i => {
                if (this.pokemonNames.includes(i.loot)) {
                    const data = {
                        dungeon: dungeonName,
                        requirements: i.requirement,
                    };
                    cacheLine[i.loot].push(data);
                }
            });
        });
        return cacheLine[pokemonName];
    }
    static getShadowPokemonDungeons(pokemonName, maxRegion = GameConstants.Region.none) {
        const cache = this.getRegionalCache(this.getShadowPokemonDungeons.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, (Array));
        Object.entries(dungeonList).forEach(([dungeonName, dungeon]) => {
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none) {
                const region = GameConstants.RegionDungeons.findIndex(d => d.includes(dungeonName));
                if (region > maxRegion) {
                    return false;
                }
            }
            // Shadow Pokemon
            new Set(dungeon.allShadowPokemon()).forEach(pokemon => {
                cacheLine[pokemon].push(dungeonName);
            });
        });
        return cacheLine[pokemonName];
    }
    static getPokemonEggs(pokemonName, maxRegion = GameConstants.Region.none) {
        const cache = this.getRegionalCache(this.getPokemonEggs.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, (Array));
        Object.entries(App.game.breeding.hatchList).forEach(([eggItemType, eggArr]) => {
            eggArr.forEach((pokemonArr, region) => {
                // If we only want to check up to a maximum region
                if (maxRegion != GameConstants.Region.none && region > maxRegion) {
                    return false;
                }
                pokemonArr.forEach(name => {
                    cacheLine[name].push(GameConstants.EggItemType[eggItemType]);
                });
            });
        });
        return cacheLine[pokemonName];
    }
    static getPokemonShops(pokemonName, maxRegion = GameConstants.Region.none) {
        const cache = this.getRegionalCache(this.getPokemonShops.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, (Array));
        Object.entries(TownList).forEach(([townName, town]) => {
            // Check if the shop has items
            const townShops = town.content.filter(c => c instanceof Shop && c.items);
            if (townShops.length) {
                // If we only want to check up to a maximum region
                const region = town.region;
                if (maxRegion != GameConstants.Region.none && region > maxRegion) {
                    return false;
                }
                townShops.find(ts => {
                    var _a;
                    return (_a = ts.items) === null || _a === void 0 ? void 0 : _a.forEach(item => {
                        if (this.pokemonNames.includes(item.name)) {
                            cacheLine[item.name].push(townName);
                        }
                    });
                });
            }
        });
        return cacheLine[pokemonName];
    }
    static getPokemonRoamingRegions(pokemonName, maxRegion = GameConstants.Region.none) {
        const cache = this.getRegionalCache(this.getPokemonRoamingRegions.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, (Array));
        Object.entries(RoamingPokemonList.list).forEach(([region, regionArr]) => {
            if (maxRegion != GameConstants.Region.none && (+region) > maxRegion) {
                return false;
            }
            RoamingPokemonList.roamerGroups[region].forEach((group, i) => {
                var _a;
                (_a = regionArr[i]) === null || _a === void 0 ? void 0 : _a.forEach(r => {
                    if (this.pokemonNames.includes(r.pokemon.name)) {
                        const data = {
                            region: +region,
                            requirements: r.unlockRequirement,
                            roamingGroup: group,
                        };
                        cacheLine[r.pokemon.name].push(data);
                    }
                });
            });
        });
        return cacheLine[pokemonName];
    }
    static getPokemonParents(pokemonName, maxRegion = GameConstants.Region.none) {
        const cache = this.getRegionalCache(this.getPokemonParents.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, (Array));
        Object.entries(pokemonBabyPrevolutionMap).forEach(([parent, baby]) => {
            if (maxRegion != GameConstants.Region.none && (pokemonMap[parent].nativeRegion > maxRegion || pokemonMap[pokemonName].nativeRegion > maxRegion)) {
                return false;
            }
            cacheLine[baby].push(parent);
        });
        return cacheLine[pokemonName];
    }
    static getPokemonSafariChance(pokemonName) {
        const cache = this.getCache(this.getPokemonSafariChance.name);
        if (cache[pokemonName]) {
            return cache[pokemonName];
        }
        const cacheLine = this.initCacheLine(cache, Object);
        Object.entries(SafariPokemonList.list).forEach(([region]) => {
            if (region == GameConstants.Region.kalos.toString()) {
                // Friendly safari might cause infinite recursion
                return;
            }
            const zoneList = SafariPokemonList.list[region]();
            const safariWeight = zoneList.reduce((sum, p) => sum += p.weight, 0);
            zoneList.forEach(safariPokemon => {
                cacheLine[safariPokemon.name][+region] = cacheLine[safariPokemon.name][+region] || {};
                cacheLine[safariPokemon.name][+region][0] = +((SafariPokemon.calcPokemonWeight(safariPokemon) / safariWeight) * 100).toFixed(2);
            });
        });
        return cacheLine[pokemonName];
    }
    static getPokemonPrevolution(pokemonName, maxRegion = GameConstants.Region.none) {
        const cache = this.getRegionalCache(this.getPokemonPrevolution.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, (Array));
        const prevolutionPokemon = pokemonList.filter((p) => p.evolutions);
        prevolutionPokemon.forEach((p) => p.evolutions.forEach(e => {
            // ignore dummy evolutions
            if (e.trigger === EvoTrigger.NONE) {
                return false;
            }
            if (maxRegion != GameConstants.Region.none && (p.nativeRegion > maxRegion || pokemonMap[e.evolvedPokemon].nativeRegion > maxRegion)) {
                return false;
            }
            cacheLine[e.evolvedPokemon].push(e);
        }));
        return cacheLine[pokemonName];
    }
    static getPokemonLevelPrevolution(pokemonName, maxRegion = GameConstants.Region.none) {
        var _a;
        if (maxRegion != GameConstants.Region.none && pokemonMap[pokemonName].nativeRegion > maxRegion) {
            return;
        }
        const evolutionPokemon = pokemonList.find((p) => { var _a; return (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.some(e => e.trigger === EvoTrigger.LEVEL && e.evolvedPokemon == pokemonName); });
        if (maxRegion != GameConstants.Region.none && pokemonMap[evolutionPokemon.name].nativeRegion > maxRegion) {
            return;
        }
        return (_a = evolutionPokemon === null || evolutionPokemon === void 0 ? void 0 : evolutionPokemon.evolutions) === null || _a === void 0 ? void 0 : _a.find(e => e.evolvedPokemon == pokemonName);
    }
    static getPokemonStonePrevolution(pokemonName, maxRegion = GameConstants.Region.none) {
        var _a;
        if (maxRegion != GameConstants.Region.none && pokemonMap[pokemonName].nativeRegion > maxRegion) {
            return;
        }
        const evolutionPokemon = pokemonList.find((p) => { var _a; return (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.some(e => e.trigger === EvoTrigger.STONE && e.evolvedPokemon == pokemonName); });
        if (maxRegion != GameConstants.Region.none && pokemonMap[evolutionPokemon.name].nativeRegion > maxRegion) {
            return;
        }
        return (_a = evolutionPokemon === null || evolutionPokemon === void 0 ? void 0 : evolutionPokemon.evolutions) === null || _a === void 0 ? void 0 : _a.find(e => e.evolvedPokemon == pokemonName);
    }
    static getPokemonBattleFrontier(pokemonName) {
        const cache = this.getCache(this.getPokemonBattleFrontier.name);
        if (cache[pokemonName]) {
            return cache[pokemonName];
        }
        const cacheLine = this.initCacheLine(cache, (Array));
        pokemonList.forEach(p => cacheLine[p.name] = []);
        BattleFrontierMilestones.milestoneRewards.filter(m => m instanceof BattleFrontierMilestonePokemon).forEach(milestone => {
            if (this.pokemonNames.includes(milestone._description)) {
                cacheLine[milestone._description].push(milestone.stage);
            }
        });
        return cacheLine[pokemonName];
    }
    static getPokemonWandering(pokemonName, maxRegion = GameConstants.Region.none) {
        if (maxRegion !== GameConstants.Region.none && maxRegion < pokemonMap[pokemonName].nativeRegion) {
            return [];
        }
        const cache = this.getCache(this.getPokemonWandering.name);
        if (cache[pokemonName]) {
            return cache[pokemonName];
        }
        const cacheLine = this.initCacheLine(cache, (Array));
        Berry.baseWander.forEach(pokemon => {
            cacheLine[pokemon] = ['Always'];
        });
        App.game.farming.berryData.forEach((berry) => {
            berry.wander.forEach(pokemon => {
                if (cacheLine[pokemon][0] !== 'Always') {
                    cacheLine[pokemon].push(BerryType[berry.type]);
                }
            });
        });
        return cacheLine[pokemonName];
    }
    static getPokemonDiscord(pokemonName) {
        const cache = this.getCache(this.getPokemonDiscord.name);
        if (cache[pokemonName]) {
            return cache[pokemonName];
        }
        const cacheLine = this.initCacheLine(cache, (Array));
        App.game.discord.codes.forEach(code => {
            if (this.pokemonNames.includes(code.name)) {
                cacheLine[code.name].push(code.price);
            }
        });
        return cacheLine[pokemonName];
    }
    static getPokemonTempBattleReward(pokemonName) {
        const cache = this.getCache(this.getPokemonTempBattleReward.name);
        if (cache[pokemonName]) {
            return cache[pokemonName];
        }
        const cacheLine = this.initCacheLine(cache, (Array));
        Object.entries(TemporaryBattleList).forEach(tempBattle => {
            var _a, _b, _c, _d, _e;
            const firstTimeRewardFunction = (_b = (_a = tempBattle[1].optionalArgs) === null || _a === void 0 ? void 0 : _a.firstTimeRewardFunction) === null || _b === void 0 ? void 0 : _b.toString();
            this.getPokemonRewards(firstTimeRewardFunction).forEach(pokemon => {
                cacheLine[pokemon].push(tempBattle[0]);
            });
            const rewardFunction = (_d = (_c = tempBattle[1].optionalArgs) === null || _c === void 0 ? void 0 : _c.rewardFunction) === null || _d === void 0 ? void 0 : _d.toString();
            this.getPokemonRewards(rewardFunction).forEach(pokemon => {
                cacheLine[pokemon].push(tempBattle[0]);
            });
            if (((_e = tempBattle[1].optionalArgs) === null || _e === void 0 ? void 0 : _e.isTrainerBattle) === false) {
                tempBattle[1].getPokemonList().forEach(p => {
                    cacheLine[p.name].push(tempBattle[0]);
                });
            }
        });
        return cacheLine[pokemonName];
    }
    static getPokemonGymReward(pokemonName) {
        const cache = this.getCache(this.getPokemonGymReward.name);
        if (cache[pokemonName]) {
            return cache[pokemonName];
        }
        const cacheLine = this.initCacheLine(cache, (Array));
        Object.values(GymList).forEach(gym => {
            var _a;
            const rewardFunction = (_a = gym.rewardFunction) === null || _a === void 0 ? void 0 : _a.toString();
            this.getPokemonRewards(rewardFunction).forEach(pokemon => {
                cacheLine[pokemon].push(gym.leaderName);
            });
        });
        return cacheLine[pokemonName];
    }
    static getPokemonDungeonReward(pokemonName) {
        const cache = this.getCache(this.getPokemonDungeonReward.name);
        if (cache[pokemonName]) {
            return cache[pokemonName];
        }
        const cacheLine = this.initCacheLine(cache, (Array));
        Object.values(dungeonList).forEach(dungeon => {
            var _a;
            const rewardFunction = (_a = dungeon.rewardFunction) === null || _a === void 0 ? void 0 : _a.toString();
            this.getPokemonRewards(rewardFunction).forEach(pokemon => {
                cacheLine[pokemon].push(dungeon.name);
            });
        });
        return cacheLine[pokemonName];
    }
    static getPokemonQuestLineReward(pokemonName) {
        const cache = this.getCache(this.getPokemonQuestLineReward.name);
        if (cache[pokemonName]) {
            return cache[pokemonName];
        }
        const cacheLine = this.initCacheLine(cache, (Array));
        App.game.quests.questLines().forEach(questLine => questLine.quests().forEach(quest => {
            var _a;
            const rewardFunction = (_a = quest.customReward) === null || _a === void 0 ? void 0 : _a.toString();
            this.getPokemonRewards(rewardFunction).forEach(pokemon => {
                cacheLine[pokemon].push(questLine.name);
            });
        }));
        return cacheLine[pokemonName];
    }
    static getPokemonTrades(pokemonName, maxRegion = GameConstants.Region.none) {
        const cache = this.getRegionalCache(this.getPokemonTrades.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, (Array));
        Object.entries(TownList).forEach(([townName, town]) => {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none && town.region > maxRegion) {
                return false;
            }
            const townShops = town.content.filter(c => c instanceof Shop);
            if (townShops.length) {
                const townTrades = {};
                for (let i = 0; i < townShops.length; i++) {
                    const shop = townShops[i];
                    let deals;
                    if (shop instanceof GemMasterShop) {
                        deals = (_b = (_a = GemDeals.list)[shop.shop]) === null || _b === void 0 ? void 0 : _b.call(_a);
                    }
                    else if (shop instanceof ShardTraderShop) {
                        deals = (_d = (_c = ShardDeal.list)[shop.location]) === null || _d === void 0 ? void 0 : _d.call(_c);
                    }
                    else if (shop instanceof BerryMasterShop) {
                        deals = (_f = (_e = BerryDeal.list)[shop.location]) === null || _f === void 0 ? void 0 : _f.call(_e);
                    }
                    else if (shop instanceof GenericTraderShop) {
                        (_h = (_g = GenericDeal.list)[shop.traderID]) === null || _h === void 0 ? void 0 : _h.call(_g).forEach(deal => {
                            deal.profits.forEach(profit => {
                                if (profit.type === DealCostOrProfitType.Item && this.pokemonNames.includes(profit.item.type)) {
                                    townTrades[profit.item.type] = true;
                                }
                            });
                        });
                    }
                    deals === null || deals === void 0 ? void 0 : deals.forEach(deal => {
                        if (this.pokemonNames.includes(deal.item.itemType.type)) {
                            townTrades[deal.item.itemType.type] = true;
                        }
                    });
                }
                Object.keys(townTrades).forEach(pokemon => {
                    cacheLine[pokemon].push(townName);
                });
            }
        });
        return cacheLine[pokemonName];
    }
    static getPokemonGifts(pokemonName, maxRegion = GameConstants.Region.none) {
        const cache = this.getRegionalCache(this.getPokemonGifts.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, (Array));
        Object.entries(TownList).forEach(([townName, town]) => {
            var _a;
            // If we only want to check up to a maximum region
            if (maxRegion != GameConstants.Region.none && town.region > maxRegion) {
                return false;
            }
            const npcs = (_a = town.npcs) === null || _a === void 0 ? void 0 : _a.filter(n => n instanceof PokemonGiftNPC);
            npcs === null || npcs === void 0 ? void 0 : npcs.forEach(npc => {
                var _a;
                const pokemon = npc.giftPokemon;
                cacheLine[pokemon].push({
                    town: townName,
                    npc: npc.name,
                    requirements: (_a = npc.options) === null || _a === void 0 ? void 0 : _a.requirement,
                });
            });
        });
        return cacheLine[pokemonName];
    }
    static getPokemonDreamOrbs(pokemonName, maxRegion = GameConstants.Region.none) {
        const cache = this.getRegionalCache(this.getPokemonDreamOrbs.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, (Array));
        // Dream orbs are unavailable before Unova
        if (maxRegion !== GameConstants.Region.none && maxRegion < GameConstants.Region.unova) {
            return cacheLine[pokemonName];
        }
        App.game.dreamOrbController.orbs.forEach(orb => orb.items.forEach(dreamOrbLoot => {
            if (dreamOrbLoot.item.type === ItemType.item) {
                const item = ItemList[dreamOrbLoot.item.id];
                if (item instanceof PokemonItem && this.pokemonNames.includes(item.type)) {
                    cacheLine[item.type].push(orb.color);
                }
            }
        }));
        return cacheLine[pokemonName];
    }
    static getBattleCafeCombination(pokemonName, maxRegion = GameConstants.Region.none) {
        var _a;
        const cache = this.getRegionalCache(this.getBattleCafeCombination.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, Object);
        if (maxRegion !== GameConstants.Region.none && maxRegion < GameConstants.Region.galar) {
            return cacheLine[pokemonName];
        }
        cacheLine['Milcery (Cheesy)'] = { spin: GameConstants.AlcremieSpins.Any3600 };
        let sweet, spin;
        for (sweet of GameHelper.enumNumbers(GameConstants.AlcremieSweet)) {
            for (spin of GameHelper.enumNumbers(GameConstants.AlcremieSpins)) {
                const spinReward = (_a = BattleCafeController.evolutions[sweet][spin]) === null || _a === void 0 ? void 0 : _a.name;
                if (this.pokemonNames.includes(spinReward)) {
                    cacheLine[spinReward] = { spin: spin, sweet: sweet };
                }
            }
        }
        return cacheLine[pokemonName];
    }
    static getPokemonSafariItem(pokemonName, maxRegion = GameConstants.Region.none) {
        const cache = this.getRegionalCache(this.getPokemonSafariItem.name);
        if (cache[maxRegion]) {
            return cache[maxRegion][pokemonName];
        }
        const cacheLine = this.initRegionalCacheLine(cache, maxRegion, Object);
        Object.entries(SafariItemController.list).forEach(([region, list]) => {
            if (maxRegion !== GameConstants.Region.none && maxRegion < Number(region)) {
                return;
            }
            list.forEach(item => {
                const pokemonItem = item.item.id;
                if (this.pokemonNames.includes(pokemonItem)) {
                    cacheLine[pokemonItem][region] = { chance: item.weight / list.reduce((acc, it) => acc + it.weight, 0) };
                    if (item.requirement) {
                        cacheLine[pokemonItem][region].requirement = item.requirement;
                    }
                }
            });
        });
        return cacheLine[pokemonName];
    }
    static getPokemonRewards(rewardFunction) {
        // Example reward function: App.game.party.gainPokemonByName('Eevee')
        const pokemonRewardRegex = /gainPokemonByName\('(.+?)'/g;
        const rewards = [];
        let match;
        while ((match = pokemonRewardRegex.exec(rewardFunction)) != null) {
            // match[1] is the contents of the capture group, e.g. "Eevee"
            rewards.push(match[1]);
        }
        return rewards;
    }
}
/*
PRETTY MUCH ONLY USED BY THE BOT BELOW
*/
PokemonLocations.pokemonLocationsCache = {};
PokemonLocations.pokemonNames = pokemonList.map(p => p.name);
PokemonLocations.getPokemonLocations = (pokemonName, maxRegion = GameConstants.MAX_AVAILABLE_REGION) => {
    const encounterTypes = {};
    // Routes
    const regionRoutes = PokemonLocations.getPokemonRegionRoutes(pokemonName, maxRegion);
    if (Object.keys(regionRoutes).length) {
        encounterTypes[PokemonLocationType.Route] = regionRoutes;
    }
    // Dungeons
    const dungeons = PokemonLocations.getPokemonDungeons(pokemonName, maxRegion);
    if (dungeons.length) {
        encounterTypes[PokemonLocationType.Dungeon] = dungeons;
    }
    // Dungeon Boss
    const bossDungeons = PokemonLocations.getPokemonBossDungeons(pokemonName, maxRegion);
    if (bossDungeons.length) {
        encounterTypes[PokemonLocationType.DungeonBoss] = bossDungeons;
    }
    // Dungeon Chest
    const chestDungeons = PokemonLocations.getPokemonChestDungeons(pokemonName, maxRegion);
    if (chestDungeons.length) {
        encounterTypes[PokemonLocationType.DungeonChest] = chestDungeons;
    }
    // Shadow Pokemon
    const shadowPokemon = PokemonLocations.getShadowPokemonDungeons(pokemonName, maxRegion);
    if (shadowPokemon.length) {
        encounterTypes[PokemonLocationType.ShadowPokemon] = shadowPokemon;
    }
    // Eggs
    const eggs = PokemonLocations.getPokemonEggs(pokemonName, maxRegion);
    if (eggs.length) {
        encounterTypes[PokemonLocationType.Egg] = eggs;
    }
    // Shops
    const shops = PokemonLocations.getPokemonShops(pokemonName, maxRegion);
    if (shops.length) {
        encounterTypes[PokemonLocationType.Shop] = shops;
    }
    // Roaming
    const roaming = PokemonLocations.getPokemonRoamingRegions(pokemonName, maxRegion);
    if (roaming.length) {
        encounterTypes[PokemonLocationType.Roaming] = roaming;
    }
    // Baby
    const parents = PokemonLocations.getPokemonParents(pokemonName, maxRegion);
    if (parents.length) {
        encounterTypes[PokemonLocationType.Baby] = parents;
    }
    // Safari
    const safariChance = PokemonLocations.getPokemonSafariChance(pokemonName);
    if (Object.keys(safariChance).length) {
        encounterTypes[PokemonLocationType.Safari] = safariChance;
    }
    // Evolution
    const evolutions = PokemonLocations.getPokemonPrevolution(pokemonName, maxRegion);
    if (evolutions.length) {
        encounterTypes[PokemonLocationType.Evolution] = evolutions;
    }
    // Battle Frontier
    const battleFrontier = PokemonLocations.getPokemonBattleFrontier(pokemonName);
    if (battleFrontier.length) {
        encounterTypes[PokemonLocationType.BattleFrontier] = battleFrontier;
    }
    // Wandering
    const wandering = PokemonLocations.getPokemonWandering(pokemonName, maxRegion);
    if (wandering.length) {
        encounterTypes[PokemonLocationType.Wandering] = wandering;
    }
    // Discord
    const discord = PokemonLocations.getPokemonDiscord(pokemonName);
    if (discord.length) {
        encounterTypes[PokemonLocationType.Discord] = discord;
    }
    // Temp battle reward
    const tempBattle = PokemonLocations.getPokemonTempBattleReward(pokemonName);
    if (tempBattle.length) {
        encounterTypes[PokemonLocationType.TempBattleReward] = tempBattle;
    }
    // Gym reward
    const gymReward = PokemonLocations.getPokemonGymReward(pokemonName);
    if (gymReward.length) {
        encounterTypes[PokemonLocationType.GymReward] = gymReward;
    }
    // Dungeon reward
    const dungeonReward = PokemonLocations.getPokemonDungeonReward(pokemonName);
    if (dungeonReward.length) {
        encounterTypes[PokemonLocationType.DungeonReward] = dungeonReward;
    }
    // Quest Line reward
    const questLineReward = PokemonLocations.getPokemonQuestLineReward(pokemonName);
    if (questLineReward.length) {
        encounterTypes[PokemonLocationType.QuestLineReward] = questLineReward;
    }
    // Trades
    const trades = PokemonLocations.getPokemonTrades(pokemonName, maxRegion);
    if (trades.length) {
        encounterTypes[PokemonLocationType.Trade] = trades;
    }
    // Gift NPC
    const gifts = PokemonLocations.getPokemonGifts(pokemonName, maxRegion);
    if (gifts.length) {
        encounterTypes[PokemonLocationType.GiftNPC] = gifts;
    }
    // Dream Orbs
    const dreamOrbs = PokemonLocations.getPokemonDreamOrbs(pokemonName, maxRegion);
    if (dreamOrbs.length) {
        encounterTypes[PokemonLocationType.DreamOrb] = dreamOrbs;
    }
    // Battle Café
    const combination = PokemonLocations.getBattleCafeCombination(pokemonName, maxRegion);
    if (Object.keys(combination).length) {
        encounterTypes[PokemonLocationType.BattleCafe] = combination;
    }
    // Safari Items
    const safariItems = PokemonLocations.getPokemonSafariItem(pokemonName, maxRegion);
    if (Object.keys(safariItems).length) {
        encounterTypes[PokemonLocationType.SafariItem] = safariItems;
    }
    // Return the list of items
    return encounterTypes;
};
PokemonLocations.isObtainableAndNotEvable = (pokemonName) => {
    var _a;
    const locations = PokemonLocations.getPokemonLocations(pokemonName);
    const isEvable = locations[PokemonLocationType.Dungeon] ||
        locations[PokemonLocationType.DungeonBoss] ||
        locations[PokemonLocationType.DungeonChest] ||
        ((_a = locations[PokemonLocationType.Evolution]) === null || _a === void 0 ? void 0 : _a.some((evo) => evo.trigger === EvoTrigger.STONE)) || // Only stone evolutions gives EVs
        locations[PokemonLocationType.Roaming] ||
        locations[PokemonLocationType.Route] ||
        locations[PokemonLocationType.Safari] ||
        locations[PokemonLocationType.Shop] ||
        locations[PokemonLocationType.Wandering] ||
        locations[PokemonLocationType.Trade] ||
        locations[PokemonLocationType.ShadowPokemon] ||
        locations[PokemonLocationType.DreamOrb] ||
        locations[PokemonLocationType.BattleCafe] ||
        locations[PokemonLocationType.SafariItem];
    return !isEvable && Object.keys(locations).length > 0;
};
PokemonLocations;
class BulletinBoard extends TownContent {
    static getLocation(bulletinBoard) {
        switch (bulletinBoard) {
            case GameConstants.BulletinBoards.Sevii4567:
                return 'Sevii Islands 4567';
            case GameConstants.BulletinBoards.Hoppy:
                return 'Magikarp Jump';
            case GameConstants.BulletinBoards.Armor:
                return 'Isle of Armor';
            case GameConstants.BulletinBoards.Crown:
                return 'Crown Tundra';
            default:
                return GameConstants.BulletinBoards[bulletinBoard];
        }
    }
    cssClass() {
        return 'btn btn-secondary';
    }
    text() {
        return 'Bulletin Board';
    }
    onclick() {
        BulletinBoard.selectedBulletinBoard(this);
        $('#bulletinBoardModal').modal('show');
    }
    areaStatus() {
        if (this.getQuests().filter((q) => q.state() == QuestLineState.inactive).length) {
            return [areaStatus.incomplete];
        }
        return [areaStatus.completed];
    }
    getQuests() {
        return App.game.quests.questLines().filter(q => {
            if (q.state() == QuestLineState.ended) {
                return false;
            }
            if (q.requirement ? (!q.requirement.isCompleted() && q.state() !== QuestLineState.suspended) : false) {
                return false;
            }
            if (q.bulletinBoard !== GameConstants.BulletinBoards.All && q.bulletinBoard !== this.board) {
                return false;
            }
            return true;
        });
    }
    constructor(board) {
        super([new QuestLineCompletedRequirement('Tutorial Quests')]);
        this.board = board;
    }
}
BulletinBoard.selectedBulletinBoard = ko.observable(undefined);
/// <reference path="../../declarations/GameHelper.d.ts" />
class Quest {
    constructor(amount, pointsReward) {
        this.amount = isNaN(amount) ? 0 : amount;
        this.pointsReward = pointsReward;
        this.initial = ko.observable(null);
        this.claimed = ko.observable(false);
        this.notified = false;
        this.onLoadCalled = false;
        this.suspended = false;
    }
    static canComplete() {
        return true;
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : 'Generic Quest Description. This should be overriden.';
    }
    static generateData() {
        return [1, 0];
    }
    static randomizeReward(pointsReward) {
        const randomPointBonus = 0.9 + SeededRand.float(0.2); // random between 0.9 and 1.1
        return Math.ceil(pointsReward * randomPointBonus);
    }
    get xpReward() {
        return 100 + (this.pointsReward / 10);
    }
    //#region Quest Status
    claim() {
        var _a;
        if (this.isCompleted() && !this.claimed()) {
            App.game.quests.addXP(this.xpReward);
            if (this.customReward !== undefined) {
                this.customReward();
            }
            if (((_a = this.optionalArgs) === null || _a === void 0 ? void 0 : _a.clearedMessage) !== undefined) {
                Quest.questObservable(this);
                $('#questStepClearedModal').modal('show');
            }
            this.deleteFocusSub();
            this.claimed(true);
            if (this.pointsReward) {
                App.game.wallet.gainQuestPoints(this.pointsReward);
                Notifier.notify({
                    message: `You have completed your quest!\nYou claimed <img src="./assets/images/currency/questPoint.svg" height="24px"/> ${this.pointsReward.toLocaleString('en-US')}!`,
                    strippedMessage: `You have completed your quest and claimed ${this.pointsReward.toLocaleString('en-US')} Quest Points!`,
                    type: NotificationConstants.NotificationOption.success,
                    setting: NotificationConstants.NotificationSetting.General.quest_completed,
                });
                App.game.logbook.newLog(LogBookTypes.QUEST, createLogContent.completedQuestWithPoints({
                    quest: this.description,
                    points: this.pointsReward.toLocaleString('en-US'),
                }));
            }
            else {
                Notifier.notify({
                    message: 'You have completed a quest!',
                    type: NotificationConstants.NotificationOption.success,
                    setting: NotificationConstants.NotificationSetting.General.quest_completed,
                });
                App.game.logbook.newLog(LogBookTypes.QUEST, createLogContent.completedQuest({ quest: this.description }));
            }
            GameHelper.incrementObservable(App.game.statistics.questsCompleted);
            return true;
        }
        return false;
    }
    quit(shouldConfirm = false) {
        if (shouldConfirm) {
            Notifier.confirm({
                title: 'Quit Quest',
                message: 'Are you sure?\n\nYou can start the quest again later but you will lose all progress!',
                type: NotificationConstants.NotificationOption.warning,
                confirm: 'Quit',
            }).then(confirmed => {
                if (confirmed) {
                    this.initial(null);
                }
            });
        }
        else {
            this.initial(null);
        }
    }
    begin() {
        var _a;
        this.initial((_a = this.initialValue) !== null && _a !== void 0 ? _a : this.focus());
        this.onLoad();
    }
    set focus(value) {
        this._focus = value;
        this.createProgressObservables();
    }
    get focus() {
        return this._focus;
    }
    createProgressObservables() {
        var _a, _b, _c;
        // Dispose of our old subscriber if one exists
        (_a = this.focusSub) === null || _a === void 0 ? void 0 : _a.dispose();
        // Subscribe to the new focus
        this.focusValue = this._focus();
        this.focusSub = (_c = (_b = this._focus).subscribe) === null || _c === void 0 ? void 0 : _c.call(_b, (newValue) => {
            // If we aren't actively completing this quests, don't do anything
            if (this.inProgress()) {
                // If the focus goes down, adjust our initial value
                if (newValue < this.focusValue) {
                    this.initial(this.initial() - (this.focusValue - newValue));
                }
                // Prevent progress on suspended quests by adjusting the initial value
                if (this.suspended && newValue > this.focusValue) {
                    this.initial(this.initial() + (newValue - this.focusValue));
                }
            }
            this.focusValue = newValue;
        });
        // Calculate our progress
        this.progress = ko.pureComputed(() => {
            if (this.initial() !== null) {
                return Math.min(1, (this.focus() - this.initial()) / this.amount);
            }
            else {
                return 0;
            }
        });
        this.progressText = ko.pureComputed(() => {
            if (this.initial() !== null) {
                return `${Math.min((this.focus() - this.initial()), this.amount).toLocaleString('en-US')} / ${this.amount.toLocaleString('en-US')}`;
            }
            else {
                return `0 / ${this.amount.toLocaleString('en-US')}`;
            }
        });
        this.inProgress = ko.pureComputed(() => {
            var _a;
            return this.initial() !== null && (!this.claimed() || ((_a = this.mainQuest) === null || _a === void 0 ? void 0 : _a.inProgress()));
        });
        // This computed has a side effect - creating a notification - so we cannot safely make it a pureComputed
        // This will only be a problem if we make it subscribe to a function which lives longer than itself
        // Since it is only subscribing to observables on `this`, and the function is being kept on `this`, we shouldn't have a problem
        this.isCompleted = ko.computed(() => {
            const completed = this.progress() == 1 || this.claimed();
            if (!this.autoComplete && completed && !this.notified) {
                Notifier.notify({
                    message: `You can complete your quest for <img src="./assets/images/currency/questPoint.svg" height="24px"/> ${this.pointsReward.toLocaleString('en-US')}!`,
                    strippedMessage: `You can complete your quest for ${this.pointsReward.toLocaleString('en-US')} Quest Points!`,
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 5e3,
                    sound: NotificationConstants.NotificationSound.Quests.quest_ready_to_complete,
                    setting: NotificationConstants.NotificationSetting.General.quest_ready_to_complete,
                });
                this.notified = true;
            }
            return completed;
        });
    }
    onLoad() {
        if (typeof this._onLoad === 'function' && !this.onLoadCalled) {
            this._onLoad();
            this.onLoadCalled = true;
        }
    }
    complete(bypassAutoCompleter = false) {
        if (bypassAutoCompleter) {
            this.deleteAutoCompleter();
            // Was consequently disposed on auto completion.
            this.deleteFocusSub();
        }
        this.initial(this.focus() - this.amount);
    }
    createAutoCompleter() {
        this.autoComplete = true;
        this.autoCompleter = this.isCompleted.subscribe(() => {
            if (this.isCompleted()) {
                this.claim();
                this.deleteAutoCompleter();
            }
        });
    }
    deleteAutoCompleter() {
        var _a;
        (_a = this.autoCompleter) === null || _a === void 0 ? void 0 : _a.dispose();
    }
    deleteFocusSub(fromMainQuest = false) {
        var _a;
        if (fromMainQuest >= !!this.mainQuest) {
            (_a = this.focusSub) === null || _a === void 0 ? void 0 : _a.dispose();
            return true;
        }
        return false;
    }
    withDescription(description) {
        this.customDescription = description;
        return this;
    }
    withOnLoad(onLoad) {
        this._onLoad = onLoad;
        return this;
    }
    withCustomReward(customReward) {
        this.customReward = typeof customReward === 'function' ? customReward : undefined;
        return this;
    }
    withOptionalArgs(optionalArgs) {
        this.optionalArgs = optionalArgs;
        return this;
    }
    withInitialValue(initialValue) {
        this.initialValue = initialValue;
        return this;
    }
    asSubQuest(mainQuest) {
        this.mainQuest = mainQuest;
        this.autoComplete = true;
    }
    getClearedMessage() {
        return this.optionalArgs.clearedMessage;
    }
    getNpcDisplayName() {
        return this.optionalArgs.npcDisplayName;
    }
    getNpcImage() {
        var _a;
        const npcImageName = (_a = this.optionalArgs) === null || _a === void 0 ? void 0 : _a.npcImageName;
        return `assets/images/npcs/${npcImageName}.png`;
    }
    //#endregion
    toJSON() {
        return {
            index: this.index || 0,
            customDescription: this.customDescription,
            data: [this.amount, this.pointsReward],
            initial: this.initial(),
            claimed: this.claimed(),
            notified: this.notified,
        };
    }
    fromJSON(json) {
        if (!json) {
            this.index = 0;
            this.claimed(false);
            this.initial(null);
            this.notified = false;
        }
        this.index = json.hasOwnProperty('index') ? json.index : 0;
        this.claimed(json.hasOwnProperty('claimed') ? json.claimed : false);
        this.initial(json.hasOwnProperty('initial') ? json.initial : null);
        this.notified = json.hasOwnProperty('notified') ? json.notified : false;
    }
}
Quest.questObservable = ko.observable();
/// <reference path="../Quest.ts" />
class DefeatPokemonsQuest extends Quest {
    constructor(killsNeeded, reward, route, region, customDescription = undefined) {
        super(killsNeeded, reward);
        this.route = route;
        this.region = region;
        this.focus = App.game.statistics.routeKills[this.region][this.route];
        this.customDescription = customDescription;
    }
    static generateData() {
        const amount = SeededRand.intBetween(100, 500);
        const region = SeededRand.intBetween(0, player.highestRegion());
        // Only use unlocked routes
        const possibleRoutes = Routes.getRoutesByRegion(region).map(route => route.number).filter(route => MapHelper.accessToRoute(route, region));
        // If no routes unlocked in this region, just use the first route of the region
        const route = possibleRoutes.length ? SeededRand.fromArray(possibleRoutes) : GameConstants.StartingRoutes[region];
        const reward = this.calcReward(amount, route, region);
        return [amount, reward, route, region];
    }
    static calcReward(killsNeeded, route, region) {
        const attacksPerPokemon = Math.ceil(Math.min(4, PokemonFactory.routeHealth(route, region) / Math.max(1, App.game.party.pokemonAttackObservable())));
        const reward = Math.ceil(GameConstants.DEFEAT_POKEMONS_BASE_REWARD * attacksPerPokemon * killsNeeded);
        return super.randomizeReward(reward);
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Defeat ${this.amount.toLocaleString('en-US')} Pokémon on ${Routes.getName(this.route, this.region, false, true)}.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.route);
        json.data.push(this.region);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class CapturePokemonsQuest extends Quest {
    constructor(capturesNeeded, reward) {
        super(capturesNeeded, reward);
        this.focus = App.game.statistics.totalPokemonCaptured;
    }
    static generateData() {
        const amount = SeededRand.intBetween(100, 500);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = amount * GameConstants.CAPTURE_POKEMONS_BASE_REWARD;
        return super.randomizeReward(reward);
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Capture or hatch ${this.amount.toLocaleString('en-US')} Pokémon.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class CapturePokemonTypesQuest extends Quest {
    constructor(capturesNeeded, reward, type) {
        super(capturesNeeded, reward);
        this.type = type;
        this.focus = ko.pureComputed(() => pokemonMap.filter(p => p.type.includes(this.type)).map(p => App.game.statistics.pokemonCaptured[p.id]()).reduce((a, b) => a + b, 0));
    }
    static typeWeights() {
        const types = new Array(GameHelper.enumLength(PokemonType) - 1).fill(0);
        Routes.regionRoutes.filter(r => r.isUnlocked()).forEach(r => {
            Object.values(r.pokemon).flat().forEach(p => {
                const pokemon = pokemonMap[p];
                if (!pokemon || pokemon.id <= 0) {
                    return;
                }
                pokemon.type.forEach(t => types[t]++);
            });
        });
        const max = Math.max(...types);
        // Calculate the weight
        return types.map(v => ((-v + max) / max) * (this.maxWeight - this.minWeight))
            // map the type and rounded values
            .map((weight, type) => ({ type, weight: Math.round((weight + this.minWeight) * 100) / 100 }));
    }
    static generateData() {
        const amount = SeededRand.intBetween(50, 250);
        this.weights = this.typeWeights();
        const type = SeededRand.fromArray(this.weights.filter(w => w.weight < this.maxWeight).map(w => w.type));
        const reward = this.calcReward(amount, type);
        return [amount, reward, type];
    }
    static calcReward(amount, type) {
        const reward = amount * GameConstants.CAPTURE_POKEMONS_BASE_REWARD * this.weights[type].weight * 2;
        return super.randomizeReward(reward);
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Capture or hatch ${this.amount.toLocaleString('en-US')} ${PokemonType[this.type]}-type Pokémon.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.type);
        return json;
    }
}
CapturePokemonTypesQuest.maxWeight = 4;
CapturePokemonTypesQuest.minWeight = 1.2;
CapturePokemonTypesQuest.weights = [];
/// <reference path="../Quest.ts" />
class ClearBattleFrontierQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.battleFrontierTotalStagesCompleted;
    }
    static canComplete() {
        return App.game.statistics.battleFrontierTotalStagesCompleted() > 1;
    }
    static generateData() {
        const amount = SeededRand.intBetween(50, 200);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * 8);
        return super.randomizeReward(reward);
    }
    get description() {
        const suffix = this.amount > 1 ? 's' : '';
        return `Clear ${this.amount.toLocaleString('en-US')} Stages in the Battle Frontier.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class GainFarmPointsQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalFarmPoints;
    }
    static canComplete() {
        return App.game.farming.canAccess();
    }
    static generateData() {
        const amount = SeededRand.intBetween(500, 5000);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.GAIN_FARM_POINTS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Gain ${this.amount.toLocaleString('en-US')} Farm Points.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class GainMoneyQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalMoney;
    }
    static generateData() {
        const highestRegion = player.highestRegion();
        const gymAmount = Object.values(GymList).reduce((max, gym) => {
            if (App.game.statistics.gymsDefeated[GameConstants.getGymIndex(gym.town)]()) {
                // 1.3 raised to variable power so we account for gyms from early regions being easier and better for money.
                return Math.max(max, (gym.moneyReward) * Math.pow(1.3, (highestRegion - GameConstants.getGymRegion(gym.town))));
            }
            return max;
        }, 0) || GymList[GameConstants.KantoGyms[0]].moneyReward;
        const baseAmount = gymAmount * (1 + highestRegion) * 2;
        const maxAmount = Math.ceil(baseAmount * (3 + highestRegion));
        const amount = SeededRand.intBetween(baseAmount, maxAmount);
        const reward = GainMoneyQuest.calcReward(amount, baseAmount);
        return [amount, reward];
    }
    static calcReward(amount, baseAmount) {
        const reward = Math.ceil(amount / baseAmount * GameConstants.GAIN_MONEY_BASE_REWARD);
        return GainMoneyQuest.randomizeReward(reward);
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Gain ${this.amount.toLocaleString('en-US')} Pokédollars.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class GainTokensQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalDungeonTokens;
    }
    static generateData() {
        const highestRegion = player.highestRegion();
        const dungeonAmount = Object.values(dungeonList).reduce((max, dungeon) => {
            if (App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(dungeon.name)]()) {
                return Math.max(max, dungeon.tokenCost);
            }
            return max;
        }, 0) || dungeonList[GameConstants.KantoDungeons[0]].tokenCost;
        const baseAmount = dungeonAmount;
        const maxAmount = Math.ceil(baseAmount * (3 + highestRegion));
        const amount = SeededRand.intBetween(baseAmount, maxAmount);
        const reward = GainTokensQuest.calcReward(amount, baseAmount);
        return [amount, reward];
    }
    static calcReward(amount, baseAmount) {
        const reward = Math.ceil(amount / baseAmount * GameConstants.GAIN_TOKENS_BASE_REWARD);
        return GainTokensQuest.randomizeReward(reward);
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Gain ${this.amount.toLocaleString('en-US')} Dungeon Tokens.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class GainGemsQuest extends Quest {
    constructor(amount, reward, type) {
        super(amount, reward);
        this.type = type;
        this.focus = App.game.statistics.gemsGained[this.type];
    }
    static canComplete() {
        return App.game.gems.canAccess();
    }
    static typeWeights() {
        const types = new Array(GameHelper.enumLength(PokemonType) - 1).fill(0);
        Routes.regionRoutes.filter(r => r.isUnlocked()).forEach(r => {
            Object.values(r.pokemon).flat().forEach(p => {
                const pokemon = pokemonMap[p];
                if (!pokemon || pokemon.id <= 0) {
                    return;
                }
                pokemon.type.forEach(t => types[t]++);
            });
        });
        const max = Math.max(...types);
        // Calculate the weight
        return types.map(v => ((-v + max) / max) * (this.maxWeight - this.minWeight))
            // map the type and rounded values
            .map((weight, type) => ({ type, weight: Math.round((weight + this.minWeight) * 100) / 100 }));
    }
    static generateData() {
        const amount = SeededRand.intBetween(200, 600);
        this.weights = this.typeWeights();
        const type = SeededRand.fromArray(this.weights.filter(w => w.weight < this.maxWeight).map(w => w.type));
        const reward = this.calcReward(type, amount);
        return [amount, reward, type];
    }
    static calcReward(type, amount) {
        const reward = amount * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * this.weights[type].weight * 0.5;
        return super.randomizeReward(reward);
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Gain ${this.amount.toLocaleString('en-US')} ${PokemonType[this.type]} gems.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.type);
        return json;
    }
}
GainGemsQuest.maxWeight = 4;
GainGemsQuest.minWeight = 1.2;
GainGemsQuest.weights = [];
/// <reference path="../Quest.ts" />
class HatchEggsQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalPokemonHatched;
    }
    static canComplete() {
        return App.game.breeding.canAccess();
    }
    static generateData() {
        const highestRegion = player.highestRegion();
        const amount = SeededRand.intBetween(1, (10 + (5 * highestRegion)));
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.HATCH_EGGS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Hatch ${this.amount.toLocaleString('en-US')} ${GameConstants.pluralizeString('Egg', this.amount)}.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class MineLayersQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.undergroundLayersMined;
    }
    static canComplete() {
        return App.game.underground.canAccess();
    }
    static generateData() {
        const amount = SeededRand.intBetween(1, 3);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.MINE_LAYERS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        if (this.customDescription) {
            return this.customDescription;
        }
        const suffix = this.amount > 1 ? 's' : '';
        return `Collect all buried treasure ${this.amount.toLocaleString('en-US')} time${suffix} in the Underground mines.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class MineItemsQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.undergroundItemsFound;
    }
    static canComplete() {
        return App.game.underground.canAccess();
    }
    static generateData() {
        const amount = SeededRand.intBetween(3, 15);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.MINE_ITEMS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        if (this.customDescription) {
            return this.customDescription;
        }
        const suffix = this.amount > 1 ? 's' : '';
        return `Collect ${this.amount.toLocaleString('en-US')} item${suffix} from the Underground mines.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class CatchShiniesQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalShinyPokemonCaptured;
    }
    static generateData() {
        const amount = 1;
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.SHINY_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Capture or hatch ${this.amount.toLocaleString('en-US')} shiny Pokémon.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class CatchShadowsQuest extends Quest {
    constructor(amount, reward) {
        super(amount, reward);
        this.focus = App.game.statistics.totalShadowPokemonCaptured;
    }
    static canComplete() {
        return App.game.statistics.totalShadowPokemonCaptured() > 1;
    }
    static generateData() {
        const amount = Math.ceil(Math.random() * 5);
        const reward = this.calcReward(amount);
        return [amount, reward];
    }
    static calcReward(amount) {
        const reward = Math.ceil(amount * GameConstants.SHADOW_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Catch ${this.amount.toLocaleString('en-US')} Shadow Pokémon.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        return json;
    }
}
/// <reference path="../Quest.ts" />
class DefeatGymQuest extends Quest {
    constructor(amount, reward, gymTown) {
        super(amount, reward);
        this.gymTown = gymTown;
        this.region = GameConstants.getGymRegion(this.gymTown);
        if (this.region == GameConstants.Region.none) {
            throw new Error(`Invalid gym town for quest: ${this.gymTown}`);
        }
        this.focus = App.game.statistics.gymsDefeated[GameConstants.getGymIndex(this.gymTown)];
    }
    // Only add Defeat Gym Quest if the player has defeated the first gym (Brock).
    static canComplete() {
        return App.game.badgeCase.hasBadge(BadgeEnums.Boulder);
    }
    static generateData() {
        const amount = SeededRand.intBetween(5, 20);
        let maxRegion = player.highestRegion();
        // Check if first gym of highest region has been cleared. If not, pick one region lower than highest.
        if (!App.game.badgeCase.hasBadge(GymList[GameConstants.RegionGyms[player.highestRegion()][0]].badgeReward)) {
            maxRegion -= 1;
        }
        const region = SeededRand.intBetween(0, maxRegion);
        // Only use cleared gyms.
        const possibleGyms = GameConstants.RegionGyms[region].filter(gymTown => GymList[gymTown].flags.quest && GymList[gymTown].clears());
        const gymTown = SeededRand.fromArray(possibleGyms);
        const reward = this.calcReward(amount, gymTown);
        return [amount, reward, gymTown];
    }
    static calcReward(amount, gymTown) {
        const gym = GymList[gymTown];
        const playerDamage = App.game.party.pokemonAttackObservable();
        let attacksToWin = 0;
        for (const pokemon of gym.getPokemonList()) {
            attacksToWin += Math.ceil(Math.min(4, pokemon.maxHealth / Math.max(1, playerDamage)));
        }
        const reward = Math.min(5000, Math.ceil(attacksToWin * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * GameConstants.ACTIVE_QUEST_MULTIPLIER * amount));
        return super.randomizeReward(reward);
    }
    get description() {
        var _a;
        if (this.customDescription) {
            return this.customDescription;
        }
        const elite = this.gymTown.includes('Elite') || this.gymTown.includes('Champion');
        const displayName = (_a = GymList[this.gymTown]) === null || _a === void 0 ? void 0 : _a.displayName;
        const leaderName = GymList[this.gymTown].leaderName.replace(/\d+/g, '').trim();
        const { region, subRegion } = GymList[this.gymTown].parent;
        const subRegionName = SubRegions.getSubRegionById(region, subRegion).name;
        let gymString;
        if (displayName) {
            gymString = displayName;
            if (displayName.includes('Trial')) {
                gymString += ` at ${this.gymTown}`;
            }
        }
        else if (elite) {
            gymString = this.gymTown;
        }
        else {
            gymString = `${leaderName}'s Gym at ${this.gymTown}`;
        }
        return `Defeat ${gymString} in ${subRegionName} ${this.amount.toLocaleString('en-US')} times.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.gymTown);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class DefeatDungeonQuest extends Quest {
    constructor(amount, reward, dungeon) {
        super(amount, reward);
        this.dungeon = dungeon;
        this.region = GameConstants.getDungeonRegion(this.dungeon);
        if (this.region == GameConstants.Region.none) {
            throw new Error(`Invalid dungeon for quest: ${this.dungeon}`);
        }
        this.focus = App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(this.dungeon)];
    }
    static generateData() {
        // Allow up to highest region
        const amount = SeededRand.intBetween(5, 20);
        const region = SeededRand.intBetween(0, player.highestRegion());
        // Only use unlocked dungeons
        const possibleDungeons = GameConstants.RegionDungeons[region].filter(dungeon => TownList[dungeon].isUnlocked());
        // If no dungeons unlocked in this region, just use the first dungeon of the region
        const dungeon = possibleDungeons.length ? SeededRand.fromArray(possibleDungeons) : GameConstants.RegionDungeons[region][0];
        const reward = this.calcReward(amount, dungeon);
        return [amount, reward, dungeon];
    }
    static calcReward(amount, dungeon) {
        const playerDamage = App.game.party.calculateClickAttack() + (App.game.party.pokemonAttackObservable() / GameConstants.QUEST_CLICKS_PER_SECOND);
        const attacksToDefeatPokemon = Math.ceil(Math.min(4, dungeonList[dungeon].baseHealth / playerDamage));
        const averageTilesToBoss = 13;
        const attacksToCompleteDungeon = attacksToDefeatPokemon * averageTilesToBoss;
        const completeDungeonsReward = attacksToCompleteDungeon * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * GameConstants.ACTIVE_QUEST_MULTIPLIER * amount;
        let region, route;
        for (region = player.highestRegion(); region >= 0; region--) {
            route = QuestHelper.highestOneShotRoute(region); // returns 0 if no routes in this region can be one shot
            if (route) {
                break;
            }
        }
        if (!route) {
            route = 1, region = GameConstants.Region.kanto;
        }
        const tokens = PokemonFactory.routeDungeonTokens(route, region);
        const routeKillsPerDungeon = dungeonList[dungeon].tokenCost / tokens;
        const collectTokensReward = routeKillsPerDungeon * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * amount;
        const reward = Math.min(5000, Math.ceil(completeDungeonsReward + collectTokensReward));
        return super.randomizeReward(reward);
    }
    get description() {
        var _a;
        const { subRegion } = TownList[this.dungeon];
        const subRegionName = SubRegions.getSubRegionById(this.region, subRegion).name;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Defeat the ${this.dungeon} dungeon in ${subRegionName} ${this.amount.toLocaleString('en-US')} times.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.dungeon);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class UsePokeballQuest extends Quest {
    constructor(amount, reward, pokeball) {
        super(amount, reward);
        this.pokeball = pokeball;
        this.focus = App.game.statistics.pokeballsUsed[this.pokeball];
    }
    static generateData() {
        const possiblePokeballs = [GameConstants.Pokeball.Pokeball];
        if (TownList['Lavender Town'].isUnlocked()) {
            possiblePokeballs.push(GameConstants.Pokeball.Greatball);
        }
        if (TownList['Fuchsia City'].isUnlocked()) {
            possiblePokeballs.push(GameConstants.Pokeball.Ultraball);
        }
        const pokeball = SeededRand.fromArray(possiblePokeballs);
        const amount = SeededRand.intBetween(100, 500);
        const reward = this.calcReward(amount, pokeball);
        return [amount, reward, pokeball];
    }
    static calcReward(amount, pokeball) {
        // Reward for Greatballs is 4x Pokeballs, Ultraballs are 9x Pokeballs
        const reward = Math.ceil(amount * (pokeball + 1) * (pokeball + 1) * GameConstants.DEFEAT_POKEMONS_BASE_REWARD);
        return super.randomizeReward(reward);
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Use ${this.amount.toLocaleString('en-US')} ${ItemList[GameConstants.Pokeball[this.pokeball]].displayName}s.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.pokeball);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class UseOakItemQuest extends Quest {
    constructor(amount, reward, item) {
        super(amount, reward);
        this.item = item;
        this.focus = App.game.statistics.oakItemUses[this.item];
    }
    static canComplete() {
        return App.game.oakItems.canAccess() && !App.game.challenges.list.disableOakItems.active();
    }
    static generateData() {
        const possibleItems = [
            OakItemType.Magic_Ball,
            OakItemType.Amulet_Coin,
            // OakItemType.Rocky_Helmet,
            OakItemType.Exp_Share,
            // OakItemType.Sprayduck,
            // OakItemType.Shiny_Charm,
            // OakItemType.Magma_Stone,
            // OakItemType.Cell_Battery,
            // OakItemType.Squirtbottle,
            // OakItemType.Sprinklotad,
            // OakItemType.Explosive_Charge,
            // OakItemType.Treasure_Scanner,
        ];
        const oakItem = SeededRand.fromArray(possibleItems);
        const amount = SeededRand.intBetween(100, 500);
        const reward = this.calcReward(amount, oakItem);
        return [amount, reward, oakItem];
    }
    static calcReward(amount, item) {
        const reward = amount * GameConstants.USE_OAK_ITEM_BASE_REWARD;
        return super.randomizeReward(reward);
    }
    get description() {
        if (this.customDescription) {
            return this.customDescription;
        }
        const desc = [];
        desc.push(`Equip the ${GameConstants.humanifyString(OakItemType[this.item])} and`);
        if (this.item == OakItemType.Magic_Ball) {
            desc.push(`capture ${this.amount.toLocaleString('en-US')} wild Pokémon.`);
        }
        else if (this.item == OakItemType.Amulet_Coin) {
            desc.push(`earn bonus Pokédollars ${this.amount.toLocaleString('en-US')} times.`);
        }
        else if (this.item == OakItemType.Exp_Share) {
            desc.push(`defeat ${this.amount.toLocaleString('en-US')} Pokémon.`);
        }
        else {
            desc.push(`gain its benefit ${this.amount.toLocaleString('en-US')} times.`);
        }
        return desc.join(' ');
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.item);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class HarvestBerriesQuest extends Quest {
    constructor(amount, reward, berryType) {
        super(amount, reward);
        this.berryType = berryType;
        this.focus = App.game.statistics.berriesHarvested[this.berryType];
    }
    static canComplete() {
        return App.game.farming.canAccess();
    }
    static generateData() {
        // Getting available Berries (always include Gen 1 Berries)
        const availableBerries = App.game.farming.berryData.filter(berry => (App.game.farming.unlockedBerries[berry.type]() && berry.growthTime[3] < 12000) || berry.type < BerryType.Persim);
        const berry = SeededRand.fromArray(availableBerries);
        const maxAmt = Math.min(300, Math.ceil(432000 / berry.growthTime[3]));
        const minAmt = Math.min(10, Math.ceil(maxAmt / 2));
        const amount = SeededRand.intBetween(minAmt, maxAmt);
        const reward = this.calcReward(amount, berry.type);
        return [amount, reward, berry.type];
    }
    static calcReward(amount, berryType) {
        const harvestTime = App.game.farming.berryData[berryType].growthTime[3];
        const harvestAmt = Math.max(4, Math.ceil(App.game.farming.berryData[berryType].harvestAmount / 2));
        const plantAmt = amount / harvestAmt;
        const fieldAmt = plantAmt / App.game.farming.plotList.length;
        const reward = Math.ceil(fieldAmt * Math.pow(harvestTime, .7) * 30);
        return super.randomizeReward(reward);
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Harvest ${this.amount.toLocaleString('en-US')} ${BerryType[this.berryType]} ${GameConstants.pluralizeString('Berry', this.amount)} at the farm.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.berryType);
        return json;
    }
}
/// <reference path="./questTypes/DefeatPokemonsQuest.ts" />
/// <reference path="./questTypes/CapturePokemonsQuest.ts" />
/// <reference path="./questTypes/CapturePokemonTypesQuest.ts" />
/// <reference path="./questTypes/ClearBattleFrontierQuest.ts" />
/// <reference path="./questTypes/GainFarmPointsQuest.ts" />
/// <reference path="./questTypes/GainMoneyQuest.ts" />
/// <reference path="./questTypes/GainTokensQuest.ts" />
/// <reference path="./questTypes/GainGemsQuest.ts" />
/// <reference path="./questTypes/HatchEggsQuest.ts" />
/// <reference path="./questTypes/MineLayersQuest.ts" />
/// <reference path="./questTypes/MineItemsQuest.ts" />
/// <reference path="./questTypes/CatchShiniesQuest.ts" />
/// <reference path="./questTypes/CatchShadowsQuest.ts" />
/// <reference path="./questTypes/DefeatGymQuest.ts" />
/// <reference path="./questTypes/DefeatDungeonQuest.ts" />
/// <reference path="./questTypes/UsePokeballQuest.ts" />
/// <reference path="./questTypes/UseOakItemQuest.ts" />
/// <reference path="./questTypes/HarvestBerriesQuest.ts" />
class QuestHelper {
    static createQuest(questType, data) {
        if (!this.quests[questType]) {
            console.error(`Error: Invalid quest type - ${questType}.`);
            return;
        }
        // Creating randomly generated quest
        if (!data) {
            const QuestClass = this.quests[questType];
            return new QuestClass(...QuestClass.generateData());
        }
        return new this.quests[questType](...data);
    }
    static generateQuestList(seed, amount = 10, uniqueQuestTypes = true) {
        const quests = [];
        SeededRand.seed(+seed);
        // Only use unlocked quest types
        const QuestTypes = new Set(Object.entries(this.quests).filter(([key, quest]) => quest.canComplete()).map(([key]) => key));
        while (quests.length < amount && QuestTypes.size) {
            const questType = SeededRand.fromArray(Array.from(QuestTypes));
            if (uniqueQuestTypes) {
                QuestTypes.delete(questType);
            }
            const quest = this.createQuest(questType);
            quest.index = quests.length;
            quests.push(quest);
        }
        return quests;
    }
    static highestOneShotRoute(region) {
        const routes = Routes.getRoutesByRegion(region).map(r => r.number);
        const first = Math.min(...routes);
        const last = Math.max(...routes);
        const attack = Math.max(1, App.game.party.calculatePokemonAttack(PokemonType.None, PokemonType.None, false, region, true, false, WeatherType.Clear));
        for (let route = last; route >= first; route--) {
            if (PokemonFactory.routeHealth(route, region) < attack) {
                return route;
            }
        }
        return 0;
    }
}
QuestHelper.quests = {
    DefeatPokemonsQuest,
    CapturePokemonsQuest,
    CapturePokemonTypesQuest,
    ClearBattleFrontierQuest,
    GainFarmPointsQuest,
    GainMoneyQuest,
    GainTokensQuest,
    GainGemsQuest,
    HatchEggsQuest,
    MineLayersQuest,
    MineItemsQuest,
    CatchShiniesQuest,
    CatchShadowsQuest,
    DefeatGymQuest,
    DefeatDungeonQuest,
    UsePokeballQuest,
    UseOakItemQuest,
    HarvestBerriesQuest,
};
class QuestLine {
    constructor(name, description, requirement, bulletinBoard = GameConstants.BulletinBoards.None, disablePausing = false // applies to bulletin board quests only
    ) {
        this.name = name;
        this.description = description;
        this.requirement = requirement;
        this.bulletinBoard = bulletinBoard;
        this.disablePausing = disablePausing;
        this.state = ko.observable(QuestLineState.inactive).extend({ numeric: 0 });
        this.pausableStates = [GameConstants.GameState.town, GameConstants.GameState.fighting];
        this.name = name;
        this.description = description;
        this.quests = ko.observableArray();
        this.totalQuests = 0;
        this.curQuest = ko.pureComputed(() => {
            const acc = 0;
            return this.quests().map((quest) => {
                return +quest.isCompleted();
            })
                .reduce((acc, iscompleted) => {
                return acc + iscompleted;
            }, 0);
        });
        this.curQuestInitial = ko.observable();
        this.curQuestInitial.equalityComparer = () => {
            return false;
        }; //Always update subscriptions, even if same data pushed in
        this.curQuestObject = ko.pureComputed(() => {
            this.quests(); //register dependency on this computed so it will update
            if (this.totalQuests > 0 && this.curQuest() < this.totalQuests) {
                return this.quests()[this.curQuest()];
            }
            else {
                return { progress: () => {
                        return 0;
                    }, progressText: () => {
                        return '';
                    } };
            }
        });
        this.autoBegin = this.curQuest.subscribe((num) => {
            if (this.curQuest() < this.totalQuests) {
                if (this.curQuestObject().initial() == null && this.state() != QuestLineState.suspended) {
                    this.beginQuest(this.curQuest());
                }
            }
            else {
                this.state(QuestLineState.ended);
            }
        });
    }
    addQuest(quest) {
        this.totalQuests++;
        quest.index = this.totalQuests;
        quest.inQuestLine = true;
        quest.parentQuestLine = this;
        quest.createAutoCompleter();
        this.quests.push(quest);
    }
    beginQuest(index = 0, initial, notifyStart = false) {
        const quest = this.quests()[index];
        if (initial != undefined) {
            quest.initial(initial);
        }
        else {
            quest.begin();
        }
        quest.onLoad();
        this.curQuestInitial(quest.initial());
        this.state(QuestLineState.started);
        if (notifyStart) {
            Notifier.notify({
                title: 'New Quest Line Started!',
                message: `${this.description}\n<i>"${this.name}" added to the Quest List!</i>`,
                type: NotificationConstants.NotificationOption.success,
                timeout: 5 * GameConstants.MINUTE,
            });
        }
    }
    resumeAt(index, initial) {
        if (initial != undefined) {
            for (let i = 0; i < Math.min(index, this.totalQuests); i++) {
                this.quests()[i].complete(true);
            }
            if (index < this.totalQuests) {
                this.beginQuest(index, initial);
            }
        }
        else {
            this.beginQuest(0);
        }
    }
    suspendQuest(skipPausableCheck = false) {
        if ((!skipPausableCheck && !this.isPausable()) || this.state() == QuestLineState.suspended) {
            // Do nothing if already suspended or not pausable.
            return;
        }
        // Mark quest (or sub quests if multi quest) as suspended to prevent progress
        const quest = this.quests()[this.curQuest()];
        if (quest instanceof MultipleQuestsQuest) {
            quest.quests.forEach((q) => q.suspended = true);
        }
        quest.suspended = true;
        this.state(QuestLineState.suspended);
    }
    resumeSuspendedQuest() {
        if (this.state() != QuestLineState.suspended) {
            return;
        }
        // Re-activate suspended quest
        const quest = this.quests()[this.curQuest()];
        if (quest instanceof MultipleQuestsQuest) {
            quest.quests.forEach((q) => q.suspended = false);
        }
        quest.suspended = false;
        this.state(QuestLineState.started);
    }
    isPausable() {
        if (this.disablePausing || this.bulletinBoard == GameConstants.BulletinBoards.None
            || !this.pausableStates.includes(App.game.gameState)) {
            return false;
        }
        return true;
    }
    get pauseTooltip() {
        if (this.disablePausing || this.bulletinBoard == GameConstants.BulletinBoards.None) {
            return 'This quest line cannot be paused. It is either a story, progression related, or otherwise required quest.';
        }
        if (!this.pausableStates.includes(App.game.gameState)) {
            return 'Quest Lines can only be paused while in a town or fighting on a route.';
        }
        return 'Pausing this quest line will remove it from your quest list and prevent any progress.<br /><br />It can be resumed from the current step at the Bulletin Board it was originally accepted.';
    }
    toJSON() {
        var _a, _b, _c;
        const json = {
            state: this.state(),
            name: this.name,
            quest: this.curQuest(),
            initial: (_c = (_b = (_a = this.curQuestObject()).initial) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : this.curQuestInitial(),
        };
        if (this.curQuestObject() instanceof MultipleQuestsQuest) {
            json.initial = this.curQuestObject().quests.map((q) => q.isCompleted() ? true : q.initial());
        }
        return json;
    }
}
/* Static class used to handle Quest Lines */
var _a;
class QuestLineHelper {
    /* Kanto QuestLines */
    static createTutorial() {
        const tutorial = new QuestLine('Tutorial Quests', 'A short set of quests to get you going.');
        // Defeat Starter
        const defeatStarter = new CustomQuest(1, 10, 'Defeat the Pokémon. Click to deal damage!', () => App.game.statistics.totalPokemonDefeated()).withInitialValue(0); // Initial of 0 so it auto completes if bugged
        tutorial.addQuest(defeatStarter);
        // Capture 1 pokemon
        const captureOne = new CapturePokemonsQuest(1, 20).withDescription('Capture 1 Pokémon. When you defeat a Pokémon, a Poké Ball is thrown and you have a chance to capture it.').withInitialValue(1); // Initial of 1 so it auto completes if bugged
        tutorial.addQuest(captureOne);
        // Kill 10 on Route 2
        const routeTwo = new DefeatPokemonsQuest(10, 20, 2, GameConstants.Region.kanto).withDescription('Defeat 10 Pokémon on Route 2. Click Route 2 on the map to move there and begin fighting.').withInitialValue(0); // Initial of 0 so it auto completes if bugged
        tutorial.addQuest(routeTwo);
        // Say bye to mom
        const talkToMom = new TalkToNPCQuest(PalletMom1, 'Go back to Pallet Town and say bye to mom.');
        tutorial.addQuest(talkToMom);
        // Buy pokeballs
        const buyPokeballs = new BuyPokeballsQuest(10, 20, GameConstants.Pokeball.Pokeball).withInitialValue(0); // Initial of 0 so it auto completes if bugged
        tutorial.addQuest(buyPokeballs);
        // Learn about catching from the Old Man
        const OldManReward = () => {
            $('#npc-modal').one('hidden.bs.modal', () => {
                Information.show({
                    steps: [
                        {
                            element: document.getElementById('pokeballSelector'),
                            intro: 'Select which Poké Ball types to catch Pokémon with based on their caught/shiny status.<br/><i><sup>Hover over the names for more info.</sup></i><br/><br/>Capturing Pokémon gains you <img title="Dungeon Tokens\nGained by capturing Pokémon" src="assets/images/currency/dungeonToken.svg" height="25px"> Dungeon Tokens.<br/><br/>Try now by clicking the "Caught" selector to change it.',
                        },
                    ],
                    exitOnEsc: false,
                    showButtons: false,
                });
                $('#pokeballSelectorModal').one('show.bs.modal', () => {
                    Information.hide();
                });
                $('#pokeballSelectorModal').one('shown.bs.modal', () => {
                    // Need to set a timeout, otherwise it messes up the modal layout
                    setTimeout(() => {
                        Information.show({
                            steps: [
                                {
                                    element: document.querySelector('#pokeballSelectorModal .modal-body'),
                                    intro: 'Select the <img title="Poké Ball" src="assets/images/pokeball/Pokeball.svg" height="25px"> Poké Ball to use this type of ball to capture already caught Pokémon, which will give you <img title="Dungeon Tokens\nGained by capturing Pokémon" src="assets/images/currency/dungeonToken.svg" height="25px"> Dungeon Tokens when captured.',
                                },
                            ],
                            // Needed for IntroJs on modals
                            overlayOpacity: 0,
                        });
                    }, 100);
                    // Hide the IntroJS overlay once the user selects the Pokeball
                    $('#pokeballSelectorModal .clickable').one('click', () => {
                        Information.hide();
                    });
                });
            });
        };
        const talkToOldMan = new TalkToNPCQuest(ViridianCityOldMan2, 'Talk to the Old Man in Viridian City to learn about catching.').withCustomReward(OldManReward);
        tutorial.addQuest(talkToOldMan);
        const catch5Pidgey = new CaptureSpecificPokemonQuest('Pidgey', 5, false, 30).withDescription('Use what you\'ve learned to catch 5 Pidgey. Talk to the Old Man again if you need a reminder.');
        tutorial.addQuest(catch5Pidgey);
        // Buy Dungeon ticket
        const buyDungeonTicket = new CustomQuest(1, 50, 'Buy the Dungeon Ticket from Viridian City Shop.', () => +App.game.keyItems.hasKeyItem(KeyItemType.Dungeon_ticket)).withInitialValue(0);
        tutorial.addQuest(buyDungeonTicket);
        // Clear Viridian Forest
        const clearViridianForest = new DefeatDungeonQuest(1, 50, 'Viridian Forest').withDescription('Gather 50 Dungeon Tokens by (re)capturing Pokémon, then clear the Viridian Forest dungeon.').withInitialValue(0);
        tutorial.addQuest(clearViridianForest);
        // Defeat Pewter Gym
        const pewterReward = () => {
            Notifier.notify({ message: 'Tutorial completed!', type: NotificationConstants.NotificationOption.success });
            Information.show({
                steps: [
                    {
                        element: document.getElementById('questDisplayContainer'),
                        intro: 'Click "List" to see the current quests that can be completed for <img title="Quest points" src="assets/images/currency/questPoint.svg" height="24px"> Quest Points.',
                    },
                    {
                        element: document.getElementById('startMenu'),
                        intro: 'See the badges you\'ve earned in the Badge Case. Badges influence the max level of your Pokémon.',
                    },
                ],
            });
        };
        const pewter = new DefeatGymQuest(1, 0, 'Pewter City').withDescription('Defeat Pewter City Gym. Click the town on the map to move there, then click the Gym button to start the battle.').withInitialValue(0).withCustomReward(pewterReward);
        tutorial.addQuest(pewter);
        App.game.quests.questLines().push(tutorial);
    }
    // Available upon talking with Bill's Grandpa.
    static createBillsGrandpaQuestLine() {
        const BillsGrandpaQuestLine = new QuestLine('Bill\'s Grandpa Treasure Hunt', 'Check the hints and bring Bill\'s Grandpa the Pokémon he wants to see.', new RouteKillRequirement(10, GameConstants.Region.kanto, 25), GameConstants.BulletinBoards.Kanto);
        const talkToBillsGrandpa1 = new TalkToNPCQuest(BillsGrandpa1, 'Talk to Bill\'s Grandpa in Bill\'s House.');
        BillsGrandpaQuestLine.addQuest(talkToBillsGrandpa1);
        const pinkBalloon = new CaptureSpecificPokemonQuest('Jigglypuff', 1).withDescription('Catch the desired Pokémon.');
        const punchNormal = new CustomQuest(100, 0, 'Defeat 100 Normal-type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Normal)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        BillsGrandpaQuestLine.addQuest(new MultipleQuestsQuest([
            pinkBalloon,
            punchNormal,
        ], 'Bill\'s Grandpa wants you to catch a Pokémon that is pink and like a balloon.'));
        // Talk to Bill's Grandpa after catching a Jigglypuff
        const talkToBillsGrandpa2 = new TalkToNPCQuest(BillsGrandpa2, 'Show your Jigglypuff to Bill\'s Grandpa.').withCustomReward(this.itemReward('Moon_stone', 1, 'Bill\'s Grandpa'));
        BillsGrandpaQuestLine.addQuest(talkToBillsGrandpa2);
        const blueRound = new CaptureSpecificPokemonQuest('Oddish', 1).withDescription('Catch the desired Pokémon.');
        const punchGrass = new CustomQuest(100, 0, 'Defeat 100 Grass-type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Grass)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        BillsGrandpaQuestLine.addQuest(new MultipleQuestsQuest([
            blueRound,
            punchGrass,
        ], 'Bill\'s Grandpa wants you to catch a Pokémon that is round, blue, and has leaves growing on its head.'));
        // Talk to Bill's Grandpa after catching an Oddish
        const talkToBillsGrandpa3 = new TalkToNPCQuest(BillsGrandpa3, 'Show your Oddish to Bill\'s Grandpa.').withCustomReward(this.itemReward('Leaf_stone', 1, 'Bill\'s Grandpa'));
        BillsGrandpaQuestLine.addQuest(talkToBillsGrandpa3);
        const redSphere = new CaptureSpecificPokemonQuest('Staryu', 1).withDescription('Catch the desired Pokémon.');
        const punchWater = new CustomQuest(100, 0, 'Defeat 100 Water-type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Water)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        BillsGrandpaQuestLine.addQuest(new MultipleQuestsQuest([
            redSphere,
            punchWater,
        ], 'Bill\'s Grandpa wants you to catch a Pokémon that has a red sphere in its body and is shaped like a star.'));
        // Talk to Bill's Grandpa after catching a Staryu
        const talkToBillsGrandpa4 = new TalkToNPCQuest(BillsGrandpa4, 'Show your Staryu to Bill\'s Grandpa.').withCustomReward(this.itemReward('Water_stone', 1, 'Bill\'s Grandpa'));
        BillsGrandpaQuestLine.addQuest(talkToBillsGrandpa4);
        const loyalRoar = new CaptureSpecificPokemonQuest('Growlithe', 1).withDescription('Catch the desired Pokémon.');
        const punchFire = new CustomQuest(100, 0, 'Defeat 100 Fire-type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Fire)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        BillsGrandpaQuestLine.addQuest(new MultipleQuestsQuest([
            loyalRoar,
            punchFire,
        ], 'Bill\'s Grandpa wants you to catch a Pokémon that is very loyal and supposedly roars pretty well.'));
        // Talk to Bill's Grandpa after catching a Growlithe
        const talkToBillsGrandpa5 = new TalkToNPCQuest(BillsGrandpa5, 'Show your Growlithe to Bill\'s Grandpa.').withCustomReward(this.itemReward('Fire_stone', 1, 'Bill\'s Grandpa'));
        BillsGrandpaQuestLine.addQuest(talkToBillsGrandpa5);
        const yellowAndRed = new CaptureSpecificPokemonQuest('Pikachu', 1).withDescription('Catch the desired Pokémon.');
        const punchElectric = new CustomQuest(100, 0, 'Defeat 100 Electric-type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Electric)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        BillsGrandpaQuestLine.addQuest(new MultipleQuestsQuest([
            yellowAndRed,
            punchElectric,
        ], 'Bill\'s Grandpa wants you to catch a Pokémon that has a yellow body and red cheeks.'));
        // Talk to Bill's Grandpa after catching a Pikachu
        const talkToBillsGrandpa6 = new TalkToNPCQuest(BillsGrandpa6, 'Show your Pikachu to Bill\'s Grandpa.').withCustomReward(this.itemReward('Thunder_stone', 1, 'Bill\'s Grandpa'));
        BillsGrandpaQuestLine.addQuest(talkToBillsGrandpa6);
        const fightBillsGrandpa = new DefeatTemporaryBattleQuest('Bill\'s Grandpa', 'Bill\'s Grandpa would like to have a battle with you!');
        BillsGrandpaQuestLine.addQuest(fightBillsGrandpa);
        // Talk to Bill's Grandpa after battling him
        const EeveeReward = () => {
            App.game.party.gainPokemonByName('Eevee', PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_REWARD));
            Notifier.notify({
                title: BillsGrandpaQuestLine.name,
                message: 'Bill\'s Grandpa has given you an Eevee, treat it well!',
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.General.new_catch,
                timeout: 3e4,
            });
        };
        const talkToBillsGrandpa7 = new TalkToNPCQuest(BillsGrandpa7, 'Talk to Bill\'s Grandpa one last time.').withCustomReward(EeveeReward);
        BillsGrandpaQuestLine.addQuest(talkToBillsGrandpa7);
        App.game.quests.questLines().push(BillsGrandpaQuestLine);
    }
    // Started upon defeating Cerulean City's gym.
    static createRocketKantoQuestLine() {
        const rocketKantoQuestLine = new QuestLine('Team Rocket', 'Some nasty villains are up to no good.');
        const clearRocketGameCorner = new DefeatDungeonQuest(1, 0, 'Rocket Game Corner').withDescription('Illegal activity is afoot. Clear the Rocket Game Corner in Celadon City.')
            .withOptionalArgs({
            clearedMessage: 'I see that you raise Pokémon with utmost care. A child like you would never understand what I hope to achieve. I shall step aside this time! I hope we meet again...',
            npcDisplayName: 'Team Rocket Boss Giovanni',
            npcImageName: 'Team Rocket Boss Giovanni',
        });
        rocketKantoQuestLine.addQuest(clearRocketGameCorner);
        const clearSilphCo1 = new DefeatDungeonQuest(1, 0, 'Silph Co.').withDescription('Team Rocket has occupied Silph Co. Clear Silph Co. in Saffron City to find the Card Key.')
            .withOptionalArgs({
            clearedMessage: 'What kept you $playername$? Hahaha! I thought you\'d turn up if I waited here! I guess Team Rocket slowed you down! Not that I care! I saw you in Saffron, so I decided to see if you got better!',
            npcDisplayName: 'Rival Blue',
            npcImageName: 'Rival Blue',
        });
        rocketKantoQuestLine.addQuest(clearSilphCo1);
        const clearBlue = new DefeatTemporaryBattleQuest('Blue 5', 'Blue is getting in your way. Defeat him in Silph Co.');
        rocketKantoQuestLine.addQuest(clearBlue);
        const clearSilphCo2 = new DefeatDungeonQuest(1, 0, 'Silph Co.').withDescription('Team Rocket has occupied Silph Co. Clear Silph Co. in Saffron City once more to foil their plans.')
            .withOptionalArgs({
            clearedMessage: 'Arrgh!! I lost again!? Blast it all! You ruined our plans for Silph! But Team Rocket will never fall! $playername$, never forget that all Pokémon exist for Team Rocket! I must go, but I shall return!',
            npcDisplayName: 'Team Rocket Boss Giovanni',
            npcImageName: 'Team Rocket Boss Giovanni',
        });
        rocketKantoQuestLine.addQuest(clearSilphCo2);
        const ViridianGymReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: rocketKantoQuestLine.name,
                message: 'The President of Silph Co. has rewarded you with a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearViridianGym = new DefeatGymQuest(1, 0, 'Viridian City').withCustomReward(ViridianGymReward).withDescription('If you take down Team Rocket\'s leader one more time they will surely never come back from this! Clear Viridian City Gym.');
        rocketKantoQuestLine.addQuest(clearViridianGym);
        App.game.quests.questLines().push(rocketKantoQuestLine);
    }
    // Started upon defeating Fuchsia City's gym.
    static createUndergroundQuestLine() {
        const undergroundQuestLine = new QuestLine('Mining Expedition', 'Explore the underground!');
        //Buy Explorer Kit (no reward)
        const buyExplorerKit = new CustomQuest(1, 0, 'Buy the Explorer Kit from Cinnabar Island Shop.', () => +App.game.keyItems.hasKeyItem(KeyItemType.Explorer_kit)).withInitialValue(0);
        undergroundQuestLine.addQuest(buyExplorerKit);
        // Mine 5 layers in the Underground
        const oldAmberReward = () => {
            // Gain an Old Amber
            ItemList.Old_amber.gain(1);
            Notifier.notify({
                title: undergroundQuestLine.name,
                message: 'You have gained an Old Amber!\n<i>Have a look around Cinnabar island to revive this fossil.</i>',
                type: NotificationConstants.NotificationOption.success,
                timeout: GameConstants.MINUTE,
            });
        };
        const mineLayers = new MineLayersQuest(5, 0).withDescription('Collect all buried treasure 5 times in the Underground mines.').withCustomReward(oldAmberReward);
        undergroundQuestLine.addQuest(mineLayers);
        App.game.quests.questLines().push(undergroundQuestLine);
    }
    // Started upon defeating Cinnabar Island's gym.
    static createBillSeviiQuestLine() {
        const billSeviiQuestLine = new QuestLine('Bill\'s Errand', 'Bill has asked you to journey to the Sevii Islands with him to set up a digital connection to mainland Kanto.');
        const talktoCelio1 = new TalkToNPCQuest(OneIslandCelio1, 'Use the Subregional Travel button at the top of the map to travel to the Sevii Islands and speak with Celio on One Island.');
        billSeviiQuestLine.addQuest(talktoCelio1);
        const talktoGameCornerOwner1 = new TalkToNPCQuest(TwoIslandGameCornerOwner1, 'Ask the Game Corner owner on Two Island about the meteorite.');
        billSeviiQuestLine.addQuest(talktoGameCornerOwner1);
        const clearBikerGangTemporaryBattles = new CustomQuest(3, 0, 'A biker gang has invaded Three island. They will not let you continue to Berry Forest. Defeat the Biker Goons.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Biker Goon 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Biker Goon 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Biker Goon 3')]());
        billSeviiQuestLine.addQuest(clearBikerGangTemporaryBattles);
        const clearCueBallPaxtonTemporaryBattle = new DefeatTemporaryBattleQuest('Cue Ball Paxton', 'Defeat the biker gang\'s leader.');
        billSeviiQuestLine.addQuest(clearCueBallPaxtonTemporaryBattle);
        const clearBerryForest = new DefeatDungeonQuest(1, 0, 'Berry Forest').withDescription('Find Lostelle. Clear Berry Forest.');
        billSeviiQuestLine.addQuest(clearBerryForest);
        const talktoGameCornerOwner2 = new TalkToNPCQuest(TwoIslandGameCornerOwner2, 'Lostelle has been found. Return to the Game Corner owner on Two Island.').withCustomReward(() => ItemList.Meteorite_Bills_Errand.gain(1));
        billSeviiQuestLine.addQuest(talktoGameCornerOwner2);
        const BillsErrandReward = () => {
            App.game.wallet.gainQuestPoints(1000, true);
            Notifier.notify({
                title: billSeviiQuestLine.name,
                message: 'Celio has rewarded you with 1,000 Quest Points!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const talktoCelio2 = new TalkToNPCQuest(OneIslandCelio2, 'Deliver the meteorite to Celio on One Island.').withCustomReward(BillsErrandReward);
        billSeviiQuestLine.addQuest(talktoCelio2);
        App.game.quests.questLines().push(billSeviiQuestLine);
    }
    // Started upon defeating Viridian City's gym.
    static createPersonsofInterestQuestLine() {
        const personsofInterestQuestLine = new QuestLine('Persons of Interest', 'Some people want to talk to you.');
        const talktoBreeder = new TalkToNPCQuest(SaffronBreeder, 'Talk to the Breeder in Saffron City.', 250);
        personsofInterestQuestLine.addQuest(talktoBreeder);
        const talktoGemScientist = new TalkToNPCQuest(PewterScientist, 'Talk to the Gem Scientist in Pewter City.', 250);
        personsofInterestQuestLine.addQuest(talktoGemScientist);
        App.game.quests.questLines().push(personsofInterestQuestLine);
    }
    /* Johto QuestLines */
    // Started upon defeating Ecruteak City's gym
    static createSickAmpharosQuestLine() {
        const sickAmpharosQuestLine = new QuestLine('The Sick Ampharos', 'Jasmine\'s Ampharos seems to be sick!');
        const clearOlivineLighthouse = new DefeatDungeonQuest(1, 0, 'Olivine Lighthouse').withDescription('Clear the Olivine Lighthouse dungeon in Olivine City.');
        sickAmpharosQuestLine.addQuest(clearOlivineLighthouse);
        const talkToJasmine1 = new TalkToNPCQuest(OlivineLighthouseJasmine1, 'Talk to Jasmine in the Olivine Lighthouse.');
        sickAmpharosQuestLine.addQuest(talkToJasmine1);
        const talkToHerbalist1 = new TalkToNPCQuest(CianwoodCityPharmacist1, 'Talk to the Pharmacist in Cianwood City.');
        sickAmpharosQuestLine.addQuest(talkToHerbalist1);
        const clearCianwoodCityGym = new DefeatGymQuest(1, 0, 'Cianwood City').withDescription('The Pharmacist said he needs some time to finish Amphys medicine. Clear the Cianwood City Gym in the meantime.');
        sickAmpharosQuestLine.addQuest(clearCianwoodCityGym);
        const talkToHerbalist2 = new TalkToNPCQuest(CianwoodCityPharmacist2, 'Talk to the Pharmacist in Cianwood City.');
        sickAmpharosQuestLine.addQuest(talkToHerbalist2);
        const giveMedicineToAmphy = new TalkToNPCQuest(OlivineLighthouseMedicineAmphy, 'Give Amphy their medicine in the Olivine Lighthouse.');
        sickAmpharosQuestLine.addQuest(giveMedicineToAmphy);
        const talkToJasmine2 = new TalkToNPCQuest(OlivineLighthouseJasmine2, 'Talk to Jasmine in the Olivine Lighthouse.');
        sickAmpharosQuestLine.addQuest(talkToJasmine2);
        App.game.quests.questLines().push(sickAmpharosQuestLine);
    }
    // Started upon defeating Ecruteak City's gym.
    static createRocketJohtoQuestLine() {
        const rocketJohtoQuestLine = new QuestLine('Team Rocket Again', 'Team Rocket is up to no good again!');
        const defeatRedGyarados = new DefeatTemporaryBattleQuest('Red Gyarados', 'Defeat the rampaging Red Gyarados!');
        rocketJohtoQuestLine.addQuest(defeatRedGyarados);
        const clearTeamRocketHideout = new DefeatDungeonQuest(1, 0, 'Team Rocket\'s Hideout').withDescription('Clear the Team Rocket\'s Hideout dungeon in Mahogany Town');
        rocketJohtoQuestLine.addQuest(clearTeamRocketHideout);
        const radioTowerReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: rocketJohtoQuestLine.name,
                message: 'The grateful radio director gave you a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearRadioTower = new DefeatDungeonQuest(1, 0, 'Radio Tower').withDescription('Clear the Radio Tower dungeon in Goldenrod City').withCustomReward(radioTowerReward);
        rocketJohtoQuestLine.addQuest(clearRadioTower);
        App.game.quests.questLines().push(rocketJohtoQuestLine);
    }
    // Available upon clearing Route 37
    static createJohtoBeastsQuestLine() {
        const johtoBeastsQuestLine = new QuestLine('The Legendary Beasts', 'Investigate the legends surrounding the strange Burned Tower in Ecruteak City.', new RouteKillRequirement(10, GameConstants.Region.johto, 37), GameConstants.BulletinBoards.Johto, true);
        const talktoEusine1 = new TalkToNPCQuest(EcruteakEusine, 'Talk to Eusine in Ecruteak City.');
        johtoBeastsQuestLine.addQuest(talktoEusine1);
        const clearBurnedTower = new DefeatDungeonQuest(1, 0, 'Burned Tower').withDescription('Clear the Burned Tower.');
        johtoBeastsQuestLine.addQuest(clearBurnedTower);
        const clearSilver = new DefeatTemporaryBattleQuest('Silver 3', 'Defeat Silver.');
        johtoBeastsQuestLine.addQuest(clearSilver);
        const talktoPokéfanDerek = new TalkToNPCQuest(EcruteakPokéfan, 'Talk to Pokéfan Derek in Ecruteak City.').withCustomReward(() => App.game.quests.getQuestLine('Eusine\'s Chase').beginQuest(0, undefined, true));
        johtoBeastsQuestLine.addQuest(talktoPokéfanDerek);
        const catchRaikou = new CaptureSpecificPokemonQuest('Raikou', 1, true).withDescription('Catch Raikou.');
        const catchEntei = new CaptureSpecificPokemonQuest('Entei', 1, true).withDescription('Catch Entei.');
        const catchSuicune = new CaptureSpecificPokemonQuest('Suicune').withDescription('Catch Suicune.');
        johtoBeastsQuestLine.addQuest(new MultipleQuestsQuest([
            catchRaikou,
            catchEntei,
            catchSuicune,
        ], 'Catch the Legendary Beasts.'));
        App.game.quests.questLines().push(johtoBeastsQuestLine);
    }
    static createJohtoSuicuneQuestLine() {
        const johtoSuicuneQuestLine = new QuestLine('Eusine\'s Chase', 'Eusine is looking for Suicune.');
        const clearCianwoodSuicune = new DefeatTemporaryBattleQuest('Suicune 1', 'Find Suicune.');
        johtoSuicuneQuestLine.addQuest(clearCianwoodSuicune);
        const talktoEusine2 = new TalkToNPCQuest(CianwoodEusine, 'Talk to Eusine in Cianwood City.');
        johtoSuicuneQuestLine.addQuest(talktoEusine2);
        const clearEusine = new DefeatTemporaryBattleQuest('Eusine', 'Defeat Eusine.');
        johtoSuicuneQuestLine.addQuest(clearEusine);
        const clearRoute42Suicune = new DefeatTemporaryBattleQuest('Suicune 2', 'Find Suicune.');
        johtoSuicuneQuestLine.addQuest(clearRoute42Suicune);
        const talktoEusine3 = new TalkToNPCQuest(MahoganyEusine, 'Talk to Eusine in Mahogany Town.');
        johtoSuicuneQuestLine.addQuest(talktoEusine3);
        const clearVermilionSuicune = new DefeatTemporaryBattleQuest('Suicune 3', 'Find Suicune.');
        johtoSuicuneQuestLine.addQuest(clearVermilionSuicune);
        const talktoEusine4 = new TalkToNPCQuest(VermilionEusine, 'Talk to Eusine in Vermilion City.');
        johtoSuicuneQuestLine.addQuest(talktoEusine4);
        const clearRoute14Suicune = new DefeatTemporaryBattleQuest('Suicune 4', 'Find Suicune.');
        johtoSuicuneQuestLine.addQuest(clearRoute14Suicune);
        const talktoEusine5 = new TalkToNPCQuest(FuchsiaEusine, 'Talk to Eusine in Fuchsia City.');
        johtoSuicuneQuestLine.addQuest(talktoEusine5);
        const clearRoute25Suicune = new DefeatTemporaryBattleQuest('Suicune 5', 'Find Suicune.');
        johtoSuicuneQuestLine.addQuest(clearRoute25Suicune);
        const talktoEusine6 = new TalkToNPCQuest(BillsHouseEusine, 'Talk to Eusine in Bill\'s House.');
        johtoSuicuneQuestLine.addQuest(talktoEusine6);
        const catchRoute25Suicune = new CaptureSpecificPokemonQuest('Suicune');
        johtoSuicuneQuestLine.addQuest(catchRoute25Suicune);
        App.game.quests.questLines().push(johtoSuicuneQuestLine);
    }
    // Lugia Quest - Available upon clearing Rocket Johto questline
    static createlugiaJohtoQuestLine() {
        const lugiaJohtoQuestLine = new QuestLine('Whirl Guardian', 'The Kimono Girls of Ecruteak City need help.', new QuestLineCompletedRequirement('Team Rocket Again'), GameConstants.BulletinBoards.Johto);
        const talktoZuki = new TalkToNPCQuest(Zuki, 'Talk to Kimono Girl Zuki in Violet City.');
        lugiaJohtoQuestLine.addQuest(talktoZuki);
        const helpZuki = new HatchEggsQuest(25, 0);
        lugiaJohtoQuestLine.addQuest(helpZuki);
        const talktoNaoko = new TalkToNPCQuest(Naoko, 'Talk to Kimono Girl Naoko in the Ilex Forest.');
        lugiaJohtoQuestLine.addQuest(talktoNaoko);
        const helpNaoko = new DefeatDungeonQuest(1, 0, 'Ilex Forest').withDescription('Clear Ilex Forest to lead Naoko to safety.');
        lugiaJohtoQuestLine.addQuest(helpNaoko);
        const kimonoReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Ultraball, 50, false);
            Notifier.notify({
                title: lugiaJohtoQuestLine.name,
                message: 'Kimono Girl Miki has given you a package containing 50 Ultra Balls.',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const talktoMiki = new TalkToNPCQuest(Miki, 'Talk to Kimono Girl Miki at the Ecruteak City Dance Theatre.').withCustomReward(kimonoReward);
        lugiaJohtoQuestLine.addQuest(talktoMiki);
        const talktoSayo = new TalkToNPCQuest(Sayo, 'Talk to Kimono Girl Sayo in the Ice Path.');
        lugiaJohtoQuestLine.addQuest(talktoSayo);
        const helpSayo = new DefeatDungeonQuest(1, 0, 'Ice Path').withDescription('Clear the Ice Path to give Sayo a push.');
        lugiaJohtoQuestLine.addQuest(helpSayo);
        const talktoKuni = new TalkToNPCQuest(Kuni, 'Talk to Kimono Girl Kuni in Goldenrod City.');
        lugiaJohtoQuestLine.addQuest(talktoKuni);
        const helpKuni = new DefeatDungeonQuest(1, 0, 'Radio Tower').withDescription('Clear the Radio Tower to get rid of any lingering Team Rocket activity.');
        lugiaJohtoQuestLine.addQuest(helpKuni);
        const talktoKimonoGirlsWhirl = new TalkToNPCQuest(KimonoGirlsWhirl, 'Meet the Kimono Girls at the Whirl Islands.').withCustomReward(() => ItemList.Tidal_Bell_Lugia.gain(1));
        lugiaJohtoQuestLine.addQuest(talktoKimonoGirlsWhirl);
        const LugiaCatch = new CaptureSpecificPokemonQuest('Lugia').withDescription('Catch Lugia in the Whirl Islands.');
        lugiaJohtoQuestLine.addQuest(LugiaCatch);
        App.game.quests.questLines().push(lugiaJohtoQuestLine);
    }
    // Ho-Oh Quest - Available upon clearing Lugia questline
    static createhoohJohtoQuestLine() {
        const hoohJohtoQuestLine = new QuestLine('Rainbow Guardian', 'The Kimono Girls of Ecruteak City wish to speak with you again.', new MultiRequirement([new QuestLineStepCompletedRequirement('Whirl Guardian', 9), new ObtainedPokemonRequirement('Raikou'), new ObtainedPokemonRequirement('Entei'), new ObtainedPokemonRequirement('Suicune')]), GameConstants.BulletinBoards.Johto);
        const talkKimonoGirlsEcruteak = new TalkToNPCQuest(KimonoGirlsEcruteak, 'Meet the Kimono Girls at the Ecruteak Dance Theatre.');
        hoohJohtoQuestLine.addQuest(talkKimonoGirlsEcruteak);
        const clearKimonoGirls = new DefeatTemporaryBattleQuest('Kimono Girls', 'Prove your abilities as a trainer to the Kimono Girls of Ecruteak City.').withCustomReward(() => ItemList.Clear_Bell_Hooh.gain(1));
        hoohJohtoQuestLine.addQuest(clearKimonoGirls);
        const HoohCatch = new CaptureSpecificPokemonQuest('Ho-Oh').withDescription('Catch Ho-Oh in the Tin Tower.');
        hoohJohtoQuestLine.addQuest(HoohCatch);
        App.game.quests.questLines().push(hoohJohtoQuestLine);
    }
    // Available upon completing Bill's Errand
    static createCelebiJohtoQuestLine() {
        const celebiJohtoQuestLine = new QuestLine('Unfinished Business', 'A request from Professor Oak.', new QuestLineCompletedRequirement('Bill\'s Errand'), GameConstants.BulletinBoards.Kanto);
        const talktoProfOak1 = new TalkToNPCQuest(PalletCelebiProfOak1, 'Talk to Professor Oak in Pallet Town.');
        celebiJohtoQuestLine.addQuest(talktoProfOak1);
        const talktoProfIvy = new TalkToNPCQuest(CelebiProfIvy, 'Talk to Professor Ivy in her lab in the Sevii Islands.').withCustomReward(() => ItemList.GS_Ball_Celebi.gain(1));
        celebiJohtoQuestLine.addQuest(talktoProfIvy);
        const talktoProfOak2 = new TalkToNPCQuest(PalletCelebiProfOak2, 'Deliver the GS Ball to Professor Oak in Pallet Town.');
        celebiJohtoQuestLine.addQuest(talktoProfOak2);
        const talktoKurt1 = new TalkToNPCQuest(AzaleaCelebiKurt2, 'Deliver the GS Ball to Kurt in Azalea Town in Johto.');
        celebiJohtoQuestLine.addQuest(talktoKurt1);
        const talktoKurt2 = new TalkToNPCQuest(AzaleaCelebiKurt4, 'Talk to Kurt again after becoming Champion of Johto.');
        celebiJohtoQuestLine.addQuest(talktoKurt2);
        const talktoProfOak3 = new TalkToNPCQuest(AzaleaCelebiOak1, 'Talk to Professor Oak in Azalea Town.');
        celebiJohtoQuestLine.addQuest(talktoProfOak3);
        const talktoIlexForestShrine1 = new TalkToNPCQuest(IlexForestShrine1, 'Investigate the shrine in Ilex Forest.');
        celebiJohtoQuestLine.addQuest(talktoIlexForestShrine1);
        const clearSpikyEaredPichu = new DefeatTemporaryBattleQuest('Spiky-eared Pichu', 'Defeat the strange Pichu.');
        celebiJohtoQuestLine.addQuest(clearSpikyEaredPichu);
        const talktoProfOak4 = new TalkToNPCQuest(AzaleaCelebiOak2, 'Talk to Professor Oak in Azalea Town.');
        celebiJohtoQuestLine.addQuest(talktoProfOak4);
        const talktoTohjoFallsTimeDistortion = new TalkToNPCQuest(TohjoFallsCelebiTimeDistortion, 'Investigate the Time Distortion in Tohjo Falls.');
        celebiJohtoQuestLine.addQuest(talktoTohjoFallsTimeDistortion);
        const clearGiovanni = new DefeatTemporaryBattleQuest('Rocket Boss Giovanni', 'Defeat Giovanni.');
        celebiJohtoQuestLine.addQuest(clearGiovanni);
        const talktoProfOak5 = new TalkToNPCQuest(AzaleaCelebiOak3, 'Talk to Professor Oak in Azalea Town.');
        celebiJohtoQuestLine.addQuest(talktoProfOak5);
        const talktoIlexForestShrine2 = new TalkToNPCQuest(IlexForestShrine2, 'Investigate the shrine in Ilex Forest.');
        celebiJohtoQuestLine.addQuest(talktoIlexForestShrine2);
        const CelebiCatch = new CaptureSpecificPokemonQuest('Celebi').withDescription('Play with the Celebi in Ilex Forest.');
        celebiJohtoQuestLine.addQuest(CelebiCatch);
        const talktoProfOak6 = new TalkToNPCQuest(AzaleaCelebiOak5, 'Talk to Professor Oak in Azalea Town.');
        celebiJohtoQuestLine.addQuest(talktoProfOak6);
        App.game.quests.questLines().push(celebiJohtoQuestLine);
    }
    /* Hoenn QuestLines */
    // Started upon defeating Mauville City's gym.
    static createAquaMagmaHoennQuestLine() {
        const aquaMagmaHoennQuestLine = new QuestLine('Land vs. Water', 'Put a stop to the schemes of Team Aqua and Team Magma!');
        const clearMtChimney = new DefeatDungeonQuest(1, 0, 'Mt. Chimney Crater').withDescription('Stop Team Magma at Mt. Chimney Crater.');
        aquaMagmaHoennQuestLine.addQuest(clearMtChimney);
        const clearWeatherInstitute = new DefeatDungeonQuest(1, 0, 'Weather Institute').withDescription('Stop Team Aqua at the Weather Institute.');
        aquaMagmaHoennQuestLine.addQuest(clearWeatherInstitute);
        const clearMagmaHideout = new DefeatDungeonQuest(1, 0, 'Magma Hideout').withDescription('Raid the Team Magma hideout.');
        aquaMagmaHoennQuestLine.addQuest(clearMagmaHideout);
        const clearAquaHideout = new DefeatDungeonQuest(1, 0, 'Aqua Hideout').withDescription('Raid the Team Aqua hideout.');
        aquaMagmaHoennQuestLine.addQuest(clearAquaHideout);
        const seafloorCavernReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: aquaMagmaHoennQuestLine.name,
                message: 'You found a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearSeafloorCavern = new DefeatDungeonQuest(1, 0, 'Seafloor Cavern').withDescription('Team Aqua\'s leader Archie escaped from their hideout. Find him in the Seafloor Cavern and put a stop to this once and for all!').withCustomReward(seafloorCavernReward);
        aquaMagmaHoennQuestLine.addQuest(clearSeafloorCavern);
        App.game.quests.questLines().push(aquaMagmaHoennQuestLine);
    }
    // Weather Trio - Available upon clearing Aqua/Magma questline
    static createWeatherTrioQuestLine() {
        const weatherTrioQuestLine = new QuestLine('The Weather Trio', 'Put an ancient battle to rest.', new QuestLineCompletedRequirement('Land vs. Water'), GameConstants.BulletinBoards.Hoenn);
        const weatherBattle1 = new TalkToNPCQuest(WeatherBattle1, 'Investigate the commotion in Sootopolis City.');
        weatherTrioQuestLine.addQuest(weatherBattle1);
        const clearCaveOfOrigin = new DefeatDungeonQuest(1, 0, 'Cave of Origin').withDescription('Explore the Cave of Origin to find Wallace.');
        weatherTrioQuestLine.addQuest(clearCaveOfOrigin);
        const talkToWallace1 = new TalkToNPCQuest(Wallace1, 'Talk to Wallace in the Cave of Origin to learn how to stop Kyogre and Groudon from fighting.');
        weatherTrioQuestLine.addQuest(talkToWallace1);
        const clearSkyPillar = new DefeatDungeonQuest(1, 0, 'Sky Pillar').withDescription('Climb the Sky Pillar to find the super-ancient Pokémon Rayquaza.');
        weatherTrioQuestLine.addQuest(clearSkyPillar);
        const weatherBattle2 = new TalkToNPCQuest(WeatherBattle2, 'Return to Sootopolis City to see what Rayquaza will do.');
        weatherTrioQuestLine.addQuest(weatherBattle2);
        const talkToWallace2 = new TalkToNPCQuest(Wallace2, 'Talk to Wallace in the Cave of Origin about the aftermath of the battle.');
        weatherTrioQuestLine.addQuest(talkToWallace2);
        const catchRayquaza = new CaptureSpecificPokemonQuest('Rayquaza');
        const catchKyogre = new CaptureSpecificPokemonQuest('Kyogre');
        const catchGroudon = new CaptureSpecificPokemonQuest('Groudon');
        weatherTrioQuestLine.addQuest(new MultipleQuestsQuest([
            catchRayquaza,
            catchKyogre,
            catchGroudon,
        ], 'Catch the Weather Trio.'));
        App.game.quests.questLines().push(weatherTrioQuestLine);
    }
    // Deoxys - Available post-E4
    static createDeoxysQuestLine() {
        const deoxysQuestLine = new QuestLine('Mystery of Deoxys', 'Discover the mystery of Deoxys.', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion), GameConstants.BulletinBoards.Hoenn);
        // Defeat 50 Pokemon on route 129
        const route129 = new DefeatPokemonsQuest(50, 0, 129, GameConstants.Region.hoenn);
        deoxysQuestLine.addQuest(route129);
        // Defeat 500 Psychic type Pokemon
        const psychicGemReward = () => {
            App.game.gems.gainGems(500, PokemonType.Psychic);
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: 'You have gained 500 Psychic gems!',
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const defeatPsychic = new CustomQuest(500, 0, 'Defeat 500 Psychic-type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Psychic)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        }).withCustomReward(psychicGemReward);
        deoxysQuestLine.addQuest(defeatPsychic);
        // Capture 200 Psychic type Pokemon
        const mindPlateReward = () => {
            ItemList.Mind_plate.gain(20);
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: 'You have gained 20 Mind Plates!',
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const catchPsychic = new CapturePokemonTypesQuest(200, 0, PokemonType.Psychic).withDescription('Capture or hatch 200 Psychic-type Pokémon.').withCustomReward(mindPlateReward);
        deoxysQuestLine.addQuest(catchPsychic);
        // Reach stage 100 in battle frontier
        const reachStage100Reward = () => {
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: 'Quest line completed!\n<i>You have uncovered the Mystery of Deoxys!</i>',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const deoxysMilestone = BattleFrontierMilestones.milestoneRewards.find(m => m.pokemonName === 'Deoxys');
        // Initial value of 0. Should not be required unless the save is corrupt.
        const reachStage100 = new CustomQuest(1, 0, 'Enter the Battle Frontier and defeat stage 100.', () => +deoxysMilestone.obtained()).withInitialValue(0).withCustomReward(reachStage100Reward);
        deoxysQuestLine.addQuest(reachStage100);
        App.game.quests.questLines().push(deoxysQuestLine);
    }
    // Eon Duo - Available post-E4
    static createEonDuoQuestLine() {
        const eonDuoQuestLine = new QuestLine('The Eon Duo', 'Track down the elusive Eon Duo.', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion), GameConstants.BulletinBoards.Hoenn);
        const television1 = new TalkToNPCQuest(Television1, 'Watch a news report in Littleroot Town about a mysterious Pokémon.');
        eonDuoQuestLine.addQuest(television1);
        const television2 = new TalkToNPCQuest(Television2, 'Change channels to watch a different TV station in Littleroot town.');
        eonDuoQuestLine.addQuest(television2);
        const ticketClaim = new TalkToNPCQuest(TicketClaim, 'Go to Hoenn Pokémon League to claim your Eon ticket.');
        eonDuoQuestLine.addQuest(ticketClaim);
        const southernIslandClearing = new TalkToNPCQuest(SouthernIsland1, 'Claim your Eon Ticket in the Start Menu and investigate the Southern Island.');
        eonDuoQuestLine.addQuest(southernIslandClearing);
        const catchLatias = new CaptureSpecificPokemonQuest('Latias', 1, true).withDescription('Catch Latias.');
        const catchLatios = new CaptureSpecificPokemonQuest('Latios', 1, true).withDescription('Catch Latios.');
        eonDuoQuestLine.addQuest(new MultipleQuestsQuest([
            catchLatias,
            catchLatios,
        ], 'Catch the Eon Duo.'));
        App.game.quests.questLines().push(eonDuoQuestLine);
    }
    // Ruby/Sapphire - Available post-E4
    static createRubySapphireSeviiQuestLine() {
        const rubySapphireSeviiQuestLine = new QuestLine('Celio\'s Errand', 'Celio has asked you to help him set up a digital connection between the Sevii Islands and Hoenn.', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion), GameConstants.BulletinBoards.Hoenn);
        const talktoCelio3 = new TalkToNPCQuest(OneIslandCelio4, 'Speak with Celio on One Island in Sevii.');
        rubySapphireSeviiQuestLine.addQuest(talktoCelio3);
        const talktoRocketGrunts = new TalkToNPCQuest(SeviiRocketGrunts, 'Eavesdrop on the Team Rocket Grunts at Mt. Ember.');
        rubySapphireSeviiQuestLine.addQuest(talktoRocketGrunts);
        const clearSeviiRocketGrunts1 = new CustomQuest(2, 0, 'Two Team Rocket Grunts are blocking the entrance to Ruby Path. Defeat them.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sevii Rocket Grunt 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sevii Rocket Grunt 2')]());
        rubySapphireSeviiQuestLine.addQuest(clearSeviiRocketGrunts1);
        const clearRubyPath = new DefeatDungeonQuest(1, 0, 'Ruby Path').withDescription('Locate the Ruby. Clear Ruby Path in Mt. Ember.');
        rubySapphireSeviiQuestLine.addQuest(clearRubyPath);
        const talktoRuby = new TalkToNPCQuest(SeviiRuby, 'Take the Ruby in Ruby Path').withCustomReward(() => ItemList.Celios_Errand_Ruby.gain(1));
        rubySapphireSeviiQuestLine.addQuest(talktoRuby);
        const talktoCelio4 = new TalkToNPCQuest(OneIslandCelio5, 'Return the Ruby to Celio on One Island');
        rubySapphireSeviiQuestLine.addQuest(talktoCelio4);
        const clearIcefallCave = new DefeatDungeonQuest(1, 0, 'Icefall Cave').withDescription('Help Lorelei with Team Rocket Grunts by clearing Icefall Cave on Four Island.');
        rubySapphireSeviiQuestLine.addQuest(clearIcefallCave);
        const talktoLorelei = new TalkToNPCQuest(SeviiLorelei, 'Talk to Lorelei in Icefall Cave');
        rubySapphireSeviiQuestLine.addQuest(talktoLorelei);
        const talktoGideon = new TalkToNPCQuest(SeviiGideon2, 'Talk to Gideon in Dotted Hole');
        rubySapphireSeviiQuestLine.addQuest(talktoGideon);
        const clearSeviiRocketGrunts2 = new CustomQuest(3, 0, 'Defeat the Three Team Rocket Grunts in Rocket Warehouse.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sevii Rocket Grunt 3')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sevii Rocket Grunt 4')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sevii Rocket Grunt 5')]());
        rubySapphireSeviiQuestLine.addQuest(clearSeviiRocketGrunts2);
        const clearSeviiAriana = new DefeatTemporaryBattleQuest('Sevii Rocket Ariana', 'Defeat Team Rocket Executive Ariana in Rocket Warehouse.');
        rubySapphireSeviiQuestLine.addQuest(clearSeviiAriana);
        const clearSeviiArcher = new DefeatTemporaryBattleQuest('Sevii Rocket Archer', 'Defeat Team Rocket Executive Archer in Rocket Warehouse.');
        rubySapphireSeviiQuestLine.addQuest(clearSeviiArcher);
        const clearSeviiGideon = new DefeatTemporaryBattleQuest('Scientist Gideon', 'Defeat Scientist Gideon to reclaim the Sapphire.').withCustomReward(() => ItemList.Celios_Errand_Sapphire.gain(1));
        rubySapphireSeviiQuestLine.addQuest(clearSeviiGideon);
        const talktoCelio5 = new TalkToNPCQuest(OneIslandCelio6, 'Return the Sapphire to Celio on One Island');
        rubySapphireSeviiQuestLine.addQuest(talktoCelio5);
        App.game.quests.questLines().push(rubySapphireSeviiQuestLine);
    }
    // Rocket Pinkan - Available post-Orange
    static createPinkanThemeparkQuestLine() {
        const pinkanThemeparkQuestLine = new QuestLine('Team Rocket\'s Pinkan Theme Park', 'Help Team Rocket build a theme park on Pinkan Island?', new GymBadgeRequirement(BadgeEnums.Elite_OrangeChampion), GameConstants.BulletinBoards.Sevii4567);
        const talktoTeamRocket = new TalkToNPCQuest(ThemeparkTeamRocket1, 'Talk to Team Rocket on Pinkan Island to hear about their plans.');
        pinkanThemeparkQuestLine.addQuest(talktoTeamRocket);
        const farmPinkan = new HarvestBerriesQuest(1, 0, BerryType.Pinkan).withDescription('Mutate and harvest 1 Pinkan Berry at the farm.');
        pinkanThemeparkQuestLine.addQuest(farmPinkan);
        const defeatPinkans = new MultipleQuestsQuest([
            new DefeatPokemonsQuest(500, 0, 41, GameConstants.Region.kanto),
            new DefeatPokemonsQuest(500, 0, 42, GameConstants.Region.kanto),
        ], 'Help Team Rocket recruit some Pinkan Pokémon').withCustomReward(() => App.game.farming.gainBerry(BerryType.Pinkan, 20));
        pinkanThemeparkQuestLine.addQuest(defeatPinkans);
        const collectPinkanMaterials = new MultipleQuestsQuest([
            new GainGemsQuest(1000, 0, PokemonType.Fairy),
            new CustomQuest(10, 0, 'Gain 10 Pixie Plates', () => player.itemList.Pixie_plate()),
        ], 'Collect Fairy Gems and Pixie Plates');
        pinkanThemeparkQuestLine.addQuest(collectPinkanMaterials);
        const talktoTeamRocket2 = new TalkToNPCQuest(ThemeparkTeamRocket4, 'Talk to Team Rocket on Pinkan Island to open the theme park!');
        pinkanThemeparkQuestLine.addQuest(talktoTeamRocket2);
        const clearPinkanTeamRocket = new DefeatTemporaryBattleQuest('Pinkan Jessie & James', 'Defeat Team Rocket Jessie & James on Pinkan Island.');
        pinkanThemeparkQuestLine.addQuest(clearPinkanTeamRocket);
        const clearPinkanOfficerJenny = new DefeatTemporaryBattleQuest('Pinkan Officer Jenny', 'Oh no! Officer Jenny has showed up. She\'s not happy! No time to plead your case, it\'s time to battle!');
        pinkanThemeparkQuestLine.addQuest(clearPinkanOfficerJenny);
        App.game.quests.questLines().push(pinkanThemeparkQuestLine);
    }
    // Regi Trio Quest - Available upon clearing Mossdeep City's Gym
    static createRegiTrioQuestLine() {
        const regiTrioQuestLine = new QuestLine('The Three Golems', 'Discover the secrets of the Sealed Chamber.', new GymBadgeRequirement(BadgeEnums.Mind), GameConstants.BulletinBoards.Hoenn);
        const clearSealedChamber = new DefeatDungeonQuest(1, 0, 'Sealed Chamber').withDescription('Enter the Sealed Chamber to find clues.');
        regiTrioQuestLine.addQuest(clearSealedChamber);
        const readEntranceSign = new TalkToNPCQuest(SCEntrance, 'Investigate the strange markings in the Sealed Chamber.');
        regiTrioQuestLine.addQuest(readEntranceSign);
        const mazeStep1 = new TalkToNPCQuest(SCMazeLeft, 'Navigate the maze inside the Sealed Chamber.');
        regiTrioQuestLine.addQuest(mazeStep1);
        const mazeStep2 = new TalkToNPCQuest(SCMazeLeft, 'Navigate the maze inside the Sealed Chamber.');
        regiTrioQuestLine.addQuest(mazeStep2);
        const mazeStep3 = new TalkToNPCQuest(SCMazeStraight, 'Navigate the maze inside the Sealed Chamber.');
        regiTrioQuestLine.addQuest(mazeStep3);
        const mazeStep4 = new TalkToNPCQuest(SCMazeStraight, 'Navigate the maze inside the Sealed Chamber.');
        regiTrioQuestLine.addQuest(mazeStep4);
        const mazeStep5 = new TalkToNPCQuest(SCMazeRight, 'Navigate the maze inside the Sealed Chamber.');
        regiTrioQuestLine.addQuest(mazeStep5);
        const readSCHints = new TalkToNPCQuest(SCHints, 'Investigate the hidden message at the end of the Sealed Chamber maze.');
        regiTrioQuestLine.addQuest(readSCHints);
        const regiHint1 = new DefeatPokemonsQuest(100, 0, 111, GameConstants.Region.hoenn, 'Release Regirock');
        const regiHint2 = new DefeatPokemonsQuest(100, 0, 105, GameConstants.Region.hoenn, 'Release Regice');
        const regiHint3 = new DefeatPokemonsQuest(100, 0, 120, GameConstants.Region.hoenn, 'Release Registeel');
        regiTrioQuestLine.addQuest(new MultipleQuestsQuest([
            regiHint1,
            regiHint2,
            regiHint3,
        ], 'Explore Hoenn by defeating Pokémon on the hinted routes to release the Regi Trio.'));
        const catchRegirock = new CaptureSpecificPokemonQuest('Regirock');
        const catchRegice = new CaptureSpecificPokemonQuest('Regice');
        const catchRegisteel = new CaptureSpecificPokemonQuest('Registeel');
        regiTrioQuestLine.addQuest(new MultipleQuestsQuest([
            catchRegirock,
            catchRegice,
            catchRegisteel,
        ], 'Catch the Regi Trio.'));
        App.game.quests.questLines().push(regiTrioQuestLine);
    }
    // Jirachi Quest - Available post-E4
    static createJirachiQuestLine() {
        const jirachiQuestLine = new QuestLine('Wish Maker', 'Harness the power of the Millennium Comet and make a wish!', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion), GameConstants.BulletinBoards.Hoenn);
        const millenniumFest = new TalkToNPCQuest(MillenniumFest, 'Attend the opening ceremony of the Millennium Festival near Lavaridge Town.');
        jirachiQuestLine.addQuest(millenniumFest);
        const clownRocket = new DefeatTemporaryBattleQuest('Clown Jessie & James', 'Defeat Team Rocket Jessie & James at the Millennium Festival near Lavaridge Town.');
        jirachiQuestLine.addQuest(clownRocket);
        const talkToButler1 = new TalkToNPCQuest(Butler1, 'Learn the legend of the Millennium Comet from Butler near Lavaridge Town.');
        jirachiQuestLine.addQuest(talkToButler1);
        const clearMtChimney2 = new DefeatDungeonQuest(1, 0, 'Mt. Chimney Crater').withDescription('Climb to the Mt. Chimney Crater to get a better view of the Millennium Comet as it passes.').withCustomReward(() => ItemList.Crystalline_Cocoon_Jirachi.gain(1));
        jirachiQuestLine.addQuest(clearMtChimney2);
        const catchAbsol = new CaptureSpecificPokemonQuest('Absol', 1, true).withDescription('You are being stalked by Absol, the Disaster Pokémon. Capture it or hatch your own to befriend it.');
        jirachiQuestLine.addQuest(catchAbsol);
        const cocoonHatch = new TalkToNPCQuest(CocoonHatch, 'Examine the crystalline cocoon Butler gave you while at the Mt. Chimney Crater.');
        jirachiQuestLine.addQuest(cocoonHatch);
        const fightButler1 = new DefeatTemporaryBattleQuest('Butler 1', 'Butler has followed you to the Mt. Chimney Crater and is trying to kidnap Jirachi!');
        jirachiQuestLine.addQuest(fightButler1);
        const fightButler2 = new DefeatTemporaryBattleQuest('Butler 2', 'Butler has escaped through the Jagged Pass and hooked Jirachi up to some sort of machine. Fight him to free Jirachi.');
        jirachiQuestLine.addQuest(fightButler2);
        const fightMetaGroudon1 = new DefeatTemporaryBattleQuest('Meta Groudon', 'Butler\'s attempts to resurrect Groudon have gone terribly wrong! Fight the resulting abomination!');
        jirachiQuestLine.addQuest(fightMetaGroudon1);
        const catchJirachi = new CaptureSpecificPokemonQuest('Jirachi', 1, true).withDescription('Jirachi has escaped in the chaos and is roaming Hoenn. Catch Jirachi.');
        jirachiQuestLine.addQuest(catchJirachi);
        App.game.quests.questLines().push(jirachiQuestLine);
    }
    // Meta Groudon Quest - Available post-Jirachi, must have obtained Groudon
    static createMetaGroudonQuestLine() {
        const metaGroudonQuestLine = new QuestLine('A Meta Discovery', 'Help Butler\'s wish come true, responsibly.', new MultiRequirement([new ObtainedPokemonRequirement('Groudon'), new QuestLineCompletedRequirement('Wish Maker')]), GameConstants.BulletinBoards.Hoenn);
        const talkToButler2 = new TalkToNPCQuest(Butler2, 'Talk to Butler in the Jagged Pass to learn about his new plan.');
        metaGroudonQuestLine.addQuest(talkToButler2);
        const butlerMaterials1 = new CaptureSpecificPokemonQuest('Electrode', 100, true).withDescription('Catch or hatch 100 Electrode');
        const butlerMaterials2 = new MineLayersQuest(25, 0);
        const butlerMaterials3 = new CatchShiniesQuest(3, 0);
        metaGroudonQuestLine.addQuest(new MultipleQuestsQuest([
            butlerMaterials1,
            butlerMaterials2,
            butlerMaterials3,
        ], 'Gather the materials Butler needs to rebuild his resurrection machine.'));
        const calibrateMachine = new CaptureSpecificPokemonQuest('Groudon', 5, true).withDescription('Calibrate the machine by catching or hatching 5 Groudon');
        metaGroudonQuestLine.addQuest(calibrateMachine);
        const talkToButler3 = new TalkToNPCQuest(Butler3, 'Deliver the materials to Butler in Mt. Chimney Crater and start the resurrection machine.');
        metaGroudonQuestLine.addQuest(talkToButler3);
        const catchMetaGroudon = new CaptureSpecificPokemonQuest('Meta Groudon').withDescription('Butler has revived Meta Groudon at Mt. Chimney Crater. Catch Meta Groudon.');
        metaGroudonQuestLine.addQuest(catchMetaGroudon);
        App.game.quests.questLines().push(metaGroudonQuestLine);
    }
    // Orre Questlines - Available post-Hoenn-E4
    static createOrreColosseumQuestLine() {
        const orreColosseumQuestLine = new QuestLine('Shadows in the Desert', 'Explore Orre and uncover the origin of Shadow Pokémon.', new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion), GameConstants.BulletinBoards.Hoenn);
        const exploreStand = new TalkToNPCQuest(ExploreStand, 'Travel to Orre and explore the Outskirt Stand.');
        orreColosseumQuestLine.addQuest(exploreStand);
        const fightWillie = new DefeatTemporaryBattleQuest('Willie', 'Fight Willie');
        orreColosseumQuestLine.addQuest(fightWillie);
        const fightFolly = new DefeatTemporaryBattleQuest('Folly', 'Fight Folly the Shady Guy in Phenac City');
        orreColosseumQuestLine.addQuest(fightFolly);
        const talkToSackReward = () => {
            $('#npc-modal').one('hidden.bs.modal', () => {
                Information.show({
                    steps: [
                        {
                            element: document.getElementById('pokeballSelector'),
                            intro: 'You can now start catching Shadow Pokémon!<br/><br/>A "New Shadow" filter has been added to your list, be sure to select a Poké Ball and move it to the desired position!',
                        },
                    ],
                    highlightClass: 'bg-secondary',
                    overlayOpacity: 1,
                    positionPrecedence: ['right', 'bottom'],
                });
            });
        };
        const checkSack = new TalkToNPCQuest(Sack, 'Check what is in the mysterious sack.').withCustomReward(talkToSackReward); // Step 3
        orreColosseumQuestLine.addQuest(checkSack);
        const defeatShadowsPhenac = new CustomQuest(10, 0, 'Defeat 10 trainers who are using Shadow Pokémon in Phenac City.', () => App.game.statistics.totalShadowPokemonDefeated());
        orreColosseumQuestLine.addQuest(defeatShadowsPhenac);
        const talkToEsCade1 = new TalkToNPCQuest(EsCade1, 'Talk to the Mayor of Phenac City about the criminals you have been fighting.');
        orreColosseumQuestLine.addQuest(talkToEsCade1);
        const talkToRui1 = new TalkToNPCQuest(Rui1, 'Meet up with Rui again in Phenac City.'); // Step 6
        orreColosseumQuestLine.addQuest(talkToRui1);
        const fightPyriteTown = new DefeatDungeonQuest(5, 0, 'Pyrite Town Battles').withDescription('Fight trainers in Pyrite Town to flush out the criminals.');
        orreColosseumQuestLine.addQuest(fightPyriteTown);
        const talkToDuking1 = new TalkToNPCQuest(Duking1, 'Talk to the distraught bodybuilder Duking in Pyrite Town.');
        orreColosseumQuestLine.addQuest(talkToDuking1);
        const fightPyriteColosseum = new DefeatDungeonQuest(5, 0, 'Pyrite Colosseum').withDescription('Fight trainers in Pyrite Colosseum to flush out the criminals.'); // Step 9
        orreColosseumQuestLine.addQuest(fightPyriteColosseum);
        const fightPyriteBuilding = new DefeatDungeonQuest(5, 0, 'Pyrite Building').withDescription('No sign of Shadow Pokémon so far. Fight trainers at the Pyrite Building to flush out the criminals.');
        orreColosseumQuestLine.addQuest(fightPyriteBuilding);
        const talkToDoken1 = new TalkToNPCQuest(Doken1, 'Interrogate Hunter Doken in the Pyrite Building to find out who has taken Plusle, and where to.');
        orreColosseumQuestLine.addQuest(talkToDoken1);
        const clearPyriteCave = new DefeatDungeonQuest(1, 0, 'Pyrite Cave').withDescription('Find Miror B. and rescue Duking\'s Plusle in Pyrite Cave!')
            .withOptionalArgs({
            clearedMessage: 'How, how, how dare you! Don\'t you dare think you\'ll get away with your latest outrage! One of these days, I will take great pleasure in kicking you about with my elegant dance steps! Oh, and I\'m not giving up our Shadow Pokémon plan!',
            npcDisplayName: 'Miror B.',
            npcImageName: 'Cipher Admin Miror B',
        });
        orreColosseumQuestLine.addQuest(clearPyriteCave);
        const freePlusle = new TalkToNPCQuest(FreePlusle, 'Free Duking\'s Plusle.'); //Step 13
        orreColosseumQuestLine.addQuest(freePlusle);
        const talkToRui2 = new TalkToNPCQuest(Rui2, 'Discuss your next move with Rui at Pyrite Colosseum.');
        orreColosseumQuestLine.addQuest(talkToRui2);
        const clearAgatePeons = new CustomQuest(3, 0, 'Defeat the Team Cipher Peons looting Agate Village.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Cipher Peon Doven')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Cipher Peon Silton')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Cipher Peon Kass')]());
        orreColosseumQuestLine.addQuest(clearAgatePeons);
        const fightRelicCave = new DefeatDungeonQuest(1, 0, 'Relic Cave').withDescription('Rui is worried her grandpa is in trouble. Search for him by clearing Relic Cave.');
        orreColosseumQuestLine.addQuest(fightRelicCave);
        const talkToGrandpaEagun = new TalkToNPCQuest(GrandpaEagun1, 'Find out more about Relic Cave from Grandpa Eagun.'); // Step 17
        orreColosseumQuestLine.addQuest(talkToGrandpaEagun);
        const fightMtBattle = new DefeatDungeonQuest(1, 0, 'Mt. Battle').withDescription('There\'s rumors of more Team Cipher activity at Mt. Battle. Go investigate!')
            .withOptionalArgs({
            clearedMessage: 'This isn\'t over yet. Stronger Pokémon are being made even now. You\'d better get serious about training your Pokémon for our next meeting. Daahahah!',
            npcDisplayName: 'Dakim',
            npcImageName: 'Cipher Admin Dakim',
        });
        orreColosseumQuestLine.addQuest(fightMtBattle);
        const talkToRui3 = new TalkToNPCQuest(Rui3, 'Discuss your next move with Rui at Mt. Battle.');
        orreColosseumQuestLine.addQuest(talkToRui3);
        const fightTheUnder = new DefeatDungeonQuest(1, 0, 'The Under').withDescription('Track down the TV broadcast coming from The Under in Pyrite Town. Clear The Under.')
            .withOptionalArgs({
            clearedMessage: 'Aiyeeeeh! How dare you! How could I get bested by a mere child? Remember this! I\'ll get you back for this!',
            npcDisplayName: 'Venus',
            npcImageName: 'Cipher Admin Venus',
        });
        orreColosseumQuestLine.addQuest(fightTheUnder);
        const searchTheStudio = new TalkToNPCQuest(SearchTheStudio, 'Search Venus\' Studio in the Under for clues.'); // Step 21
        orreColosseumQuestLine.addQuest(searchTheStudio);
        const fightCipherLab = new DefeatDungeonQuest(1, 0, 'Cipher Lab').withDescription('Follow the secret tunnel to the Cipher Lab and clear out the enemies.')
            .withOptionalArgs({
            clearedMessage: 'Humph! Your struggle to get here was all in vain! The Shadow Pokémon we produced have already been moved elsewhere. And that, of course, includes the ultimate Shadow Pokémon I created for the boss! Wahahahah!',
            npcDisplayName: 'Ein',
            npcImageName: 'Cipher Admin Ein',
        });
        orreColosseumQuestLine.addQuest(fightCipherLab);
        const fightRealgamTower = new DefeatDungeonQuest(5, 0, 'Realgam Tower Battles').withDescription('Team Cipher has taken over Realgam Tower! Fight to kick them out!');
        orreColosseumQuestLine.addQuest(fightRealgamTower);
        const talkToEsCade2 = new TalkToNPCQuest(EsCade2, 'From the top of Realgam Tower, you see Mayor Es Cade. Go ask him for help.'); //Step 24
        orreColosseumQuestLine.addQuest(talkToEsCade2);
        const fightRealgamColosseum = new DefeatDungeonQuest(10, 0, 'Realgam Colosseum').withDescription('Team Cipher\'s leaders have holed up in the Realgam Colosseum. Fight them to end this once and for all!');
        orreColosseumQuestLine.addQuest(fightRealgamColosseum);
        const watchEviceEscape = new TalkToNPCQuest(EviceEscape, 'Just when you have him cornered, Evice calls in a helicopter. Watch him escape the Realgam Colosseum.'); // Step 26
        orreColosseumQuestLine.addQuest(watchEviceEscape);
        App.game.quests.questLines().push(orreColosseumQuestLine);
    }
    /* Sinnoh QuestLines */
    // Started upon defeating Oreburgh City's gym.
    static createGalacticSinnohQuestLine() {
        const galacticSinnohQuestLine = new QuestLine('A New World', 'End Team Galactic\'s plan to destroy the world and create a new one in its place.');
        const clearValleyWindworks = new DefeatDungeonQuest(1, 0, 'Valley Windworks').withDescription('Team Galactic is stealing energy. Clear Valley Windworks.');
        galacticSinnohQuestLine.addQuest(clearValleyWindworks);
        const clearTeamGalacticEternaBuilding = new DefeatDungeonQuest(1, 0, 'Team Galactic Eterna Building').withDescription('Team Galactic is kidnapping Pokémon now. Clear Team Galactic Eterna Building in Eterna City.');
        galacticSinnohQuestLine.addQuest(clearTeamGalacticEternaBuilding);
        const clearPastoriaCityGym = new DefeatGymQuest(1, 0, 'Pastoria City').withDescription('All is quiet. Team Galactic isn\'t doing anything. Maybe they learned their lesson. Just keep traveling, I guess. Clear the Pastoria City Gym.');
        galacticSinnohQuestLine.addQuest(clearPastoriaCityGym);
        const clearCyrus1TemporaryBattle = new DefeatTemporaryBattleQuest('Galactic Boss Cyrus', 'The boss of Team Galactic has been spotted in Celestic Town!');
        galacticSinnohQuestLine.addQuest(clearCyrus1TemporaryBattle);
        const clearCanalaveCityGym = new DefeatGymQuest(1, 0, 'Canalave City').withDescription('Cyrus is gone. Nothing to do but proceed. Adventure awaits! Clear the Canalave City Gym.');
        galacticSinnohQuestLine.addQuest(clearCanalaveCityGym);
        const clearLakeValor = new DefeatDungeonQuest(1, 0, 'Lake Valor').withDescription('A commotion was heard at Lake Valor. You must protect the lake\'s guardian! Clear Lake Valor.');
        galacticSinnohQuestLine.addQuest(clearLakeValor);
        const clearLakeVerity = new DefeatDungeonQuest(1, 0, 'Lake Verity').withDescription('Lake Valor\'s guardian was taken. Better try again at the next lake. Clear Lake Verity.');
        galacticSinnohQuestLine.addQuest(clearLakeVerity);
        const clearLakeAcuity = new DefeatDungeonQuest(1, 0, 'Lake Acuity').withDescription('Lake Verity\'s guardian was also taken. Only one lake remains. Clear Lake Acuity.');
        galacticSinnohQuestLine.addQuest(clearLakeAcuity);
        const clearTeamGalacticHQ = new DefeatDungeonQuest(1, 0, 'Team Galactic HQ').withDescription('You failed to protect any of the lake guardians. They have been taken to Veilstone City. So that\'s what that strange building was... Clear Team Galactic HQ in Veilstone City.');
        galacticSinnohQuestLine.addQuest(clearTeamGalacticHQ);
        const clearSpearPillar = new DefeatDungeonQuest(1, 0, 'Spear Pillar').withDescription('The lake guardians have been rescued, but Cyrus has used them to forge the Red Chain. He is taking it to the top of Mount Coronet. Follow him! Clear Spear Pillar.');
        galacticSinnohQuestLine.addQuest(clearSpearPillar);
        const DistortionWorldReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            MapHelper.moveToTown('Mt. Coronet');
            Notifier.notify({
                title: galacticSinnohQuestLine.name,
                message: 'You found a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearDistortionWorld = new DefeatDungeonQuest(1, 0, 'Distortion World')
            .withDescription('Cyrus planned to use the Red Chain to enslave Dialga and Palkia, but he accidentally angered Giratina and has been taken to its realm. A portal has appeared on top of Mount Coronet. Use it to follow Cyrus and end his threat once and for all. Clear Distortion World.')
            .withCustomReward(DistortionWorldReward);
        galacticSinnohQuestLine.addQuest(clearDistortionWorld);
        App.game.quests.questLines().push(galacticSinnohQuestLine);
    }
    // Manaphy Quest - Available upon defeating Eterna City's Gym
    static createManaphyQuestLine() {
        const manaphyQuestLine = new QuestLine('Recover the Precious Egg!', 'A rare egg is at the Sandgem Lab! Surely it should be easy to hatch one little egg, right?', new GymBadgeRequirement(BadgeEnums.Forest), GameConstants.BulletinBoards.Sinnoh);
        const talkHastings1 = new TalkToNPCQuest(ManaphyHastings1, 'Speak to Professor Hastings in Sandgem Town.');
        manaphyQuestLine.addQuest(talkHastings1);
        const investigateBoulders = new TalkToNPCQuest(ManaphyBoulders, 'Search for clues in Eterna Forest.');
        manaphyQuestLine.addQuest(investigateBoulders);
        const catchPolitoedSubstitutes = new CapturePokemonTypesQuest(50, 0, PokemonType.Water).withDescription('Catch or hatch 50 Water-type Pokémon, and see if those boulders are really just boulders.');
        manaphyQuestLine.addQuest(catchPolitoedSubstitutes);
        const clearManaphyGoRock1 = new DefeatTemporaryBattleQuest('Manaphy Go-Rock MGrunt 1', 'Time to give those mysterious boulders the soaking of their life! Return to the Eterna Forest, and prepare for a battle.');
        manaphyQuestLine.addQuest(clearManaphyGoRock1);
        const talkGoRockCommander1 = new TalkToNPCQuest(ManaphyGoRockCommander, 'Speak to the Go-Rock Commander in the Eterna Forest.');
        manaphyQuestLine.addQuest(talkGoRockCommander1);
        const clearManaphyGoRock2 = new DefeatTemporaryBattleQuest('Manaphy Go-Rock FGrunt 1', 'Chase the fleeing Go-Rock Squad through the Eterna Forest!');
        manaphyQuestLine.addQuest(clearManaphyGoRock2);
        const clearManaphyGoRock3 = new CustomQuest(3, 0, 'Keep chasing the Go-Rock Squad through the Eterna Forest, but... didn\'t they already pass that tree?', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Manaphy Go-Rock MGrunt 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Manaphy Go-Rock MGrunt 3')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Manaphy Go-Rock FGrunt 2')]());
        manaphyQuestLine.addQuest(clearManaphyGoRock3);
        const talkGoRockGrunt1 = new TalkToNPCQuest(ManaphyGoRock, 'The Go-Rock Squad are definitely going in circles, but they\'re too dumb to realise it. Interrogate one on their method of navigating the Eterna Forest!');
        manaphyQuestLine.addQuest(talkGoRockGrunt1);
        const defeatParasect = new DefeatDungeonBossQuest('Eterna Forest', 'Parasect').withDescription('They\'re using Parasect to navigate the Eterna Forest. Clear out a Parasect and they should get trapped!');
        manaphyQuestLine.addQuest(defeatParasect);
        const clearManaphyGoRock4 = new DefeatTemporaryBattleQuest('Manaphy Go-Rock MGrunt 4', 'Now you\'ve muddied the path, continue the Eterna Forest chase!');
        manaphyQuestLine.addQuest(clearManaphyGoRock4);
        const clearManaphyCommander1 = new DefeatTemporaryBattleQuest('Manaphy Go-Rock Commander', 'You\'ve cornered the Go-Rock Commander outside the Old Chateau! Time to finish this.');
        manaphyQuestLine.addQuest(clearManaphyCommander1);
        const talkHastings2 = new TalkToNPCQuest(ManaphyHastings2, 'Return the egg to Professor Hastings in Sandgem Town. ');
        manaphyQuestLine.addQuest(talkHastings2);
        const talkHastings3 = new TalkToNPCQuest(ManaphyHastings3, 'Professor Hastings has headed off to Canalave to do more research on Manaphy. Check in on him when you can!');
        manaphyQuestLine.addQuest(talkHastings3);
        const happinyChase1 = new TalkToNPCQuest(HappinyWitness1, 'A little girl\'s Happiny stole the egg! Search for witnesses east of Canalave!');
        manaphyQuestLine.addQuest(happinyChase1);
        const happinyChase2 = new TalkToNPCQuest(HappinyWitness2, 'The Happiny headed north out of Jubilife! Ask for witnesses in the next town.');
        manaphyQuestLine.addQuest(happinyChase2);
        const happinyChase3 = new TalkToNPCQuest(HappinyWitness3, 'The Happiny went north, through the Eterna Forest. Ask if anyone\'s seen it in Eterna City.');
        manaphyQuestLine.addQuest(happinyChase3);
        const happinyChase4 = new TalkToNPCQuest(HappinyWitness4, 'Search for someone who\'s seen the Happiny Egg-napper! It was last seen heading east across Route 211.');
        manaphyQuestLine.addQuest(happinyChase4);
        const happinyChase5 = new TalkToNPCQuest(HappinyWitness5, 'Keep asking around and following the Happiny Egg-thief! It was heading south, towards Solaceon Town.');
        manaphyQuestLine.addQuest(happinyChase5);
        const happinyChase6 = new TalkToNPCQuest(HappinyWitness6, 'Hopefully you can finally catch up to this Happiny at Hearthome City. Ask around for any witnesses.');
        manaphyQuestLine.addQuest(happinyChase6);
        const happinyChase7 = new TalkToNPCQuest(HappinyWitness7, 'The Happiny went through Mt. Coronet again? This time it went west through the Southern path. Ask around for witnesses on the other side.');
        manaphyQuestLine.addQuest(happinyChase7);
        const happinyChase8 = new TalkToNPCQuest(HappinyWitness8, 'The Happiny fled from Oreburgh and headed west, through the Oreburgh Gate. Search for another witness on the far side.');
        manaphyQuestLine.addQuest(happinyChase8);
        const happinyChase9 = new TalkToNPCQuest(HappinyWitness9, 'Search for evidence of the Happiny\'s path after turning south from Jubilife City.');
        manaphyQuestLine.addQuest(happinyChase9);
        const clearManaphyGoRock5 = new DefeatTemporaryBattleQuest('Manaphy Go-Rock Pincher', 'An ex-Go-Rock in Sandgem Town has turned to Pokémon Pinching, and wants to steal the egg first. But after all you\'ve been through to get it, he\'s in for a rude awakening');
        manaphyQuestLine.addQuest(clearManaphyGoRock5);
        const happinyChase10 = new TalkToNPCQuest(HappinyBoulders, 'After leaving Sandgem, the Happiny went south-east, across the water. There\'s only one place it could be now...');
        manaphyQuestLine.addQuest(happinyChase10);
        const catchBunearySubstitutes = new CapturePokemonTypesQuest(50, 0, PokemonType.Fighting).withDescription('Oh no, you\'re not gonna let more boulders stop you now. Catch or hatch 50 Fighting-types and smash right through them.');
        manaphyQuestLine.addQuest(catchBunearySubstitutes);
        const clearManaphyHappiny = new DefeatTemporaryBattleQuest('Manaphy Egg Protectors', 'Time to head back to Pal Park and teach this little pink snot not to steal important eggs!');
        manaphyQuestLine.addQuest(clearManaphyHappiny);
        const talkHastings4 = new TalkToNPCQuest(ManaphyHastings4, 'The egg hatched after your battle with the egg-nappers! Bring Manaphy back to Hastings in Canalave City, and close off this mission for good.');
        manaphyQuestLine.addQuest(talkHastings4);
        App.game.quests.questLines().push(manaphyQuestLine);
    }
    // Giratina quest - Available post-E4, must have obtained Azelf, Mesprit, and Uxie
    static createGiratinaQuestLine() {
        const giratinaQuestLine = new QuestLine('Zero\'s Ambition', 'Help Zero find an entrance to the Distortion World.', new MultiRequirement([new ObtainedPokemonRequirement('Uxie'), new ObtainedPokemonRequirement('Mesprit'), new ObtainedPokemonRequirement('Azelf'), new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]), GameConstants.BulletinBoards.Sinnoh);
        const talktoZero1 = new TalkToNPCQuest(FightAreaZero1, 'Talk to Zero in the Fight Area.');
        giratinaQuestLine.addQuest(talktoZero1);
        const readSinnohMyth = new TalkToNPCQuest(CanalaveSinnohMyth, 'Read the recently discovered book in Canalave City.');
        giratinaQuestLine.addQuest(readSinnohMyth);
        const talktoZero2 = new TalkToNPCQuest(FightAreaZero2, 'Report to Zero what was in the book.');
        giratinaQuestLine.addQuest(talktoZero2);
        const talktoMesprit = new TalkToNPCQuest(VerityMesprit, 'At Lake Verity, ask Mesprit about the Distortion World.');
        giratinaQuestLine.addQuest(talktoMesprit);
        const obtain10PurpleShards = new CustomQuest(10, 0, 'Obtain 10 Purple Shards.', () => player.itemList.Purple_shard());
        giratinaQuestLine.addQuest(obtain10PurpleShards);
        const talktoAzelf = new TalkToNPCQuest(ValorAzelf, 'At Lake Valor, ask Azelf about the Distortion World.');
        giratinaQuestLine.addQuest(talktoAzelf);
        const obtain10OchreShards = new CustomQuest(10, 0, 'Obtain 10 Ochre Shards.', () => player.itemList.Ochre_shard());
        giratinaQuestLine.addQuest(obtain10OchreShards);
        const talktoUxie = new TalkToNPCQuest(AcuityUxie, 'At Lake Acuity, ask Uxie about the Distortion World.');
        giratinaQuestLine.addQuest(talktoUxie);
        const obtain10CrimsonShards = new CustomQuest(10, 0, 'Obtain 10 Crimson Shards.', () => player.itemList.Crimson_shard());
        giratinaQuestLine.addQuest(obtain10CrimsonShards);
        const clearSendoffSpring = new DefeatDungeonQuest(1, 0, 'Sendoff Spring').withDescription('Clear Sendoff Spring to meet the Lake Trio.');
        giratinaQuestLine.addQuest(clearSendoffSpring);
        const talktoLakeTrio = new TalkToNPCQuest(SendoffSpringLakeTrio, 'Talk to the Lake Trio in Sendoff Spring.');
        giratinaQuestLine.addQuest(talktoLakeTrio);
        const chargeDistortionKey = new MultipleQuestsQuest([
            new GainGemsQuest(500, 0, PokemonType.Ghost),
            new CustomQuest(1, 0, 'Gain 1 Spooky Plate.', () => player.itemList.Spooky_plate()),
        ], 'Charge the key to the Distortion World.');
        giratinaQuestLine.addQuest(chargeDistortionKey);
        const talktoZero3 = new TalkToNPCQuest(SendoffSpringZero1, 'Talk to Zero in Sendoff Spring.');
        giratinaQuestLine.addQuest(talktoZero3);
        const clearZero = new DefeatTemporaryBattleQuest('Zero', 'Defeat Zero to protect the key.');
        giratinaQuestLine.addQuest(clearZero);
        const catchGiratina = new CaptureSpecificPokemonQuest('Giratina (Altered)', 1, false).withDescription('Catch the ruler of the Distortion World.');
        giratinaQuestLine.addQuest(catchGiratina);
        const talktoZero4 = new TalkToNPCQuest(SendoffSpringZero2, 'Talk to Zero in Sendoff Spring.');
        giratinaQuestLine.addQuest(talktoZero4);
        App.game.quests.questLines().push(giratinaQuestLine);
    }
    /* Unova QuestLines */
    // Started upon defeating Virbank City's gym.
    static createPlasmaUnovaQuestLine() {
        const plasmaUnovaQuestLine = new QuestLine('Hollow Truth and Ideals', 'Prevent Team Plasma from using these dangerous Splicers.');
        const clearVirbankGrunt = new DefeatTemporaryBattleQuest('Team Plasma Grunt 1', 'A Team Plasma Grunt in Virbank City would like to steal your Pokémon. Defeat the grunt.');
        plasmaUnovaQuestLine.addQuest(clearVirbankGrunt);
        const clearCastliaSewers = new DefeatDungeonQuest(10, 0, 'Castelia Sewers').withDescription('Some Team Plasma Grunts were seen entering the Castelia Sewers. Clear Castelia Sewers.');
        plasmaUnovaQuestLine.addQuest(clearCastliaSewers);
        const talktoPlasmaGrunt1 = new TalkToNPCQuest(PlasmaGrunt1, 'Investigate the Perfectly Ordinary Frigate.');
        plasmaUnovaQuestLine.addQuest(talktoPlasmaGrunt1);
        const clearNimbasaGym = new DefeatGymQuest(1, 0, 'Nimbasa City').withDescription('Seems there\'s nothing suspicious going on in Castelia City. Time to continue your journey. Clear the Nimbasa Gym.');
        plasmaUnovaQuestLine.addQuest(clearNimbasaGym);
        const clearNimbasaGrunts = new CustomQuest(2, 0, 'Hugh thinks some Team Plasma Grunts in Nimbasa City are stealing Pokémon. Defeat the grunts.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 3')]());
        plasmaUnovaQuestLine.addQuest(clearNimbasaGrunts);
        const talktoPlasmaGrunt2 = new TalkToNPCQuest(PlasmaGrunt2, 'They are definitely stealing Pokémon. Investigate the Totally Unsuspicious Frigate.');
        plasmaUnovaQuestLine.addQuest(talktoPlasmaGrunt2);
        const clearDriftveilGrunts = new CustomQuest(4, 0, 'Defeat the Team Plasma Grunts on the Totally Unsuspicious Frigate.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 4')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 5')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunts 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunts 2')]());
        plasmaUnovaQuestLine.addQuest(clearDriftveilGrunts);
        const talktoZinzolinReward = () => {
            MapHelper.moveToTown('Driftveil City');
        };
        const talktoZinzolin = new TalkToNPCQuest(DriftveilZinzolin, 'Talk to Zinzolin.').withCustomReward(talktoZinzolinReward);
        plasmaUnovaQuestLine.addQuest(talktoZinzolin);
        const unovaRoute13 = new DefeatPokemonsQuest(10, 0, 13, GameConstants.Region.unova).withDescription('The Frigate is gone. Nothing to do but move forward. Clear route 13.');
        plasmaUnovaQuestLine.addQuest(unovaRoute13);
        const clearLacunosaGrunt = new DefeatTemporaryBattleQuest('Team Plasma Grunt 6', 'You have stumbled upon Zinzolin and a Team Plasma Grunt in Lacunosa Town. Defeat the grunt.');
        plasmaUnovaQuestLine.addQuest(clearLacunosaGrunt);
        const clearZinzolin1 = new DefeatTemporaryBattleQuest('Zinzolin 1', 'Defeat Zinzolin.');
        plasmaUnovaQuestLine.addQuest(clearZinzolin1);
        const clearOpelucidGym = new DefeatGymQuest(1, 0, 'Opelucid City').withDescription('Defeat the Opelucid City gym leader to obtain the DNA Splicers before Team Plasma does!');
        plasmaUnovaQuestLine.addQuest(clearOpelucidGym);
        const clearOpelucidGrunts = new CustomQuest(3, 0, 'Team Plasma has stolen the DNA Splicers and is assaulting the city with an army of grunts and shadows! Defend against the Team Plasma Assault!', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 7')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 8')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Team Plasma Grunt 9')]());
        plasmaUnovaQuestLine.addQuest(clearOpelucidGrunts);
        const clearZinzolin2 = new DefeatTemporaryBattleQuest('Zinzolin 2', 'Defeat Zinzolin.');
        plasmaUnovaQuestLine.addQuest(clearZinzolin2);
        const clearPlasmaShadow1Reward = () => {
            MapHelper.moveToTown('Opelucid City');
        };
        const clearPlasmaShadow1 = new DefeatTemporaryBattleQuest('Plasma Shadow 1', 'Defeat the Plasma Shadow.').withCustomReward(clearPlasmaShadow1Reward);
        plasmaUnovaQuestLine.addQuest(clearPlasmaShadow1);
        const clearPlasmaFrigateReward = () => {
            MapHelper.moveToTown('Humilau City');
        };
        const clearPlasmaFrigate = new DefeatDungeonQuest(1, 0, 'Plasma Frigate')
            .withDescription('Team Plasma has fled the scene with the stolen DNA Splicers. Find and clear out the Plasma Frigate.')
            .withCustomReward(clearPlasmaFrigateReward);
        plasmaUnovaQuestLine.addQuest(clearPlasmaFrigate);
        const clearGiantChasm = new DefeatDungeonQuest(1, 0, 'Giant Chasm').withDescription('Team Plasma\'s leader Ghetsis plans on using the DNA Splicers on Kyurem in Giant Chasm. Clear the dungeon to end his evil plans.');
        plasmaUnovaQuestLine.addQuest(clearGiantChasm);
        const talktoColress = new TalkToNPCQuest(GiantChasmColress, 'Talk to Colress on the Plasma Frigate.');
        plasmaUnovaQuestLine.addQuest(talktoColress);
        const clearColress = new DefeatTemporaryBattleQuest('Colress 3', 'Defeat Colress.');
        plasmaUnovaQuestLine.addQuest(clearColress);
        const clearPlasmaShadow2 = new CustomQuest(3, 0, 'Defeat the Plasma Shadows.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Plasma Shadow 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Plasma Shadow 3')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Plasma Shadow 4')]());
        plasmaUnovaQuestLine.addQuest(clearPlasmaShadow2);
        const talktoShadowTriad = new TalkToNPCQuest(GiantChasmShadowTriad, 'Talk to the Shadow Triad.');
        plasmaUnovaQuestLine.addQuest(talktoShadowTriad);
        const clearGhetsis1 = new DefeatTemporaryBattleQuest('Ghetsis 1', 'Ghetsis has done something to the legendary Dragon-type Pokémon inside Giant Chasm!');
        plasmaUnovaQuestLine.addQuest(clearGhetsis1);
        const ghetsisReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: plasmaUnovaQuestLine.name,
                message: 'You found a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
            App.game.keyItems.gainKeyItem(KeyItemType.DNA_splicers, true);
            $('#temporaryBattleWonModal').one('hidden.bs.modal', () => {
                KeyItemController.showGainModal(KeyItemType.DNA_splicers);
            });
        };
        const clearGhetsis2 = new DefeatTemporaryBattleQuest('Ghetsis 2', 'Defeat Ghetsis one final time!').withCustomReward(ghetsisReward);
        plasmaUnovaQuestLine.addQuest(clearGhetsis2);
        App.game.quests.questLines().push(plasmaUnovaQuestLine);
    }
    // Swords of Justice quest
    static createSwordsQuestLine() {
        const swordsofJusticeQuest = new QuestLine('Swords of Justice', 'The Swords of Justice sense something bad is about to happen, will you be able to help them out?', new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion), GameConstants.BulletinBoards.Unova);
        const talkToOldManSwords = new TalkToNPCQuest(OldManSwords, 'Talk to the Old Man in Mistralton Cave for clues on where the Swords of Justice are.');
        swordsofJusticeQuest.addQuest(talkToOldManSwords);
        const searchForCobalion1 = new DefeatDungeonQuest(5, 0, 'Mistralton Cave').withDescription('Search around Mistralton Cave to see if you can find Cobalion, as the Old Man said.');
        swordsofJusticeQuest.addQuest(searchForCobalion1);
        const talkToCobalion1 = new TalkToNPCQuest(Cobalion1, 'It looks like you\'ve found Cobalion! Talk to them.');
        swordsofJusticeQuest.addQuest(talkToCobalion1);
        const reuniteTerrakion = new DefeatDungeonQuest(5, 0, 'Victory Road Unova').withDescription('Start reuniting the Swords of Justice once again. You should probably start looking for Terrakion around Unova\'s Victory Road.');
        swordsofJusticeQuest.addQuest(reuniteTerrakion);
        const talkToTerrakion1 = new TalkToNPCQuest(Terrakion1, 'You\'ve found Terrakion! Talk to them about the reunion.');
        swordsofJusticeQuest.addQuest(talkToTerrakion1);
        const proveTerrakion = new DefeatTemporaryBattleQuest('Terrakion 1', 'Defeat Terrakion to prove you\'re worthy of their trust.');
        swordsofJusticeQuest.addQuest(proveTerrakion);
        const talkToCobalion2 = new TalkToNPCQuest(Cobalion2, 'Talk to Cobalion at the Moor of Icirrus to learn where to find Virizion.');
        swordsofJusticeQuest.addQuest(talkToCobalion2);
        const reuniteVirizion = new DefeatDungeonQuest(5, 0, 'Pinwheel Forest').withDescription('Now that you know where to find Virizion, search for them in Pinwheel Forest.');
        swordsofJusticeQuest.addQuest(reuniteVirizion);
        const talkToVirizion1 = new TalkToNPCQuest(Virizion1, 'Now that you\'ve found Virizion, tell them to meet the others at the Moor of Icirrus.');
        swordsofJusticeQuest.addQuest(talkToVirizion1);
        const proveVirizion = new GainGemsQuest(5000, 0, PokemonType.Grass).withDescription('Virizion is asking you to gather 5,000 Grass Gems to prove you\'re a trustworthy ally. Collect the gems and return to Pinwheel Forest to prove your worth.');
        swordsofJusticeQuest.addQuest(proveVirizion);
        const talkToVirizion2 = new TalkToNPCQuest(Virizion2, 'Now that you\'ve gathered all of the Grass Gems, talk to Virizion in Pinwheel Forest once again.');
        swordsofJusticeQuest.addQuest(talkToVirizion2);
        const talkToCobalion3 = new TalkToNPCQuest(Cobalion3, 'Meet up with the Swords of Justice at Moor of Icirrus and talk to Cobalion.');
        swordsofJusticeQuest.addQuest(talkToCobalion3);
        const defeatSwordsofJustice = new DefeatTemporaryBattleQuest('Swords of Justice 1', 'They need you to prove you\'re strong enough to deal with the possible dangers. Defeat the Swords of Justice!');
        swordsofJusticeQuest.addQuest(defeatSwordsofJustice);
        const searchForKyurem1 = new DefeatDungeonQuest(5, 0, 'Giant Chasm').withDescription('Now that you\'ve proven you\'re strong enough to help, take Cobalion\'s advice and search for Kyurem in the Giant Chasm.');
        swordsofJusticeQuest.addQuest(searchForKyurem1);
        const talkToCobalion4 = new TalkToNPCQuest(Cobalion4, 'Report your findings to Cobalion at the Moor of Icirrus.');
        swordsofJusticeQuest.addQuest(talkToCobalion4);
        const defeatKyurem1 = new DefeatTemporaryBattleQuest('Kyurem 1', 'Looks like Cobalion has seen Kyurem near Lacunosa Town. Go there and defeat Kyurem before it hurts any citizens.');
        swordsofJusticeQuest.addQuest(defeatKyurem1);
        const talkToCobalion5 = new TalkToNPCQuest(Cobalion5, 'Seems like Kyurem has fled the town. You should talk to Cobalion while you\'re there.');
        swordsofJusticeQuest.addQuest(talkToCobalion5);
        const searchForKyurem2 = new DefeatDungeonQuest(5, 0, 'Giant Chasm').withDescription('Kyurem is probably hiding in the Giant Chasm. Find its lair.');
        swordsofJusticeQuest.addQuest(searchForKyurem2);
        const defeatKyurem2 = new DefeatTemporaryBattleQuest('Kyurem 2', 'You\'ve finally found Kyurem! Defeat it with the help of the Swords of Justice.');
        swordsofJusticeQuest.addQuest(defeatKyurem2);
        const TalkToCobalion6 = new TalkToNPCQuest(Cobalion6, 'Kyurem has injured the Swords of Justice, go check on Cobalion.');
        swordsofJusticeQuest.addQuest(TalkToCobalion6);
        const defeatKyurem3 = new DefeatTemporaryBattleQuest('Kyurem 3', 'Defeat Kyurem and stop it from causing any more harm!');
        swordsofJusticeQuest.addQuest(defeatKyurem3);
        const TalkToCobalion7 = new TalkToNPCQuest(Cobalion7, 'Talk to Cobalion.');
        const TalkToTerrakion2 = new TalkToNPCQuest(Terrakion2, 'Talk to Terrakion.');
        const TalkToVirizion3 = new TalkToNPCQuest(Virizion3, 'Talk to Virizion.');
        swordsofJusticeQuest.addQuest(new MultipleQuestsQuest([TalkToCobalion7, TalkToTerrakion2, TalkToVirizion3], 'You\'ve finally defeated Kyurem, sealing it within the Giant Chasm forever. Talk to the Swords of Justice in the Giant Chasm.'));
        const CatchCobalion = new CaptureSpecificPokemonQuest('Cobalion').withDescription('Capture the Leader of the Swords of Justice, Cobalion, in Mistralton Cave.');
        const CatchTerrakion = new CaptureSpecificPokemonQuest('Terrakion').withDescription('Capture the Toughest of the Swords of Justice, Terrakion, in Victory Road.');
        const CatchVirizion = new CaptureSpecificPokemonQuest('Virizion').withDescription('Capture the Cleverest of the Swords of Justice, Virizion, in Pinwheel Forest.');
        swordsofJusticeQuest.addQuest(new MultipleQuestsQuest([CatchCobalion, CatchTerrakion, CatchVirizion], 'The Swords of Justice all depart for their homes to wait for your arrival. Go catch your new friends and add them to your team!'));
        App.game.quests.questLines().push(swordsofJusticeQuest);
    }
    // Genesect quest - Available after clearing P2 lab
    static createGenesectQuestLine() {
        const genesectQuestLine = new QuestLine('The Legend Awakened', 'Learn about the powerful Pokémon discovered under the P2 Laboratory.', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory')), GameConstants.BulletinBoards.Unova);
        const investigateP2 = new TalkToNPCQuest(InvestigateP2, 'Investigate the basement of the P2 Laboratory.');
        genesectQuestLine.addQuest(investigateP2);
        const battleRedGenesect1 = new DefeatTemporaryBattleQuest('Red Genesect 1', 'Fight the mysterious Pokémon in the Castelia Sewers.');
        genesectQuestLine.addQuest(battleRedGenesect1);
        const fightCasteliaSewers = new DefeatDungeonQuest(1, 0, 'Castelia Sewers').withDescription('Search the Castelia Sewers for clues about the Red Genesect.');
        genesectQuestLine.addQuest(fightCasteliaSewers);
        const talkToAncientBugHunter = new TalkToNPCQuest(AncientBugHunter1, 'Talk to the Ancient Bug Hunter in the Castelia Sewers.');
        genesectQuestLine.addQuest(talkToAncientBugHunter);
        const fightDriveGenesect = new CustomQuest(4, 0, 'Defeat the four Genesect surrounding Castelia City.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Genesect Burn')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Genesect Chill')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Genesect Douse')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Genesect Shock')]());
        genesectQuestLine.addQuest(fightDriveGenesect);
        const battleRedGenesect2 = new DefeatTemporaryBattleQuest('Red Genesect 2', 'The Red Genesect is trying to escape the Castelia Sewers, stop it!');
        genesectQuestLine.addQuest(battleRedGenesect2);
        const watchGenesectFight = new TalkToNPCQuest(GenesectFight, 'Witness the battle between the Red Genesect and another powerful Pokémon in Castelia City.');
        genesectQuestLine.addQuest(watchGenesectFight);
        const digP2 = new MineLayersQuest(5, 0).withDescription('The Red Genesect has crashed into the P2 Lab and escaped underground. Start digging to learn more.');
        genesectQuestLine.addQuest(digP2);
        const catchGenesect = new CaptureSpecificPokemonQuest('Genesect').withDescription('Catch Genesect in P2 Lab.');
        genesectQuestLine.addQuest(catchGenesect);
        App.game.quests.questLines().push(genesectQuestLine);
    }
    // XD Questline, available after Unova E4
    static createOrreXDQuestLine() {
        const orreXDQuestLine = new QuestLine('Gale of Darkness', 'Team Cipher has returned to Orre. Stop their new evil plan!', new MultiRequirement([new QuestLineCompletedRequirement('Shadows in the Desert'), new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)]), GameConstants.BulletinBoards.Unova);
        const talkToGateonSailor = new TalkToNPCQuest(GateonSailor, 'Ask around Gateon Port for clues about new Team Cipher activity.');
        orreXDQuestLine.addQuest(talkToGateonSailor);
        const battleNaps = new DefeatTemporaryBattleQuest('Cipher Peon Naps', 'Fight the Cipher Peons attacking the Pokémon HQ Lab.');
        orreXDQuestLine.addQuest(battleNaps);
        const clearGateonPort = new DefeatDungeonQuest(1, 0, 'Gateon Port Battles').withDescription('Clear Gateon Port to search for the Cipher Peons who kidnapped Professor Krane.')
            .withOptionalArgs({
            clearedMessage: 'Cipher? Nah, I don\'t play with those punks. I\'m my own man, flying solo. No, I won\'t say where I got this Zangoose.',
            npcDisplayName: 'Thug Zook',
            npcImageName: 'Thug',
        });
        orreXDQuestLine.addQuest(clearGateonPort);
        const battleChobin1 = new DefeatTemporaryBattleQuest('Chobin 1', 'Talk to Chobin at Kaminko\'s Manor, if he\'s willing to talk.');
        orreXDQuestLine.addQuest(battleChobin1);
        const talkToChobin1 = new TalkToNPCQuest(Chobin1, 'Talk to Chobin at Kaminko\'s Manor.');
        orreXDQuestLine.addQuest(talkToChobin1);
        const talkToEagun2 = new TalkToNPCQuest(Eagun2, 'Talk to Grandpa Eagun at the Relic Stone.'); // Step 5
        orreXDQuestLine.addQuest(talkToEagun2);
        const clearMtBattle = new DefeatDungeonQuest(1, 0, 'Mt. Battle').withDescription('Clear Mount Battle and see if anyone there has a lead on the source of Shadow Pokémon.')
            .withOptionalArgs({
            clearedMessage: 'Wow, you\'ve got some strong Pokémon! You might be able to beat Team Cipher! I heard they re-activated their operations at the Cipher Lab.',
            npcDisplayName: 'Vander',
            npcImageName: 'Cooltrainer (male)',
        });
        orreXDQuestLine.addQuest(clearMtBattle);
        const defeatLovrina = new DefeatDungeonBossQuest('Cipher Lab', 'Cipher Admin Lovrina', 0).withDescription('Track down the new boss of the Cipher Lab.'); //Step 7
        orreXDQuestLine.addQuest(defeatLovrina);
        const talkToLovrina = new TalkToNPCQuest(Lovrina, 'Talk to Cipher Admin Lovrina at the Cipher Lab.');
        orreXDQuestLine.addQuest(talkToLovrina);
        const clearPyriteTown = new DefeatDungeonQuest(1, 0, 'Pyrite Town Battles').withDescription('Pyrite Town is in chaos! Battle your way through to get some answers.')
            .withOptionalArgs({
            clearedMessage: 'This is Marcia live on the scene! Chaos in Pyrite Town as Team Cipher has returned! Rumors are swirling about an infamous dance machine making a scene!',
            npcDisplayName: 'Marcia',
            npcImageName: 'Reporter',
        });
        orreXDQuestLine.addQuest(clearPyriteTown);
        const battleMirorB1 = new DefeatTemporaryBattleQuest('Miror B. 1', 'Find and defeat Miror B. near a cool cave.'); // Step 10
        orreXDQuestLine.addQuest(battleMirorB1);
        const defeatExol = new DefeatDungeonBossQuest('Pyrite Building', 'Cipher Commander Exol', 0).withDescription('Track down the new boss of the Pyrite Building.');
        orreXDQuestLine.addQuest(defeatExol);
        const talkToExol = new TalkToNPCQuest(Exol, 'Talk to Cipher Commander Exol at the Pyrite Building.');
        orreXDQuestLine.addQuest(talkToExol);
        const fightPhenacCity = new DefeatDungeonQuest(10, 0, 'Phenac City Battles').withDescription('Battle through the new Cipher Peons in Phenac City.');
        orreXDQuestLine.addQuest(fightPhenacCity);
        const defeatSnattle = new DefeatDungeonBossQuest('Phenac Stadium', 'Cipher Admin Snattle', 0).withDescription('Track down the new boss of the Phenac Stadium.');
        orreXDQuestLine.addQuest(defeatSnattle);
        const talkToSnattle = new TalkToNPCQuest(Snattle, 'Talk to Cipher Admin Snattle at the Phenac Stadium.'); //Step 15
        orreXDQuestLine.addQuest(talkToSnattle);
        const talkToMayorTrest = new TalkToNPCQuest(Trest, 'Talk to Mayor Trest at the Phenac City.').withCustomReward(this.itemReward('Rare_Candy', 50, 'Mayor Trest'));
        orreXDQuestLine.addQuest(talkToMayorTrest);
        const talkToVerich = new TalkToNPCQuest(Verich, 'Talk to the wealthy Mr. Verich at Gateon Port to learn more about the S. S. Libra.');
        orreXDQuestLine.addQuest(talkToVerich);
        const battleChobin2 = new DefeatTemporaryBattleQuest('Chobin 2', 'Talk to Chobin at Kaminko\'s Manor, if he\'s willing to talk.');
        orreXDQuestLine.addQuest(battleChobin2);
        const talkToChobin2 = new TalkToNPCQuest(Chobin2, 'Talk to Chobin at Kaminko\'s Manor.'); // Step 19
        orreXDQuestLine.addQuest(talkToChobin2);
        const battleSmarton = new DefeatTemporaryBattleQuest('Cipher Peon Smarton', 'Fight the Cipher Peon at the wreck of the S. S. Libra.'); // Step 20
        orreXDQuestLine.addQuest(battleSmarton);
        const LuxuryReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Luxuryball, 100, false);
            Notifier.notify({
                title: orreXDQuestLine.name,
                message: 'You find a crate of Luxury Balls in the wreckage.',
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.Quests.quest_ready_to_complete,
            });
        };
        const searchSSLibra = new TalkToNPCQuest(SearchLibra, 'Search the S. S. Libra for clues.').withCustomReward(LuxuryReward);
        orreXDQuestLine.addQuest(searchSSLibra);
        const battleZook = new DefeatTemporaryBattleQuest('Zook', 'Fight Zook outside of the Cipher Key Lair.');
        orreXDQuestLine.addQuest(battleZook);
        const battleMirorB2 = new DefeatTemporaryBattleQuest('Miror B. 2', 'Miror B. has surfaced again! Fight him at the Outskirt Stand.');
        orreXDQuestLine.addQuest(battleMirorB2);
        const fightSnagemHideout = new DefeatDungeonQuest(10, 0, 'Snagem Hideout').withDescription('Battle through the Snagem Hideout and look for clues.');
        orreXDQuestLine.addQuest(fightSnagemHideout);
        const clearCipherKeyLair = new DefeatDungeonQuest(1, 0, 'Cipher Key Lair').withDescription('You found a key to the Cipher Key Lair. Find out what\'s inside!') // Step 25
            .withOptionalArgs({
            clearedMessage: 'Bah! No fair! Fine, you can take your precious Professor Krane. Get out of here!',
            npcDisplayName: 'Gorigan',
            npcImageName: 'Cipher Admin Gorigan',
        });
        orreXDQuestLine.addQuest(clearCipherKeyLair);
        const KraneReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: orreXDQuestLine.name,
                message: 'Professor Krane gives you a Master Ball.',
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.Quests.quest_ready_to_complete,
            });
        };
        const talkToProfKrane = new TalkToNPCQuest(ProfKrane, 'Talk to Professor Krane at the Pokémon HQ Lab.').withCustomReward(KraneReward);
        orreXDQuestLine.addQuest(talkToProfKrane);
        const fightCitadarkIsle = new DefeatDungeonQuest(10, 0, 'Citadark Isle').withDescription('Battle through Team Cipher on Citadark Isle');
        orreXDQuestLine.addQuest(fightCitadarkIsle);
        const fightCitadarkIsleDome = new DefeatDungeonQuest(1, 0, 'Citadark Isle Dome').withDescription('Defeat Grand Master Greevil and XD001 in the Citadark Isle Dome.');
        orreXDQuestLine.addQuest(fightCitadarkIsleDome);
        App.game.quests.questLines().push(orreXDQuestLine);
    }
    /* Kalos QuestLines */
    // Started upon defeating Professor Sycamore in Lumiose City.
    static createFlareKalosQuestLine() {
        const flareKalosQuestLine = new QuestLine('A Beautiful World', 'End Team Flare\'s plan to destroy the world and create a new one in its place.');
        const talkToLysandre1 = new TalkToNPCQuest(Lysandre1, 'Talk to Lysandre inside Professor Sycamore\'s lab in Lumiose City.');
        flareKalosQuestLine.addQuest(talkToLysandre1);
        const talkToKalem1 = new TalkToNPCQuest(Calem1, 'Well, that was definitely a weird guy... Seems like Calem wants to meet you somewhere in Lumiose City, go talk with him.');
        flareKalosQuestLine.addQuest(talkToKalem1);
        const talkToKalem2 = new TalkToNPCQuest(Calem2, 'Meet Calem in Ambrette Town.');
        flareKalosQuestLine.addQuest(talkToKalem2);
        const clearGlitteringCave = new DefeatDungeonQuest(1, 0, 'Glittering Cave').withDescription('Clear Glittering Cave and find the scientist.')
            .withOptionalArgs({
            clearedMessage: 'What\'s this? Well, well. What do we have here? A nosy little trainer has come poking around. Listen up! We\'re the fashionable team whose very name makes people tremble in fear: Team Flare! Team Flare\'s goal is to make it so we\'re the only ones who are happy! We don\'t care one bit about what happens to other trainers or Pokémon. Get out of here, kid. Don\'t you know not to play with fire? We\'ll obliterate you!',
            npcDisplayName: 'Team Flare Grunt',
            npcImageName: 'Team Flare Grunt (male)',
        });
        flareKalosQuestLine.addQuest(clearGlitteringCave);
        const battleTeamFlareGrunt1 = new DefeatTemporaryBattleQuest('Team Flare Grunt 1', 'It seems that Team Flare Grunt is holding the scientist captive, free him!');
        flareKalosQuestLine.addQuest(battleTeamFlareGrunt1);
        // Talk to Fossil Scientist after beating Team Flare Grunt
        const KalosFossilReward = () => {
            const item = Rand.boolean() ? 'Sail_fossil' : 'Jaw_fossil';
            ItemList[item].gain(1);
            Notifier.notify({
                title: flareKalosQuestLine.name,
                message: `Fossil Scientist has given you a ${GameConstants.humanifyString(item)}!`,
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.Quests.quest_ready_to_complete,
                setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
            });
        };
        const talkToFossilScientist = new TalkToNPCQuest(FossilScientist, 'From what you gathered, Team Flare wanted to sell fossils for money. Talk with the fossil scientist you just rescued in Glittering Cave.').withCustomReward(KalosFossilReward);
        flareKalosQuestLine.addQuest(talkToFossilScientist);
        const clearCyllageCityGym = new DefeatGymQuest(1, 0, 'Cyllage City')
            .withDescription('With interesting thoughts about Team Flare in your head, you decide to challenge the Cyllage City Gym to become stronger.');
        flareKalosQuestLine.addQuest(clearCyllageCityGym);
        const talkToTeamFlareGrunt1 = new TalkToNPCQuest(TeamFlareGrunt1, 'You can see in Geosenge Town the Team Flare Grunt you battled earlier. Approach him once more.');
        flareKalosQuestLine.addQuest(talkToTeamFlareGrunt1);
        const battleTeamFlareGrunt2 = new DefeatTemporaryBattleQuest('Team Flare Grunt 2', 'Beat the Team Flare Grunt once more!');
        flareKalosQuestLine.addQuest(battleTeamFlareGrunt2);
        const talkToDiantha1 = new TalkToNPCQuest(Diantha1, 'You heard rumors of Diantha being in Coumarine City. Go there to check if you can see her.');
        flareKalosQuestLine.addQuest(talkToDiantha1);
        const talkToLysandre2 = new TalkToNPCQuest(Lysandre2, 'Lysandre is calling you while you are standing in Coumarine City, pick up the phone.');
        flareKalosQuestLine.addQuest(talkToLysandre2);
        const clearKalosPowerPlant = new DefeatDungeonBossQuest('Kalos Power Plant', 'Team Flare Aliana')
            .withDescription('Well, that was extremely awkward... But ignoring that, Lumiose City still hasn\'t fixed the power outage, go clear the Kalos Power Plant.')
            .withOptionalArgs({
            clearedMessage: 'You\'re quite strong. Oh yes... very strong, indeed. I certainly didn\'t expect you to be so interesting. But it matters not, we already have enough energy to power the device. I do hope we can meet again!',
            npcDisplayName: 'Team Flare Aliana',
            npcImageName: 'Team Flare Aliana',
        });
        flareKalosQuestLine.addQuest(clearKalosPowerPlant);
        const clearLumioseCityGym = new DefeatGymQuest(1, 0, 'Lumiose City').withDescription('You\'ve helped with the power outage problem, now the gym in Lumiose City is back up and you can challenge it!');
        flareKalosQuestLine.addQuest(clearLumioseCityGym);
        const talkToLysandre3 = new TalkToNPCQuest(Lysandre3, 'Professor Sycamore wants to meet you in Lumiose City. He\'s with Lysandre, go say hi.');
        flareKalosQuestLine.addQuest(talkToLysandre3);
        const clearPokéBallFactory = new DefeatDungeonQuest(1, 0, 'Poké Ball Factory')
            .withDescription('For someone so obsessed with beauty he seems to really care about filth... Anyway, the Poké Ball Factory sounds like a fun place, let\'s go check it out.')
            .withOptionalArgs({
            clearedMessage: 'No way you beat us! Wow, we are lame. Probability is just probability after all... Absolutes do not exist. But enough already! We\'ve already stolen the Poké Balls, Great Balls, and Ultra Balls. Let\'s call it good and leave.',
            npcDisplayName: 'Team Flare Bryony',
            npcImageName: 'Team Flare Bryony',
        });
        flareKalosQuestLine.addQuest(clearPokéBallFactory);
        // Talk to Poké Ball Factory Director after talking with Team Flare Bryony
        const KalosMasterBallReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: flareKalosQuestLine.name,
                message: 'The Poké Ball Factory Director has given you a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.Quests.quest_ready_to_complete,
                setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
            });
        };
        const talkToPokéBallFactoryDirector = new TalkToNPCQuest(PokéBallFactoryDirector, 'Now that Team Flare is not in the Poké Ball Factory anymore, talk with the Director that you just saved.').withCustomReward(KalosMasterBallReward);
        flareKalosQuestLine.addQuest(talkToPokéBallFactoryDirector);
        const talkToProfessorSycamore1 = new TalkToNPCQuest(ProfessorSycamore1, 'Professor Sycamore is waiting for you in Dendemille Town. He has some important things to say about the legendary Pokémon of Kalos.');
        flareKalosQuestLine.addQuest(talkToProfessorSycamore1);
        const clearFrostCavern = new DefeatDungeonQuest(1, 0, 'Frost Cavern').withDescription('You were going to Frost Cavern for Pokémon, but what you found there is Team Flare instead! Clear it!')
            .withOptionalArgs({
            clearedMessage: 'Not just strong... TOO strong! Not ordinary, indeed. Whatever, it doesn\'t matter, we already tested what we wanted to know. The Abomasnow from this cavern is a fine specimen. The more we agitate it, the stronger its Snow Warning ability becomes, making the snow fall even more furiously. Whoever has the most energy will come out on top! And it\'s Team Flare, and only Team Flare who will survive!',
            npcDisplayName: 'Team Flare Mable',
            npcImageName: 'Team Flare Mable',
        });
        flareKalosQuestLine.addQuest(clearFrostCavern);
        const clearAnistarCityGym = new DefeatGymQuest(1, 0, 'Anistar City').withDescription('So everything is over now, right? Right? Go beat Anistar City Gym!');
        flareKalosQuestLine.addQuest(clearAnistarCityGym);
        const talkToKalosTVNews = new TalkToNPCQuest(KalosTVNews, 'Lysandre is giving an important speech through the TV News. Watch it in Anistar City.');
        flareKalosQuestLine.addQuest(talkToKalosTVNews);
        const talkToLysandre4 = new TalkToNPCQuest(Lysandre4, 'Wow! Absolutely no one could have seen this coming! You think you might find Lysandre in Lumiose City where you first met him. Look for him!');
        flareKalosQuestLine.addQuest(talkToLysandre4);
        const battleTeamFlareLysandre1 = new DefeatTemporaryBattleQuest('Team Flare Lysandre 1', 'Show Team Flare Lysandre the strength of your convictions in Lumiose City!');
        flareKalosQuestLine.addQuest(battleTeamFlareLysandre1);
        const talkToAZ1 = new TalkToNPCQuest(AZ1, 'You run after Lysandre and while going through the Labs you find a jailed mysterious man in Lumiose City. It seems like he has a story to tell...');
        flareKalosQuestLine.addQuest(talkToAZ1);
        const battleTeamFlareXerosic = new DefeatTemporaryBattleQuest('Team Flare Xerosic', 'Now that you learnt what the ultimate weapon is able to do, you need to stop it. Team Flare Xerosic is in the way in Lumiose City, defeat him!');
        flareKalosQuestLine.addQuest(battleTeamFlareXerosic);
        const talkToBlueButton = new TalkToNPCQuest(BlueButton, 'Press the blue button!');
        const talkToRedButton = new TalkToNPCQuest(RedButton, 'Press the red button!');
        flareKalosQuestLine.addQuest(new MultipleQuestsQuest([
            talkToBlueButton,
            talkToRedButton,
        ], 'Xerosic offers you the possibility to stop the ultimate weapon in Lumiose City. Blue or Red Button, press one!', 0, 1)); //Step 24
        const clearTeamFlareSecretHQ1 = new DefeatDungeonQuest(1, 0, 'Team Flare Secret HQ').withDescription('The ultimate weapon was activated in Geosenge Town! Go to the Team Flare Secret HQ to put a stop to it! First step: Beating Team Flare Aliana.')
            .withOptionalArgs({
            clearedMessage: 'I had fun at the Kalos Power Plant. Of course, we could have generated electricity with Team Flare\'s technology, too, you know. We just didn\'t think it justified the cost. To create a world for us and us alone, we have to play it smart, you see.',
            npcDisplayName: 'Team Flare Aliana',
            npcImageName: 'Team Flare Aliana',
        });
        flareKalosQuestLine.addQuest(clearTeamFlareSecretHQ1);
        const clearTeamFlareSecretHQ2 = new DefeatDungeonQuest(1, 0, 'Team Flare Secret HQ').withDescription('Continue traversing through the Team Flare Secret HQ! Second step: Beating Team Flare Celosia.')
            .withOptionalArgs({
            clearedMessage: 'In reality, those stones that line Route 10 are the graves of Pokémon. When the ultimate weapon was used to end that horrible war over 3,000 years ago, it stole the lives of all those Pokémon. Their lives were the price of peace then. And if we want to make our own wishes come true today, we in Team Flare also have to sacrifice something precious.',
            npcDisplayName: 'Team Flare Celosia',
            npcImageName: 'Team Flare Celosia',
        });
        flareKalosQuestLine.addQuest(clearTeamFlareSecretHQ2);
        const clearTeamFlareSecretHQ3 = new DefeatDungeonQuest(1, 0, 'Team Flare Secret HQ').withDescription('You should be halfway through. Go further in the Team Flare Secret HQ! Third step: Beating Team Flare Bryony.')
            .withOptionalArgs({
            clearedMessage: 'We\'ve been using the electricity we stole from the Power Plant to get everything prepared for activating the ultimate weapon. But it\'s not like that\'s all we\'ll need to use it. Are you following me? We\'ll need energy absorbed from Pokémon to power the device! Yes! It\'s the stones on Route 10 that will steal that energy for us and power the ultimate weapon.',
            npcDisplayName: 'Team Flare Bryony',
            npcImageName: 'Team Flare Bryony',
        });
        flareKalosQuestLine.addQuest(clearTeamFlareSecretHQ3);
        const clearTeamFlareSecretHQ4 = new DefeatDungeonQuest(1, 0, 'Team Flare Secret HQ').withDescription('You are getting close. Resume delving into the Team Flare Secret HQ! Fourth step: Beating Team Flare Mable.')
            .withOptionalArgs({
            clearedMessage: 'The power of the Legendary Pokémon... The power to grant life to all around it... The power to steal life from all around it... It\'s a mysterious ability that even scientists like us haven\'t been able to really decode. What d\'you think will happen to the world if we fuel the ultimate weapon with something like that?',
            npcDisplayName: 'Team Flare Mable',
            npcImageName: 'Team Flare Mable',
        });
        flareKalosQuestLine.addQuest(clearTeamFlareSecretHQ4);
        const clearTeamFlareSecretHQ5 = new DefeatDungeonQuest(1, 0, 'Team Flare Secret HQ').withDescription('You are almost there! One more time traversing through the Team Flare Secret HQ and you\'ll get to the end! Fifth step: Beating Team Flare Lysandre.');
        flareKalosQuestLine.addQuest(clearTeamFlareSecretHQ5);
        const talkToTeamFlareLysandre1 = new TalkToNPCQuest(TeamFlareLysandre1, 'This is it, you\'ve beaten Lysandre at the top of his game in Team Flare Secret HQ, right? He might have something else to say...');
        flareKalosQuestLine.addQuest(talkToTeamFlareLysandre1);
        const battleXerneas = new DefeatTemporaryBattleQuest('Xerneas', 'Calm Xerneas down!');
        const battleYveltal = new DefeatTemporaryBattleQuest('Yveltal', 'Calm Yveltal down!');
        flareKalosQuestLine.addQuest(new MultipleQuestsQuest([
            battleXerneas,
            battleYveltal,
        ], 'You go to the lowest level of the Team Flare Secret HQ as Lysandre told you to. There you find Xerneas and Yveltal fighting each other! Fight them yourself and calm them down!'));
        const talkToTeamFlareBossLysandre1 = new TalkToNPCQuest(TeamFlareBossLysandre1, 'Lysandre appears menacingly in front of you in Team Flare Secret HQ. He doesn\'t seem fazed about you subsiding both legendary Pokémon.');
        flareKalosQuestLine.addQuest(talkToTeamFlareBossLysandre1);
        const battleTeamFlareBossLysandre1 = new DefeatTemporaryBattleQuest('Team Flare Boss Lysandre 1', 'Stop Team Flare Boss Lysandre in Team Flare Secret HQ once and for all!!');
        flareKalosQuestLine.addQuest(battleTeamFlareBossLysandre1);
        const clearKalosLeague = new DefeatGymQuest(1, 0, 'Champion Diantha').withDescription('You did it! You saved Kalos! There is nothing else to do except to continue your journey to beat the Kalos Pokémon League!');
        flareKalosQuestLine.addQuest(clearKalosLeague);
        // Battle AZ and finish the quest
        const battleAZ1 = new DefeatTemporaryBattleQuest('AZ', 'What an amazing trainer! You became Kalos Champion! There is a parade in your honor in Lumiose City. But wait, AZ is there asking you for a battle. Show him what being a Pokémon Trainer is like!').withCustomReward(this.itemReward('Key_stone', 1));
        flareKalosQuestLine.addQuest(battleAZ1);
        App.game.quests.questLines().push(flareKalosQuestLine);
    }
    // Delta Episode - Available upon defeating Shalour City's gym
    static createDeltaEpisodeQuestLine() {
        const deltaEpisodeQuestLine = new QuestLine('The Delta Episode', 'A catastrophe is on the horizon! Work with the people of Hoenn to stop it.', new GymBadgeRequirement(BadgeEnums.Rumble), GameConstants.BulletinBoards.Kalos);
        const talkToCozmo1 = new TalkToNPCQuest(Cozmo1, 'Talk to Dr. Cozmo in Fallarbor Town.');
        deltaEpisodeQuestLine.addQuest(talkToCozmo1);
        const talkToZinnia1 = new TalkToNPCQuest(Zinnia1, 'Talk to the mysterious figure at the Sky Pillar.');
        deltaEpisodeQuestLine.addQuest(talkToZinnia1);
        const talkToDeltaMay1 = new TalkToNPCQuest(DeltaMay1, 'Travel with Zinnia to Littleroot Town and talk to May.');
        deltaEpisodeQuestLine.addQuest(talkToDeltaMay1);
        const talkToNewsBirch = new TalkToNPCQuest(NewsBirch, 'Discuss the news with Professor Birch in Littleroot Town.');
        deltaEpisodeQuestLine.addQuest(talkToNewsBirch);
        const talkToDeltaMay2 = new TalkToNPCQuest(DeltaMay2, 'Find out why May is so mad in Littleroot Town.');
        deltaEpisodeQuestLine.addQuest(talkToDeltaMay2);
        const fightCourtney1 = new DefeatTemporaryBattleQuest('Courtney 1', 'Defeat Courtney');
        const fightMatt1 = new DefeatTemporaryBattleQuest('Matt 1', 'Defeat Matt');
        deltaEpisodeQuestLine.addQuest(new MultipleQuestsQuest([
            fightCourtney1,
            fightMatt1,
        ], 'Follow Zinnia to Petalburg City.'));
        const talkToDeltaSteven1 = new TalkToNPCQuest(DeltaSteven1, 'Answer your ringing Holo Caster.');
        const talkToDeltaWally1 = new TalkToNPCQuest(DeltaWally1, 'Talk to Wally.');
        deltaEpisodeQuestLine.addQuest(new MultipleQuestsQuest([
            talkToDeltaSteven1,
            talkToDeltaWally1,
        ], 'Talk to Wally and answer your ringing Holo Caster in Petalburg City.'));
        const clearGranite = new DefeatDungeonQuest(10, 0, 'Granite Cave').withDescription('Clear Granite Cave 10 times.');
        const findStars = new CustomQuest(1, 0, 'Find a Star Piece.', () => player.itemList.Star_piece());
        deltaEpisodeQuestLine.addQuest(new MultipleQuestsQuest([
            clearGranite,
            findStars,
        ], 'Search Granite Cave and look for Star Pieces.'));
        const talkToZinnia2 = new TalkToNPCQuest(Zinnia2, 'Talk to Zinnia in Granite Cave.');
        deltaEpisodeQuestLine.addQuest(talkToZinnia2);
        const fightZinnia1 = new DefeatTemporaryBattleQuest('Zinnia 1', 'Defeat Zinnia in Granite Cave').withCustomReward(() => ItemList.Meteorite_Shard_Delta.gain(1));
        deltaEpisodeQuestLine.addQuest(fightZinnia1);
        const talkToZinnia3 = new TalkToNPCQuest(Zinnia3, 'Talk to Zinnia in Granite Cave.');
        deltaEpisodeQuestLine.addQuest(talkToZinnia3);
        const talkToCozmo2 = new TalkToNPCQuest(Cozmo2, 'Talk to Dr. Cozmo at the Mossdeep Space Center.');
        deltaEpisodeQuestLine.addQuest(talkToCozmo2);
        const talkToZinnia4 = new TalkToNPCQuest(Zinnia4, 'Talk to Zinnia at the Mossdeep Space Center.');
        deltaEpisodeQuestLine.addQuest(talkToZinnia4);
        const talkToCozmo3 = new TalkToNPCQuest(Cozmo3, 'Talk to Dr. Cozmo at the Mossdeep Space Center.');
        deltaEpisodeQuestLine.addQuest(talkToCozmo3);
        const clearMeteor = new DefeatDungeonQuest(10, 0, 'Meteor Falls').withDescription('Clear Meteor Falls 10 times to search for the Meteor Shard.');
        deltaEpisodeQuestLine.addQuest(clearMeteor);
        const talkToDracElder1 = new TalkToNPCQuest(DraconidElder1, 'Talk to the Draconid Elder in Meteor Falls.');
        deltaEpisodeQuestLine.addQuest(talkToDracElder1);
        const fightDracElder = new DefeatTemporaryBattleQuest('Draconid Elder', 'Defeat the Draconid Elder in Meteor Falls.');
        deltaEpisodeQuestLine.addQuest(fightDracElder);
        const talkToDracElder2 = new TalkToNPCQuest(DraconidElder2, 'Talk to the Draconid Elder in Meteor Falls.').withCustomReward(() => ItemList.Meteorite_Shard_Delta.gain(1));
        deltaEpisodeQuestLine.addQuest(talkToDracElder2);
        const fightAquaGrunts = new DefeatTemporaryBattleQuest('Aqua Grunt', 'Defeat the Aqua Grunt.');
        const fightMagmaGrunts = new DefeatTemporaryBattleQuest('Magma Grunt', 'Defeat the Magma Grunt.');
        deltaEpisodeQuestLine.addQuest(new MultipleQuestsQuest([
            fightAquaGrunts,
            fightMagmaGrunts,
        ], 'Defeat the Team Aqua and Magma Grunts attacking the Mossdeep Space Center.'));
        const fightCourtney2 = new DefeatTemporaryBattleQuest('Courtney 2', 'Defeat Courtney');
        const fightMatt2 = new DefeatTemporaryBattleQuest('Matt 2', 'Defeat Matt');
        deltaEpisodeQuestLine.addQuest(new MultipleQuestsQuest([
            fightCourtney2,
            fightMatt2,
        ], 'Defeat the admins trying to take over the Mossdeep Space Center.'));
        const talkToZinnia5 = new TalkToNPCQuest(Zinnia5, 'Talk to Zinnia at the Mossdeep Space Center.');
        deltaEpisodeQuestLine.addQuest(talkToZinnia5);
        const clearAquaHideoutDelta = new DefeatDungeonQuest(1, 0, 'Aqua Hideout').withDescription('Follow Zinnia to the Aqua hideout and search for her.');
        deltaEpisodeQuestLine.addQuest(clearAquaHideoutDelta);
        const talkToArchie = new TalkToNPCQuest(Archie, 'Talk to Archie in the Team Aqua Hideout.');
        deltaEpisodeQuestLine.addQuest(talkToArchie);
        const clearMagmaHideoutDelta = new DefeatDungeonQuest(1, 0, 'Magma Hideout').withDescription('Follow Zinnia to the Magma Hideout and search for her.');
        deltaEpisodeQuestLine.addQuest(clearMagmaHideoutDelta);
        const talkToMaxie = new TalkToNPCQuest(Maxie, 'Talk to Maxie in the Team Magma Hideout.');
        deltaEpisodeQuestLine.addQuest(talkToMaxie);
        const talkToWallace3 = new TalkToNPCQuest(Wallace3, 'Talk to Wallace in Sootopolis City.');
        deltaEpisodeQuestLine.addQuest(talkToWallace3);
        const fightDeltaWallace = new DefeatTemporaryBattleQuest('Delta Wallace', 'Defeat Wallace in Sootopolis City.');
        deltaEpisodeQuestLine.addQuest(fightDeltaWallace);
        const fightZinnia2 = new DefeatTemporaryBattleQuest('Zinnia 2', 'Defeat Zinnia at the Sky Pillar.');
        deltaEpisodeQuestLine.addQuest(fightZinnia2);
        const catchDeltaRayquaza = new CaptureSpecificPokemonQuest('Rayquaza', 1, true);
        deltaEpisodeQuestLine.addQuest(catchDeltaRayquaza);
        const MeteoriteReward = () => {
            player.gainMegaStone(GameConstants.MegaStoneType.Meteorite);
            Notifier.notify({
                title: deltaEpisodeQuestLine.name,
                message: 'Your Meteorite Shards combine into a Meteorite!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const talkToZinnia6 = new TalkToNPCQuest(Zinnia6, 'Talk to Zinnia at the Sky Pillar.').withCustomReward(MeteoriteReward);
        deltaEpisodeQuestLine.addQuest(talkToZinnia6);
        const catchMegaRayquaza = new CaptureSpecificPokemonQuest('Mega Rayquaza').withDescription('Mega Evolve Rayquaza.');
        deltaEpisodeQuestLine.addQuest(catchMegaRayquaza);
        const talkToZinnia7 = new TalkToNPCQuest(Zinnia7, 'Talk to Zinnia at the Sky Pillar.');
        deltaEpisodeQuestLine.addQuest(talkToZinnia7);
        const fightDeoxys = new DefeatTemporaryBattleQuest('Deoxys', 'Fly Mega Rayquaza into space to destroy the Meteor.');
        deltaEpisodeQuestLine.addQuest(fightDeoxys);
        const talkToCozmo4 = new TalkToNPCQuest(Cozmo4, 'Talk to Dr. Cozmo at the Mossdeep Space Center.');
        deltaEpisodeQuestLine.addQuest(talkToCozmo4);
        App.game.quests.questLines().push(deltaEpisodeQuestLine);
    }
    // Available after Delta step 28, must have obtained Groudon and Kyogre
    static createPrimalReversionQuestLine() {
        const primalReversionQuestLine = new QuestLine('Primal Reversion', 'Teams Aqua and Magma have been trying to unlock the Primal power of Groudon and Kyogre.', new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 28), new ObtainedPokemonRequirement('Groudon'), new ObtainedPokemonRequirement('Kyogre')]), GameConstants.BulletinBoards.Hoenn);
        const talkToMrStone1 = new TalkToNPCQuest(MrStone1, 'Talk to Mr. Stone in Slateport City.');
        primalReversionQuestLine.addQuest(talkToMrStone1);
        const clearGranite2 = new DefeatDungeonQuest(10, 0, 'Granite Cave').withDescription('Clear Granite Cave 10 times to search for the Primal Reversion Mural.');
        primalReversionQuestLine.addQuest(clearGranite2);
        const viewPrimalMural1 = new TalkToNPCQuest(PrimalMural1, 'Examine the first Primal Mural in Granite Cave.');
        const viewPrimalMural2 = new TalkToNPCQuest(PrimalMural2, 'Examine the second Primal Mural in Granite Cave.');
        primalReversionQuestLine.addQuest(new MultipleQuestsQuest([
            viewPrimalMural1,
            viewPrimalMural2,
        ], 'Examine the Primal Murals.'));
        const talkToSteven = new TalkToNPCQuest(PrimalSteven, 'Talk to Steven in the Granite Cave to learn more about the Primal Murals.');
        primalReversionQuestLine.addQuest(talkToSteven);
        const talkToStern1 = new TalkToNPCQuest(Stern1, 'Find Captain Stern at Sea Mauville during Thunderstorm Weather.');
        primalReversionQuestLine.addQuest(talkToStern1);
        const fightStern = new DefeatTemporaryBattleQuest('Captain Stern', 'Fight Captain Stern at Sea Mauville.');
        primalReversionQuestLine.addQuest(fightStern);
        const talkToStern2 = new TalkToNPCQuest(Stern2, 'Talk to Captain Stern at Sea Mauville about the mysteries of the sea.');
        primalReversionQuestLine.addQuest(talkToStern2);
        const findMetalCoats = new CustomQuest(10, 0, 'Find 10 Metal Coats.', () => player.itemList.Metal_coat());
        const findMysticWater = new CustomQuest(1, 0, 'Find one Mystic Water.', () => player.itemList.Mystic_Water());
        const findHeatRocks = new CustomQuest(3, 0, 'Find 3 Heat Rocks.', () => player.itemList.Heat_rock());
        primalReversionQuestLine.addQuest(new MultipleQuestsQuest([
            findMetalCoats,
            findMysticWater,
            findHeatRocks,
        ], 'Obtain the items Captain Stern needs to upgrade the Submarine.'));
        const talkToStern3 = new TalkToNPCQuest(Stern3, 'Talk to Captain Stern at Sea Mauville and upgrade the submarine.');
        primalReversionQuestLine.addQuest(talkToStern3);
        const clearSeafloorCavern2 = new DefeatDungeonQuest(10, 0, 'Seafloor Cavern').withDescription('Clear the Seafloor Cavern 10 times to learn more about the mysterious occurrences.');
        primalReversionQuestLine.addQuest(clearSeafloorCavern2);
        const fightArchiePrimal = new DefeatTemporaryBattleQuest('Archie Primal', 'Defeat Archie');
        const fightMaxiePrimal = new DefeatTemporaryBattleQuest('Maxie Primal', 'Defeat Maxie');
        primalReversionQuestLine.addQuest(new MultipleQuestsQuest([
            fightArchiePrimal,
            fightMaxiePrimal,
        ], 'Defeat the Team Aqua and Team Magma leaders in the Seafloor Cavern.'));
        const clearWeatherInstitute2 = new DefeatDungeonQuest(10, 0, 'Weather Institute').withDescription('Clear the Weather Institute 10 times to search for clues about Archie and Maxie\'s plans.');
        primalReversionQuestLine.addQuest(clearWeatherInstitute2);
        const weatherScan = new TalkToNPCQuest(WeatherScan, 'Scan the area for unusual weather at the Weather Institute.');
        primalReversionQuestLine.addQuest(weatherScan);
        const clearMtPyre = new DefeatDungeonQuest(1, 0, 'Mt. Pyre').withDescription('Investigate Mt. Pyre for the source of the disturbances.');
        primalReversionQuestLine.addQuest(clearMtPyre);
        const talkToPrimalArchie = new TalkToNPCQuest(PrimalArchie, 'Talk to Archie.');
        const talkToPrimalMaxie = new TalkToNPCQuest(PrimalMaxie, 'Talk to Maxie.');
        primalReversionQuestLine.addQuest(new MultipleQuestsQuest([
            talkToPrimalArchie,
            talkToPrimalMaxie,
        ], 'Find out what the Team Leaders are up to at Mt. Pyre.'));
        const fightPrimalGroudon = new DefeatTemporaryBattleQuest('Primal Groudon', 'Defeat Primal Groudon in Harsh Sunlight Weather.');
        const fightPrimalKyogre = new DefeatTemporaryBattleQuest('Primal Kyogre', 'Defeat Primal Kyogre in Raining Weather.');
        primalReversionQuestLine.addQuest(new MultipleQuestsQuest([
            fightPrimalGroudon,
            fightPrimalKyogre,
        ], 'Defeat the Primal Reversions. Predict their rampage by monitoring the weather at the Weather Institute.'));
        const talkToMrStone2 = new TalkToNPCQuest(MrStone2, 'Talk to Mr. Stone in Slateport City.');
        primalReversionQuestLine.addQuest(talkToMrStone2);
        App.game.quests.questLines().push(primalReversionQuestLine);
    }
    // Available after defeating Santalune City's Gym
    static createDetectivePikachuQuestLine() {
        const detectivePikachuQuestLine = new QuestLine('Detective Pikachu', 'Detective Pikachu\'s partner has gone missing, and he needs your help!', new MultiRequirement([new ObtainedPokemonRequirement('Detective Pikachu'), new GymBadgeRequirement(BadgeEnums.Bug)]), GameConstants.BulletinBoards.Kalos);
        const searchForClues1 = new TalkToNPCQuest(searchForClues, 'Search Goldenrod City for clues.');
        detectivePikachuQuestLine.addQuest(searchForClues1);
        const aipomAlley = new DefeatTemporaryBattleQuest('Aipom Alley', 'Defeat the Aipoms').withCustomReward(() => ItemList.Mysterious_Vial_Detective_Pikachu.gain(1));
        detectivePikachuQuestLine.addQuest(aipomAlley);
        const searchForClues2 = new DefeatDungeonQuest(1, 0, 'Radio Tower').withDescription('The Aipoms dropped some sort of vial while they were running away. It looks like they were headed towards the Radio Tower. Find it!');
        detectivePikachuQuestLine.addQuest(searchForClues2);
        const searchForClues3 = new TalkToNPCQuest(Informant1, 'Detective Pikachu has an informant who knows more about the mysterious vial. Meet with him in Saffron City.');
        detectivePikachuQuestLine.addQuest(searchForClues3);
        const mimeInterview = new DefeatTemporaryBattleQuest('Mime Interview', 'The informant is proving hard to convince. Time to get physical!');
        detectivePikachuQuestLine.addQuest(mimeInterview);
        const searchForClues4 = new TalkToNPCQuest(Informant2, 'The informant is finally willing to "talk", find out what he has to say.');
        detectivePikachuQuestLine.addQuest(searchForClues4);
        const undergroundFightingRing = new DefeatTemporaryBattleQuest('Underground Fighting Ring', 'Infiltrate the underground fighting ring.');
        detectivePikachuQuestLine.addQuest(undergroundFightingRing);
        const searchForClues5 = new TalkToNPCQuest(HowardClifford1, 'Go to Clifford Industries in Goldenrod City to demand some answers.');
        detectivePikachuQuestLine.addQuest(searchForClues5);
        const searchForClues6 = new TalkToNPCQuest(LucyStevens1, 'Meet up with investigative journalist Lucy Stevens in Hearthome City');
        detectivePikachuQuestLine.addQuest(searchForClues6);
        const searchForClues7 = new DefeatDungeonQuest(1, 0, 'P2 Laboratory').withDescription('Search the research laboratory for clues.');
        detectivePikachuQuestLine.addQuest(searchForClues7);
        const labAmbush = new DefeatTemporaryBattleQuest('Lab Ambush', 'It was an ambush! You have been followed to Nuvema Town, defeat the mysterious attackers and escape!');
        detectivePikachuQuestLine.addQuest(labAmbush);
        const searchForClues8 = new TalkToNPCQuest(Mewtwo1, 'Detective Pikachu is injured. He asks you to get help from his friend near Cerulean Cave');
        detectivePikachuQuestLine.addQuest(searchForClues8);
        const searchForClues9 = new TalkToNPCQuest(HowardClifford2, 'Confront Howard Clifford in Goldenrod City about his involvement with the R vials.');
        detectivePikachuQuestLine.addQuest(searchForClues9);
        const imposterAttack = new DefeatTemporaryBattleQuest('Imposter', 'Defeat Howard\'s bodyguard and escape.');
        detectivePikachuQuestLine.addQuest(imposterAttack);
        const howardConfront = new TalkToNPCQuest(HowardClifford3, 'Give Howard Clifford one last chance to surrender!');
        detectivePikachuQuestLine.addQuest(howardConfront);
        const possessedFight = new DefeatTemporaryBattleQuest('Possessed Mewtwo', 'Defeat Mewtwo to free it from Howard\'s control!');
        detectivePikachuQuestLine.addQuest(possessedFight);
        const searchForClues10 = new TalkToNPCQuest(Mewtwo2, 'Talk to Mewtwo near Cerulean Cave about Detective Pikachu\'s partner.');
        detectivePikachuQuestLine.addQuest(searchForClues10);
        const DetectiveRaichuReward = () => {
            App.game.party.gainPokemonByName('Detective Raichu', PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_REWARD));
            Notifier.notify({
                title: detectivePikachuQuestLine.name,
                message: 'Detective Pikachu\'s partner has been nursed back to health!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const searchForClues11 = new TalkToNPCQuest(DetectiveRaichu, 'Talk to Detective Raichu').withCustomReward(DetectiveRaichuReward);
        detectivePikachuQuestLine.addQuest(searchForClues11);
        App.game.quests.questLines().push(detectivePikachuQuestLine);
    }
    // Available after defeating Snowbelle City's Gym
    static createVivillonQuestLine() {
        const vivillonQuestLine = new QuestLine('The Great Vivillon Hunt!', 'Discover the beauty of Vivillon.', new GymBadgeRequirement(BadgeEnums.Iceberg), GameConstants.BulletinBoards.Kalos);
        const createVivillonQuest = (type, vivillon, hint) => {
            // Capture 100 Water type Pokemon
            const catchType = new CapturePokemonTypesQuest(100, 0, type).withDescription(`Capture or hatch 100 ${PokemonType[type]}-type Pokémon.`);
            vivillonQuestLine.addQuest(catchType);
            // Capture Vivillon in a dungeon
            const vivillonAdd = () => {
                Notifier.notify({
                    title: vivillonQuestLine.name,
                    message: `A Vivillon is hiding somewhere.\n${hint}`,
                    type: NotificationConstants.NotificationOption.info,
                });
            };
            const vivillonRemove = () => {
                Notifier.notify({
                    title: vivillonQuestLine.name,
                    message: `You caught the rare ${vivillon}!`,
                    type: NotificationConstants.NotificationOption.success,
                });
            };
            const catchVivillon = new CaptureSpecificPokemonQuest(vivillon).withCustomReward(vivillonRemove).withOnLoad(vivillonAdd).withDescription(`Find and capture the rare Vivillon!\nHint: ${hint}`);
            vivillonQuestLine.addQuest(catchVivillon);
        };
        createVivillonQuest(PokemonType.Water, 'Vivillon (Marine)', 'It has been spotted at some Lakes.');
        createVivillonQuest(PokemonType.Psychic, 'Vivillon (Modern)', 'It\'s surrounded by strong Pokémon.');
        createVivillonQuest(PokemonType.Poison, 'Vivillon (Jungle)', 'It has been spotted in a swamp.');
        createVivillonQuest(PokemonType.Dark, 'Vivillon (Monsoon)', 'It\'s hiding at a dark place.');
        createVivillonQuest(PokemonType.Steel, 'Vivillon (Tundra)', 'It flew into a factory.');
        createVivillonQuest(PokemonType.Fire, 'Vivillon (Sun)', 'It seems to like hot places.');
        createVivillonQuest(PokemonType.Fighting, 'Vivillon (Archipelago)', 'It\'s sitting on a swaying pillar.');
        createVivillonQuest(PokemonType.Ghost, 'Vivillon (Elegant)', 'It\'s visiting an abandoned and spooky place.');
        createVivillonQuest(PokemonType.Fairy, 'Vivillon (Ocean)', 'It\'s flying around an overgrown place full of dreams.');
        createVivillonQuest(PokemonType.Electric, 'Vivillon (Continental)', 'It\'s currently in a City full of Electric-type Pokémon.');
        createVivillonQuest(PokemonType.Bug, 'Vivillon (River)', 'It hides in a dark Forest.');
        createVivillonQuest(PokemonType.Flying, 'Vivillon (Polar)', 'It\'s high up in the sky.');
        createVivillonQuest(PokemonType.Ground, 'Vivillon (Sandstorm)', 'It got lost in the desert sand.');
        createVivillonQuest(PokemonType.Grass, 'Vivillon (Garden)', 'It only shows up amongst the most beautiful flowers.');
        createVivillonQuest(PokemonType.Rock, 'Vivillon (High Plains)', 'It has been spotted dancing in the moonlight.');
        createVivillonQuest(PokemonType.Dragon, 'Vivillon (Savanna)', 'It\'s surrounded by dragons.');
        createVivillonQuest(PokemonType.Ice, 'Vivillon (Icy Snow)', 'It can be found at a very cold place.');
        // Capture 200 Normal type Pokemon
        const catchNormal = new CapturePokemonTypesQuest(200, 0, PokemonType.Normal).withDescription('Capture or hatch 200 Normal-type Pokémon.');
        vivillonQuestLine.addQuest(catchNormal);
        // Capture Vivillon (Pokéball)
        const viviBallAdd = () => {
            Notifier.notify({
                title: vivillonQuestLine.name,
                message: 'A Vivillon is hiding somewhere.\nOnly the strongest Challengers can reach it.',
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const viviBalldone = () => {
            Notifier.notify({
                title: vivillonQuestLine.name,
                message: 'You caught the last rare Vivillon (Poké Ball).\nCongratulations!',
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const catchBall = new CaptureSpecificPokemonQuest('Vivillon (Poké Ball)').withDescription('Find and capture the rare Vivillon!\nHint: Only the strongest Challengers can reach it.').withCustomReward(viviBalldone).withOnLoad(viviBallAdd);
        vivillonQuestLine.addQuest(catchBall);
        // Add quest to quest line
        App.game.quests.questLines().push(vivillonQuestLine);
    }
    // Available post-E4, must have captured Doublade
    static createPrincessDiancieQuestLine() {
        const princessDiancieQuestLine = new QuestLine('Princess Diancie', 'Princess Diancie has been spotted in Kalos! She\'s searching for something.', new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Elite_Malva), new GymBadgeRequirement(BadgeEnums.Elite_Siebold), new GymBadgeRequirement(BadgeEnums.Elite_Wikstrom), new GymBadgeRequirement(BadgeEnums.Elite_Drasna)]), GameConstants.BulletinBoards.Kalos);
        const catchFairy = new CapturePokemonTypesQuest(100, 0, PokemonType.Fairy).withDescription('Capture or hatch 100 Fairy-type Pokémon to follow Diancie\'s Fairy Aura.');
        princessDiancieQuestLine.addQuest(catchFairy);
        const fightRiot = new DefeatTemporaryBattleQuest('Riot', 'Defend Diancie from the attacking ninja in Shalour City.');
        princessDiancieQuestLine.addQuest(fightRiot);
        const fightMerilyn = new DefeatTemporaryBattleQuest('Merilyn', 'Diancie has escaped to the shopping mall in Lumiose City, but is under attack again!');
        princessDiancieQuestLine.addQuest(fightMerilyn);
        const diamondDomain = new MineLayersQuest(5, 0).withDescription('Diancie has fled to the Diamond Domain. Dig in the Underground to find it.');
        princessDiancieQuestLine.addQuest(diamondDomain);
        const fightSteels = new DefeatTemporaryBattleQuest('Millis and Argus Steel', 'Millis and Argus Steel let you do the hard work while they set up an ambush in Shalour City.');
        princessDiancieQuestLine.addQuest(fightSteels);
        const bladeForme = new TalkToNPCQuest(ExamineAegislash, 'Millis and Argus Steel fled but their Aegislash stayed behind. Look for it in Shalour City and find out what it wants!');
        princessDiancieQuestLine.addQuest(bladeForme);
        const heartDiamond = new GainGemsQuest(1000, 0, PokemonType.Fairy).withCustomReward(() => ItemList.Heart_Diamond_Diancie.gain(1)).withDescription('Diancie needs help building a Heart Diamond to stabilize the Diamond Domain. Gather some Fairy Gems for her.');
        princessDiancieQuestLine.addQuest(heartDiamond);
        const thanksDiancie = new TalkToNPCQuest(ThanksDiancie, 'Talk to Princess Diancie in Shalour City.');
        princessDiancieQuestLine.addQuest(thanksDiancie);
        const DiancieCatch = new CaptureSpecificPokemonQuest('Diancie').withDescription('Capture Diancie in Reflection Cave.');
        princessDiancieQuestLine.addQuest(DiancieCatch);
        const fightYveltal = new DefeatTemporaryBattleQuest('Rampaging Yveltal', 'A rampaging Yveltal is threatening the Diamond Domain! Help Diancie defeat it!');
        princessDiancieQuestLine.addQuest(fightYveltal);
        App.game.quests.questLines().push(princessDiancieQuestLine);
    }
    static createClashOfAgesQuestLine() {
        const clashOfAgesQuestLine = new QuestLine('Clash of Ages', 'Hoopa is up to something mischievous...', new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion), GameConstants.BulletinBoards.Kalos);
        const catchHoopa = new CaptureSpecificPokemonQuest('Hoopa').withDescription('Catch Hoopa to learn more.');
        clashOfAgesQuestLine.addQuest(catchHoopa);
        const talkToBaraz1 = new TalkToNPCQuest(Baraz1, 'Talk to Baraz in Kiloude City.');
        clashOfAgesQuestLine.addQuest(talkToBaraz1);
        const hoopaBeatPsychic = new CustomQuest(100, 0, 'Defeat 100 Psychic-type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Psychic)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        clashOfAgesQuestLine.addQuest(hoopaBeatPsychic);
        const talkToBaraz2 = new TalkToNPCQuest(Baraz2, 'That didn\'t work. Talk to Baraz in Kiloude City.');
        clashOfAgesQuestLine.addQuest(talkToBaraz2);
        const hoopaCatchPsychic = new CapturePokemonTypesQuest(100, 0, PokemonType.Psychic);
        clashOfAgesQuestLine.addQuest(hoopaCatchPsychic);
        const talkToBaraz3 = new TalkToNPCQuest(Baraz3, 'That didn\'t work either. Talk to Baraz in Kiloude City.');
        clashOfAgesQuestLine.addQuest(talkToBaraz3);
        const hoopaID = PokemonHelper.getPokemonByName('Hoopa').id;
        const catch100Hoopa = new CustomQuest(100, 0, 'Catch 100 Hoopa.', () => 100 * (App.game.statistics.pokemonCaptured[hoopaID]() - App.game.statistics.pokemonHatched[hoopaID]()));
        clashOfAgesQuestLine.addQuest(catch100Hoopa);
        const talkToBaraz4 = new TalkToNPCQuest(Baraz4, 'This is ridiculous. Talk to Baraz in Kiloude City.').withCustomReward(() => ItemList.Prison_Bottle.gain(1));
        clashOfAgesQuestLine.addQuest(talkToBaraz4);
        const clearHoopa1 = new DefeatTemporaryBattleQuest('Hoopa 1', 'Defeat the Unbound Hoopa and its summoned defenders near Kiloude City.');
        clashOfAgesQuestLine.addQuest(clearHoopa1);
        const clearHoopa2 = new DefeatTemporaryBattleQuest('Hoopa 2', 'Defeat the Unbound Hoopa and its summoned defenders near Shalour City.');
        clashOfAgesQuestLine.addQuest(clearHoopa2);
        const clearHoopa3 = new DefeatTemporaryBattleQuest('Hoopa 3', 'Defeat the Unbound Hoopa and its summoned defenders near Lumiose City.');
        clashOfAgesQuestLine.addQuest(clearHoopa3);
        const clearHoopa4 = new DefeatTemporaryBattleQuest('Hoopa 4', 'Defeat the Unbound Hoopa and its summoned defenders near Anistar City.');
        clashOfAgesQuestLine.addQuest(clearHoopa4);
        const clearHoopa5 = new DefeatTemporaryBattleQuest('Hoopa 5', 'Defeat the Unbound Hoopa and its summoned defenders near Laverre City.');
        clashOfAgesQuestLine.addQuest(clearHoopa5);
        const clearHoopa6 = new DefeatTemporaryBattleQuest('Hoopa 6', 'Defeat the Unbound Hoopa near Kiloude City, this time for real.');
        clashOfAgesQuestLine.addQuest(clearHoopa6);
        App.game.quests.questLines().push(clashOfAgesQuestLine);
    }
    static createUnrivaledPowerQuestLine() {
        const unrivaledPowerQuestLine = new QuestLine('An Unrivaled Power', 'It has been said that Mewtwo can Mega Evolve. Search for clues on how to find its Mega Stones, so you can control this unrivaled power.', new MultiRequirement([new ObtainedPokemonRequirement('Mewtwo'), new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)]), GameConstants.BulletinBoards.Kalos);
        const clearUnrivaledRed = new DefeatTemporaryBattleQuest('Unrivaled Red', 'Red might know something. Fight him at Indigo Plateau Kanto then ask him what he knows.');
        unrivaledPowerQuestLine.addQuest(clearUnrivaledRed);
        const defeatUnrivaledPsychic = new CustomQuest(1500, 0, 'Defeat 1500 Psychic-type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Psychic)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        const catchUnrivaledPsychic = new CapturePokemonTypesQuest(600, 0, PokemonType.Psychic);
        const defeatUnrivaledFighting = new CustomQuest(750, 0, 'Defeat 750 Fighting-type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Fighting)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        const catchUnrivaledFighting = new CapturePokemonTypesQuest(300, 0, PokemonType.Fighting);
        unrivaledPowerQuestLine.addQuest(new MultipleQuestsQuest([
            defeatUnrivaledPsychic,
            catchUnrivaledPsychic,
            defeatUnrivaledFighting,
            catchUnrivaledFighting,
        ], '.....right. Of course..... Well, you have no leads for now, so may as well defeat and catch some Psychic and Fighting-type Pokémon.'));
        const clearUnrivaledBlue = new DefeatTemporaryBattleQuest('Unrivaled Blue', 'Blue has contacted you, saying he knows something but wants a fight first. He is at Viridian City.');
        unrivaledPowerQuestLine.addQuest(clearUnrivaledBlue);
        const talkToUnrivaledBlue = new TalkToNPCQuest(UnrivaledBlue, 'Talk to Blue in Viridian City.');
        unrivaledPowerQuestLine.addQuest(talkToUnrivaledBlue);
        const clear150CeruleanCave = new DefeatDungeonQuest(150, 0, 'Cerulean Cave').withDescription('Look for Blue\'s old rival in Cerulean Cave');
        unrivaledPowerQuestLine.addQuest(clear150CeruleanCave);
        const talkToUnrivaledGreen1 = new TalkToNPCQuest(UnrivaledGreen1, 'You eventually found a trainer standing where Mewtwo once did in Cerulean Cave. Talk to Green.');
        unrivaledPowerQuestLine.addQuest(talkToUnrivaledGreen1);
        const clearUnrivaledGreen = new DefeatTemporaryBattleQuest('Unrivaled Green', 'It seems Green is irritated that you caught Mewtwo before she could. Defeat her in Cerulean Cave.');
        unrivaledPowerQuestLine.addQuest(clearUnrivaledGreen);
        const MewtwoniteXReward = () => {
            player.gainMegaStone(GameConstants.MegaStoneType.Mewtwonite_X);
            Notifier.notify({
                title: unrivaledPowerQuestLine.name,
                message: 'You received Mewtwonite X from Green!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const talkToUnrivaledGreen2 = new TalkToNPCQuest(UnrivaledGreen2, 'Talk to Green in Cerulean Cave.').withCustomReward(MewtwoniteXReward);
        unrivaledPowerQuestLine.addQuest(talkToUnrivaledGreen2);
        const talkToAnomalyMewtwo1 = new TalkToNPCQuest(AnomalyMewtwo1, 'Talk to Anomaly Mewtwo in Cerulean Cave.');
        unrivaledPowerQuestLine.addQuest(talkToAnomalyMewtwo1);
        const clearAnomalyMewtwo1 = new DefeatTemporaryBattleQuest('Anomaly Mewtwo 1', 'Mewtwo wishes to find a place it can live undisturbed. You know of such a place, but it seems unwilling to listen. Defeat Anomaly Mewtwo near Cerulean Cave so you may attempt to talk to it.');
        unrivaledPowerQuestLine.addQuest(clearAnomalyMewtwo1);
        const clearAnomalyMewtwo2 = new DefeatTemporaryBattleQuest('Anomaly Mewtwo 2', 'It escaped to the west. Defeat Anomaly Mewtwo again.');
        unrivaledPowerQuestLine.addQuest(clearAnomalyMewtwo2);
        const clearAnomalyMewtwo3 = new DefeatTemporaryBattleQuest('Anomaly Mewtwo 3', 'It changed form and flew off in the direction of the sea. Defeat Anomaly Mewtwo yet again.');
        unrivaledPowerQuestLine.addQuest(clearAnomalyMewtwo3);
        const clearAnomalyMewtwo4 = new DefeatTemporaryBattleQuest('Anomaly Mewtwo 4', 'It flew off to the peak of a great mountain. Defeat Anomaly Mewtwo yet again.');
        unrivaledPowerQuestLine.addQuest(clearAnomalyMewtwo4);
        const clearAnomalyMewtwo5 = new DefeatTemporaryBattleQuest('Anomaly Mewtwo 5', 'It flew off to a faraway region to hide in a large city. Defeat Anomaly Mewtwo yet again.');
        unrivaledPowerQuestLine.addQuest(clearAnomalyMewtwo5);
        const talkToAnomalyMewtwo2 = new TalkToNPCQuest(AnomalyMewtwo2, 'Talk to Anomaly Mewtwo in Pokémon Village.');
        unrivaledPowerQuestLine.addQuest(talkToAnomalyMewtwo2);
        const findGreatTwistedSpoon = new CustomQuest(1, 0, 'Find the Great Twisted Spoon in P2 Lab.', () => player.itemList.Great_Twisted_Spoon());
        const unrivaledPsychicGems = new GainGemsQuest(60000, 0, PokemonType.Psychic);
        const unrivaledFightingGems = new GainGemsQuest(60000, 0, PokemonType.Fighting);
        unrivaledPowerQuestLine.addQuest(new MultipleQuestsQuest([
            findGreatTwistedSpoon,
            unrivaledPsychicGems,
            unrivaledFightingGems,
        ], 'Gather the Great Twisted Spoon, Psychic Gems, and Fighting Gems for Mewtwo.'));
        const talkToAnomalyMewtwo3 = new TalkToNPCQuest(AnomalyMewtwo3, 'Talk to Anomaly Mewtwo in Pokémon Village.');
        unrivaledPowerQuestLine.addQuest(talkToAnomalyMewtwo3);
        const clearAnomalyMewtwo6 = new DefeatDungeonBossQuest('Pokémon Village', 'Anomaly Mewtwo').withDescription('Defeat Anomaly Mewtwo in Pokémon Village.');
        unrivaledPowerQuestLine.addQuest(clearAnomalyMewtwo6);
        const MewtwoniteYReward = () => {
            player.gainMegaStone(GameConstants.MegaStoneType.Mewtwonite_Y);
            Notifier.notify({
                title: unrivaledPowerQuestLine.name,
                message: 'You received Mewtwonite Y from Anomaly Mewtwo!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const talkToAnomalyMewtwo4 = new TalkToNPCQuest(AnomalyMewtwo4, 'Talk to Anomaly Mewtwo in Pokémon Village.').withCustomReward(MewtwoniteYReward);
        unrivaledPowerQuestLine.addQuest(talkToAnomalyMewtwo4);
        App.game.quests.questLines().push(unrivaledPowerQuestLine);
    }
    /* Alola QuestLines */
    // Melemele Island guide - Started upon deafting Hau 1
    static createMelemeleAlolaQuestLine() {
        const melemeleAlolaQuestLine = new QuestLine('Welcome to Paradise, Cousin!', 'Time to kick off your Alolan vacation! See the sights around Melemele Island.');
        // 0 - Temp Battle: Melemele Spearow
        const battleMelemeleSpearow = new DefeatTemporaryBattleQuest('Melemele Spearow', 'Protect the mysterious girl\'s Pokémon! Battle the Spearow near the Ruins of Conflict.')
            .withOptionalArgs({
            clearedMessage: '<i>The bridge collapses and you and the floating Pokémon start falling to your doom... But you are saved by a mysterious Pokémon!</i>',
            npcDisplayName: 'Melemele Guardian',
            npcImageName: '../pokemon/785',
        });
        melemeleAlolaQuestLine.addQuest(battleMelemeleSpearow);
        // 1 - Talk to NPC: Lillie 1
        const talkToLillie1 = new TalkToNPCQuest(Lillie1, 'Ask the mysterious girl if she\'s okay.');
        melemeleAlolaQuestLine.addQuest(talkToLillie1);
        // 2 - Clear dungeon: Trainers' School
        const clearTrainersSchool = new DefeatDungeonQuest(1, 0, 'Trainers\' School').withDescription('Follow Lillie to the Trainers\' School dungeon and clear it.')
            .withOptionalArgs({
            clearedMessage: 'You seemed to be in perfect sync with your Pokémon—weren\'t you? Um... Since we\'ve come this far together, why don\'t I show you some more of the city?',
            npcDisplayName: 'Lillie',
            npcImageName: 'Lillie',
        });
        melemeleAlolaQuestLine.addQuest(clearTrainersSchool);
        // 3 - Temp Battle: Skull 1
        const battleSkullGrunts1 = new DefeatTemporaryBattleQuest('Skull 1', 'Beat up the Team Skull grunts loitering on Hau\'oli City\'s Dock.')
            .withOptionalArgs({
            clearedMessage: 'My thanks to you and your Pokémon. These grunts are always bothering me and my trial site. You... you\'re the trainer who cleared the Trainers\' School so effortlessly! Allow me to see if you\'re ready for my trial!',
            npcDisplayName: 'Ilima',
            npcImageName: 'Ilima',
        });
        melemeleAlolaQuestLine.addQuest(battleSkullGrunts1);
        // 4 - Temp Battle: Ilima
        const battleIlima = new DefeatTemporaryBattleQuest('Ilima', 'Battle Ilima in Hau\'oli City.');
        melemeleAlolaQuestLine.addQuest(battleIlima);
        // 5 - Clear dungeon boss: Verdant Cavern, Ilima's Trial
        this.createZCrystalTrial(PokemonType.Normal, 'Verdant Cavern', 'Ilima', 'What an incredible Trainer you are! The Z-Crystal from the pedestal is yours now! It is known as Normalium Z!', melemeleAlolaQuestLine);
        // 6 - Clear dungeon: Melemele Meadow
        const clearMelemeleMeadow = new DefeatDungeonQuest(1, 0, 'Melemele Meadow').withDescription('Lillie needs your help. Continue past Route 3 and clear Melemele Meadow.')
            .withOptionalArgs({
            clearedMessage: 'Pew!<br><br><i>Nebby flees.</i>',
            npcDisplayName: 'Nebby',
            npcImageName: '../pokemon/789',
        });
        melemeleAlolaQuestLine.addQuest(clearMelemeleMeadow);
        // 7 - Clear dungeon: Seaward Cave
        const clearSeawardCave = new DefeatDungeonQuest(1, 0, 'Seaward Cave').withDescription('Nebby escaped into a hole! Clear the Seaward Cave dungeon.')
            .withOptionalArgs({
            clearedMessage: 'Pew~<br><br><i>Nebby stays. It seems like it\'s following you now!</i>',
            npcDisplayName: 'Nebby',
            npcImageName: '../pokemon/789',
        });
        melemeleAlolaQuestLine.addQuest(clearSeawardCave);
        // 8 - Temp Battle: Recon Squad 1
        const battleReconSquad1Reward = () => {
            MapHelper.moveToTown('Melemele Meadow');
        };
        const battleReconSquad1 = new DefeatTemporaryBattleQuest('Recon Squad 1', 'The Ultra Recon Squad is awaiting a battle in Seaward Cave. Show them the thrill of the fight!').withCustomReward(battleReconSquad1Reward)
            .withOptionalArgs({
            clearedMessage: 'That one you have come to collect... You must know that it is able to warp away when threatened, but the holes that are created when it does so leave a path open to dangerous beings. Be careful of who you trust it to.',
            npcDisplayName: 'Phyco',
            npcImageName: 'Phyco',
        });
        melemeleAlolaQuestLine.addQuest(battleReconSquad1);
        // 9 - Talk to NPC: Lillie2
        const talkToLillie2 = new TalkToNPCQuest(Lillie2, 'Return Nebby to Lillie in Melemele Meadow.');
        melemeleAlolaQuestLine.addQuest(talkToLillie2);
        // 10 - Talk to NPC: Lillie3
        const talkToLillie3 = new TalkToNPCQuest(Lillie3, 'Lillie still has something on her mind. Talk to her in Iki Town.').withCustomReward(this.itemReward('Revive', 10, 'Lillie'));
        melemeleAlolaQuestLine.addQuest(talkToLillie3);
        // 11 - Gym Battle: Hala
        // reward defined at the end of this file
        const battleKahunaHala = new DefeatGymQuest(1, 0, 'Iki Town').withDescription('Defeat Hala in Iki Town to complete Melemele\'s Grand Trial!').withCustomReward(this.zCrystalGet(PokemonType.Fighting));
        melemeleAlolaQuestLine.addQuest(battleKahunaHala);
        // end - Clear dungeon boss: Ten Carat Hill, Flyinium Z Trial
        this.createZCrystalTrial(PokemonType.Flying, 'Ten Carat Hill', 'Kahili', 'Hello there. There\'s a wonderful breeze blowing out here today. The glistening Flyinium Z... It\'s yours now. Use it well.', melemeleAlolaQuestLine, true, 'There is one more Z Crystal on Ten Carat Hill. Find the Trial Site and claim it!', 'Trial Site of Ten Carat Hill');
        App.game.quests.questLines().push(melemeleAlolaQuestLine);
    }
    // Akala Island guide - Started upon deafting Sina and Dexio
    static createAkalaAlolaQuestLine() {
        const akalaAlolaQuestLine = new QuestLine('Symbiotic Relations', 'Help Lillie and Nebby on Akala Island and meet some friendly faces.');
        // 0 - Talk to NPC: Lillie4
        const talkToLillie4 = new TalkToNPCQuest(Lillie4, 'Plan out your course of action with Lillie in Heahea City.');
        akalaAlolaQuestLine.addQuest(talkToLillie4);
        // 1 - Clear dungeon boss: Brooklet Hill, Lana's Trial
        this.createZCrystalTrial(PokemonType.Water, 'Brooklet Hill', 'Lana', 'Very well done! You do know what this is, don\'t you? Please take this Waterium Z.', akalaAlolaQuestLine);
        // 2 - Temp battle: Recon Squad 2
        const battleReconSquad2 = new DefeatTemporaryBattleQuest('Recon Squad 2', 'The Ultra Recon Squad is investigating an oddly familiar tree. Go check it out on Route 5.')
            .withOptionalArgs({
            clearedMessage: 'That must have been the Pokémon known as Sudowoodo. Our research is insufficient to define what it means to be a Pokémon Trainer... We\'ll never be able to stop the Blinding One like this...',
            npcDisplayName: 'Dulse',
            npcImageName: 'Dulse',
        });
        akalaAlolaQuestLine.addQuest(battleReconSquad2);
        // 3 - Temp battle: Skull 3
        const clearSkull3 = new DefeatTemporaryBattleQuest('Skull 3', 'Team Skull is causing trouble on Route 6! Looks like they haven\'t learned their lesson.')
            .withOptionalArgs({
            clearedMessage: 'Give me your name, Trainer. $playername$, eh? That\'s a fine name. I like the way you handled yourself in battle. Perhaps we\'ll meet again someday.',
            npcDisplayName: 'Hapu',
            npcImageName: 'Hapu',
        });
        akalaAlolaQuestLine.addQuest(clearSkull3);
        // 4 - Clear dungeon boss: Wela Volcano Park, Kiawe's Trial
        this.createZCrystalTrial(PokemonType.Fire, 'Wela Volcano Park', 'Kiawe', 'Whoa! S-spectacular! That Pokémon was protecting this Firium Z. Now it is yours.', akalaAlolaQuestLine);
        // 5 - Clear dungeon boss: Lush Jungle, Mallow's Trial
        this.createZCrystalTrial(PokemonType.Grass, 'Lush Jungle', 'Mallow', 'Wow, you\'re even stronger than I thought! Looks like you\'ve cleared all three of Akala\'s trials! Here! A gift for such an inspiring young Trainer!', akalaAlolaQuestLine);
        // 6 - Talk to NPC: ProfBurnetAlola
        const talkToBurnet1 = new TalkToNPCQuest(ProfBurnetAlola1, 'Talk to Professor Burnet in Heahea City after you\'ve finished exploring Lush Jungle.').withCustomReward(this.itemReward('Rare_Candy', 10, 'Professor Burnet'));
        akalaAlolaQuestLine.addQuest(talkToBurnet1);
        // 7 - Clear dungeon: Diglett's tunnel
        const clearDiglettsTunnel = new DefeatDungeonQuest(1, 0, 'Diglett\'s Tunnel').withDescription('You hear the echoes of bad rap and low self-esteem in the distance. Clear Diglett\'s Tunnel.')
            .withOptionalArgs({
            clearedMessage: 'Just when things were startin\' to heat up, yo, I got surrounded by Diglett and beat up, yo!',
            npcDisplayName: 'Team Skull',
            npcImageName: 'Team Skull Grunts (both)',
        });
        akalaAlolaQuestLine.addQuest(clearDiglettsTunnel);
        // 8 - Gym battle: Olivia
        const battleKahunaOlivia = new DefeatGymQuest(1, 0, 'Konikoni City').withDescription('Reach Kahuna Olivia and Lillie at the Ruins of Life and complete Akala\'s Grand Trial!').withCustomReward(this.zCrystalGet(PokemonType.Rock));
        akalaAlolaQuestLine.addQuest(battleKahunaOlivia);
        // end - Temp battle: Ultra Wormhole
        const clearUltraWormhole = new DefeatTemporaryBattleQuest('Ultra Wormhole', 'A strange creature has appeared in Aether Paradise. Make it go away. Clear the Ultra Wormhole.')
            .withOptionalArgs({
            clearedMessage: 'Why so shocked? Was it your first time seeing an Ultra Beast? Those mysterious creatures that live beyond the Ultra Wormholes, the holes that suddenly open in the sky and lead to Ultra Space... It would serve you well to remember this.',
            npcDisplayName: 'Phyco',
            npcImageName: 'Phyco',
        });
        akalaAlolaQuestLine.addQuest(clearUltraWormhole);
        App.game.quests.questLines().push(akalaAlolaQuestLine);
    }
    // Ula'ula Island guide - Started upon defeating Hau in Malie
    static createUlaulaAlolaQuestLine() {
        const ulaulaAlolaQuestLine = new QuestLine('Child of the Stars', 'Learn more about Nebby\'s origins with Lillie on Ula\'Ula Island.');
        // 0 - Talk to NPC: Lillie
        const talkeToLillie5 = new TalkToNPCQuest(Lillie5, 'Read about the legends of Alola with Lillie in Malie City.');
        ulaulaAlolaQuestLine.addQuest(talkeToLillie5);
        // 1 - Temp Battle: Skull 4
        const battleSkull4 = new DefeatTemporaryBattleQuest('Skull 4', 'Team Skull are trying to steal a bus stop sign on Route 10! This misdeed won\'t go unpunished!');
        ulaulaAlolaQuestLine.addQuest(battleSkull4);
        // 2 - Clear dungeon boss: Hokulani Observatory, Sophocles' Trial
        this.createZCrystalTrial(PokemonType.Electric, 'Hokulani Observatory', 'Sophocles', 'That Pokémon was really something else! Here, I\'ll give you this Electrium Z to reward you for beating it.', ulaulaAlolaQuestLine);
        // 3 - Defeat dungeon boss: Guzma, Malie Garden
        const defeatGuzmaMalieGarden = new DefeatDungeonBossQuest('Malie Garden', 'Team Skull Boss Guzma').withDescription('Team Skull are being annoying. Get rid of them. Beat their boss Guzma in the Malie Garden dungeon.');
        ulaulaAlolaQuestLine.addQuest(defeatGuzmaMalieGarden);
        // 4 - Temp battle: Skull 5
        const battleSkull5 = new DefeatTemporaryBattleQuest('Skull 5', 'Lillie has run into a Team Skull grunt at Aether House. Politely beat up his Pokémon.')
            .withOptionalArgs({
            clearedMessage: 'I just wanted to go for a stroll on my own, to see what it must feel like to be a Trainer... So Hapu and I went our separate ways... but then Nebby tried to get out of my bag...',
            npcDisplayName: 'Lillie',
            npcImageName: 'Lillie',
        });
        ulaulaAlolaQuestLine.addQuest(battleSkull5);
        // 5 - Clear dungeon boss: Thrifty Megamart, Acerola's Trial
        this.createZCrystalTrial(PokemonType.Ghost, 'Thrifty Megamart', 'Acerola', 'Welcome back! Now let\'s see how you did... Yup! You passed my trial! Here you go!', ulaulaAlolaQuestLine);
        // 6 - Clear dungeon boss: Po Town
        this.createZCrystalTrial(PokemonType.Bug, 'Po Town', 'Guzma', '<i>There is a chest full of Bug-type Z-Crystals next to Guzma. You obtained a Buginium Z!<i>', ulaulaAlolaQuestLine, true, 'Team Skull have stolen the Yungoos from Aether House. Raid their base. Clear the Po Town dungeon.', 'Team Skull Boss Guzma');
        // 7 - Temp Battle: Gladion 2
        const battleGladion2Reward = () => {
            MapHelper.moveToTown('Malie City');
        };
        const battleGladion2 = new DefeatTemporaryBattleQuest('Gladion 2', 'Team Skull have stolen Nebby! Battle Gladion at Aether House.').withCustomReward(battleGladion2Reward);
        ulaulaAlolaQuestLine.addQuest(battleGladion2);
        // 8 - Gym battle: Nanu
        const battleKahunaNanu = new DefeatGymQuest(1, 0, 'Malie City').withDescription('Kahuna Nanu is challenging you to a Grand Trial in Malie City! Test your strength before you go to Aether by defeating him.').withCustomReward(this.zCrystalGet(PokemonType.Dark));
        ulaulaAlolaQuestLine.addQuest(battleKahunaNanu);
        // 9 - Clear dungeon: Aether Foundation
        const clearAetherFoundation1 = new DefeatDungeonQuest(1, 0, 'Aether Foundation').withDescription('Aether president Lusamine has recruited Team Skull and is using Nebby to open an Ultra Wormhole. Stop her. Clear the Aether Foundation dungeon.')
            .withOptionalArgs({
            clearedMessage: 'That Lusamine! We will need you to leave us in peace so that we may do our job. Please don\'t get in our way. Leave Cosmog to us.',
            npcDisplayName: 'Ultra Recon Squad',
            npcImageName: 'specialNPCs/Ultra Recon Squad (all)',
        });
        ulaulaAlolaQuestLine.addQuest(clearAetherFoundation1);
        // 10 - Clear dungeon boss: Aether Branch Chief Faba
        const clearAetherFoundation2 = new DefeatDungeonBossQuest('Aether Foundation', 'Aether Branch Chief Faba', 0).withDescription('Aether Branch Faba\'s ego is blocking your way. Defeat him in the Aether Foundation dungeon to get closer to Lusamine.')
            .withOptionalArgs({
            clearedMessage: 'H-h-how can this be?! How could this child... If you\'re looking for Cosmog, I suppose it might be downstairs.',
            npcDisplayName: 'Faba',
            npcImageName: 'Aether Branch Chief (faba)',
        });
        ulaulaAlolaQuestLine.addQuest(clearAetherFoundation2);
        // 11 - Clear dungeon boss: Team Skull Boss Guzma
        const clearAetherFoundation3 = new DefeatDungeonBossQuest('Aether Foundation', 'Team Skull Boss Guzma', 0).withDescription('Ya boy Guzma is here. Defeat him in the Aether Foundation dungeon. Lusamine is next.')
            .withOptionalArgs({
            clearedMessage: 'The daughter who stole my Cosmog from me and the son who took my Type: Null! All I ever did was give you two all the love I had, and all you did was betray me! You have no right to ask for my attention now!</br>But it doesn\'t matter now. None of that matters now! Watch... I will open the Ultra Wormhole for you... Come to me, my sweet beast!',
            npcDisplayName: 'Lusamine',
            npcImageName: 'Aether President (lusamine)',
        });
        ulaulaAlolaQuestLine.addQuest(clearAetherFoundation3);
        // 12 - Clear dungeon boss: Aether President Lusamine
        const clearAetherFoundation4 = new DefeatDungeonBossQuest('Aether Foundation', 'Aether President Lusamine', 0).withDescription('Lusamine is using Nebby to open an Ultra Wormhole! Defeat her in the Aether Foundation dungeon to put a stop to this.')
            .withOptionalArgs({
            clearedMessage: 'All that I want is my precious beast! I don\'t care about any of the rest of you! I don\'t care if you are my child or not! If you\'re not beautiful enough to be worthy of my love, then I don\'t NEED you!</br></br><i>Lusamine left into the Ultra Wormhole.</i></br><img src="assets/images/npcs/specialNPCs/Wormhole.png"></img>',
            npcDisplayName: 'Lusamine',
            npcImageName: 'Aether President (lusamine)',
        });
        ulaulaAlolaQuestLine.addQuest(clearAetherFoundation4);
        // 13 - Talk to NPC: Lillie and Gladion
        const AlolaMasterballReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: ulaulaAlolaQuestLine.name,
                message: 'Gladion gave you a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const EmissaryOfLightReward = () => {
            App.game.quests.getQuestLine('Emissary of Light').beginQuest(0, undefined, true);
        };
        const talkToLillie6 = new TalkToNPCQuest(Lillie6, 'Talk to Lillie.');
        const talktoGladion1 = new TalkToNPCQuest(Gladion1, 'Talk to Gladion.').withCustomReward(AlolaMasterballReward);
        ulaulaAlolaQuestLine.addQuest(new MultipleQuestsQuest([
            talkToLillie6,
            talktoGladion1,
        ], 'Talk to Lillie and Gladion at Aether Paradise when you\'re ready to go to the next island.').withCustomReward(EmissaryOfLightReward));
        // 14 - Temp battle: Haina Desert, Psychium Z
        const getPsychiumZ = new DefeatTemporaryBattleQuest('Psychium Z Trial', 'There are more Z Crystals on Ula\'ula. Find the Trial Site hidden in Haina Desert after clearing the Route.').withInitialValue(0);
        ulaulaAlolaQuestLine.addQuest(getPsychiumZ);
        // end - Temp battle: Molayne, Steelium Z
        const getSteeliumZ = new DefeatTemporaryBattleQuest('Molayne', 'Get the Steelium Z. Defeat Molayne in Hokulani Observatory.').withInitialValue(0);
        ulaulaAlolaQuestLine.addQuest(getSteeliumZ);
        App.game.quests.questLines().push(ulaulaAlolaQuestLine);
    }
    // Poni Island guide - Started upon finishing Child of the Stars (Ula'ula quest)
    static createPoniAlolaQuestLine() {
        const poniAlolaQuestLine = new QuestLine('Emissary of Light', 'Seek out the Pokémon of Alola\'s legends on Poni Island.');
        // 0 - Route Kill: Clear Alola 25, Ancient Poni Path
        const alolaRoute25 = new DefeatPokemonsQuest(10, 0, 25, GameConstants.Region.alola, 'Explore Poni Island for signs of its kahuna. Clear Ancient Poni Path.')
            .withOptionalArgs({
            clearedMessage: 'Oh! Been a while, friends. The kahuna? Hrmm. Well, I suppose the time might be right now... All right. Let us all proceed to the ruins. You stick with me, you two.',
            npcDisplayName: 'Hapu',
            npcImageName: 'Hapu',
        });
        poniAlolaQuestLine.addQuest(alolaRoute25);
        // 1 - Talk to NPC: HapuHope
        const talkeToHapuHope = new TalkToNPCQuest(HapuHope, 'Talk to Hapu at the Ruins of Hope.');
        poniAlolaQuestLine.addQuest(talkeToHapuHope);
        // 2 - Clear dungeon: Exeggutor Island Hill
        const clearExeggutorIslandHill = new DefeatDungeonQuest(1, 0, 'Exeggutor Island Hill').withDescription('Hapu has permitted you to visit sacred ground. Find the other flute by clearing Exeggutor Island Hill.')
            .withOptionalArgs({
            clearedMessage: 'Now we have both the Sun Flute and the Moon Flute!</br><img src="assets/images/items/fluteItem/Sun_Flute.png"/><img src="assets/images/items/fluteItem/Moon_Flute.png"/>',
            npcDisplayName: 'Lillie',
            npcImageName: 'Lillie (z powered)',
        });
        poniAlolaQuestLine.addQuest(clearExeggutorIslandHill);
        // 3 - Temp Battle: Skull 6
        const battleSkullGrunts6 = new DefeatTemporaryBattleQuest('Skull 6', 'Team Skull are being annoying again. Settle the score with them near Vast Poni Canyon.')
            .withCustomReward(this.zCrystalGet(PokemonType.Poison))
            .withOptionalArgs({
            clearedMessage: 'That\'s enough, grunts. No one wants to see a sore loser.</br></br>You. To be honest, I\'ve treated you really badly. Even if I apologize, I know it\'s probably too late for you to forgive me. This is my way of saying sorry, OK? Take it. It\'s Poisonium Z.</br><img width="100" src="assets/images/items/zCrystal/Poisonium Z.svg">',
            npcDisplayName: 'Plumeria',
            npcImageName: 'Plumeria (league)',
        });
        poniAlolaQuestLine.addQuest(battleSkullGrunts6);
        // 4 - Gym battle: Hapu
        const battleKahunaHapu = new DefeatGymQuest(1, 0, 'Exeggutor Island').withDescription('Proceed to Vast Poni Canyon and prove your skills in a Grand Trial against Poni\'s new kahuna, Hapu!').withCustomReward(this.zCrystalGet(PokemonType.Ground));
        poniAlolaQuestLine.addQuest(battleKahunaHapu);
        // 5 - Clear dungeon boss: Vast Poni Canyon, Dragonium Z Trial
        this.createZCrystalTrial(PokemonType.Dragon, 'Vast Poni Canyon', 'Trial Site', '<i>You obtained a Dragon-Type Z-Crystal. The Dragonium Z is yours!<i>', poniAlolaQuestLine, true, 'Clear the ancient Trial Site of Vast Poni Canyon.', 'Trial Site of Vast Poni Canyon');
        // 6 - Talk to NPC: Play a flute on the Altar of the Sunne and Moone
        const talkToLillieDay = new TalkToNPCQuest(SunFlute, 'Play the Sun Flute during Day or Dusk.');
        const talkToLillieNight = new TalkToNPCQuest(MoonFlute, 'Play the Moon Flute during Night or Dawn.');
        poniAlolaQuestLine.addQuest(new MultipleQuestsQuest([
            talkToLillieDay,
            talkToLillieNight,
        ], 'Choose a time of day to play a flute with Lillie at the Altar.', 0, 1));
        // 7 - Temp battle: Lusamine
        const clearBeastLusamine = new DefeatTemporaryBattleQuest('Lusamine', 'Help Lillie get through to her mother! Defeat Lusamine at the Altar of the Sunne and Moone.')
            .withOptionalArgs({
            clearedMessage: 'Lillie...</br>...</br>Heh...</br>When did you... start becoming so beautiful?',
            npcDisplayName: 'Lusamine',
            npcImageName: 'specialNPCs/Aether President (lillie)',
        });
        poniAlolaQuestLine.addQuest(clearBeastLusamine);
        // end - Talk to NPC: Lillie7
        const EaterOfLightReward = () => {
            App.game.quests.getQuestLine('Eater of Light').beginQuest(0, undefined);
            Notifier.notify({
                title: '<del>Emissary</del> Eater of Light',
                message: 'A dangerous Pokémon from another world threatens the Alola region.',
                type: NotificationConstants.NotificationOption.dark,
                timeout: 5 * GameConstants.MINUTE,
            });
        };
        const talkToLillie7 = new TalkToNPCQuest(Lillie7, 'Everyone is finally safe. Talk to Lillie.').withCustomReward(EaterOfLightReward);
        poniAlolaQuestLine.addQuest(talkToLillie7);
        App.game.quests.questLines().push(poniAlolaQuestLine);
    }
    // Alola Story conclusion - Started upon finishing Emissary of Light (Poni quest)
    static createUltraNecrozmaAlolaQuestLine() {
        const ultraNecrozmaAlolaQuestLine = new QuestLine('Eater of Light', 'A dangerous Pokémon from another world threatens the Alola region.');
        // 0 - Temp battle: Ultra Megalopolis
        const clearUltraMegalopolis = new DefeatTemporaryBattleQuest('Ultra Megalopolis', 'Stop the Eater of Light from absorbing all light in Alola. Defeat Ultra Necrozma at the Altar of the Sunne and Moone.')
            .withOptionalArgs({
            clearedMessage: 'Necrozma shone with such blinding light, as it used to, only to lose that light all over again... It seems to have fled somewhere now. We are grateful to you, human of Alola. May we all eventually be awash in light again.',
            npcDisplayName: 'Ultra Recon Squad',
            npcImageName: 'specialNPCs/Ultra Recon Squad (all)',
        });
        ultraNecrozmaAlolaQuestLine.addQuest(clearUltraMegalopolis);
        // 1 - Talk to NPC: Lillie8
        const talkToLillie8 = new TalkToNPCQuest(Lillie8, 'Everyone is finally safe again. Talk to Lillie.');
        ultraNecrozmaAlolaQuestLine.addQuest(talkToLillie8);
        // 2 - Temp battle: Lillie
        const battleLillie = new DefeatTemporaryBattleQuest('Lillie', 'You are challenged by Pokémon Trainer Lillie! Welcome her to the world of trainers by battling her at the Altar of the Sunne and Moone.');
        ultraNecrozmaAlolaQuestLine.addQuest(battleLillie);
        // 3 - Clear dungeon boss: Mina\'s Houseboat, Mina's Trial
        this.createZCrystalTrial(PokemonType.Fairy, 'Mina\'s Houseboat', 'Mina', 'That\'s a pretty great picture. You and your Pokémon! You\'re a great Pokémon Trainer! So here you go! A piece of Fairium Z for you!', ultraNecrozmaAlolaQuestLine);
        // 4 - Temp battle: Gladion 3
        const battleGladion3 = new DefeatTemporaryBattleQuest('Gladion 3', 'Battle Gladion on Ula\'ula one last time before ascending to the Pokémon League.');
        ultraNecrozmaAlolaQuestLine.addQuest(battleGladion3);
        // 5 - Clear dungeon: Mount Lanakila
        const clearMountLanakila = new DefeatDungeonQuest(1, 0, 'Mount Lanakila').withDescription('One step closer to victory: Clear Mount Lanakila!')
            .withOptionalArgs({
            clearedMessage: '<i>You see Necrozma unconscious in a crater, drained of light and in a dormant state. Best to let it rest for a while.</i>',
            npcImageName: '../pokemon/800',
        });
        ultraNecrozmaAlolaQuestLine.addQuest(clearMountLanakila);
        // end - Clear dungeon boss: Mount Lanakila, Icium Z Trial
        this.createZCrystalTrial(PokemonType.Ice, 'Mount Lanakila', 'Trial Site', 'Congratulations! You\'ve claimed the Icium Z! Onwards to the Pokémon League now!', ultraNecrozmaAlolaQuestLine, true, 'You were so distracted by Necrozma you forgot about the Z Crystal! Find the Trial Site in the Mount Lanakila dungeon.', 'Trial Site of Mount Lanakila');
        App.game.quests.questLines().push(ultraNecrozmaAlolaQuestLine);
    }
    // "Z Crystal" Quest
    // will unlock Tapus and Totem mons
    static createIslandChallengeQuestLine() {
        const islandChallengeQuestLine = new QuestLine('Island Challenge', 'Embark on the Island Challenge and be graced by the Tapus\' presence!', new DevelopmentRequirement(new TemporaryBattleRequirement('Hau 2')), GameConstants.BulletinBoards.Alola);
        const autoModalStep = new CustomQuest(1, 0, 'Start your Island Challenge at Professor Kukui\'s Lab.', () => +!!App.game.statistics.routeKills[GameConstants.Region.alola]['1']()).withInitialValue(0)
            .withCustomReward(() => ItemList.Island_Challenge_Amulet.gain(1))
            .withOptionalArgs({
            clearedMessage: 'Woah there, tester! This quest is still under development! You should go out there and test the story in the meantime, yeah!',
            npcDisplayName: 'Kukui',
            npcImageName: 'Professor Kukui',
        });
        islandChallengeQuestLine.addQuest(autoModalStep);
        /*
        Mina's Trial will be part of this questline
        const minasTrialAlolaQuestLine = new QuestLine('Mina\'s Trial', 'Mina has asked you to battle the Trial captains of the other islands to earn access to her Trial site.');

        const clearCaptainMina = new DefeatTemporaryBattleQuest('Captain Mina', 'Defeat Captain Mina in Seafolk Village.').withCustomReward(() => ItemList.Pink_Petal_Mina.gain(1));
        minasTrialAlolaQuestLine.addQuest(clearCaptainMina);

        const clearCaptainIlima = new DefeatTemporaryBattleQuest('Captain Ilima', 'Defeat Captain Ilima in Hau\'oli Cemetery.').withCustomReward(() => ItemList.Orange_Petal_Mina.gain(1));
        minasTrialAlolaQuestLine.addQuest(clearCaptainIlima);

        const clearCaptainMallow = new DefeatTemporaryBattleQuest('Captain Mallow', 'Defeat Captain Mallow in Lush Jungle.').withCustomReward(() => ItemList.Green_Petal_Mina.gain(1));
        minasTrialAlolaQuestLine.addQuest(clearCaptainMallow);

        const clearCaptainLana = new DefeatTemporaryBattleQuest('Captain Lana', 'Defeat Captain Lana in Lush Jungle.').withCustomReward(() => ItemList.Blue_Petal_Mina.gain(1));
        minasTrialAlolaQuestLine.addQuest(clearCaptainLana);

        const clearCaptainKiawe = new DefeatTemporaryBattleQuest('Captain Kiawe', 'Defeat Captain Kiawe in Wela Volcano Park.').withCustomReward(() => ItemList.Red_Petal_Mina.gain(1));
        minasTrialAlolaQuestLine.addQuest(clearCaptainKiawe);

        const clearCaptainSophocles = new DefeatTemporaryBattleQuest('Captain Sophocles', 'Defeat Captain Sophocles in Hokulani Observatory.').withCustomReward(() => ItemList.Yellow_Petal_Mina.gain(1));
        minasTrialAlolaQuestLine.addQuest(clearCaptainSophocles);

        const clearKahunaNanu = new DefeatTemporaryBattleQuest('Kahuna Nanu', 'Captain Acerola is apparently busy with something at the top of Mount Lanakila. Defeat Kahuna Nanu in Aether House instead.').withCustomReward(() => ItemList.Purple_Petal_Mina.gain(1));
        minasTrialAlolaQuestLine.addQuest(clearKahunaNanu);
        */
        App.game.quests.questLines().push(islandChallengeQuestLine);
    }
    // Silvally Typings Questline - Available post-E4
    static createSilvallyTypesQuestLine() {
        const SilvallyTypesQuestLine = new QuestLine('Typing some Memories', 'Help Gladion restore his Silvally\'s memories.', new MultiRequirement([new ObtainedPokemonRequirement('Silvally (Normal)'), new GymBadgeRequirement(BadgeEnums.Champion_Stamp)]), GameConstants.BulletinBoards.Alola);
        const talkToGladion1 = new TalkToNPCQuest(SilvallyGladion1, 'Talk to Gladion in the Aether Foundation.');
        SilvallyTypesQuestLine.addQuest(talkToGladion1);
        const createMultiTypeCaptureQuest = (types, description) => {
            const quest = new MultipleQuestsQuest(types.map(type => {
                return new CapturePokemonTypesQuest(100, 0, type);
            }), description);
            SilvallyTypesQuestLine.addQuest(quest);
        };
        createMultiTypeCaptureQuest([PokemonType.Fighting, PokemonType.Rock, PokemonType.Dark, PokemonType.Fairy], 'Get some training before looking for Silvally\'s memories. Catch or hatch 100 Fighting, Rock, Dark and Fairy Types');
        const talkToMelemeleLocals = new TalkToNPCQuest(SilvallyHala, 'Talk to important people around Melemele Island.').withCustomReward(() => ItemList.Fighting_Memory_Silvally.gain(1));
        const talkToAkalaLocals = new TalkToNPCQuest(SilvallyOlivia, 'Talk to important people around Akala Island.').withCustomReward(() => ItemList.Rock_Memory_Silvally.gain(1));
        const talkToUlaulaLocals = new TalkToNPCQuest(SilvallyNanu, 'Talk to important people around Ula\'ula Island.').withCustomReward(() => ItemList.Dark_Memory_Silvally.gain(1));
        const talkToPoniLocals = new TalkToNPCQuest(SilvallyMina, 'Talk to important people around Poni Island.').withCustomReward(() => ItemList.Fairy_Memory_Silvally.gain(1));
        SilvallyTypesQuestLine.addQuest(new MultipleQuestsQuest([
            talkToMelemeleLocals,
            talkToAkalaLocals,
            talkToUlaulaLocals,
            talkToPoniLocals,
        ], 'Start your search for Silvally\'s memories by asking important people around Alola.'));
        const talkToGladion2 = new TalkToNPCQuest(SilvallyGladion2, 'Talk to Gladion in the Aether Foundation and tell him what you found out about Silvally\'s memories.');
        SilvallyTypesQuestLine.addQuest(talkToGladion2);
        createMultiTypeCaptureQuest([PokemonType.Water, PokemonType.Grass, PokemonType.Fire, PokemonType.Electric, PokemonType.Ground, PokemonType.Ice], 'You probably need to train a little before going looking for more of Silvally memories. Catch or hatch 100 Water, Grass, Fire, Electric, Ground and Ice types.');
        const talkToLanaSilvally = new TalkToNPCQuest(LanaSilvally1, 'Search for Silvally\'s Memory near pools of freshwater. Ask Gladion at Aether Foundation if you\'re lost.');
        SilvallyTypesQuestLine.addQuest(talkToLanaSilvally);
        const BuyWaterMemory = new CustomQuest(1, 0, 'Buy the Water Memory from Captain Lana with Dungeon Tokens.', () => player.itemList.Water_Memory_Silvally())
            .withOptionalArgs({
            clearedMessage: 'Thank you so much $playername$! Now I can finally buy that rod I\'ve always wanted!',
            npcDisplayName: 'Captain Lana',
            npcImageName: 'Lana',
        });
        SilvallyTypesQuestLine.addQuest(BuyWaterMemory);
        const talkToMallowSilvally = new TalkToNPCQuest(MallowSilvally1, 'Search for Silvally\'s Memory in overgrown forests. Ask Gladion at Aether Foundation if you\'re lost.');
        SilvallyTypesQuestLine.addQuest(talkToMallowSilvally);
        const BuyGrassMemory = new CustomQuest(1, 0, 'Buy the Grass Memory from Captain Mallow with Quest Points.', () => player.itemList.Grass_Memory_Silvally())
            .withOptionalArgs({
            clearedMessage: 'Thank you, $playername$. I\'ll go to the market and buy the new ingredients right now!',
            npcDisplayName: 'Captain Mallow',
            npcImageName: 'Mallow',
        });
        SilvallyTypesQuestLine.addQuest(BuyGrassMemory);
        const talkToKiaweSilvally = new TalkToNPCQuest(KiaweSilvally1, 'Search for Silvally\'s Memory near fiery hotspots. Ask Gladion at Aether Foundation if you\'re lost.');
        SilvallyTypesQuestLine.addQuest(talkToKiaweSilvally);
        const BuyFireMemory = new CustomQuest(1, 0, 'Buy the Fire Memory from Captain Kiawe with Battle Points.', () => player.itemList.Fire_Memory_Silvally())
            .withOptionalArgs({
            clearedMessage: 'Thanks, $playername$. I\'ll be going to the market to buy the project supplies this instant.',
            npcDisplayName: 'Captain Kiawe',
            npcImageName: 'Kiawe',
        });
        SilvallyTypesQuestLine.addQuest(BuyFireMemory);
        const talkToSophoclesSilvally = new TalkToNPCQuest(SophoclesSilvally1, 'Search for Silvally\'s Memory in electrical institutions. Ask Gladion at Aether Foundation if you\'re lost.');
        SilvallyTypesQuestLine.addQuest(talkToSophoclesSilvally);
        const BuyElectricMemory = new CustomQuest(1, 0, 'Buy the Electric Memory from Captain Sophocles with Pokédollars.', () => player.itemList.Electric_Memory_Silvally())
            .withOptionalArgs({
            clearedMessage: 'Thank you, $playername$! Now I\'ll go buy some new equipment for my laboratory.',
            npcDisplayName: 'Captain Sophocles',
            npcImageName: 'Sophocles',
        });
        SilvallyTypesQuestLine.addQuest(BuyElectricMemory);
        const talkToVeteranSilvally = new TalkToNPCQuest(VeteranSilvally1, 'Search for Silvally\'s Memory near snow-covered peaks. Ask Gladion at Aether Foundation if you\'re lost.');
        SilvallyTypesQuestLine.addQuest(talkToVeteranSilvally);
        const BuyIceMemory = new CustomQuest(1, 0, 'Buy the Ice Memory from Veteran Aristo with Diamonds.', () => player.itemList.Ice_Memory_Silvally())
            .withOptionalArgs({
            clearedMessage: 'You\'re the best, kiddo! I\'m sure she\'ll love the ring I\'ll buy her with these diamonds!',
            npcDisplayName: 'Veteran Aristo',
            npcImageName: 'Veteran (male)',
        });
        SilvallyTypesQuestLine.addQuest(BuyIceMemory);
        const talkToHapuSilvally = new TalkToNPCQuest(HapuSilvally1, 'Search for Silvally\'s Memory in isolated ground. Ask Gladion at Aether Foundation if you\'re lost.');
        SilvallyTypesQuestLine.addQuest(talkToHapuSilvally);
        const BuyGroundMemory = new CustomQuest(1, 0, 'Buy the Ground Memory from Kahuna Hapu with Farm Points.', () => player.itemList.Ground_Memory_Silvally())
            .withOptionalArgs({
            clearedMessage: 'Wow you\'re pretty good at the farm, $playername$! I\'ll go buy the palm tree seeds right this instant!',
            npcDisplayName: 'Kahuna Hapu',
            npcImageName: 'Hapu',
        });
        SilvallyTypesQuestLine.addQuest(BuyGroundMemory);
        const talkToGladion3 = new TalkToNPCQuest(SilvallyGladion3, 'Go show Gladion those memories you\'ve bought in the Aether Foundation');
        SilvallyTypesQuestLine.addQuest(talkToGladion3);
        createMultiTypeCaptureQuest([PokemonType.Bug, PokemonType.Flying, PokemonType.Poison, PokemonType.Ghost, PokemonType.Psychic, PokemonType.Steel, PokemonType.Dragon], 'Get some training before looking for more of Silvally\'s memories. Catch or hatch 100 Bug, Flying, Poison, Ghost, Psychic, Steel and Dragon types.');
        const talkToBugSilvally = new TalkToNPCQuest(GuzmaSilvally, 'Search for Silvally\'s Memory where pests make their home. Ask Gladion at Aether Foundation if you\'re lost.');
        SilvallyTypesQuestLine.addQuest(talkToBugSilvally);
        const BugSilvallyBattle = new DefeatTemporaryBattleQuest('Guzma Bug Memory', 'Defeat Guzma to get the Memory back.').withCustomReward(() => ItemList.Bug_Memory_Silvally.gain(1));
        SilvallyTypesQuestLine.addQuest(BugSilvallyBattle);
        const talkToFlyingSilvally = new TalkToNPCQuest(KahiliSilvally, 'Search for Silvally\'s Memory where the earth opens to the sky. Ask Gladion at Aether Foundation if you\'re lost.');
        SilvallyTypesQuestLine.addQuest(talkToFlyingSilvally);
        const FlyingSilvallyBattle = new DefeatTemporaryBattleQuest('Kahili Flying Memory', 'Defeat Kahili to get the Memory back.').withCustomReward(() => ItemList.Flying_Memory_Silvally.gain(1));
        SilvallyTypesQuestLine.addQuest(FlyingSilvallyBattle);
        const talkToPoisonSilvally = new TalkToNPCQuest(PlumeriaSilvally, 'Search for Silvally\'s Memory near an ancient trial. Ask Gladion at Aether Foundation if you\'re lost.');
        SilvallyTypesQuestLine.addQuest(talkToPoisonSilvally);
        const PoisonSilvallyBattle = new DefeatTemporaryBattleQuest('Plumeria Poison Memory', 'Defeat Plumeria to get the Memory back.').withCustomReward(() => ItemList.Poison_Memory_Silvally.gain(1));
        SilvallyTypesQuestLine.addQuest(PoisonSilvallyBattle);
        const talkToGhostSilvally = new TalkToNPCQuest(AcerolaSilvally, 'Search for Silvally\'s Memory near an abandoned village. Ask Gladion at Aether Foundation if you\'re lost.');
        SilvallyTypesQuestLine.addQuest(talkToGhostSilvally);
        const GhostSilvallyBattle = new DefeatTemporaryBattleQuest('Acerola Ghost Memory', 'Defeat Captain Acerola to get the Memory back.').withCustomReward(() => ItemList.Ghost_Memory_Silvally.gain(1));
        SilvallyTypesQuestLine.addQuest(GhostSilvallyBattle);
        const talkToPsychicSilvally = new TalkToNPCQuest(FabaSilvally, 'Search for Silvally\'s Memory in a modern haven. Ask Gladion at Aether Foundation if you\'re lost.');
        SilvallyTypesQuestLine.addQuest(talkToPsychicSilvally);
        const PsychicSilvallyBattle = new DefeatTemporaryBattleQuest('Faba Psychic Memory', 'Defeat Aether Branch Chief Faba to get the Memory back.').withCustomReward(() => ItemList.Psychic_Memory_Silvally.gain(1));
        SilvallyTypesQuestLine.addQuest(PsychicSilvallyBattle);
        const talkToSteelSilvally = new TalkToNPCQuest(MolayneSilvally, 'Search for Silvally\'s Memory near a steel dome. Ask Gladion at Aether Foundation if you\'re lost.');
        SilvallyTypesQuestLine.addQuest(talkToSteelSilvally);
        const SteelSilvallyBattle = new DefeatTemporaryBattleQuest('Molayne Steel Memory', 'Defeat Molayne to get the Memory back.').withCustomReward(() => ItemList.Steel_Memory_Silvally.gain(1));
        SilvallyTypesQuestLine.addQuest(SteelSilvallyBattle);
        const talkToDragonSilvally = new TalkToNPCQuest(RyukiSilvally, 'Search for Silvally\'s Memory near a tree. Ask Gladion at Aether Foundation if you\'re lost.');
        SilvallyTypesQuestLine.addQuest(talkToDragonSilvally);
        const DragonSilvallyBattle = new DefeatTemporaryBattleQuest('Ryuki Dragon Memory', 'Defeat Ryuki to get the Memory back.').withCustomReward(() => ItemList.Dragon_Memory_Silvally.gain(1));
        SilvallyTypesQuestLine.addQuest(DragonSilvallyBattle);
        const talkToGladion4 = new TalkToNPCQuest(SilvallyGladion4, 'Go talk to Gladion in the Aether Foundation and tell him you\'ve recovered all the Silvally Memories!');
        SilvallyTypesQuestLine.addQuest(talkToGladion4);
        App.game.quests.questLines().push(SilvallyTypesQuestLine);
    }
    // Ultra Beasts Questline - Available post-E4
    static createUltraBeastQuestLine() {
        const UltraBeastQuestLine = new QuestLine('Ultra Beast Hunt', 'Track down the mysterious Ultra Beasts', new GymBadgeRequirement(BadgeEnums.Champion_Stamp), GameConstants.BulletinBoards.Alola);
        const talkToLooker = new TalkToNPCQuest(RoadsideMotelLooker1, 'Talk to Looker at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToLooker);
        const AnabelReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Beastball, 5, false);
        };
        const AnabelBattle = new DefeatTemporaryBattleQuest('Anabel', 'Defeat Agent Anabel at the Roadside Motel.').withCustomReward(AnabelReward);
        UltraBeastQuestLine.addQuest(AnabelBattle);
        const talkToAnabel1 = new TalkToNPCQuest(RoadsideMotelAnabel1, 'Talk to Anabel at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToAnabel1);
        const talkToLooker2 = new TalkToNPCQuest(RoadsideMotelLooker2, 'Talk to Looker at the Roadside Motel to learn about Beast Balls.');
        UltraBeastQuestLine.addQuest(talkToLooker2);
        const createUltraBeastQuest = (ultrabeast, hint, numberCaught, ultraBeastReward) => {
            const time = (numberCaught > 0) ? 'times!' : 'time!';
            const validHint = hint !== null && hint !== void 0 ? hint : '';
            const catchUltraBeast = new CaptureSpecificPokemonQuest(ultrabeast, numberCaught).withDescription(`Capture ${ultrabeast} ${numberCaught} ${time} ${validHint}`).withCustomReward(ultraBeastReward);
            return catchUltraBeast;
        };
        const ultraBeastReward = () => {
            Notifier.notify({
                title: UltraBeastQuestLine.name,
                message: 'An Ultra Beast is hiding somewhere...',
                type: NotificationConstants.NotificationOption.info,
                timeout: 3e1,
            });
        };
        UltraBeastQuestLine.addQuest(createUltraBeastQuest('Nihilego', ' Nihilego has been spotted at Wela Volcano Park and Diglett\'s Tunnel!', 1, ultraBeastReward));
        const talkToAnabel2 = new TalkToNPCQuest(RoadsideMotelAnabel2, 'Talk to Anabel at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToAnabel2);
        UltraBeastQuestLine.addQuest(new MultipleQuestsQuest([
            createUltraBeastQuest('Buzzwole', undefined, 2),
            createUltraBeastQuest('Pheromosa', undefined, 4),
        ], 'Rare Ultra Beasts have been spotted!\nBuzzwole in Melemele Meadow and Pheromosa in Verdant Cavern!').withCustomReward(ultraBeastReward));
        const talkToAnabel3 = new TalkToNPCQuest(RoadsideMotelAnabel3, 'Talk to Anabel at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToAnabel3);
        const MinaBattle = new DefeatTemporaryBattleQuest('Captain Mina UB', 'Defeat Trial Captain Mina at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(MinaBattle);
        const talkToMina1 = new TalkToNPCQuest(RoadsideMotelMina, 'Talk to Captain Mina at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToMina1);
        UltraBeastQuestLine.addQuest(createUltraBeastQuest('Xurkitree', ' Xurkitree has been spotted at Memorial Hill and Lush Jungle!', 2, ultraBeastReward));
        const talkToNanu1 = new TalkToNPCQuest(RoadsideMotelNanu1, 'Talk to Kahuna Nanu at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToNanu1);
        UltraBeastQuestLine.addQuest(new MultipleQuestsQuest([
            createUltraBeastQuest('Kartana', undefined, 4),
            createUltraBeastQuest('Celesteela', undefined, 2),
        ], 'Rare Ultra Beasts have been spotted! Kartana at Malie Garden and Route 17, and Celesteela at Malie Garden and Haina Desert!').withCustomReward(ultraBeastReward));
        const talkToNanu2 = new TalkToNPCQuest(RoadsideMotelNanu2, 'Talk to Kahuna Nanu at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToNanu2);
        const NanuBattle = new DefeatTemporaryBattleQuest('Kahuna Nanu UB', 'Defeat Kahuna Nanu at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(NanuBattle);
        const talkToAnabel4 = new TalkToNPCQuest(RoadsideMotelAnabel4, 'Talk to Anabel at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToAnabel4);
        UltraBeastQuestLine.addQuest(new MultipleQuestsQuest([
            createUltraBeastQuest('Blacephalon', undefined, 5),
            createUltraBeastQuest('Stakataka', undefined, 5),
        ], 'Rare Ultra Beasts have been spotted! Blacephalon and Stakataka are both at Poni Grove!').withCustomReward(ultraBeastReward));
        const talkToAnabel5 = new TalkToNPCQuest(RoadsideMotelAnabel5, 'Talk to Anabel at the Roadside Motel.');
        UltraBeastQuestLine.addQuest(talkToAnabel5);
        const GuzzlordReward = () => {
            Notifier.notify({ message: 'You caught all the Ultra Beasts!', type: NotificationConstants.NotificationOption.success });
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Beastball, 50, false);
        };
        const GuzzlordCatch = new CaptureSpecificPokemonQuest('Guzzlord').withDescription('Catch Guzzlord at Resolution Cave.').withCustomReward(GuzzlordReward);
        UltraBeastQuestLine.addQuest(GuzzlordCatch);
        App.game.quests.questLines().push(UltraBeastQuestLine);
    }
    // Available post-E4
    static createMeltanQuestLine() {
        const meltanQuestLine = new QuestLine('Let\'s Go, Meltan!', 'I need your assistance in learning more about the newly discovered Pokémon that has really sent me and other Pokémon researchers into quite a tizzy.', new GymBadgeRequirement(BadgeEnums.Champion_Stamp), GameConstants.BulletinBoards.Alola, true);
        // Multi-step #0:
        const meltanMine10 = new MineItemsQuest(10, 0);
        const meltanCatch50 = new CapturePokemonsQuest(50, 0);
        meltanQuestLine.addQuest(new MultipleQuestsQuest([
            meltanMine10,
            meltanCatch50,
        ], 'Step 1 of Let\'s Go, Meltan!'));
        // Multi-step #1:
        const meltanBreed50 = new HatchEggsQuest(50, 0);
        const meltanObtain15kFP = new GainFarmPointsQuest(15000, 0);
        meltanQuestLine.addQuest(new MultipleQuestsQuest([
            meltanBreed50,
            meltanObtain15kFP,
        ], 'Step 2 of Let\'s Go, Meltan!'));
        // Multi-step #2:
        const meltanCatch5Ditto = new CaptureSpecificPokemonQuest('Ditto', 5, true).withDescription('Catch or hatch 5 Ditto.');
        const meltanDefeatMolayne10 = new DefeatGymQuest(10, 0, 'Elite Molayne');
        meltanQuestLine.addQuest(new MultipleQuestsQuest([
            meltanCatch5Ditto,
            meltanDefeatMolayne10,
        ], 'Step 3 of Let\'s Go, Meltan!'));
        // Multi-step #3:
        const meltanCatch50Steel = new CapturePokemonTypesQuest(50, 0, PokemonType.Steel);
        const meltanCatch50Electric = new CapturePokemonTypesQuest(50, 0, PokemonType.Electric);
        const meltanDefeatOlivia10 = new DefeatGymQuest(10, 0, 'Elite Olivia');
        meltanQuestLine.addQuest(new MultipleQuestsQuest([
            meltanCatch50Steel,
            meltanCatch50Electric,
            meltanDefeatOlivia10,
        ], 'Step 4 of Let\'s Go, Meltan!'));
        // Multi-step #4:
        const meltanCatch5Grimer = new CaptureSpecificPokemonQuest('Alolan Grimer', 5, true).withDescription('Catch or hatch 5 Alolan Grimer.');
        const meltanCatch5Slugma = new CaptureSpecificPokemonQuest('Slugma', 5, true).withDescription('Catch or hatch 5 Slugma.');
        const meltanCatch10Gulpin = new CaptureSpecificPokemonQuest('Gulpin', 10, true).withDescription('Catch or hatch 10 Gulpin.');
        meltanQuestLine.addQuest(new MultipleQuestsQuest([
            meltanCatch5Grimer,
            meltanCatch5Slugma,
            meltanCatch10Gulpin,
        ], 'Step 5 of Let\'s Go, Meltan!'));
        // Multi-step #5:
        const meltanObtain10MB = new BuyPokeballsQuest(10, 0, GameConstants.Pokeball.Masterball);
        meltanQuestLine.addQuest(new MultipleQuestsQuest([meltanObtain10MB], 'Step 6 of Let\'s Go, Meltan!'));
        // Multi-step #6:
        const meltanCatch10Magnemite = new CaptureSpecificPokemonQuest('Magnemite', 10, true).withDescription('Catch or hatch 10 Magnemite.');
        const meltanCatch10Exeggcute = new CaptureSpecificPokemonQuest('Exeggcute', 10, true).withDescription('Catch or hatch 10 Exeggcute.');
        const meltanDefeatAcerola10 = new DefeatGymQuest(10, 0, 'Elite Acerola');
        meltanQuestLine.addQuest(new MultipleQuestsQuest([
            meltanCatch10Magnemite,
            meltanCatch10Exeggcute,
            meltanDefeatAcerola10,
        ], 'Step 7 of Let\'s Go, Meltan!'));
        // Multi-step #7:
        const meltanCatch15Drowzee = new CaptureSpecificPokemonQuest('Drowzee', 15, true).withDescription('Catch or hatch 15 Drowzee.');
        const meltanCatch15Cubone = new CaptureSpecificPokemonQuest('Cubone', 15, true).withDescription('Catch or hatch 15 Cubone.');
        const meltanCatch15Scyther = new CaptureSpecificPokemonQuest('Scyther', 15, true).withDescription('Catch or hatch 15 Scyther.');
        const meltanDefeatKahili10 = new DefeatGymQuest(10, 0, 'Elite Kahili');
        meltanQuestLine.addQuest(new MultipleQuestsQuest([
            meltanCatch15Drowzee,
            meltanCatch15Cubone,
            meltanCatch15Scyther,
            meltanDefeatKahili10,
        ], 'Step 8 of Let\'s Go, Meltan!'));
        // Multi-step #8:
        const meltanCatch20Kabuto = new CaptureSpecificPokemonQuest('Kabuto', 20, true).withDescription('Catch or hatch 20 Kabuto.');
        const meltanCatch20Omanyte = new CaptureSpecificPokemonQuest('Omanyte', 20, true).withDescription('Catch or hatch 20 Omanyte.'); // Praise Lord Helix
        const meltanDig30 = new MineLayersQuest(30, 0);
        meltanQuestLine.addQuest(new MultipleQuestsQuest([
            meltanCatch20Kabuto,
            meltanCatch20Omanyte,
            meltanDig30,
        ], 'Step 9 of Let\'s Go, Meltan!'));
        // Multi-step #9:
        const meltanCatch20Anorith = new CaptureSpecificPokemonQuest('Anorith', 20, true).withDescription('Catch or hatch 20 Anorith.');
        const meltanCatch20Lileep = new CaptureSpecificPokemonQuest('Lileep', 20, true).withDescription('Catch or hatch 20 Lileep.');
        const meltanCatch20Aerodactyl = new CaptureSpecificPokemonQuest('Aerodactyl', 20, true).withDescription('Catch or hatch 20 Aerodactyl.');
        const meltanDefeatHau15 = new DefeatGymQuest(15, 0, 'Champion Hau');
        meltanQuestLine.addQuest(new MultipleQuestsQuest([
            meltanCatch20Anorith,
            meltanCatch20Lileep,
            meltanCatch20Aerodactyl,
            meltanDefeatHau15,
        ], 'Step 10 of Let\'s Go, Meltan!').withCustomReward(() => App.game.quests.getQuestLine('Defeat Rainbow Rocket').beginQuest(0, undefined, true)));
        // Multi-step #10
        const meltanCatch400Meltan = new CaptureSpecificPokemonQuest('Meltan', 400).withDescription('Catch 400 Meltan in Alola.');
        const meltanRainbowRocket = new DefeatTemporaryBattleQuest('Team Rainbow Leader Giovanni', 'Defeat Team Rainbow Rocket.');
        const meltanGetMelmetal = () => {
            App.game.party.gainPokemonByName('Melmetal', PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_REWARD));
            Notifier.notify({
                title: meltanQuestLine.name,
                message: 'You found Melmetal!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        meltanQuestLine.addQuest(new MultipleQuestsQuest([
            meltanCatch400Meltan,
            meltanRainbowRocket,
        ], 'Let\'s Go, Meltan!').withCustomReward(meltanGetMelmetal));
        App.game.quests.questLines().push(meltanQuestLine);
    }
    // Started after Meltan step 9
    static createRainbowRocketQuestLine() {
        const rainbowQuestLine = new QuestLine('Defeat Rainbow Rocket', 'Team Rainbow Rocket has stolen the Meltan research! Defeat them to get it back!', new QuestLineStepCompletedRequirement('Let\'s Go, Meltan!', 9));
        const rainbowGrunts = new CustomQuest(2, 0, 'Defeat the Grunts guarding the Aether Foundation takeover.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Rainbow Rocket Grunt 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Rainbow Rocket Grunt 2')]());
        rainbowQuestLine.addQuest(rainbowGrunts);
        const rainbowFaba = new DefeatTemporaryBattleQuest('Aether Branch Chief Faba', 'Defeat Aether Branch Chief Faba.');
        rainbowQuestLine.addQuest(rainbowFaba);
        const rainbowArchie = new DefeatTemporaryBattleQuest('Team Aqua Leader Archie', 'Defeat Team Aqua Leader Archie.');
        const rainbowMaxie = new DefeatTemporaryBattleQuest('Team Magma Leader Maxie', 'Defeat Team Magma Leader Maxie.');
        rainbowQuestLine.addQuest(new MultipleQuestsQuest([
            rainbowArchie,
            rainbowMaxie,
        ], 'Defeat Archie and Maxie.'));
        const rainbowCyrus = new DefeatTemporaryBattleQuest('Team Galactic Leader Cyrus', 'Defeat Team Galactic Leader Cyrus.');
        rainbowQuestLine.addQuest(rainbowCyrus);
        const rainbowLysandre = new DefeatTemporaryBattleQuest('Team Flare Leader Lysandre', 'Defeat Team Flare Leader Lysandre.');
        rainbowQuestLine.addQuest(rainbowLysandre);
        const rainbowGhetsis = new DefeatTemporaryBattleQuest('Team Plasma Leader Ghetsis', 'Defeat Team Plasma Leader Ghetsis.');
        rainbowQuestLine.addQuest(rainbowGhetsis);
        const rainbowGiovanni = new DefeatTemporaryBattleQuest('Team Rainbow Leader Giovanni', 'Defeat Team Rainbow Leader Giovanni.');
        rainbowQuestLine.addQuest(rainbowGiovanni);
        App.game.quests.questLines().push(rainbowQuestLine);
    }
    /* Magikarp Jump QuestLines */
    // Available post-E4
    static createMagikarpJumpQuestLine() {
        const magikarpJumpQuestLine = new QuestLine('Magikarp Jump', 'Go to Hoppy Town and share their love for Magikarp.', new GymBadgeRequirement(BadgeEnums.Champion_Stamp), GameConstants.BulletinBoards.Alola);
        const talkToMayor = new TalkToNPCQuest(MayorKarp, 'Use the subregion travel to talk to Mayor Karp in Hoppy Town.');
        magikarpJumpQuestLine.addQuest(talkToMayor);
        App.game.quests.questLines().push(magikarpJumpQuestLine);
    }
    // Available upon clearing the Great League
    static createDrSplashQuestLine() {
        const drSplashQuestLine = new QuestLine('Dr. Splash\'s Research Project', 'Help Dr. Splash unlock the full potential of your Magikarps.', new GymBadgeRequirement(BadgeEnums.Great_League), GameConstants.BulletinBoards.Hoppy);
        const talkToDrSplash1 = new TalkToNPCQuest(DrSplash1, 'Talk to Dr. Splash in Hoppy Town.');
        drSplashQuestLine.addQuest(talkToDrSplash1);
        const farmOran = new HarvestBerriesQuest(129, 0, BerryType.Oran);
        const farmSitrus = new HarvestBerriesQuest(129, 0, BerryType.Sitrus);
        const farmPecha = new HarvestBerriesQuest(129, 0, BerryType.Pecha);
        const farmRindo = new HarvestBerriesQuest(129, 0, BerryType.Rindo);
        const farmWacan = new HarvestBerriesQuest(129, 0, BerryType.Wacan);
        const farmLeppa = new HarvestBerriesQuest(129, 0, BerryType.Leppa);
        const farmRawst = new HarvestBerriesQuest(129, 0, BerryType.Rawst);
        const farmAspear = new HarvestBerriesQuest(129, 0, BerryType.Aspear);
        const farmRazz = new HarvestBerriesQuest(129, 0, BerryType.Razz);
        const farmBluk = new HarvestBerriesQuest(129, 0, BerryType.Bluk);
        drSplashQuestLine.addQuest(new MultipleQuestsQuest([
            farmOran,
            farmSitrus,
            farmPecha,
            farmRindo,
            farmWacan,
            farmLeppa,
            farmRawst,
            farmAspear,
            farmRazz,
            farmBluk,
        ], 'Gather berries for Dr. Splash.'));
        const talkToDrSplash2 = new TalkToNPCQuest(DrSplash2, 'Report back to Dr. Splash about your berry research.');
        drSplashQuestLine.addQuest(talkToDrSplash2);
        const sandBag = new GainGemsQuest(5000, 0, PokemonType.Ground);
        const jumpCounter = new CaptureSpecificPokemonQuest('Spoink', 10, true).withDescription('Catch or hatch 10 Spoink.');
        const timber = new GainGemsQuest(5000, 0, PokemonType.Grass);
        const rockCruncher = new GainGemsQuest(5000, 0, PokemonType.Rock);
        const powerGenerator = new CaptureSpecificPokemonQuest('Voltorb', 10, true).withDescription('Catch or hatch 10 Voltorb.');
        const pokeballSmash = new BuyPokeballsQuest(100000, 0, GameConstants.Pokeball.Pokeball);
        const frostCruncher = new GainGemsQuest(5000, 0, PokemonType.Ice);
        drSplashQuestLine.addQuest(new MultipleQuestsQuest([
            sandBag,
            jumpCounter,
            timber,
            rockCruncher,
            powerGenerator,
            pokeballSmash,
            frostCruncher,
        ], 'Gather materials for Dr. Splash.'));
        const talkToDrSplash3 = new TalkToNPCQuest(DrSplash3, 'Return to Dr. Splash in Hoppy Town with the training materials.');
        drSplashQuestLine.addQuest(talkToDrSplash3);
        const pushDwebble = new CaptureSpecificPokemonQuest('Dwebble', 10, true).withDescription('Catch or hatch 10 Dwebble.');
        const pushBoldore = new CaptureSpecificPokemonQuest('Boldore', 10, true).withDescription('Catch or hatch 10 Boldore.');
        const pushForretress = new CaptureSpecificPokemonQuest('Forretress', 10, true).withDescription('Catch or hatch 10 Forretress.');
        const pushGolem = new CaptureSpecificPokemonQuest('Golem', 10, true).withDescription('Catch or hatch 10 Golem.');
        const pushSteelix = new CaptureSpecificPokemonQuest('Steelix', 10, true).withDescription('Catch or hatch 10 Steelix.');
        drSplashQuestLine.addQuest(new MultipleQuestsQuest([
            pushDwebble,
            pushBoldore,
            pushForretress,
            pushGolem,
            pushSteelix,
        ], 'Catch Pokémon for Dr. Splash\'s training grounds.'));
        const talkToDrSplash4 = new TalkToNPCQuest(DrSplash4, 'Return to Dr. Splash in Hoppy Town with the pushable Pokémon.');
        drSplashQuestLine.addQuest(talkToDrSplash4);
        const tackleMachine = new CustomQuest(5000, 0, 'Defeat 5,000 Pokémon', App.game.statistics.totalPokemonDefeated);
        drSplashQuestLine.addQuest(tackleMachine);
        // Every step will reward a Biscuit escept last.
        const karpStepReward = () => {
            Notifier.notify({
                message: 'You were awarded a Magikarp Biscuit!',
                type: NotificationConstants.NotificationOption.success,
                image: ItemList.Magikarp_Biscuit.image,
            });
            player.gainItem('Magikarp_Biscuit', 1);
        };
        drSplashQuestLine.quests().forEach(q => q.withCustomReward(karpStepReward));
        const SaucyBlueReward = () => {
            App.game.party.gainPokemonByName('Magikarp Saucy Blue', PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_REWARD));
            Notifier.notify({
                title: drSplashQuestLine.name,
                message: 'Dr. Splash gives you a Saucy Blue Magikarp!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
                sound: NotificationConstants.NotificationSound.General.new_catch,
            });
        };
        const talkToDrSplash5 = new TalkToNPCQuest(DrSplash5, 'Wrap up your research project by talking to Dr. Splash in Hoppy Town.').withCustomReward(SaucyBlueReward);
        drSplashQuestLine.addQuest(talkToDrSplash5);
        App.game.quests.questLines().push(drSplashQuestLine);
    }
    /* Galar QuestLines */
    // Started by defeating both Stow-on-Side gyms.
    static createDarkestDayQuestLine() {
        const darkestDayQuestLine = new QuestLine('The Darkest Day', 'Stop the return of the Darkest Day!');
        const talkToMural1 = new TalkToNPCQuest(AncientMural1, 'Check out Stow-on-Side\'s mural.');
        darkestDayQuestLine.addQuest(talkToMural1); // 0
        const clearBede3 = new DefeatTemporaryBattleQuest('Bede 3', 'Stop Bede from destroying the mural!');
        darkestDayQuestLine.addQuest(clearBede3);
        const talkToMural2 = new TalkToNPCQuest(AncientMural2, '');
        const talkToSonia1 = new TalkToNPCQuest(StowonSideSonia, 'Talk to Sonia.');
        darkestDayQuestLine.addQuest(new MultipleQuestsQuest([
            talkToMural2,
            talkToSonia1,
        ], 'The mural was destroyed! See what you can learn by inspecting the ruins and speaking to the bystander.')); // Step 2
        const clearHop6 = new DefeatTemporaryBattleQuest('Hop 6', 'Defeat the next gym and catch up with Hop.');
        darkestDayQuestLine.addQuest(clearHop6);
        const clearHop7 = new DefeatTemporaryBattleQuest('Hop 7', 'Continue your Gym Challenge and have a battle with Hop in Circhester.');
        darkestDayQuestLine.addQuest(clearHop7);
        const talkToBath = new TalkToNPCQuest(HerosBath, '');
        const talkToHop1 = new TalkToNPCQuest(CirchesterHop, 'Talk to Hop.');
        const talkToSonia2 = new TalkToNPCQuest(CirchesterSonia, 'Talk to Sonia.');
        darkestDayQuestLine.addQuest(new MultipleQuestsQuest([
            talkToBath,
            talkToHop1,
            talkToSonia2,
        ], 'Learn more about the heroes who stopped The Darkest Day.')); // Step 5
        const clearHammerlockeGym = new DefeatGymQuest(1, 0, 'Hammerlocke').withDescription('Continue your Gym Challenge and gain entry to the Champion Cup.');
        darkestDayQuestLine.addQuest(clearHammerlockeGym);
        const clearTrainerMarnie = new DefeatGymQuest(1, 0, 'Elite Trainer Marnie').withDescription('Defeat Marnie at Wyndon Stadium to reach the quarter-finals of the Champion Cup.');
        darkestDayQuestLine.addQuest(clearTrainerMarnie);
        const clearGymLeaderBede = new DefeatGymQuest(1, 0, 'Elite Gym Leader Bede').withDescription('Defeat Bede to reach the semi-finals of the Champion Cup.');
        darkestDayQuestLine.addQuest(clearGymLeaderBede);
        const clearTrainerHop = new DefeatGymQuest(1, 0, 'Elite Trainer Hop').withDescription('Defeat Hop to reach the final of the Champion Cup!');
        darkestDayQuestLine.addQuest(clearTrainerHop);
        const clearRoseTower = new DefeatDungeonQuest(1, 0, 'Rose Tower').withDescription('Champion Leon was seen heading to Rose Tower. Ascend Rose Tower so you can find him.');
        darkestDayQuestLine.addQuest(clearRoseTower);
        const talktoRoseBroadcast = new TalkToNPCQuest(RoseBroadcast, 'The Championship Match is about to start, but Chairman Rose is broadcasting something to the Stadium? Listen to the broadcast.');
        darkestDayQuestLine.addQuest(talktoRoseBroadcast);
        const talktoHop2 = new TalkToNPCQuest(WyndonHop, 'Talk to Hop in Wyndon Stadium.');
        darkestDayQuestLine.addQuest(talktoHop2);
        const clearSlumberingWeald = new DefeatDungeonQuest(1, 0, 'Slumbering Weald Shrine').withDescription('Chairman Rose has interrupted your fight with Leon and brought about the Darkest Day. Clear Slumbering Weald Shrine.');
        darkestDayQuestLine.addQuest(clearSlumberingWeald);
        const talktoHop3 = new TalkToNPCQuest(SlumberingHop1, 'Talk to Hop in Slumbering Weald Shrine.');
        darkestDayQuestLine.addQuest(talktoHop3);
        const clearEnergyPlant = new DefeatDungeonQuest(1, 0, 'Energy Plant').withDescription('Unfortunately, all you found at the Slumbering Weald was a rusty sword and shield. Go to the Energy Plant in Hammerlocke to put an end to Chairman Rose\'s plans!');
        darkestDayQuestLine.addQuest(clearEnergyPlant);
        const talktoRose = new TalkToNPCQuest(EnergyPlantRose, 'Talk to Chairman Rose in Energy Plant');
        darkestDayQuestLine.addQuest(talktoRose);
        const clearEternatus = new DefeatTemporaryBattleQuest('Eternatus', 'Leon failed to capture Eternatus. Defeat it before it can cause any more damage!');
        darkestDayQuestLine.addQuest(clearEternatus);
        const TheDarkestDayReward = () => {
            App.game.pokeballs.gainPokeballs(GameConstants.Pokeball.Masterball, 1, false);
            Notifier.notify({
                title: darkestDayQuestLine.name,
                message: 'You found a Master Ball!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const clearTheDarkestDay = new DefeatTemporaryBattleQuest('The Darkest Day', 'Eternatus has ascended to its Eternamax form! Catch it to put an end to the Darkest Day!').withCustomReward(TheDarkestDayReward);
        darkestDayQuestLine.addQuest(clearTheDarkestDay);
        const talktoLeon = new TalkToNPCQuest(Leon, 'After all those interruptions, it\'s finally time for the Championship match! Talk to Leon at Wyndon Stadium.');
        darkestDayQuestLine.addQuest(talktoLeon);
        const clearLeon = new DefeatGymQuest(1, 0, 'Champion Leon').withDescription('Defeat Leon to become the Champion of Galar!');
        darkestDayQuestLine.addQuest(clearLeon);
        App.game.quests.questLines().push(darkestDayQuestLine);
    }
    // Available post-E4
    static createSwordShieldQuestLine() {
        const swordShieldQuestLine = new QuestLine('Sword and Shield', 'Stop the weapons from making a mess.', new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion), GameConstants.BulletinBoards.Galar);
        const talktoHop4 = new TalkToNPCQuest(SlumberingHop2, 'Talk to Hop in the Slumbering Weald.');
        swordShieldQuestLine.addQuest(talktoHop4);
        const clearHop8 = new DefeatTemporaryBattleQuest('Hop 8', 'Hop wants to fight you one more time at Slumbering Weald Shrine.');
        swordShieldQuestLine.addQuest(clearHop8);
        const talktoSordwardShielbert1 = new TalkToNPCQuest(SordwardShielbert1, 'Talk to Sordward & Shielbert in the Slumbering Weald.');
        swordShieldQuestLine.addQuest(talktoSordwardShielbert1);
        const clearSordward1 = new DefeatTemporaryBattleQuest('Sordward 1', 'Defeat Sordward.');
        const clearShielbert1 = new DefeatTemporaryBattleQuest('Shielbert 1', 'Defeat Shielbert.');
        swordShieldQuestLine.addQuest(new MultipleQuestsQuest([
            clearSordward1,
            clearShielbert1,
        ], 'A pair with weird hair has taken the Rusted Sword and Rusted Shield. Defeat them to take them back.'));
        const clearRampagingTsareena = new DefeatTemporaryBattleQuest('Rampaging Tsareena', 'Sordward and Shielbert are forcing Pokémon to rampage in Galar\'s Stadiums. First is a Tsareena in Turffield Stadium. Defeat it.');
        swordShieldQuestLine.addQuest(clearRampagingTsareena);
        const clearRampagingGyarados = new DefeatTemporaryBattleQuest('Rampaging Gyarados', 'Sordward and Shielbert have forced a Gyarados to rampage in Hulbury Stadium. Defeat it as well.');
        swordShieldQuestLine.addQuest(clearRampagingGyarados);
        const clearRampagingTorkoal = new DefeatTemporaryBattleQuest('Rampaging Torkoal', 'Sordward and Shielbert have forced a Torkoal to rampage in Motostoke Stadium. Defeat it as well.');
        swordShieldQuestLine.addQuest(clearRampagingTorkoal);
        const talktoSordwardShielbert2 = new TalkToNPCQuest(SordwardShielbert2, 'Talk to Sordward & Shielbert in Wedgehurst.');
        swordShieldQuestLine.addQuest(talktoSordwardShielbert2);
        const clearSordwardandShielbert = new DefeatTemporaryBattleQuest('Sordward & Shielbert', 'Sordward and Shielbert are trying to steal the Wishing Stars at Professor Magnolia\'s Lab in Wedgehurst. Stop them.');
        swordShieldQuestLine.addQuest(clearSordwardandShielbert);
        const clearRampagingConkeldurr = new DefeatTemporaryBattleQuest('Rampaging Conkeldurr', 'Defeat Conkeldurr.');
        const clearRampagingDusknoir = new DefeatTemporaryBattleQuest('Rampaging Dusknoir', 'Defeat Dusknoir.');
        swordShieldQuestLine.addQuest(new MultipleQuestsQuest([
            clearRampagingConkeldurr,
            clearRampagingDusknoir,
        ], 'Sordward and Shielbert have forced a Conkeldurr and a Dusknoir to rampage in Stow-on-Side Stadium. Defeat them both.'));
        const clearGymLeaderBede2 = new DefeatTemporaryBattleQuest('Gym Leader Bede', 'There were rampaging Pokémon at Ballonlea Stadium, but Bede already defeated them. There are no more rampaging Pokémon for now, and he wants to battle.');
        swordShieldQuestLine.addQuest(clearGymLeaderBede2);
        const clearRampagingGigalith = new DefeatTemporaryBattleQuest('Rampaging Gigalith', 'Defeat Gigalith.');
        const clearRampagingFroslass = new DefeatTemporaryBattleQuest('Rampaging Froslass', 'Defeat Froslass.');
        swordShieldQuestLine.addQuest(new MultipleQuestsQuest([
            clearRampagingGigalith,
            clearRampagingFroslass,
        ], 'Sordward and Shielbert have forced a Gigalith and a Froslass to rampage in Circhester Stadium. Defeat them both'));
        const clearGymLeaderMarnie = new DefeatTemporaryBattleQuest('Gym Leader Marnie', 'There are no more rampaging Pokémon for now and Marnie wants to battle you in Spikemuth.');
        swordShieldQuestLine.addQuest(clearGymLeaderMarnie);
        const clearRampagingHaxorus = new DefeatTemporaryBattleQuest('Rampaging Haxorus', 'Sordward and Shielbert have forced a Haxorus to rampage in Hammerlocke Stadium. Hopefully this is the last one.');
        swordShieldQuestLine.addQuest(clearRampagingHaxorus);
        const talktoSordwardShielbert3 = new TalkToNPCQuest(SordwardShielbert3, 'Talk to Sordward & Shielbert in the Energy Plant.');
        swordShieldQuestLine.addQuest(talktoSordwardShielbert3);
        const clearSordward2 = new DefeatTemporaryBattleQuest('Sordward 2', 'Defeat Sordward.');
        const clearShielbert2 = new DefeatTemporaryBattleQuest('Shielbert 2', 'Defeat Shielbert.');
        swordShieldQuestLine.addQuest(new MultipleQuestsQuest([
            clearSordward2,
            clearShielbert2,
        ], 'Sordward and Shielbert are trying to use the Rusted Sword and Shield to make Zacian and Zamazenta go on a rampage in Energy Plant. Stop them.'));
        const talktoSordwardShielbert4 = new TalkToNPCQuest(SordwardShielbert4, 'Talk to Sordward & Shielbert in the Energy Plant.');
        swordShieldQuestLine.addQuest(talktoSordwardShielbert4);
        const clearRampagingZacian = new DefeatTemporaryBattleQuest('Rampaging Zacian', 'Defeat Zacian.');
        const clearRampagingZamazenta = new DefeatTemporaryBattleQuest('Rampaging Zamazenta', 'Defeat Zamazenta.');
        swordShieldQuestLine.addQuest(new MultipleQuestsQuest([
            clearRampagingZacian,
            clearRampagingZamazenta,
        ], 'Zacian and Zamazenta are rampaging in Energy Plant. Defeat them!'));
        const talktoPiers = new TalkToNPCQuest(Piers, 'Talk to Piers in the Energy Plant.');
        swordShieldQuestLine.addQuest(talktoPiers);
        const catchZacian = new CaptureSpecificPokemonQuest('Zacian (Battle Hero)', 1, true).withDescription('Catch Zacian.');
        const catchZamazenta = new CaptureSpecificPokemonQuest('Zamazenta (Battle Hero)', 1, true).withDescription('Catch Zamazenta.');
        swordShieldQuestLine.addQuest(new MultipleQuestsQuest([
            catchZacian,
            catchZamazenta,
        ], 'Now that they have calmed down, Zacian and Zamazenta seem to be willing to let you try to catch them!'));
        App.game.quests.questLines().push(swordShieldQuestLine);
    }
    // Available post-E4
    static createDojoArmorQuestLine() {
        const dojoArmorQuestLine = new QuestLine('The Dojo\'s Armor', 'Obtain the Secret Armor of the Master Dojo.', new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion), GameConstants.BulletinBoards.Armor);
        const talktoMustard1 = new TalkToNPCQuest(Mustard1, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard1);
        const clearMustard = new DefeatTemporaryBattleQuest('Mustard', 'Mustard wants to test your ability at the Master Dojo. Defeat him.');
        dojoArmorQuestLine.addQuest(clearMustard);
        const talktoMustard2 = new TalkToNPCQuest(Mustard2, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard2);
        const catch6GalarianSlowpoke = new CaptureSpecificPokemonQuest('Galarian Slowpoke', 6);
        dojoArmorQuestLine.addQuest(catch6GalarianSlowpoke);
        const talktoMustard3 = new TalkToNPCQuest(Mustard3, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard3);
        const talktoMustard4 = new TalkToNPCQuest(Mustard4, 'It seems Mustard still wants to talk to you? Talk to Mustard again at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard4);
        const talktoKlara1 = new TalkToNPCQuest(Klara1, 'Talk to Klara.');
        const talktoAvery1 = new TalkToNPCQuest(Avery1, 'Talk to Avery.');
        dojoArmorQuestLine.addQuest(new MultipleQuestsQuest([
            talktoKlara1,
            talktoAvery1,
        ], 'Talk to Klara and Avery in Warm-Up Tunnel.'));
        const clearKlara2 = new DefeatTemporaryBattleQuest('Klara 2', 'Defeat Klara.');
        const clearAvery2 = new DefeatTemporaryBattleQuest('Avery 2', 'Defeat Avery.');
        dojoArmorQuestLine.addQuest(new MultipleQuestsQuest([
            clearKlara2,
            clearAvery2,
        ], 'You, Klara and Avery have happened upon the same Max Mushroom in Warm-Up Tunnel. Defeat them both to win it.').withCustomReward(() => ItemList.Max_Mushroom_IoA.gain(1)));
        const talktoMustard5 = new TalkToNPCQuest(Mustard5, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard5);
        const talktoKlara2 = new TalkToNPCQuest(Klara2, 'Talk to Klara.');
        const talktoAvery2 = new TalkToNPCQuest(Avery2, 'Talk to Avery.');
        dojoArmorQuestLine.addQuest(new MultipleQuestsQuest([
            talktoKlara2,
            talktoAvery2,
        ], 'Talk to Klara and Avery in the Master Dojo.'));
        const clearKlara3 = new DefeatTemporaryBattleQuest('Klara 3', 'Defeat Klara.');
        const clearAvery3 = new DefeatTemporaryBattleQuest('Avery 3', 'Defeat Avery');
        dojoArmorQuestLine.addQuest(new MultipleQuestsQuest([
            clearKlara3,
            clearAvery3,
        ], 'For the final trial, you must defeat both Klara and Avery on the Master Dojo Battle Court.'));
        const talktoMustard6 = new TalkToNPCQuest(Mustard6, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard6);
        const catchKubfu = new CaptureSpecificPokemonQuest('Kubfu');
        dojoArmorQuestLine.addQuest(catchKubfu);
        const talktoMustard7 = new TalkToNPCQuest(Mustard7, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard7);
        const defeatDark = new CustomQuest(500, 0, 'Defeat 500 Dark-type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Dark)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        const defeatWater = new CustomQuest(500, 0, 'Defeat 500 Water-type Pokémon.', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Water)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        dojoArmorQuestLine.addQuest(new MultipleQuestsQuest([
            defeatDark,
            defeatWater,
        ], 'Train Kubfu by defeating Dark and Water-type Pokémon.'));
        const talktoMustard8 = new TalkToNPCQuest(Mustard8, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard8);
        const catchDark = new CapturePokemonTypesQuest(250, 0, PokemonType.Dark);
        const catchWater = new CapturePokemonTypesQuest(250, 0, PokemonType.Water);
        dojoArmorQuestLine.addQuest(new MultipleQuestsQuest([
            catchDark,
            catchWater,
        ], 'Train Kubfu more by catching or hatching Dark and Water-type Pokémon.'));
        const talktoMustard9 = new TalkToNPCQuest(Mustard9, 'Talk to Mustard at the Master Dojo.');
        dojoArmorQuestLine.addQuest(talktoMustard9);
        const catchUrshifuSingleStrike = new CaptureSpecificPokemonQuest('Urshifu (Single Strike)');
        const catchUrshifuRapidStrike = new CaptureSpecificPokemonQuest('Urshifu (Rapid Strike)');
        dojoArmorQuestLine.addQuest(new MultipleQuestsQuest([
            catchUrshifuSingleStrike,
            catchUrshifuRapidStrike,
        ], 'Level up Kubfu in both of the Towers of Two Fists to obtain Urshifu!'));
        const talktoMustard10 = new TalkToNPCQuest(Mustard10, 'Talk to Mustard at one of the Towers of Two Fists.');
        dojoArmorQuestLine.addQuest(talktoMustard10);
        App.game.quests.questLines().push(dojoArmorQuestLine);
    }
    // Available after defeating Ash Ketchum Alola
    static createJungleSecretsQuestLine() {
        const jungleSecretsQuestLine = new QuestLine('Secrets of the Jungle', 'Discover the secrets of the jungle.', new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion), new TemporaryBattleRequirement('Ash Ketchum Alola')]), GameConstants.BulletinBoards.Armor);
        const talktoJungleAsh1 = new TalkToNPCQuest(JungleAsh1, 'Ash Ketchum wants to talk to you at the Master Dojo.');
        jungleSecretsQuestLine.addQuest(talktoJungleAsh1);
        const talktoJungleKoko1 = new TalkToNPCQuest(JungleKoko1, 'Talk to Ash Ketchum\'s friend, Koko, in Glimwood Tangle.');
        jungleSecretsQuestLine.addQuest(talktoJungleKoko1);
        const catchZarude = new CaptureSpecificPokemonQuest('Zarude').withDescription('Catch the missing Zarude roaming around the Isle of Armor.');
        jungleSecretsQuestLine.addQuest(catchZarude);
        const talktoJungleKoko2 = new TalkToNPCQuest(JungleKoko2, 'Take Zarude back to Koko in Glimwood Tangle.');
        jungleSecretsQuestLine.addQuest(talktoJungleKoko2);
        const clearZarudeTribe1 = new DefeatTemporaryBattleQuest('Zarude Tribe 1', 'A group of Zarude are attacking you. Defeat them.');
        jungleSecretsQuestLine.addQuest(clearZarudeTribe1);
        const talktoJungleKoko3 = new TalkToNPCQuest(JungleKoko3, 'Talk to Koko in Glimwood Tangle.');
        jungleSecretsQuestLine.addQuest(talktoJungleKoko3);
        const clearZarudeTribes = new CustomQuest(2, 0, 'Another two groups of Zarude are attacking you. Defeat them as well.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Zarude Tribe 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Zarude Tribe 3')]());
        jungleSecretsQuestLine.addQuest(clearZarudeTribes);
        const talktoJungleKoko4 = new TalkToNPCQuest(JungleKoko4, 'Talk to Koko in Glimwood Tangle.');
        jungleSecretsQuestLine.addQuest(talktoJungleKoko4);
        const talktoJungleAsh2 = new TalkToNPCQuest(JungleAsh2, 'Talk to Ash Ketchum at the Master Dojo.');
        jungleSecretsQuestLine.addQuest(talktoJungleAsh2);
        const clearGalarAsh = new DefeatTemporaryBattleQuest('Ash Ketchum Galar', 'Defeat Ash Ketchum outside the Master Dojo.');
        jungleSecretsQuestLine.addQuest(clearGalarAsh);
        const talktoJungleKoko5 = new TalkToNPCQuest(JungleKoko5, 'Talk to Koko in Glimwood Tangle.');
        jungleSecretsQuestLine.addQuest(talktoJungleKoko5);
        const clearZarudeDada = new DefeatTemporaryBattleQuest('Zarude (Dada)', 'A final Zarude wants to challenge you. Defeat Zarude (Dada).');
        jungleSecretsQuestLine.addQuest(clearZarudeDada);
        const talktoJungleAsh3 = new TalkToNPCQuest(JungleAsh3, 'Talk to Ash Ketchum in Glimwood Tangle.');
        jungleSecretsQuestLine.addQuest(talktoJungleAsh3);
        const defeatFloweringCelebi = new DefeatTemporaryBattleQuest('Flowering Celebi', 'Play with Flowering Celebi.');
        jungleSecretsQuestLine.addQuest(defeatFloweringCelebi);
        const talktoJungleKoko6 = new TalkToNPCQuest(JungleKoko6, 'Talk to Koko in Glimwood Tangle.');
        jungleSecretsQuestLine.addQuest(talktoJungleKoko6);
        App.game.quests.questLines().push(jungleSecretsQuestLine);
    }
    // Available post-E4
    static createGalarCrownQuestLine() {
        const galarCrownQuestLine = new QuestLine('The Crown of Galar', 'Help the ancient king of Galar, Calyrex, return to its former glory.', new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion), GameConstants.BulletinBoards.Crown);
        const talktoCrownPeony1 = new TalkToNPCQuest(CrownPeony1, 'Talk to Peony to find out about the ancient king of Galar.');
        galarCrownQuestLine.addQuest(talktoCrownPeony1);
        const clearCalyrex = new DefeatTemporaryBattleQuest('Calyrex', 'A mysterious Pokémon has appeared and challenged you to a battle.');
        galarCrownQuestLine.addQuest(clearCalyrex);
        const talktoCalyrex1 = new TalkToNPCQuest(Calyrex1, 'The Pokémon you just fought has possessed Peony. Talk to it.');
        galarCrownQuestLine.addQuest(talktoCalyrex1);
        const oldCemetery = new DefeatPokemonsQuest(50, 0, 49, GameConstants.Region.galar, 'Old Cemetery');
        const snowslideSlope = new DefeatPokemonsQuest(50, 0, 54, GameConstants.Region.galar, 'Snowslide Slope');
        galarCrownQuestLine.addQuest(new MultipleQuestsQuest([
            oldCemetery,
            snowslideSlope,
        ], 'Calyrex is going to Old Cemetery and Snowslide Slope to grow a Shaderoot Carrot and an Iceroot Carrot. Protect it from wild Pokémon so it can concentrate.')
            .withCustomReward(() => {
            ItemList.Shaderoot_Carrot_Calyrex.gain(1);
            ItemList.Iceroot_Carrot_Calyrex.gain(1);
        }));
        const talktoCalyrex2 = new TalkToNPCQuest(Calyrex2, 'After growing both carrots, Calyrex has returned to Freezington. Talk to it.');
        galarCrownQuestLine.addQuest(talktoCalyrex2);
        const clearSpectrier = new DefeatTemporaryBattleQuest('Spectrier', 'Defeat Spectrier.');
        const clearGlastrier = new DefeatTemporaryBattleQuest('Glastrier', 'Defeat Glastrier.');
        galarCrownQuestLine.addQuest(new MultipleQuestsQuest([
            clearSpectrier,
            clearGlastrier,
        ], 'Fight Calyrex\'s steeds to get them out of Freezington!'));
        const talktoCalyrex3 = new TalkToNPCQuest(Calyrex3, 'Talk to Calyrex again.');
        galarCrownQuestLine.addQuest(talktoCalyrex3);
        const catchSpectrier = new CaptureSpecificPokemonQuest('Spectrier');
        const catchGlastrier = new CaptureSpecificPokemonQuest('Glastrier');
        galarCrownQuestLine.addQuest(new MultipleQuestsQuest([
            catchSpectrier,
            catchGlastrier,
        ], 'Spectrier and Glastrier are now roaming the Crown Tundra. Catch them when the opportunity arises!'));
        const UnityReward = () => {
            App.game.keyItems.gainKeyItem(KeyItemType.Reins_of_unity, true);
            $('#npcModal').one('hidden.bs.modal', () => {
                KeyItemController.showGainModal(KeyItemType.Reins_of_unity);
            });
        };
        const talktoCalyrex4 = new TalkToNPCQuest(Calyrex4, 'Now that you have captured both of its steeds, talk to Calyrex at the Crown Shrine.').withCustomReward(UnityReward);
        galarCrownQuestLine.addQuest(talktoCalyrex4);
        const catchCalyrex = new CaptureSpecificPokemonQuest('Calyrex').withDescription('Now that you have found and caught Glastrier and Spectrier, Calyrex wants to challenge you at Crown Shrine. Catch it!');
        galarCrownQuestLine.addQuest(catchCalyrex);
        const talktoCrownPeony2 = new TalkToNPCQuest(CrownPeony2, 'Now that you have captured Calyrex, go report back to Peony!');
        galarCrownQuestLine.addQuest(talktoCrownPeony2);
        App.game.quests.questLines().push(galarCrownQuestLine);
    }
    /* Crown QuestLines */
    // Available post-E4
    static createDynaTreeBirdsQuestLine() {
        const dynaTreeBirdsQuestLine = new QuestLine('The Birds of the Dyna Tree', 'Find the Legendary birds of the Dyna Tree.', new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion), GameConstants.BulletinBoards.Crown);
        const talktoBirdPeony1 = new TalkToNPCQuest(BirdPeony1, 'Talk to Peony to find out about some legendary bird sightings.');
        dynaTreeBirdsQuestLine.addQuest(talktoBirdPeony1);
        const clearDynaTreeHill = new DefeatDungeonQuest(1, 0, 'Dyna Tree Hill').withDescription('Some unknown bird Pokémon have been sighted near Dyna Tree Hill in Ballimere Lake. Explore the area to see for yourself.');
        dynaTreeBirdsQuestLine.addQuest(clearDynaTreeHill);
        const clearDynaTreeBirds = new DefeatTemporaryBattleQuest('Dyna Tree Birds', 'You witnessed 3 powerful looking bird pokemon resembling Articuno, Zapdos, and Moltres fighting over the fruit of the Dyna Tree. Upon noticing you, they attack!');
        dynaTreeBirdsQuestLine.addQuest(clearDynaTreeBirds);
        const talktoBirdPeony2 = new TalkToNPCQuest(BirdPeony2, 'Tell Peony about your encounter with the birds resembling Articuno, Zapdos, and Moltres.');
        dynaTreeBirdsQuestLine.addQuest(talktoBirdPeony2);
        const chaseGalarianArticuno = new CustomQuest(3, 0, 'Search for Galarian Articuno in the Crown Tundra.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Articuno 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Articuno 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Articuno 3')]());
        const chaseGalarianZapdos = new CustomQuest(3, 0, 'Search for Galarian Zapdos in the Wild Area of Southern Galar.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Zapdos 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Zapdos 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Zapdos 3')]());
        const chaseGalarianMoltres = new CustomQuest(3, 0, 'Search for Galarian Moltres in the Isle of Armor.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Moltres 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Moltres 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Galarian Moltres 3')]());
        dynaTreeBirdsQuestLine.addQuest(new MultipleQuestsQuest([
            chaseGalarianArticuno,
            chaseGalarianZapdos,
            chaseGalarianMoltres,
        ], 'Galarian Articuno, Zapdos, and Moltres have fled to the Crown Tundra, Southern Galar, and the Isle of Armor respectively. Search for them.'));
        const talktoBirdPeony3 = new TalkToNPCQuest(BirdPeony3, 'You defeated Galarian Articuno, Zapdos, and Moltres multiple times each. Ask Peony what to do next.');
        dynaTreeBirdsQuestLine.addQuest(talktoBirdPeony3);
        const catchGalarianArticuno = new CaptureSpecificPokemonQuest('Galarian Articuno');
        const catchGalarianZapdos = new CaptureSpecificPokemonQuest('Galarian Zapdos');
        const catchGalarianMoltres = new CaptureSpecificPokemonQuest('Galarian Moltres');
        dynaTreeBirdsQuestLine.addQuest(new MultipleQuestsQuest([
            catchGalarianArticuno,
            catchGalarianZapdos,
            catchGalarianMoltres,
        ], 'Galarian Articuno, Zapdos, and Moltres are now roaming in the Crown Tundra, Southern Galar, and the Isle of Armor respectively. Catch them when the opportunity arises!'));
        const talktoBirdPeony4 = new TalkToNPCQuest(BirdPeony4, 'Now that you have captured Galarian Articuno, Zapdos, and Moltres, go report back to Peony!');
        dynaTreeBirdsQuestLine.addQuest(talktoBirdPeony4);
        App.game.quests.questLines().push(dynaTreeBirdsQuestLine);
    }
    // Available post-E4
    static createAncientGolemsQuestLine() {
        const ancientGolemsQuestLine = new QuestLine('The Ancient Golems', 'Discover the ancient Golems in the ruins of the Crown Tundra.', new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion), GameConstants.BulletinBoards.Crown);
        const talktoGolemPeony1 = new TalkToNPCQuest(GolemPeony1, 'Talk to Peony to find out about some ancient ruins.');
        ancientGolemsQuestLine.addQuest(talktoGolemPeony1);
        const threePointPass = new DefeatPokemonsQuest(100, 0, 52, GameConstants.Region.galar, 'Peony told you of a peculiar ruin located at Three-Point Pass. Explore the area to find it.');
        ancientGolemsQuestLine.addQuest(threePointPass);
        const talktoGolemPeony2 = new TalkToNPCQuest(GolemPeony2, 'The ruins were locked, go report back to Peony.');
        ancientGolemsQuestLine.addQuest(talktoGolemPeony2);
        const clearRockPeakRuins = new DefeatDungeonQuest(10, 0, 'Rock Peak Ruins').withDescription('Clear Rock Peak Ruins 10 times.');
        const clearIcebergRuins = new DefeatDungeonQuest(10, 0, 'Iceberg Ruins').withDescription('Clear Iceberg Ruins 10 times.');
        const clearIronRuins = new DefeatDungeonQuest(10, 0, 'Iron Ruins').withDescription('Clear Iron Ruins 10 times.');
        ancientGolemsQuestLine.addQuest(new MultipleQuestsQuest([
            clearRockPeakRuins,
            clearIcebergRuins,
            clearIronRuins,
        ], 'Clear Rock Peak Ruins, Iceberg Ruins, and Iron Ruins 10 times each.'));
        const talktoGolemPeony3 = new TalkToNPCQuest(GolemPeony3, 'The ruins are still locked, report to Peony.');
        ancientGolemsQuestLine.addQuest(talktoGolemPeony3);
        const catchRegirock = new CaptureSpecificPokemonQuest('Regirock');
        const catchRegice = new CaptureSpecificPokemonQuest('Regice');
        const catchRegisteel = new CaptureSpecificPokemonQuest('Registeel');
        ancientGolemsQuestLine.addQuest(new MultipleQuestsQuest([
            catchRegirock,
            catchRegice,
            catchRegisteel,
        ], 'Catch Regirock, Regice, and Registeel in the Rock Peak Ruins, Iceberg Ruins, and Iron Ruins respectively.'));
        const talktoGolemPeony4 = new TalkToNPCQuest(GolemPeony4, 'You have captured Regirock, Regice, and Registeel, now go report back to Peony.');
        ancientGolemsQuestLine.addQuest(talktoGolemPeony4);
        const clearRegigigas = new DefeatTemporaryBattleQuest('Regigigas', 'Defeat Regigigas at Giant\'s Bed!');
        const catchRegigigas = new CaptureSpecificPokemonQuest('Regigigas');
        ancientGolemsQuestLine.addQuest(new MultipleQuestsQuest([
            clearRegigigas,
            catchRegigigas,
        ], 'After you caught three of the legendary golems it created, Regigigas appeared in Giant\'s Bed. Defeat and catch it!'));
        const talktoGolemPeony5 = new TalkToNPCQuest(GolemPeony5, 'You have captured Regigigas, now go report back to Peony.');
        ancientGolemsQuestLine.addQuest(talktoGolemPeony5);
        const catchRegieleki = new CaptureSpecificPokemonQuest('Regieleki');
        const catchRegidrago = new CaptureSpecificPokemonQuest('Regidrago');
        ancientGolemsQuestLine.addQuest(new MultipleQuestsQuest([
            catchRegieleki,
            catchRegidrago,
        ], 'Now that it has finally unlocked, catch Regieleki and Regidrago in the Split-Decision Ruins!'));
        const talktoGolemPeony6 = new TalkToNPCQuest(GolemPeony6, 'You finally captured Regieleki and Regidrago. Go report back to Peony!');
        ancientGolemsQuestLine.addQuest(talktoGolemPeony6);
        App.game.quests.questLines().push(ancientGolemsQuestLine);
    }
    static createGigantamaxQuestLine() {
        const gigantamaxQuestLine = new QuestLine('The Lair of Giants', 'Explore the Max Lair and discover the Gigantamax Pokémon.', new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion), GameConstants.BulletinBoards.Crown);
        const talktoPeonia1 = new TalkToNPCQuest(Peonia1, 'Peony\'s daughter, Peonia, wants to talk to you in Freezington.');
        gigantamaxQuestLine.addQuest(talktoPeonia1);
        const clearMaxLair = new DefeatDungeonQuest(1, 0, 'Max Lair').withDescription('Clear Max Lair to encounter a Gigantamax Pokémon.');
        gigantamaxQuestLine.addQuest(clearMaxLair);
        const talktoPeonia2 = new TalkToNPCQuest(Peonia2, 'Report back to Peonia in Max Lair.');
        gigantamaxQuestLine.addQuest(talktoPeonia2);
        gigantamaxQuestLine.addQuest(new CustomQuest(1, undefined, 'Obtain 1 Wishing Piece', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(2, undefined, 'Obtain 2 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(4, undefined, 'Obtain 4 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(6, undefined, 'Obtain 6 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(9, undefined, 'Obtain 9 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(12, undefined, 'Obtain 12 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(16, undefined, 'Obtain 16 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(20, undefined, 'Obtain 20 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(25, undefined, 'Obtain 25 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(30, undefined, 'Obtain 30 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(36, undefined, 'Obtain 36 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(42, undefined, 'Obtain 42 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(49, undefined, 'Obtain 49 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(56, undefined, 'Obtain 56 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(64, undefined, 'Obtain 64 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(72, undefined, 'Obtain 72 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(81, undefined, 'Obtain 81 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(90, undefined, 'Obtain 90 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(100, undefined, 'Obtain 100 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(110, undefined, 'Obtain 110 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(121, undefined, 'Obtain 121 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(132, undefined, 'Obtain 132 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(144, undefined, 'Obtain 144 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(156, undefined, 'Obtain 156 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(169, undefined, 'Obtain 169 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(182, undefined, 'Obtain 182 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(196, undefined, 'Obtain 196 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(210, undefined, 'Obtain 210 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(225, undefined, 'Obtain 225 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        gigantamaxQuestLine.addQuest(new CustomQuest(240, undefined, 'Obtain 240 Wishing Pieces', player.itemList.Wishing_Piece).withInitialValue(0));
        const talktoPeonia3 = new TalkToNPCQuest(Peonia3, 'You\'ve finally obtained enough Wishing Pieces to attract every Gigantamax Pokémon to the Max Lair! Tell Peonia about your achievement in Max Lair.');
        gigantamaxQuestLine.addQuest(talktoPeonia3);
        const talktoGigantamaxLeon1 = new TalkToNPCQuest(GigantamaxLeon1, 'It seems something is going on in Hammerlocke! Talk to Leon in Energy Plant.');
        gigantamaxQuestLine.addQuest(talktoGigantamaxLeon1);
        const clearEternamaxEternatus = new DefeatTemporaryBattleQuest('Eternamax Eternatus', 'Eternamax Eternatus has appeared in the Energy Plant yet again! Bring it down once more.');
        gigantamaxQuestLine.addQuest(clearEternamaxEternatus);
        const talktoGigantamaxLeon2 = new TalkToNPCQuest(GigantamaxLeon2, 'You defeated Eternamax Eternatus once more. Talk to Leon in Energy Plant.');
        gigantamaxQuestLine.addQuest(talktoGigantamaxLeon2);
        const talktoPeonia4 = new TalkToNPCQuest(Peonia4, 'Go back to the Max Lair to tell Peonia what happened.');
        gigantamaxQuestLine.addQuest(talktoPeonia4);
        App.game.quests.questLines().push(gigantamaxQuestLine);
    }
    /* Hisui QuestLines */
    static createHisuiForcesQuestLine() {
        const hisuiForcesQuestLine = new QuestLine('Incarnate Forces of Hisui', 'Cogita would like you to catch the Forces of Nature.', new DevelopmentRequirement(), GameConstants.BulletinBoards.Hisui);
        const talktoForcesCogita1 = new TalkToNPCQuest(ForcesCogita1, 'Speak to Cogita in Galaxy Hall.');
        hisuiForcesQuestLine.addQuest(talktoForcesCogita1);
        const chaseTornadus = new CustomQuest(3, 0, 'Pursue Tornadus in the Alabaster Icelands.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Tornadus 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Tornadus 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Tornadus 3')]());
        const captureTornadus = new CaptureSpecificPokemonQuest('Tornadus', 1, true).withDescription('Catch Tornadus in the Alabaster Icelands');
        const chaseThundurus = new CustomQuest(3, 0, 'Pursue Thundurus in the Cobalt Coastlands.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Thundurus 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Thundurus 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Thundurus 3')]());
        const captureThundurus = new CaptureSpecificPokemonQuest('Thundurus', 1, true).withDescription('Catch Thundurus in the Cobalt Coastlands');
        const chaseLandorus = new CustomQuest(3, 0, 'Pursue Landorus in the Obsidian Fieldlands.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Landorus 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Landorus 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Landorus 3')]());
        const captureLandorus = new CaptureSpecificPokemonQuest('Landorus', 1, true).withDescription('Catch Landorus in the Obsidian Fieldlands');
        hisuiForcesQuestLine.addQuest(new MultipleQuestsQuest([
            chaseTornadus,
            captureTornadus,
            chaseThundurus,
            captureThundurus,
            chaseLandorus,
            captureLandorus,
        ], 'Tornadus, Thundurus and Landorus have been sighted in the Alabaster Icelands, Cobalt Coastlands and Obsidian Fieldland respectively. Pursue and capture them.'));
        const talktoForcesCogita2 = new TalkToNPCQuest(ForcesCogita2, 'Speak to Cogita at Ancient Retreat.');
        hisuiForcesQuestLine.addQuest(talktoForcesCogita2);
        const chaseEnamorus = new CustomQuest(3, 0, 'Pursue Enamorus in the Crimson Mirelands.', () => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Enamorus 1')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Enamorus 2')]() +
            App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Enamorus 3')]());
        hisuiForcesQuestLine.addQuest(chaseEnamorus);
        const captureEnamorus = new CaptureSpecificPokemonQuest('Enamorus', 1, true).withDescription('Catch Enamorus roaming around Hisui.');
        hisuiForcesQuestLine.addQuest(captureEnamorus);
        const talktoForcesCogita3 = new TalkToNPCQuest(ForcesCogita3, 'Speak to Cogita at Ancient Retreat.');
        hisuiForcesQuestLine.addQuest(talktoForcesCogita3);
        App.game.quests.questLines().push(hisuiForcesQuestLine);
    }
    static createHisuiArceusQuestLine() {
        const hisuiArceusQuestLine = new QuestLine('Arceus: The Deified Pokémon', 'Discover the truth of the Pokémon deity, Arceus.', new DevelopmentRequirement(), GameConstants.BulletinBoards.Hisui);
        App.game.quests.questLines().push(hisuiArceusQuestLine);
    }
    // Paldea Questlines
    static createPaldeaLegendsQuestLine() {
        const paldeaLegendsQuestLine = new QuestLine('Path of Legends', 'Help Arven search for the Herba Mystica.');
        const clearTrainerArven = new DefeatGymQuest(1, 0, 'Pokémon Trainer Arven').withDescription('Arven wants to test you and himself. Defeat him at Poco Path Lighthouse');
        paldeaLegendsQuestLine.addQuest(clearTrainerArven);
        App.game.quests.questLines().push(paldeaLegendsQuestLine);
    }
    static createPaldeaVictoryQuestLine() {
        const paldeaVictoryQuestLine = new QuestLine('Victory Road', 'Challenge Paldea\'s Gyms to challenge your new rival, Nemona.');
        const clearChampionNemona = new DefeatGymQuest(1, 0, 'Champion Nemona').withDescription('Finally, it\'s time to fight Nemona as equals! Defeat Champion Nemona in Mesagoza.');
        paldeaVictoryQuestLine.addQuest(clearChampionNemona);
        App.game.quests.questLines().push(paldeaVictoryQuestLine);
    }
    static createPaldeaStarfallQuestLine() {
        const paldeaStarfallQuestLine = new QuestLine('Starfall Street', 'Help Cassiopeia disband Team Star.');
        const clearCassiopeia = new DefeatGymQuest(1, 0, 'Penny of Team Star').withDescription('Penny has revealed herself to be Cassiopeia. Defeat her at Naranjuva Academy.');
        paldeaStarfallQuestLine.addQuest(clearCassiopeia);
        App.game.quests.questLines().push(paldeaStarfallQuestLine);
    }
    static createPaldeaWayHomeQuestLine() {
        const paldeaWayHomeQuestLine = new QuestLine('The Way Home', 'Help Koraidon and Miraidon find their homes in the mysterious Area Zero.', new MultiRequirement([
            new QuestLineCompletedRequirement('Path of Legends'),
            new QuestLineCompletedRequirement('Victory Road'),
            new QuestLineCompletedRequirement('Starfall Street'),
        ]), GameConstants.BulletinBoards.Paldea);
        App.game.quests.questLines().push(paldeaWayHomeQuestLine);
    }
    /* Event QuestLines */
    // From any bulletin board on April 1 (Hoopa Day).
    static createHoopaDayPikabluQuestLine() {
        const hoopaDayPikabluQuestLine = new QuestLine('How blu mouse?', 'Apparently a strange blue mouse-like Pokémon might be out there somewhere?', new SpecialEventRequirement('Hoopa Day'), GameConstants.BulletinBoards.All);
        const PikabluCatch = new CaptureSpecificPokemonQuest('Marill', 1, false, 5000).withDescription('Catch Pikablu.');
        hoopaDayPikabluQuestLine.addQuest(PikabluCatch);
        App.game.quests.questLines().push(hoopaDayPikabluQuestLine);
    }
    // From any bulletin board between April 8-29 (Easter).
    static createEasterQuestLine() {
        const easterQuestLine = new QuestLine('Egg Hunt', 'A basket of strange eggs has been spotted, see if you can find it!', new SpecialEventRequirement('Easter'), GameConstants.BulletinBoards.All);
        const defeatTogepiInKanto = new DefeatDungeonBossQuest('Viridian Forest', 'Egg Hunter').withDescription('Some strange eggs have been seen around Kanto. Go look for it! Maybe Erika knows more?');
        easterQuestLine.addQuest(defeatTogepiInKanto);
        const encounterSurpriseTogepiInJohto = new DefeatDungeonBossQuest('Ilex Forest', 'Egg Hunter').withDescription('Seems like this was just an Easter egg after all... But no time to dwell on that. Another report just came in, there have been sightings of some strange eggs in a forest in Johto!');
        easterQuestLine.addQuest(encounterSurpriseTogepiInJohto);
        const encounterTogepiInHoenn = new DefeatDungeonBossQuest('Petalburg Woods', 'Egg Hunter').withDescription('That looked like a Togepi!... well, maybe not. Anyway, there is a big Egg Hunt going on in the woods south of Rustboro in Hoenn; maybe you should take a look?');
        easterQuestLine.addQuest(encounterTogepiInHoenn);
        const talkToEggHunter = new TalkToNPCQuest(EasterEggHunter, 'The eggs ran away! Talk to the egg hunter in Petalburg Woods.');
        easterQuestLine.addQuest(talkToEggHunter);
        App.game.quests.questLines().push(easterQuestLine);
    }
    static isQuestLineCompleted(name) {
        var _b;
        return ((_b = App.game.quests.getQuestLine(name)) === null || _b === void 0 ? void 0 : _b.state()) == QuestLineState.ended;
    }
    static loadQuestLines() {
        this.createTutorial();
        this.createRocketKantoQuestLine();
        this.createBillsGrandpaQuestLine();
        this.createUndergroundQuestLine();
        this.createBillSeviiQuestLine();
        this.createPersonsofInterestQuestLine();
        this.createSickAmpharosQuestLine();
        this.createRocketJohtoQuestLine();
        this.createJohtoBeastsQuestLine();
        this.createJohtoSuicuneQuestLine();
        this.createlugiaJohtoQuestLine();
        this.createhoohJohtoQuestLine();
        this.createCelebiJohtoQuestLine();
        this.createAquaMagmaHoennQuestLine();
        this.createWeatherTrioQuestLine();
        this.createDeoxysQuestLine();
        this.createEonDuoQuestLine();
        this.createRubySapphireSeviiQuestLine();
        this.createPinkanThemeparkQuestLine();
        this.createRegiTrioQuestLine();
        this.createJirachiQuestLine();
        this.createMetaGroudonQuestLine();
        this.createOrreColosseumQuestLine();
        this.createGalacticSinnohQuestLine();
        this.createManaphyQuestLine();
        this.createGiratinaQuestLine();
        this.createPlasmaUnovaQuestLine();
        this.createSwordsQuestLine();
        this.createGenesectQuestLine();
        this.createOrreXDQuestLine();
        this.createDeltaEpisodeQuestLine();
        this.createPrimalReversionQuestLine();
        this.createDetectivePikachuQuestLine();
        this.createVivillonQuestLine();
        this.createFlareKalosQuestLine();
        this.createPrincessDiancieQuestLine();
        this.createClashOfAgesQuestLine();
        this.createUnrivaledPowerQuestLine();
        this.createMelemeleAlolaQuestLine();
        this.createAkalaAlolaQuestLine();
        this.createUlaulaAlolaQuestLine();
        this.createPoniAlolaQuestLine();
        this.createUltraNecrozmaAlolaQuestLine();
        this.createIslandChallengeQuestLine();
        this.createSilvallyTypesQuestLine();
        this.createUltraBeastQuestLine();
        this.createMagikarpJumpQuestLine();
        this.createDarkestDayQuestLine();
        this.createSwordShieldQuestLine();
        this.createDojoArmorQuestLine();
        this.createJungleSecretsQuestLine();
        this.createGalarCrownQuestLine();
        this.createDynaTreeBirdsQuestLine();
        this.createAncientGolemsQuestLine();
        this.createGigantamaxQuestLine();
        this.createHisuiForcesQuestLine();
        this.createHisuiArceusQuestLine();
        this.createPaldeaLegendsQuestLine();
        this.createPaldeaVictoryQuestLine();
        this.createPaldeaStarfallQuestLine();
        this.createPaldeaWayHomeQuestLine();
        this.createEasterQuestLine();
        this.createHoopaDayPikabluQuestLine();
        this.createDrSplashQuestLine();
        this.createMeltanQuestLine();
        this.createRainbowRocketQuestLine();
    }
}
_a = QuestLineHelper;
// Multi-quest statics
// Item rewards
QuestLineHelper.itemReward = (item, amount, npc) => (function () {
    var _b;
    player.gainItem(item, amount);
    const subject = npc ? `${npc} has given you` : 'You found';
    Notifier.notify({
        title: (_b = this.parentQuestLine) === null || _b === void 0 ? void 0 : _b.name,
        message: `${subject} ${amount} ${GameConstants.humanifyString(item)}(s)!`,
        type: NotificationConstants.NotificationOption.success,
        sound: NotificationConstants.NotificationSound.Quests.quest_ready_to_complete,
        timeout: 3e4,
    });
});
// Alola z crystals, also used for temp battles
QuestLineHelper.zCrystalGet = (crystalType) => function () {
    player.gainItem(GameConstants.zCrystalItemType[crystalType], 1);
    Notifier.notify({
        title: 'Z Crystal',
        message: `<img width="60" src="assets/images/items/zCrystal/${GameConstants.zCrystalItemType[crystalType]}.svg"/> You got the ${GameConstants.zCrystalItemType[crystalType]}!`,
        timeout: 1e4,
    });
};
QuestLineHelper.createZCrystalTrial = (crystalType, dungeon, captain, successMessage, questName, nonTrial, nonTrialDescription, nonTrialBoss) => {
    const description = nonTrial ? nonTrialDescription : `Clear ${captain}\'s Trial at ${dungeon}.`;
    const dungeonBoss = nonTrial ? nonTrialBoss : `Trial Site of ${dungeon}`;
    const clearTrial = new DefeatDungeonBossQuest(dungeon, dungeonBoss)
        .withDescription(description)
        .withCustomReward(_a.zCrystalGet(crystalType))
        .withOptionalArgs({
        clearedMessage: `${successMessage}</br></br><img width="100" src="assets/images/items/zCrystal/${GameConstants.zCrystalItemType[crystalType]}.svg"/>`,
        npcDisplayName: `${captain}`,
        npcImageName: `${captain}`,
    });
    return questName.addQuest(clearTrial);
};
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Saveable.d.ts" />
class Quests {
    constructor() {
        this.saveKey = 'quests';
        this.defaults = {
            xp: 0,
            refreshes: 0,
            freeRefresh: false,
        };
        this.xp = ko.observable(0).extend({ numeric: 0 });
        this.refreshes = ko.observable(0);
        this.lastRefresh = new Date();
        this.lastRefreshLevel = 0;
        this.lastRefreshRegion = 0;
        this.freeRefresh = ko.observable(false);
        this.questList = ko.observableArray();
        this.questLines = ko.observableArray();
        this.level = ko.pureComputed(() => {
            return this.xpToLevel(this.xp());
        });
        this.questSlots = ko.pureComputed(() => {
            // Minimum of 1, Maximum of 4
            return Math.min(4, Math.max(1, Math.floor((this.level() + 5) / 5)));
        });
        // Get current quests by status
        this.completedQuests = ko.pureComputed(() => {
            return this.sortedQuestList().filter(quest => quest.claimed());
        });
        this.currentQuests = ko.pureComputed(() => {
            return this.questList().filter(quest => quest.inProgress());
        });
        this.incompleteQuests = ko.pureComputed(() => {
            return this.questList().filter(quest => !quest.claimed());
        });
        this.sortedQuestList = ko.pureComputed(() => {
            const list = [...this.questList()];
            return list.sort(Quests.questCompareBy);
        });
    }
    static questCompareBy(quest1, quest2) {
        if (Quests.getQuestSortStatus(quest1) < Quests.getQuestSortStatus(quest2)) {
            return -1;
        }
        else if (Quests.getQuestSortStatus(quest1) > Quests.getQuestSortStatus(quest2)) {
            return 1;
        }
        else if (quest1.pointsReward > quest2.pointsReward) {
            return -1;
        }
        else if (quest1.pointsReward < quest2.pointsReward) {
            return 1;
        }
        return 0;
    }
    static getQuestSortStatus(quest) {
        if (quest.isCompleted() && !quest.claimed()) {
            return 0;
        }
        else if (quest.isCompleted()) {
            return 3;
        }
        else if (quest.inProgress()) {
            return 1;
        }
        return 2;
    }
    /**
     * Gets a quest line by name
     * @param name The quest line name
     */
    getQuestLine(name) {
        return this.questLines().find(ql => ql.name.toLowerCase() == name.toLowerCase());
    }
    beginQuest(index) {
        const quest = this.questList()[index];
        // Check if we can start a new quest, and the requested quest isn't started or completed
        if (this.canStartNewQuest() && quest && !quest.inProgress() && !quest.isCompleted()) {
            quest.begin();
            if ((Settings.getSetting('hideQuestsOnFull').value) && this.currentQuests().length >= this.questSlots()) {
                $('#QuestModal').modal('hide');
            }
        }
        else {
            Notifier.notify({
                message: 'You cannot start more quests.',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    quitQuest(index, shouldConfirm = false) {
        // Check if we can quit this quest
        const quest = this.questList()[index];
        if (quest && quest.inProgress()) {
            quest.quit(shouldConfirm);
        }
        else {
            Notifier.notify({
                message: 'You cannot quit this quest.',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    claimQuest(index) {
        // Check if we can claim this quest
        const quest = this.questList()[index];
        if (quest && quest.isCompleted() && !quest.claimed()) {
            quest.claim();
            if (player.highestRegion() >= GameConstants.Region.kalos && App.game.party.alreadyCaughtPokemonByName('Medicham') && !player.hasMegaStone(GameConstants.MegaStoneType.Medichamite)) {
                if (Rand.chance(Math.max(0, (App.game.quests.level() - 15) / 8192))) {
                    player.gainMegaStone(GameConstants.MegaStoneType.Medichamite);
                }
            }
            // Once the player completes every available quest, refresh the list for free
            if (this.allQuestClaimed()) {
                const bonus = this.calcListBonus();
                App.game.wallet.gainQuestPoints(bonus);
                this.refreshQuests(true);
                // Give player a free refresh
                this.freeRefresh(true);
                Notifier.notify({
                    message: `All quests completed. Your quest list has been refreshed and you gained an extra <img src="./assets/images/currency/questPoint.svg" height="24px"/> ${bonus.toLocaleString('en-US')}.`,
                    type: NotificationConstants.NotificationOption.info,
                    timeout: 1e4,
                    setting: NotificationConstants.NotificationSetting.General.quest_completed,
                });
            }
        }
        else {
            console.trace('cannot claim quest..');
            Notifier.notify({
                message: 'You cannot claim this quest.',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    calcListBonus() {
        const level = this.level();
        const part = this.calcListBonusPercent(level);
        return Math.round(this.questList().reduce((acc, q) => acc + q.pointsReward, 0) * part);
    }
    calcListBonusPercent(level) {
        return Math.max(0.1, Math.min(5000 + level * 100, Math.pow((2 * level), 2) + 100) / 10000);
    }
    addXP(amount) {
        if (isNaN(amount)) {
            return;
        }
        const currentLevel = this.level();
        GameHelper.incrementObservable(this.xp, amount);
        // Refresh the list each time a player levels up
        if (this.level() > currentLevel) {
            Notifier.notify({
                message: `Your quest level has increased to ${this.level()}!\n<i>You have a free quest refresh.</i>`,
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
                sound: NotificationConstants.NotificationSound.Quests.quest_level_increased,
            });
            this.freeRefresh(true);
            App.game.logbook.newLog(LogBookTypes.QUEST, createLogContent.questLevelUp({ level: this.level().toLocaleString() }));
        }
    }
    generateQuestList(date = new Date(), level = this.level()) {
        if (this.lastRefresh.toDateString() != date.toDateString()) {
            this.refreshes(0);
        }
        this.lastRefresh = date;
        this.lastRefreshLevel = level;
        this.lastRefreshRegion = player.highestRegion();
        this.currentQuests().forEach(quest => quest.quit());
        this.questList(QuestHelper.generateQuestList(this.generateSeed(date, level), GameConstants.QUESTS_PER_SET));
    }
    generateSeed(date = new Date(), level = this.level()) {
        return Number(level * (date.getFullYear() + this.refreshes() * 10) * date.getDate() + 1000 * date.getMonth() + 100000 * date.getDate());
    }
    refreshQuests(free = this.freeRefresh(), shouldConfirm = false) {
        return __awaiter(this, void 0, void 0, function* () {
            if (free || this.canAffordRefresh()) {
                if (!free) {
                    if (shouldConfirm && !(yield Notifier.confirm({
                        title: 'Refresh Quest List',
                        message: 'Are you sure you want to refresh the quest list?',
                        type: NotificationConstants.NotificationOption.warning,
                        confirm: 'Refresh',
                    }))) {
                        return;
                    }
                    App.game.wallet.loseAmount(this.getRefreshCost());
                }
                this.freeRefresh(false);
                GameHelper.incrementObservable(this.refreshes);
                if (this.completedQuests().length === 0) {
                    AchievementHandler.unlockAchievement('Picky Quester');
                }
                this.generateQuestList();
            }
            else {
                Notifier.notify({
                    message: 'You cannot afford to do that!',
                    type: NotificationConstants.NotificationOption.danger,
                });
            }
        });
    }
    resetRefreshes() {
        this.refreshes(0);
    }
    canAffordRefresh() {
        return App.game.wallet.hasAmount(this.getRefreshCost());
    }
    isRefreshFree() {
        return this.freeRefresh() || this.getRefreshCost().amount == 0;
    }
    /**
     * Formula for the Money cost for refreshing quests
     * @returns 0 when all but 1 quests are complete, ~1 million when none are
     */
    getRefreshCost() {
        // If we have a free refersh, just assume all the quest are completed
        const notComplete = this.freeRefresh() ? 0 : this.incompleteQuests().length - 1;
        const cost = Math.floor((250000 / Math.log(9) * Math.log(Math.pow(notComplete, 4) + 1)) / 1000) * 1000;
        return new Amount(Math.max(0, Math.min(1e6, cost)), GameConstants.Currency.money);
    }
    canStartNewQuest() {
        // Check we haven't already used up all quest slots
        if (this.currentQuests().length >= this.questSlots()) {
            return false;
        }
        // Check at least 1 quest is either not completed or in progress
        if (this.questList().find(quest => !quest.isCompleted() && !quest.inProgress())) {
            return true;
        }
        return false;
    }
    /**
     * Determines if all quests have been completed and claimed.
     */
    allQuestClaimed() {
        return !this.incompleteQuests().length;
    }
    /**
     * Formula for the amount of exp to increase quest level.
     * 1000 XP is needed for level 2, and then increases 20% each level.
     * @param level The current quest level
     */
    levelToXP(level) {
        if (level >= 2) {
            // Sum of geometric series
            const a = 1000, r = 1.2, n = level - 1;
            const sum = a * (Math.pow(r, n) - 1) / (r - 1);
            return Math.ceil(sum);
        }
        else {
            return 0;
        }
    }
    xpToLevel(xp) {
        const sum = xp, a = 1000, r = 1.2;
        const n = Math.log(1 + ((r - 1) * sum) / a) / Math.log(r);
        return Math.floor(n + 1);
    }
    percentToNextQuestLevel() {
        const current = this.level();
        const requiredForCurrent = this.levelToXP(current);
        const requiredForNext = this.levelToXP(current + 1);
        return 100 * (this.xp() - requiredForCurrent) / (requiredForNext - requiredForCurrent);
    }
    questProgressTooltip() {
        const level = this.level();
        const xp = this.xp();
        return { title: `${(xp - this.levelToXP(level)).toLocaleString('en-US')} / ${(this.levelToXP(level + 1) - this.levelToXP(level)).toLocaleString('en-US')}`, trigger: 'hover' };
    }
    isDailyQuestsUnlocked() {
        return QuestLineHelper.isQuestLineCompleted('Tutorial Quests');
    }
    loadQuestList(questList) {
        // Sanity Check
        this.questList.removeAll();
        questList.forEach(questData => {
            try {
                if (questData.hasOwnProperty('name')) {
                    const quest = QuestHelper.createQuest(questData.name, questData.data);
                    quest.fromJSON(questData);
                    this.questList.push(quest);
                }
                else {
                    this.questList.push(new CapturePokemonsQuest(10, 1));
                }
            }
            catch (e) {
                console.error(`Quest "${questData.name}" failed to load`, questData);
                this.questList.push(new CapturePokemonsQuest(10, 1));
            }
        });
    }
    loadQuestLines(questLines) {
        questLines.forEach(questLine => {
            try {
                if (questLine.state == QuestLineState.inactive) {
                    return;
                }
                const ql = this.getQuestLine(questLine.name);
                if (ql) {
                    ql.state(questLine.state);
                    if (questLine.state == QuestLineState.started || questLine.state == QuestLineState.suspended) {
                        if (ql.quests()[questLine.quest] instanceof MultipleQuestsQuest) {
                            ql.resumeAt(questLine.quest, 0);
                            ql.curQuestObject().quests.forEach((q, i) => {
                                var _a;
                                if ((questLine === null || questLine === void 0 ? void 0 : questLine.initial[i]) === true) {
                                    return q.complete(true);
                                }
                                q.initial((_a = questLine === null || questLine === void 0 ? void 0 : questLine.initial[i]) !== null && _a !== void 0 ? _a : 0);
                            });
                        }
                        else {
                            ql.resumeAt(questLine.quest, questLine.initial);
                        }
                        if (questLine.state == QuestLineState.suspended) {
                            ql.suspendQuest(true);
                        }
                    }
                }
            }
            catch (e) {
                console.error(`Quest line "${questLine.name}" failed to load`, questLine);
            }
        });
    }
    toJSON() {
        return {
            xp: this.xp(),
            refreshes: this.refreshes(),
            lastRefresh: this.lastRefresh,
            lastRefreshLevel: this.lastRefreshLevel,
            lastRefreshRegion: this.lastRefreshRegion,
            freeRefresh: this.freeRefresh(),
            questList: this.questList().map(quest => quest.toJSON()),
            questLines: this.questLines().filter(q => q.state()),
        };
    }
    fromJSON(json) {
        // Generate the questLines (statistics not yet loaded when constructing)
        QuestLineHelper.loadQuestLines();
        if (!json) {
            // Generate the questList
            this.generateQuestList();
            return;
        }
        this.xp(json.xp || this.defaults.xp);
        this.refreshes(json.refreshes || this.defaults.refreshes);
        this.lastRefresh = json.lastRefresh ? new Date(json.lastRefresh) : new Date();
        this.lastRefreshLevel = json.lastRefreshLevel || this.level();
        this.lastRefreshRegion = json.lastRefreshRegion || player.highestRegion();
        if (this.lastRefresh.toDateString() != new Date().toDateString()) {
            this.freeRefresh(true);
        }
        else {
            this.freeRefresh(json.freeRefresh || this.defaults.freeRefresh);
        }
        if (!json.hasOwnProperty('questList') || !json.questList.length) {
            // Generate new quest list
            this.generateQuestList(this.lastRefresh, this.lastRefreshLevel);
        }
        else {
            // Load saved quests
            this.loadQuestList(json.questList);
        }
        // Load our quest line progress
        if (json.questLines) {
            this.loadQuestLines(json.questLines);
        }
    }
}
/// <reference path="../Quest.ts" />
class BuyPokeballsQuest extends Quest {
    constructor(amount, reward, pokeball) {
        super(amount, reward);
        this.pokeball = pokeball;
        this.focus = App.game.statistics.pokeballsPurchased[this.pokeball];
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Buy ${this.amount.toLocaleString('en-US')} ${ItemList[GameConstants.Pokeball[this.pokeball]].displayName}s.`;
    }
    toJSON() {
        const json = super.toJSON();
        json.name = this.constructor.name;
        json.data.push(this.pokeball);
        return json;
    }
}
/// <reference path="../Quest.ts" />
class CaptureSpecificPokemonQuest extends Quest {
    constructor(pokemonName, capturesNeeded = 1, includeBreeding = false, reward = 0) {
        super(capturesNeeded, reward);
        this.pokemon = pokemonMap[pokemonName];
        this.focus = ko.pureComputed(() => App.game.statistics.pokemonCaptured[this.pokemon.id]() - (includeBreeding ? 0 : App.game.statistics.pokemonHatched[this.pokemon.id]()));
        this.includeBreeding = includeBreeding;
    }
    get description() {
        if (this.customDescription) {
            return this.customDescription;
        }
        if (this.amount === 1) {
            return `Capture ${this.includeBreeding ? 'or hatch ' : ''}${this.pokemon.name}.`;
        }
        return `Capture ${this.includeBreeding ? 'or hatch ' : ''}${this.pokemon.name} ${this.amount} times.`;
    }
    claim() {
        if (this.customReward !== undefined) {
            this.customReward();
        }
        return super.claim();
    }
}
class CustomQuest extends Quest {
    constructor(amount, reward, description, focus) {
        super(amount, reward);
        this.customDescription = description;
        this.focus = ko.pureComputed(focus);
    }
}
class DefeatDungeonBossQuest extends Quest {
    constructor(dungeon, dungeonBoss, reward = 0) {
        super(1, reward);
        this.dungeon = dungeon;
        this.dungeonBoss = dungeonBoss;
        const region = GameConstants.getDungeonRegion(this.dungeon);
        if (region == GameConstants.Region.none) {
            throw new Error(`Invalid dungeon for quest: ${this.dungeon}`);
        }
        this.focus = ko.observable(0);
    }
    get description() {
        var _a;
        return (_a = this.customDescription) !== null && _a !== void 0 ? _a : `Defeat ${this.dungeonBoss} in ${this.dungeon}.`;
    }
    onLoad() {
        super.onLoad();
        // TODO : @types/knockout@3.4.66 → 3.5.1
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        ko.when(() => { var _a; return DungeonRunner.defeatedBoss() === this.dungeonBoss && ((_a = DungeonRunner.dungeon) === null || _a === void 0 ? void 0 : _a.name) === this.dungeon; }, () => this.focus(1));
    }
}
class DefeatTemporaryBattleQuest extends Quest {
    constructor(temporaryBattle, customDescription, reward = 0) {
        super(1, reward);
        this.temporaryBattle = temporaryBattle;
        this.customDescription = customDescription;
        this.focus = App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex(this.temporaryBattle)];
        this.customDescription = customDescription;
    }
}
/// <reference path="../Quest.ts" />
class MultipleQuestsQuest extends Quest {
    constructor(quests, description, reward = 0, questCompletedRequired) {
        super(questCompletedRequired !== null && questCompletedRequired !== void 0 ? questCompletedRequired : quests.length, reward);
        this.quests = quests;
        // Hide the quest ready to claim notifications
        quests.forEach((q) => q.asSubQuest(this));
        this.customDescription = description;
        this.focus = ko.pureComputed(() => {
            return quests.filter(q => q.isCompleted()).length;
        });
    }
    begin() {
        this.quests.forEach(q => q.begin());
        super.begin();
    }
    createAutoCompleter() {
        this.quests.forEach(q => q.createAutoCompleter());
        super.createAutoCompleter();
    }
    deleteAutoCompleter() {
        this.quests.forEach(q => q.deleteAutoCompleter());
        super.deleteAutoCompleter();
    }
    deleteFocusSub(fromMainQuest = false) {
        if (super.deleteFocusSub(fromMainQuest)) {
            this.quests.forEach(q => q.deleteFocusSub(true));
            return true;
        }
        return false;
    }
}
class TalkToNPCQuest extends Quest {
    constructor(npc, description, reward = 0) {
        super(1, reward);
        this.npc = npc;
        this.customDescription = description;
        this.focus = npc.talkedTo;
    }
    begin() {
        this.npc.talkedTo(false);
        super.begin();
    }
}
var BaitType;
(function (BaitType) {
    BaitType[BaitType["Bait"] = 0] = "Bait";
    BaitType[BaitType["Razz"] = 1] = "Razz";
    BaitType[BaitType["Nanab"] = 2] = "Nanab";
})(BaitType || (BaitType = {}));
class Bait {
    constructor(type, name, useName, image, amount, use) {
        this.type = type;
        this.name = name;
        this.useName = useName;
        this.image = image;
        this.amount = amount;
        this.use = use;
    }
    get btnName() {
        return `${this.name} (${this.amount()})`;
    }
}
const BaitList = {};
BaitList.Bait = new Bait(BaitType.Bait, 'Bait', 'some bait', 'assets/images/safari/bait.png', () => '∞', (pokemon) => {
    pokemon.eatingBait = BaitType.Bait;
    pokemon.eating = Math.max(pokemon.eating, Rand.intBetween(2, 6));
    pokemon.angry = 0;
});
BaitList.Razz = new Bait(BaitType.Razz, 'Razz Berry', 'a Razz Berry', FarmController.getBerryImage(BerryType.Razz), () => App.game.farming.berryList[BerryType.Razz](), (pokemon) => {
    GameHelper.incrementObservable(App.game.farming.berryList[BerryType.Razz], -1);
    pokemon.eatingBait = BaitType.Razz;
    pokemon.eating = Math.max(pokemon.eating, Rand.intBetween(2, 7));
    pokemon.angry = 0;
});
BaitList.Nanab = new Bait(BaitType.Nanab, 'Nanab Berry', 'a Nanab Berry', FarmController.getBerryImage(BerryType.Nanab), () => App.game.farming.berryList[BerryType.Nanab](), (pokemon) => {
    GameHelper.incrementObservable(App.game.farming.berryList[BerryType.Nanab], -1);
    pokemon.eatingBait = BaitType.Nanab;
    pokemon.eating = Math.max(pokemon.eating, Rand.intBetween(2, 7));
    pokemon.angry = 0;
});
class Safari {
    static sizeX() {
        return Math.max(5, Math.floor(document.querySelector('#safariModal .modal-dialog').scrollWidth / 32));
    }
    static sizeY() {
        return Math.max(5, Math.floor((window.innerHeight - 250) / 32));
    }
    static load() {
        Safari.activeRegion(player.region);
        Safari.grid = [];
        Safari.pokemonGrid([]);
        Safari.itemGrid([]);
        Safari.playerXY.x = 0;
        Safari.playerXY.y = 0;
        Safari.lastDirection = 'up';
        Safari.activeEnvironment(SafariEnvironments.Grass);
        Safari.inBattle(false);
        Safari.balls(Safari.calculateStartPokeballs());
        for (let i = 0; i < Safari.sizeY(); i++) {
            Safari.grid.push(Array(Safari.sizeX()).fill(GameConstants.SafariTile.ground));
        }
        if (Safari.activeRegion() === GameConstants.Region.alola) {
            const land = new LandBody(5, 3);
            land.grid.pop();
            const [spawnX, spawnY] = Safari.getPlayerStartCoords();
            Safari.addBody(spawnX - 2, spawnY - 1, land);
            // calculate the maximum amount of islands to be proportional to the size of the Safari map
            // 25 is the minimal number of tiles
            const islands = Math.floor(Safari.sizeX() * Safari.sizeY() / 25);
            for (let i = 0; i < islands; i++) {
                Safari.addRandomBody(new ShapedLandBody());
            }
            // Transform every Ground into Water and Sand into Ground
            for (let i = 0; i < Safari.grid.length; i++) {
                for (let j = 0; j < Safari.grid[i].length; j++) {
                    if (Safari.grid[i][j] === GameConstants.SafariTile.ground) {
                        Safari.grid[i][j] = GameConstants.SafariTile.waterC;
                    }
                    // Sand was temporary, because ground was used temporary for water...
                    if (Safari.grid[i][j] === GameConstants.SafariTile.sandC) {
                        Safari.grid[i][j] = GameConstants.SafariTile.ground;
                    }
                }
            }
        }
        else {
            const bodyOrder = [
                FenceBody, WaterBody, SandBody, WaterBody, WaterBody, SandBody, TreeBody, TreeBody, TreeBody, TreeBody, TreeBody, FenceBody,
                SandBody, FenceBody, WaterBody, SandBody, WaterBody, WaterBody, SandBody, SandBody, GrassBody, GrassBody, GrassBody, GrassBody,
            ];
            bodyOrder.forEach((bodyType) => Safari.addRandomBody(new bodyType()));
        }
        Safari.calculateAccessibleTiles();
        Safari.inProgress(true);
    }
    static addRandomBody(body) {
        let x = Safari.getRandomCoord(Safari.sizeX() - 2);
        let y = Safari.getRandomCoord(Safari.sizeY() - 2);
        if (body.type === 'fence') {
            x = Math.max(0, x - 3);
            y = Math.max(0, y - 3);
        }
        let res = Safari.canAddBody(x, y, body);
        // Force the addition of water tiles if there are no water tiles in the grid
        if (!res && body.type === 'water' && !Safari.hasWaterTiles()) {
            let attempts = 0;
            while (!res && attempts++ < 50) {
                // Create a new WaterBody with minimum X and Y (3x3) after 10 attempts
                if (attempts === 10) {
                    body = new WaterBody(3, 3);
                }
                x = Safari.getRandomCoord(Safari.sizeX() - 2);
                y = Safari.getRandomCoord(Safari.sizeY() - 2);
                res = Safari.canAddBody(x, y, body);
            }
        }
        if (res || body.type === 'grass') {
            Safari.addBody(x, y, body);
        }
    }
    static getRandomCoord(max) {
        return Rand.intBetween(1, max - 3);
    }
    static canAddBody(x, y, body) {
        if (x == 0 ||
            y == 0 ||
            y + body.maxY() >= Safari.sizeY() ||
            x + body.maxX() >= Safari.sizeX()) {
            return false;
        }
        for (let i = 0; i < body.grid.length; i++) {
            for (let j = 0; j < body.grid[i].length; j++) {
                if ((i + y) < Safari.sizeY() && (j + x) < Safari.sizeX()) {
                    if (body.grid[i][j] !== GameConstants.SafariTile.ground) {
                        if (Safari.grid[i + y][j + x] !== GameConstants.SafariTile.ground) {
                            return false;
                        }
                    }
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
    static addBody(x, y, body) {
        for (let i = 0; i < body.grid.length; i++) {
            for (let j = 0; j < body.grid[i].length; j++) {
                if (body.grid[i][j] !== 0) {
                    if ((i + y) < Safari.sizeY() && (j + x) < Safari.sizeX()) {
                        if (Safari.grid[i + y][j + x] === 0) {
                            Safari.grid[i + y][j + x] = body.grid[i][j];
                        }
                    }
                }
            }
        }
    }
    // Check if grid has water tiles
    static hasWaterTiles() {
        return Safari.grid.some((row) => row.some((tile) => GameConstants.SAFARI_WATER_BLOCKS.includes(tile)));
    }
    static calculateAccessibleTiles() {
        // Reset accessible tile grid
        Safari.accessibleTiles = Safari.grid.map(row => row.map(tile => false));
        // Start with the tile player spawns on
        const toProcess = [Safari.getPlayerStartCoords()];
        // While we have things in our list of tiles to process
        while (toProcess.length) {
            // Get the first one and mark it as accessible
            const [x, y] = toProcess.shift();
            Safari.accessibleTiles[y][x] = true;
            // Then queue up any neighbors for processing
            [[x + 1, y], [x - 1, y], [x, y + 1], [x, y - 1]]
                .forEach(([nx, ny]) => {
                var _a;
                if ( // but skip if:
                // outside map
                !Safari.isInMap(nx, ny) ||
                    (
                    // already processed,
                    (_a = Safari.accessibleTiles[ny]) === null || _a === void 0 ? void 0 : _a[nx]) ||
                    // already queued,
                    toProcess.some(([px, py]) => px === nx && py === ny) ||
                    // or can't access
                    !Safari.canMove(nx, ny)) {
                    return;
                }
                toProcess.push([nx, ny]);
            });
        }
    }
    static safariReset() {
        Notifier.confirm({
            title: 'Safari Zone',
            message: `You have an active Safari in ${GameConstants.camelCaseToString(GameConstants.Region[Safari.activeRegion()])}.\nDo you want to quit that Safari and start a new one?`,
            type: NotificationConstants.NotificationOption.warning,
            confirm: 'Quit',
        }).then(confirmed => {
            if (confirmed) {
                //Reload zone
                Safari.inBattle(false);
                Safari.inProgress(false);
                SafariBattle.busy(false);
                $('#safariBattleModal').modal('hide');
                Safari.openModal();
            }
        });
    }
    static openModal() {
        if (DisplayObservables.modalState.safariModal !== 'hidden') {
            // Do nothing if the modal is already open or mid-animation
            return;
        }
        else if (Safari.inProgress() && Safari.activeRegion() !== player.region) {
            Safari.safariReset();
        }
        else {
            App.game.gameState = GameConstants.GameState.safari;
            $('#safariModal').modal({ backdrop: 'static', keyboard: false });
        }
    }
    static startSafari() {
        if (Safari.canAccess()) {
            // Check if player has an active Safari Zone session
            if (Safari.activeRegion() >= 0 && player.region != Safari.activeRegion()) {
                Safari.safariReset();
            }
            else {
                Safari.openModal();
            }
        }
        else {
            Notifier.notify({
                message: 'You need the Safari Pass to access this location.\n<i>Visit the Gym in Fuschia City</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static closeModal() {
        if (!Safari.inBattle()) {
            $('#safariModal').modal('hide');
        }
    }
    static canPay() {
        return App.game.wallet.hasAmount(Safari.cost());
    }
    static cost() {
        switch (player.region) {
            case GameConstants.Region.kanto:
                return new Amount(100, GameConstants.Currency.questPoint);
            case GameConstants.Region.johto:
                return new Amount(500, GameConstants.Currency.questPoint);
            case GameConstants.Region.sinnoh:
                return new Amount(750, GameConstants.Currency.questPoint);
            case GameConstants.Region.kalos:
                return new Amount(1000, GameConstants.Currency.questPoint);
            case GameConstants.Region.alola:
                return new Amount(1250, GameConstants.Currency.questPoint);
            default:
                return new Amount(100, GameConstants.Currency.questPoint);
        }
    }
    static payEntranceFee() {
        if (Safari.canPay()) {
            // TODO: add increasing cost back
            //typeof player.safariCostModifier == undefined ? 1 : player.safariCostModifier++;
            App.game.wallet.loseAmount(Safari.cost());
            Safari.load();
            GameHelper.incrementObservable(App.game.statistics.safariTimesEntered, 1);
        }
    }
    static canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItemType.Safari_ticket);
    }
    static getPlayerStartCoords() {
        return [Math.floor((Safari.sizeX() - 1) / 2), Safari.sizeY() - 1];
    }
    // Called by knockout once map is done rendering
    static addPlayer() {
        const [i, j] = Safari.getPlayerStartCoords();
        const topLeft = $('#safari-0-0').offset();
        const offset = {
            top: 32 * j + topLeft.top - 24,
            left: 32 * i + topLeft.left - 12,
        };
        document.getElementById('sprite').classList.value = `walk${Safari.lastDirection}`;
        $('#sprite').offset(offset);
        Safari.playerXY.x = i;
        Safari.playerXY.y = j;
        Safari.origin = offset;
    }
    static move(dir) {
        if (!Safari.inProgress()) {
            return;
        }
        else if (!Safari.walking && !Safari.isMoving && !Safari.inBattle()) {
            Safari.queue = [];
            Safari.walking = true;
            Safari.queue.unshift(dir);
            Safari.startMoving(dir);
        }
        else {
            if (dir) {
                Safari.setNextDirection(dir);
            }
        }
    }
    static startMoving(dir) {
        Safari.nextDirection = dir;
        if (!Safari.isMoving) {
            Safari.step(dir);
        }
    }
    static step(direction) {
        if (!Safari.inProgress()) {
            return;
        }
        Safari.lastDirection = direction;
        const directionOffset = Safari.directionToXY(direction);
        Safari.isMoving = true;
        const newPos = {
            x: Safari.playerXY.x + directionOffset.x,
            y: Safari.playerXY.y + directionOffset.y,
        };
        // CSS class with the environment (for the sprite change)
        let envClass = Safari.environmentCssClass();
        if (Safari.canMove(newPos.x, newPos.y)) {
            const next = $(`#safari-${newPos.x}-${newPos.y}`).offset();
            Safari.steps++;
            GameHelper.incrementObservable(App.game.statistics.safariStepsTaken, 1);
            const offset = {
                top: `+=${directionOffset.y * 32}`,
                left: `+=${directionOffset.x * 32}`,
            };
            document.getElementById('sprite').classList.value = `walk${direction} moving`;
            $('#sprite').addClass(`${envClass}`);
            Safari.playerXY.x = newPos.x;
            Safari.playerXY.y = newPos.y;
            Safari.activeEnvironment(Safari.getEnvironmentTile(Safari.playerXY.x, Safari.playerXY.y));
            // Re-call the class as the activeEnvironment may have changed
            envClass = Safari.environmentCssClass();
            $('#sprite').animate(offset, Safari.moveSpeed, 'linear', () => {
                Safari.checkBattle();
                Safari.checkItem();
                Safari.isMoving = false;
                if (Safari.walking) {
                    if (!Safari.checkBattle() && Safari.queue[0]) {
                        Safari.step(Safari.queue[0]);
                    }
                    else {
                        document.getElementById('sprite').classList.value = `walk${direction}`;
                        $('#sprite').addClass(`${envClass}`);
                    }
                }
                else {
                    document.getElementById('sprite').classList.value = `walk${direction}`;
                    $('#sprite').addClass(`${envClass}`);
                }
            });
            App.game.breeding.progressEggs(1 + Math.floor(Safari.safariLevel() / 10));
            Safari.spawnPokemonCheck();
            Safari.despawnPokemonCheck();
        }
        else {
            document.getElementById('sprite').classList.value = `walk${direction}`;
            $('#sprite').addClass(`${envClass}`);
            setTimeout(() => {
                Safari.walking = false;
                Safari.isMoving = false;
                if (Safari.queue[0]) {
                    Safari.isMoving = true;
                    Safari.walking = true;
                    Safari.step(Safari.queue[0]);
                }
            }, Safari.moveSpeed);
        }
    }
    static spawnPokemonCheck() {
        if (Safari.steps % 10 === 0 && Rand.boolean()) {
            Safari.spawnRandomPokemon();
        }
    }
    static spawnItemCheck() {
        const baseChance = 0.4;
        const itemLevelModifier = (Safari.safariLevel() - 1) / 100;
        if (Rand.chance(baseChance + itemLevelModifier)) {
            Safari.spawnRandomItem();
        }
    }
    static despawnPokemonCheck() {
        let index = Safari.pokemonGrid().length;
        while (index-- > 0) {
            if (--Safari.pokemonGrid()[index].steps <= 0) {
                Safari.pokemonGrid.splice(index, 1);
            }
        }
    }
    static spawnRandomPokemon() {
        const pos = Safari.generatePlaceableSpawnPosition();
        if (pos) {
            const pokemon = SafariPokemon.random(Safari.getEnvironmentTile(pos.x, pos.y));
            pokemon.x = pos.x;
            pokemon.y = pos.y;
            pokemon.steps = Safari.grid.length + Safari.grid[0].length + Rand.floor(21);
            Safari.pokemonGrid.push(pokemon);
        }
    }
    static spawnRandomItem() {
        if (!SafariItemController.currentRegionHasItems()) {
            return;
        }
        const pos = Safari.generatePlaceableSpawnPosition(true);
        if (pos) {
            Safari.itemGrid.push(new SafariItem(pos.x, pos.y));
        }
    }
    static generatePlaceableSpawnPosition(isItem = false) {
        let result = false;
        let x = 0;
        let y = 0;
        let attempts = 0;
        while (!result && attempts++ < Safari.maxPlacementAttempts) {
            x = Rand.floor(Safari.grid[0].length);
            y = Rand.floor(Safari.grid.length);
            result = Safari.canPlaceAtPosition(x, y, isItem);
            // Ignore ground requirement if needed, for Alola
            if (attempts == Safari.maxPlacementAttempts && Safari.activeRegion() === GameConstants.Region.alola && isItem) {
                isItem = false;
                attempts = 0;
            }
        }
        return result ? { x: x, y: y } : null;
    }
    static canPlaceAtPosition(x, y, isItem = false) {
        // Items don't spawn on water, except in MJ Safari
        const canPlace = !(isItem && GameConstants.SAFARI_WATER_BLOCKS.includes(Safari.grid[y][x]));
        return Safari.canMove(x, y) && canPlace &&
            Safari.isAccessible(x, y) &&
            !(x == Safari.playerXY.x && y == Safari.playerXY.y) &&
            !Safari.pokemonGrid().some(p => p.x === x && p.y === y) &&
            !Safari.itemGrid().some(i => i.x === x && i.y === y);
    }
    static directionToXY(dir) {
        let x = 0;
        let y = 0;
        switch (dir) {
            case 'left':
                x = -1;
                break;
            case 'up':
                y = -1;
                break;
            case 'right':
                x = 1;
                break;
            case 'down':
                y = 1;
                break;
        }
        return { x: x, y: y };
    }
    static canMove(x, y) {
        if (!Safari.isInMap(x, y)) {
            return false;
        }
        return GameConstants.SAFARI_LEGAL_WALK_BLOCKS.includes(Safari.grid[y][x]);
    }
    static isInMap(x, y) {
        return 0 <= y && y < Safari.grid.length && 0 <= x && x < Safari.grid[y].length;
    }
    static isAccessible(x, y) {
        return Safari.accessibleTiles[y][x];
    }
    static setNextDirection(direction) {
        if (direction != Safari.lastDirection) {
            if (Safari.queue[0] != direction) {
                if (Safari.queue.length == 1) {
                    Safari.queue.unshift(direction);
                }
                else {
                    Safari.queue[0] = direction;
                }
            }
            Safari.nextDirection = direction;
            Safari.walking = true;
        }
    }
    static stop(dir) {
        for (let i = 0; i < Safari.queue.length; i++) {
            if (Safari.queue[i] == dir) {
                Safari.queue.splice(i, 1);
            }
        }
        if (!Safari.queue[0]) {
            Safari.walking = false;
        }
    }
    static checkBattle() {
        if (Safari.inBattle()) {
            return false;
        }
        const pokemonOnPlayer = Safari.pokemonGrid().findIndex(p => p.x === Safari.playerXY.x && p.y === Safari.playerXY.y);
        if (pokemonOnPlayer >= 0) {
            SafariBattle.load(Safari.pokemonGrid()[pokemonOnPlayer]);
            Safari.pokemonGrid.splice(pokemonOnPlayer, 1);
            return true;
        }
        const currentTile = Safari.grid[Safari.playerXY.y][Safari.playerXY.x];
        if (currentTile === GameConstants.SafariTile.grass || GameConstants.SAFARI_WATER_BLOCKS.includes(currentTile)) {
            // Reduce encounter chances for Magikarp Jump Safari.
            const chance = Safari.activeRegion() === GameConstants.Region.alola ? GameConstants.SAFARI_MJ_BATTLE_CHANCE : GameConstants.SAFARI_BATTLE_CHANCE;
            if (Rand.chance(chance)) {
                SafariBattle.load();
                return true;
            }
        }
        return false;
    }
    static getEnvironmentTile(x, y) {
        if (!Safari.isInMap(x, y)) {
            return null;
        }
        else if (GameConstants.SAFARI_WATER_BLOCKS.includes(Safari.grid[y][x])) { // Water environment
            return SafariEnvironments.Water;
        }
        else { // Grass environment by default
            return SafariEnvironments.Grass;
        }
    }
    static checkItem() {
        const itemOnPlayer = Safari.itemGrid().findIndex(p => p.x === Safari.playerXY.x && p.y === Safari.playerXY.y);
        if (itemOnPlayer >= 0) {
            const item = SafariItemController.getRandomItem();
            if (item == undefined) {
                return;
            }
            const name = BagHandler.displayName(item);
            BagHandler.gainItem(item);
            GameHelper.incrementObservable(App.game.statistics.safariItemsObtained, 1);
            Notifier.notify({
                message: `You found ${GameHelper.anOrA(name)} ${name}!`,
                image: BagHandler.image(item),
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Items.dropped_item,
            });
            Safari.itemGrid.splice(itemOnPlayer, 1);
        }
    }
    static calculateStartPokeballs() {
        return GameConstants.SAFARI_BASE_POKEBALL_COUNT;
    }
    static completed(shiny = false) {
        // Check current region
        if (SafariPokemonList.list[player.region]) {
            // Check each pokemon within this zone
            return SafariPokemonList.list[player.region]().every(poke => {
                return App.game.party.alreadyCaughtPokemonByName(poke.name, shiny);
            });
        }
        return false;
    }
    static safariProgressTooltip() {
        const tooltip = { trigger: 'hover', title: '' };
        const level = Safari.safariLevel();
        if (level == Safari.maxSafariLevel) {
            tooltip.title = 'Max level reached';
        }
        else {
            tooltip.title = `${(Safari.safariExp() - Safari.expRequiredForLevel(level)).toLocaleString('en-US')} / ${(Safari.expRequiredForLevel(level + 1) - Safari.expRequiredForLevel(level)).toLocaleString('en-US')}`;
        }
        return tooltip;
    }
    static expRequiredForLevel(level) {
        return Math.ceil(2000 * (Math.pow(1.2, (level - 1)) - 1));
    }
    static environmentCssClass() {
        return GameHelper.enumStrings(SafariEnvironments)[Safari.activeEnvironment()].toLowerCase();
    }
}
Safari.pokemonGrid = ko.observableArray([]);
Safari.itemGrid = ko.observableArray([]);
Safari.lastDirection = 'up';
Safari.steps = 0;
Safari.walking = false;
Safari.isMoving = false;
Safari.queue = [];
Safari.playerXY = { 'x': 0, 'y': 0 };
Safari.inProgress = ko.observable(false);
Safari.inBattle = ko.observable(false);
Safari.balls = ko.observable().extend({ numeric: 0 });
Safari.activeRegion = ko.observable(GameConstants.Region.none);
Safari.activeEnvironment = ko.observable(SafariEnvironments.Grass);
Safari.maxPlacementAttempts = 20;
Safari.moveSpeed = 250;
// Safari level
Safari.maxSafariLevel = 40;
Safari.safariExp = ko.pureComputed(() => {
    return App.game.statistics.safariRocksThrown() * 10 +
        App.game.statistics.safariBaitThrown() * 5 +
        App.game.statistics.safariBallsThrown() * 10 +
        App.game.statistics.safariPokemonCaptured() * 50 +
        App.game.statistics.safariShinyPokemonCaptured() * 50 * 4 + // Shiny increments both, so this adds up to 5x
        App.game.statistics.safariItemsObtained() * 10;
});
Safari.safariLevel = ko.pureComputed(() => {
    const xp = Safari.safariExp();
    for (let i = 1; i <= Safari.maxSafariLevel; i++) {
        if (xp < Safari.expRequiredForLevel(i)) {
            return i - 1;
        }
    }
    return Safari.maxSafariLevel;
});
Safari.percentToNextSafariLevel = ko.pureComputed(() => {
    const level = Safari.safariLevel();
    if (level === Safari.maxSafariLevel) {
        return 100;
    }
    const expForNextLevel = Safari.expRequiredForLevel(level + 1) - Safari.expRequiredForLevel(level);
    const expThisLevel = Safari.safariExp() - Safari.expRequiredForLevel(level);
    return expThisLevel / expForNextLevel * 100;
});
$(document).ready(() => {
    // Add listeners to Safari dpad buttons
    ['Up', 'Left', 'Down', 'Right'].forEach((dir) => {
        const button = document.getElementById(`safari-dpad-${dir.toLowerCase()}`);
        const keyDown = () => GameController.simulateKey(`Arrow${dir}`);
        const keyUp = () => GameController.simulateKey(`Arrow${dir}`, 'up');
        button.addEventListener('mousedown', keyDown, { passive: false });
        button.addEventListener('mouseout', keyUp, { passive: false });
        button.addEventListener('mouseup', keyUp, { passive: false });
        button.addEventListener('touchstart', keyDown, { passive: false });
        button.addEventListener('touchend', keyUp, { passive: false });
        button.addEventListener('touchcancel', keyUp, { passive: false });
    });
    $('#safariModal').on('hide.bs.modal', () => {
        Safari.inBattle(false);
        SafariBattle.busy(false);
        switch (player.region) {
            case GameConstants.Region.kanto:
                MapHelper.moveToTown('Safari Zone');
                break;
            case GameConstants.Region.johto:
                MapHelper.moveToTown('National Park');
                break;
            case GameConstants.Region.sinnoh:
                MapHelper.moveToTown('Great Marsh');
                break;
            case GameConstants.Region.kalos:
                MapHelper.moveToTown('Friend Safari');
                break;
            case GameConstants.Region.alola:
                MapHelper.moveToTown('Hoppy Town Fishing Pond');
                break;
            default:
                MapHelper.moveToTown(GameConstants.DockTowns[player.region]);
                break;
        }
    });
});
class SafariBattle {
    static get enemy() {
        return SafariBattle._enemy();
    }
    static set enemy(pokemon) {
        SafariBattle._enemy(pokemon);
    }
    static load(enemy = SafariPokemon.random(Safari.activeEnvironment())) {
        // Stop left over keypresses
        GameController.simulateKey('ArrowUp', 'up');
        GameController.simulateKey('ArrowDown', 'up');
        GameController.simulateKey('ArrowLeft', 'up');
        GameController.simulateKey('ArrowRight', 'up');
        // Generate enemy
        SafariBattle.enemy = enemy;
        Safari.inBattle(true);
        SafariBattle.text('What will you do?');
        SafariBattle.escapeAttempts = 0;
        $('#safariBattleModal').modal({ backdrop: 'static', keyboard: false });
        // Shiny
        const location = `${GameConstants.camelCaseToString(GameConstants.Region[Safari.activeRegion()])} Safari`;
        if (enemy.shiny) {
            App.game.logbook.newLog(LogBookTypes.SHINY, App.game.party.alreadyCaughtPokemon(enemy.id, true)
                ? createLogContent.encounterShinyDupe({
                    location: location,
                    pokemon: enemy.name,
                })
                : createLogContent.encounterShiny({
                    location: location,
                    pokemon: enemy.name,
                }));
        }
        else if (!App.game.party.alreadyCaughtPokemon(enemy.id)) {
            App.game.logbook.newLog(LogBookTypes.NEW, createLogContent.encounterWild({
                location: location,
                pokemon: enemy.name,
            }));
        }
    }
    static throwBall() {
        var _a;
        if (Safari.inBattle() && !SafariBattle.busy()) {
            SafariBattle.busy(true);
            Safari.balls(Safari.balls() - 1);
            SafariBattle.text('You throw a ball...');
            GameHelper.incrementObservable(App.game.statistics.safariBallsThrown, 1);
            const targetOffset = $('#safariBattleModal .enemy').offset();
            targetOffset.left += 36;
            targetOffset.top += 16;
            const ballSpeed = SafariBattle.Speed.ballThrowAnim * SafariBattle.getTierMultiplier();
            const ptclhtml = SafariBattle.pokeball();
            (_a = SafariBattle.ballParticle) === null || _a === void 0 ? void 0 : _a.remove();
            SafariBattle.ballParticle = SafariBattle.dropParticle(ptclhtml, $('#safariBattleModal .pageItemFooter').offset(), targetOffset, ballSpeed, 'cubic-bezier(0,0,0.4,1)', true).css('z-index', 9999);
            $('#safariBall').css('animation-duration', `${ballSpeed}ms`).addClass('spin');
            SafariBattle.delay(SafariBattle.Speed.ballThrowDelay) // throwing the ball
                .then(SafariBattle.startCapture) // pokemon being sucked into ball
                .then(SafariBattle.thenDelay(SafariBattle.Speed.enemyTransition))
                .then(SafariBattle.startBounce) // pokeball dropping to ground
                .then(SafariBattle.thenDelay(SafariBattle.Speed.ballBounceDelay))
                .then(SafariBattle.calcCapture) // roll a dice for catching, use dice roll to determine how many pokeball rolls
                .then(SafariBattle.startRoll)
                .then(SafariBattle.finishCapture); // capture pokemon or break free
        }
    }
    static delay(ms, useMultiplier = true) {
        return new Promise((resolve, reject) => {
            setTimeout(resolve, ms * (useMultiplier ? SafariBattle.getTierMultiplier() : 1));
        });
    }
    static thenDelay(ms, useMultiplier = true) {
        return function (pass) {
            return SafariBattle.delay(ms, useMultiplier)
                .then(() => pass);
        };
    }
    static startCapture() {
        return new Promise((resolve, reject) => {
            $('#safariBattleModal .enemy').css('transition-duration', `${SafariBattle.Speed.enemyTransition * SafariBattle.getTierMultiplier()}ms`);
            $('#safariBattleModal .enemy').addClass('safariCapture');
            $('#safariBall').removeClass('spin');
            resolve();
        });
    }
    static startBounce() {
        return new Promise((resolve, reject) => {
            $('#safariBattleModal .enemy > img').css('opacity', '0');
            const bounceSpeed = SafariBattle.Speed.ballBounceAnim * SafariBattle.getTierMultiplier();
            SafariBattle.ballParticle.css('animation-duration', `${bounceSpeed}ms`).addClass('bounce');
            resolve();
        });
    }
    static calcCapture() {
        return new Promise((resolve, reject) => {
            const random = Math.random();
            const catchF = SafariBattle.enemy.catchFactor / 100;
            const isCaught = random <= catchF;
            const numRolls = isCaught ? 3 : Math.min(Math.floor(4 * (1 - random) / (1 - catchF)), 3);
            resolve([isCaught, numRolls]);
        });
    }
    static startRoll([isCaught, numRolls], roll = 0) {
        return new Promise((resolve, reject) => {
            if (roll >= numRolls) {
                $('#safariBall').removeClass('safari-roll-left safari-roll-right');
                return resolve([isCaught, numRolls]);
            }
            const delayLength = SafariBattle.Speed.ballRollAnim + SafariBattle.Speed.ballRollDelay * (roll != numRolls - 1 ? 1 : numRolls / 2);
            SafariBattle.animateRoll(roll);
            SafariBattle.delay(delayLength)
                .then(() => {
                resolve(SafariBattle.startRoll([isCaught, numRolls], roll + 1));
            });
        });
    }
    static animateRoll(n) {
        if (n == 0) {
            const rollSpeed = SafariBattle.Speed.ballRollAnim * SafariBattle.getTierMultiplier();
            $('#safariBall').css('animation-duration', `${rollSpeed}ms`).addClass('safari-roll-left');
        }
        else {
            $('#safariBall').toggleClass('safari-roll-left').toggleClass('safari-roll-right');
        }
    }
    static finishCapture([isCaught, numRolls]) {
        const isgameOver = Safari.balls() <= 0;
        return new Promise((resolve, reject) => {
            if (isCaught) {
                SafariBattle.capturePokemon();
                if (!isgameOver) {
                    Safari.spawnItemCheck();
                }
                $('#safariBall').css('filter', 'brightness(0.4) grayscale(100%)');
                SafariBattle.delay(SafariBattle.Speed.enemyCaught * (1 + SafariBattle.getTierMultiplier()) / 2, false)
                    .then(() => {
                    SafariBattle.ballParticle.remove();
                    isgameOver ? SafariBattle.gameOver() : SafariBattle.endBattle();
                });
            }
            else {
                $('#safariBattleModal .enemy > img').css('opacity', '1');
                $('#safariBattleModal .enemy').removeClass('safariCapture');
                SafariBattle.text(SafariBattle.CATCH_MESSAGES[numRolls]);
                SafariBattle.ballParticle.remove();
                SafariBattle.delay(SafariBattle.Speed.enemyEscape * (1 + SafariBattle.getTierMultiplier()) / 2, false)
                    .then(() => {
                    isgameOver ? SafariBattle.gameOver() : SafariBattle.enemyTurn();
                });
            }
        });
    }
    static capturePokemon() {
        SafariBattle.text(`GOTCHA!<br>${SafariBattle.enemy.displayName} was caught!`);
        GameHelper.incrementObservable(App.game.statistics.safariPokemonCaptured, 1);
        if (SafariBattle.enemy.shiny) {
            GameHelper.incrementObservable(App.game.statistics.safariShinyPokemonCaptured, 1);
            if (Safari.balls() <= 0) {
                AchievementHandler.unlockAchievement('A Glimmer of Luck');
            }
        }
        const pokemonID = PokemonHelper.getPokemonByName(SafariBattle.enemy.name).id;
        App.game.party.gainPokemonById(pokemonID, SafariBattle.enemy.shiny);
        const partyPokemon = App.game.party.getPokemon(pokemonID);
        partyPokemon.effortPoints += App.game.party.calculateEffortPoints(partyPokemon, SafariBattle.enemy.shiny, GameConstants.ShadowStatus.None, GameConstants.SAFARI_EP_YIELD);
        switch (player.region) {
            case (GameConstants.Region.johto):
                const shinyModifier = SafariBattle.enemy.shiny ? GameConstants.BUG_SAFARI_SHINY_MODIFIER : 1;
                const bugReward = Math.floor(partyPokemon.baseAttack / 5) * shinyModifier;
                App.game.wallet.gainContestTokens(bugReward);
                Notifier.notify({
                    title: 'Bug Catching Contest',
                    message: `<img src="assets/images/currency/contestToken.svg" height="24px"/> You earned ${bugReward} Contest Tokens!`,
                    type: NotificationConstants.NotificationOption.primary,
                    timeout: 5000,
                });
                break;
        }
    }
    static throwBait() {
        if (Safari.inBattle() && !SafariBattle.busy()) {
            SafariBattle.busy(true);
            const bait = SafariBattle.selectedBait();
            if (bait.amount() <= 0) {
                SafariBattle.text(`You don't have enough ${bait.name}`);
                SafariBattle.delay(SafariBattle.Speed.turnLength, false)
                    .then(() => {
                    SafariBattle.text('What will you do?');
                    SafariBattle.busy(false);
                });
                return;
            }
            SafariBattle.text(`You throw ${bait.useName} at ${SafariBattle.enemy.displayName}`);
            GameHelper.incrementObservable(App.game.statistics.safariBaitThrown, 1);
            bait.use(SafariBattle.enemy);
            const enemy = $('#safariBattleModal .enemy').offset();
            enemy.left += 30;
            enemy.top += 70;
            SafariBattle.dropParticle(`<img width=16px src="${bait.image}">`, $('#safariBattleModal .pageItemFooter').offset(), enemy, SafariBattle.Speed.bait * SafariBattle.getTierMultiplier(), 'cubic-bezier(0,0,0.4,1)').css('z-index', 9999);
            SafariBattle.delay(1.5 * SafariBattle.Speed.bait)
                .then(() => SafariBattle.enemyTurn());
        }
    }
    static throwRock() {
        if (Safari.inBattle() && !SafariBattle.busy()) {
            SafariBattle.busy(true);
            SafariBattle.text(`You throw a rock at ${SafariBattle.enemy.displayName}`);
            GameHelper.incrementObservable(App.game.statistics.safariRocksThrown, 1);
            SafariBattle.enemy.angry = Math.max(SafariBattle.enemy.angry, Rand.intBetween(2, 6));
            SafariBattle.enemy.eating = 0;
            const enemyOffset = $('#safariBattleModal .enemy').offset();
            enemyOffset.left += 40;
            enemyOffset.top += 10;
            SafariBattle.dropParticle('<img src="assets/images/safari/rock.png">', $('#safariBattleModal .pageItemFooter').offset(), enemyOffset, SafariBattle.Speed.rock * SafariBattle.getTierMultiplier(), 'cubic-bezier(0,0,0.4,1)').css('z-index', 9999);
            SafariBattle.delay(SafariBattle.Speed.rock)
                .then(() => {
                const hitSplash = $('<ptcl>').html('<img src="assets/images/safari/hit.png">').children().appendTo('#safariBattleModal');
                hitSplash.css({ 'position': 'absolute', 'opacity': 0.8, 'z-index': 9998 });
                hitSplash.offset(enemyOffset);
                hitSplash.fadeOut(0.5 * SafariBattle.Speed.rock, () => {
                    hitSplash.remove();
                });
            })
                .then(SafariBattle.thenDelay(0.375 * SafariBattle.Speed.rock))
                .then(() => {
                const newOffset = {
                    top: enemyOffset.top + 4,
                    left: enemyOffset.left - 20,
                };
                const ang = $('<ptcl>').html('<img id="safariParticleAngry" src="assets/images/safari/angry.png">').children().appendTo('#safariBattleModal');
                ang.css({ 'position': 'absolute', 'z-index': 9999 });
                ang.offset(newOffset);
                ang.addClass('pulse');
                return newOffset;
            })
                .then(SafariBattle.thenDelay(0.4375 * SafariBattle.Speed.rock))
                .then((newOffset) => {
                newOffset.top -= 10;
                newOffset.left += 60;
                $('#safariParticleAngry').offset(newOffset);
            })
                .then(SafariBattle.thenDelay(0.4375 * SafariBattle.Speed.rock))
                .then(() => {
                $('#safariParticleAngry').remove();
            });
            SafariBattle.delay(2.5 * SafariBattle.Speed.rock)
                .then(() => SafariBattle.enemyTurn());
        }
    }
    static run() {
        return __awaiter(this, void 0, void 0, function* () {
            if (Safari.inBattle() && !SafariBattle.busy()) {
                SafariBattle.busy(true);
                if (SafariBattle.enemy.shiny) {
                    if (!(yield Notifier.confirm({
                        title: 'Shiny Encounter',
                        message: 'Are you sure you want to run away from this battle?',
                        type: NotificationConstants.NotificationOption.danger,
                        confirm: 'Yes',
                        cancel: 'No',
                    }))) {
                        SafariBattle.busy(false);
                        return;
                    }
                }
                SafariBattle.text('You flee.');
                SafariBattle.delay(SafariBattle.Speed.turnLength)
                    .then(() => SafariBattle.endBattle());
            }
        });
    }
    static enemyTurn() {
        // Enemy turn to flee;
        if (Rand.chance(SafariBattle.enemy.escapeFactor / 100)) {
            SafariBattle.text(`${SafariBattle.enemy.displayName} has fled.`);
            SafariBattle.delay(SafariBattle.Speed.enemyFlee)
                .then(() => SafariBattle.endBattle());
            return;
        }
        else if (SafariBattle.enemy.eating > 1) {
            SafariBattle.text(`${SafariBattle.enemy.displayName} is eating...`);
        }
        else if (SafariBattle.enemy.angry > 1) {
            SafariBattle.text(`${SafariBattle.enemy.displayName} is angry!`);
        }
        else {
            SafariBattle.text(`${SafariBattle.enemy.displayName} is watching carefully...`);
        }
        SafariBattle.enemy.eating = Math.max(0, SafariBattle.enemy.eating - 1);
        SafariBattle.enemy.angry = Math.max(0, SafariBattle.enemy.angry - 1);
        SafariBattle.delay(SafariBattle.Speed.turnLength, false)
            .then(() => {
            SafariBattle.text('What will you do?');
            SafariBattle.busy(false);
        });
    }
    static endBattle() {
        $('#safariBattleModal').one('hidden.bs.modal', () => {
            Safari.inBattle(false);
            SafariBattle.busy(false);
        }).modal('hide');
    }
    static gameOver() {
        SafariBattle.text(GameConstants.SAFARI_OUT_OF_BALLS);
        SafariBattle.delay(SafariBattle.Speed.gameOver)
            .then(() => {
            Safari.inBattle(false);
            Safari.inProgress(false);
            SafariBattle.busy(false);
            $('#safariBattleModal').modal('hide');
            $('#safariModal').modal('hide');
        });
    }
    static dropParticle(html, pos, target, time = 2, top, persistentParticle = false) {
        const p = $('<ptcl>').html(html).children().appendTo('#safariBattleModal');
        p.css('position', 'absolute');
        p.offset(pos);
        if (!top) {
            top = 'cubic-bezier(0.6, -0.3, 0.7, 0)';
        }
        p[0].style.transition = `left ${time}ms linear, top ${time}ms ${top}`;
        p.offset(target);
        if (!persistentParticle) {
            setTimeout(() => {
                p.fadeOut();
            }, time - 200);
            setTimeout(() => {
                p.remove();
            }, time);
        }
        return p;
    }
    static getTierMultiplier() {
        return SafariBattle.tierMultiplier(Safari.safariLevel());
    }
    static tierMultiplier(level) {
        const TIERS = [0, 10, 20, 30, 40];
        const MULTIPLIERS = [1, 0.90, 0.75, 0.57, 0.45];
        let tier = 0;
        for (let i = 0; i < TIERS.length; i++) {
            if (level >= TIERS[i]) {
                tier = i;
            }
        }
        return MULTIPLIERS[tier];
    }
    static pokeball() {
        switch (player.region) {
            case GameConstants.Region.johto:
                return '<div><img id="safariBall" src="assets/images/pokeball/Sportball.svg" height="30px"></div>';
            default:
                return '<div><img id="safariBall" src="assets/images/pokeball/Safariball.svg" height="30px"></div>';
        }
    }
}
SafariBattle._enemy = ko.observable();
SafariBattle.busy = ko.observable(false).extend({ boolean: null });
SafariBattle.text = ko.observable('What will you do?');
SafariBattle.escapeAttempts = 0;
SafariBattle.selectedBait = ko.observable(BaitList.Bait);
(function (SafariBattle) {
    SafariBattle.Speed = {
        ballThrowAnim: 700,
        ballThrowDelay: 825,
        ballBounceAnim: 1200,
        ballBounceDelay: 1500,
        ballRollAnim: 575,
        ballRollDelay: 475,
        enemyTransition: 700,
        enemyFlee: 1000,
        enemyCaught: 1700,
        enemyEscape: 1000,
        bait: 1000,
        rock: 800,
        turnLength: 1500,
        gameOver: 2000,
    };
    SafariBattle.CATCH_MESSAGES = [
        'Oh, no!<br>The Pokémon broke free!',
        'Aww! It appeared to be caught!',
        'Aargh! Almost had it!',
        'Shoot! It was so close, too!',
    ];
})(SafariBattle || (SafariBattle = {}));
class SafariBody {
    constructor() {
    }
    getTileNeighbours(x, y) {
        const ret = Array(4); //["N", "E", "S", "W"]
        const cross = Array(4); //["NE", "SE", "SW", "NW"]
        if (x === 0) {
            ret[3] = false;
        }
        else {
            ret[3] = this.grid[y][x - 1] !== GameConstants.SafariTile.ground;
        }
        if (y === 0) {
            ret[0] = false;
        }
        else {
            ret[0] = this.grid[y - 1][x] !== GameConstants.SafariTile.ground;
        }
        if (x === this.grid[0].length - 1) {
            ret[1] = false;
        }
        else {
            ret[1] = this.grid[y][x + 1] !== GameConstants.SafariTile.ground;
        }
        if (y === this.grid.length - 1) {
            ret[2] = false;
        }
        else {
            ret[2] = this.grid[y + 1][x] !== GameConstants.SafariTile.ground && this.grid[y + 1][x] !== undefined;
        }
        if (ret.equals([true, true, true, true])) {
            cross[0] = this.grid[y - 1][x + 1] !== GameConstants.SafariTile.ground;
            cross[1] = this.grid[y + 1][x + 1] !== GameConstants.SafariTile.ground;
            cross[2] = this.grid[y + 1][x - 1] !== GameConstants.SafariTile.ground;
            cross[3] = this.grid[y - 1][x - 1] !== GameConstants.SafariTile.ground;
        }
        return {
            plus: ret,
            cross: cross,
        };
    }
    //duplicated in DungeonMap
    static shuffle(a) {
        let j, x, i;
        for (i = a.length; i; i--) {
            j = Rand.floor(i);
            x = a[i - 1];
            a[i - 1] = a[j];
            a[j] = x;
        }
    }
    maxY() {
        return this.grid.length;
    }
    maxX() {
        let max = 0;
        for (const row of this.grid) {
            if (row.length > max) {
                max = row.length;
            }
        }
        return max;
    }
}
class SandBody extends SafariBody {
    constructor(x = SandBody.randomInt(), y = SandBody.randomInt(), type = 'sand') {
        super();
        this.edgeDetectCheck = GameConstants.SafariTile.sandC;
        this.type = type;
        this.grid = this.generateCube(x, y);
        this.edgeDetect();
    }
    static randomInt() {
        return Rand.intBetween(3, 5);
    }
    generateCube(sizeX, sizeY) {
        let body = [];
        for (let i = 0; i < sizeY; i++) {
            const row = [...Array(sizeX)].map(Number.prototype.valueOf, 0);
            body.push(row);
        }
        const amount = this.type === 'fence' ? 20 : 4;
        for (let i = 0; i < amount; i++) {
            const x = Rand.floor(sizeX - 2);
            const y = Rand.floor(sizeY - 2);
            body = SandBody.addCube(x, y, body);
        }
        return body;
    }
    static addCube(x, y, body) {
        if (Rand.boolean()) {
            body[y + 2][x] = GameConstants.SafariTile.sandC;
            body[y + 2][x + 1] = GameConstants.SafariTile.sandC;
            body[y][x + 2] = GameConstants.SafariTile.sandC;
            body[y + 1][x + 2] = GameConstants.SafariTile.sandC;
            body[y + 2][x + 2] = GameConstants.SafariTile.sandC;
        }
        body[y][x] = GameConstants.SafariTile.sandC;
        body[y + 1][x] = GameConstants.SafariTile.sandC;
        body[y][x + 1] = GameConstants.SafariTile.sandC;
        body[y + 1][x + 1] = GameConstants.SafariTile.sandC;
        return body;
    }
    edgeDetect() {
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[i].length; j++) {
                if (this.grid[i][j] === this.edgeDetectCheck) {
                    this.grid[i][j] = this.getNumber(this.getTileNeighbours(j, i));
                }
            }
        }
    }
    getNumber(neighbours) {
        const plus = neighbours.plus;
        const cross = neighbours.cross;
        if (plus.equals([false, true, true, false])) {
            return GameConstants.SafariTile.sandUL;
        }
        if (plus.equals([false, true, true, true])) {
            return GameConstants.SafariTile.sandU;
        }
        if (plus.equals([false, false, true, true])) {
            return GameConstants.SafariTile.sandUR;
        }
        if (plus.equals([true, true, true, false])) {
            return GameConstants.SafariTile.sandL;
        }
        if (plus.equals([true, true, true, true])) {
            if (!cross[0]) {
                return GameConstants.SafariTile.sandURinverted;
            }
            if (!cross[1]) {
                return GameConstants.SafariTile.sandDRinverted;
            }
            if (!cross[2]) {
                return GameConstants.SafariTile.sandDLinverted;
            }
            if (!cross[3]) {
                return GameConstants.SafariTile.sandULinverted;
            }
            return GameConstants.SafariTile.sandC;
        }
        if (plus.equals([true, false, true, true])) {
            return GameConstants.SafariTile.sandR;
        }
        if (plus.equals([true, true, false, false])) {
            return GameConstants.SafariTile.sandDL;
        }
        if (plus.equals([true, true, false, true])) {
            return GameConstants.SafariTile.sandD;
        }
        if (plus.equals([true, false, false, true])) {
            return GameConstants.SafariTile.sandDR;
        }
        return GameConstants.SafariTile.grass;
    }
}
class FenceBody extends SandBody {
    constructor() {
        super(7, 7, 'fence');
        this.edgeDetectCheck = 0;
        this.openFence();
    }
    getNumber(neighbours) {
        const plus = neighbours.plus;
        const cross = neighbours.cross;
        if (plus.equals([false, true, true, false])) {
            return GameConstants.SafariTile.fenceUL;
        }
        if (plus.equals([false, true, true, true])) {
            return GameConstants.SafariTile.fenceU;
        }
        if (plus.equals([false, false, true, true])) {
            return GameConstants.SafariTile.fenceUR;
        }
        if (plus.equals([true, true, true, false])) {
            return GameConstants.SafariTile.fenceL;
        }
        if (plus.equals([true, true, true, true])) {
            if (!cross[0]) {
                return GameConstants.SafariTile.fenceDRend;
            }
            if (!cross[1]) {
                return GameConstants.SafariTile.fenceURend;
            }
            if (!cross[2]) {
                return GameConstants.SafariTile.fenceULend;
            }
            if (!cross[3]) {
                return GameConstants.SafariTile.fenceDLend;
            }
            return GameConstants.SafariTile.grass;
        }
        if (plus.equals([true, false, true, true])) {
            return GameConstants.SafariTile.fenceR;
        }
        if (plus.equals([true, true, false, false])) {
            return GameConstants.SafariTile.fenceDL;
        }
        if (plus.equals([true, true, false, true])) {
            return GameConstants.SafariTile.fenceD;
        }
        if (plus.equals([true, false, false, true])) {
            return GameConstants.SafariTile.fenceDR;
        }
        return GameConstants.SafariTile.grass;
    }
    openFence() {
        const removedTiles = [];
        const options = [GameConstants.SafariTile.fenceU, GameConstants.SafariTile.fenceL, GameConstants.SafariTile.fenceR, GameConstants.SafariTile.fenceD];
        const pick = Rand.fromArray(options);
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === pick) {
                    if (pick == GameConstants.SafariTile.fenceL || pick == GameConstants.SafariTile.fenceR) { // Only tiles connected to the left/right fence tiles are broken
                        removedTiles.push({ x: j, y: i });
                    }
                    this.grid[i][j] = GameConstants.SafariTile.ground;
                }
            }
        }
        // Check tiles above and below the removed ones to avoid broken fences tiles
        removedTiles === null || removedTiles === void 0 ? void 0 : removedTiles.map((pos) => {
            const tileAbove = this.grid[pos.y - 1] ? this.grid[pos.y - 1][pos.x] : undefined;
            const tileBelow = this.grid[pos.y + 1] ? this.grid[pos.y + 1][pos.x] : undefined;
            switch (pick) {
                case GameConstants.SafariTile.fenceL: // Left fence tile
                    if (tileAbove === GameConstants.SafariTile.fenceUL || tileAbove === GameConstants.SafariTile.fenceULend) {
                        this.grid[pos.y - 1][pos.x] = GameConstants.SafariTile.fenceU;
                    }
                    if (tileBelow === GameConstants.SafariTile.fenceDL || tileBelow === GameConstants.SafariTile.fenceDLend) {
                        this.grid[pos.y + 1][pos.x] = GameConstants.SafariTile.fenceD;
                    }
                    break;
                case GameConstants.SafariTile.fenceR: // Right fence tile
                    if (tileAbove === GameConstants.SafariTile.fenceUR || tileAbove === GameConstants.SafariTile.fenceURend) {
                        this.grid[pos.y - 1][pos.x] = GameConstants.SafariTile.fenceU;
                    }
                    if (tileBelow === GameConstants.SafariTile.fenceDR || tileBelow === GameConstants.SafariTile.fenceDRend) {
                        this.grid[pos.y + 1][pos.x] = GameConstants.SafariTile.fenceD;
                    }
                    break;
                default:
            }
        });
    }
}
class WaterBody extends SafariBody {
    constructor(x = Rand.intBetween(3, 5), y = Rand.intBetween(3, 5)) {
        super();
        const body = [];
        for (let i = 0; i < y; i++) {
            const row = [];
            for (let j = 0; j < x; j++) {
                if (i === 0) {
                    if (j === 0) {
                        row.push(GameConstants.SafariTile.waterUL);
                    }
                    else if (j < x - 1) {
                        row.push(GameConstants.SafariTile.waterU);
                    }
                    else if (j === x - 1) {
                        row.push(GameConstants.SafariTile.waterUR);
                    }
                }
                else if (i < y - 1) {
                    if (j === 0) {
                        row.push(GameConstants.SafariTile.waterL);
                    }
                    else if (j < x - 1) {
                        row.push(GameConstants.SafariTile.waterC);
                    }
                    else if (j === x - 1) {
                        row.push(GameConstants.SafariTile.waterR);
                    }
                }
                else if (i === y - 1) {
                    if (j === 0) {
                        row.push(GameConstants.SafariTile.waterDL);
                    }
                    else if (j < x - 1) {
                        row.push(GameConstants.SafariTile.waterD);
                    }
                    else if (j === x - 1) {
                        row.push(GameConstants.SafariTile.waterDR);
                    }
                }
            }
            body.push(row);
        }
        this.grid = body;
        this.type = 'water';
    }
}
class GrassBody extends SafariBody {
    constructor() {
        super();
        const x = Rand.intBetween(4, 6);
        const y = Rand.intBetween(4, 6);
        const body = [];
        for (let i = 0; i < y; i++) {
            const row = [];
            for (let j = 0; j < x; j++) {
                if (j < x * 2 / 3 - 1) {
                    row.push(GameConstants.SafariTile.grass);
                }
                else {
                    row.push(GameConstants.SafariTile.ground);
                }
            }
            SafariBody.shuffle(row);
            body.push(row);
        }
        this.grid = body;
        this.fillHoles();
        this.type = 'grass';
    }
    fillHoles() {
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === GameConstants.SafariTile.ground) {
                    if (i !== 0 && i !== this.grid.length - 1) {
                        if (this.grid[i - 1][j] === GameConstants.SafariTile.grass && this.grid[i + 1][j] === GameConstants.SafariTile.grass) {
                            this.grid[i][j] = GameConstants.SafariTile.grass;
                        }
                    }
                }
            }
        }
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === GameConstants.SafariTile.ground) {
                    if (j !== 0 && j !== this.grid[0].length - 1) {
                        if (this.grid[i][j - 1] === GameConstants.SafariTile.grass && this.grid[i][j + 1] === GameConstants.SafariTile.grass) {
                            this.grid[i][j] = GameConstants.SafariTile.grass;
                        }
                    }
                }
            }
        }
    }
}
class TreeBody extends SafariBody {
    constructor() {
        super();
        this.grid = [
            [GameConstants.SafariTile.treeTopL, GameConstants.SafariTile.treeTopC, GameConstants.SafariTile.treeTopR],
            [GameConstants.SafariTile.treeLeavesL, GameConstants.SafariTile.treeLeavesC, GameConstants.SafariTile.treeLeavesR],
            [GameConstants.SafariTile.treeTrunkL, GameConstants.SafariTile.treeTrunkC, GameConstants.SafariTile.treeTrunkR],
            [GameConstants.SafariTile.treeRootsL, GameConstants.SafariTile.treeRootsC, GameConstants.SafariTile.treeRootsR],
        ];
        this.type = 'tree';
    }
}
class LandBody extends SafariBody {
    constructor(x, y) {
        super();
        this.grid = new Array(y - 2).fill(new Array(x - 2).fill(GameConstants.SafariTile.sandC));
        this.grid[0].unshift(GameConstants.SafariTile.waterR);
        this.grid[0].push(GameConstants.SafariTile.waterL);
        this.grid.unshift([GameConstants.SafariTile.waterDRCorner, ...new Array(x - 2).fill(GameConstants.SafariTile.waterD), GameConstants.SafariTile.waterDLCorner]);
        this.grid.push([GameConstants.SafariTile.waterURCorner, ...new Array(x - 2).fill(GameConstants.SafariTile.waterU), GameConstants.SafariTile.waterULCorner]);
        this.type = 'land';
    }
}
class ShapedLandBody extends SafariBody {
    /** Replace illegal configurations and place edge tiles */
    fulfill() {
        let change = false;
        const UP = 1, UPRIGHT = 2, RIGHT = 4, DOWNRIGHT = 8, DOWN = 16, DOWNLEFT = 32, LEFT = 64, UPLEFT = 128;
        // We prevent tiles whose significant edges are more than two or not adjacent
        // Otherwise, we would need something like 50 different sprites...
        do {
            change = false;
            this.grid.forEach((row, y) => {
                row.forEach((cell, x) => {
                    var _a, _b, _c, _d, _e, _f;
                    if (cell === GameConstants.SafariTile.sandC) {
                        return;
                    }
                    let mapValue = 0;
                    let tile = cell;
                    if (((_a = this.grid[y - 1]) === null || _a === void 0 ? void 0 : _a[x]) === GameConstants.SafariTile.sandC) {
                        mapValue += UP;
                    }
                    if (((_b = this.grid[y + 1]) === null || _b === void 0 ? void 0 : _b[x]) === GameConstants.SafariTile.sandC) {
                        mapValue += DOWN;
                    }
                    if (this.grid[y][x - 1] === GameConstants.SafariTile.sandC) {
                        mapValue += LEFT;
                    }
                    if (this.grid[y][x + 1] === GameConstants.SafariTile.sandC) {
                        mapValue += RIGHT;
                    }
                    if (((_c = this.grid[y - 1]) === null || _c === void 0 ? void 0 : _c[x - 1]) === GameConstants.SafariTile.sandC && (mapValue & (UP + LEFT)) === 0) {
                        mapValue += UPLEFT;
                    }
                    if (((_d = this.grid[y - 1]) === null || _d === void 0 ? void 0 : _d[x + 1]) === GameConstants.SafariTile.sandC && (mapValue & (UP + RIGHT)) === 0) {
                        mapValue += UPRIGHT;
                    }
                    if (((_e = this.grid[y + 1]) === null || _e === void 0 ? void 0 : _e[x + 1]) === GameConstants.SafariTile.sandC && (mapValue & (DOWN + RIGHT)) === 0) {
                        mapValue += DOWNRIGHT;
                    }
                    if (((_f = this.grid[y + 1]) === null || _f === void 0 ? void 0 : _f[x - 1]) === GameConstants.SafariTile.sandC && (mapValue & (DOWN + LEFT)) === 0) {
                        mapValue += DOWNLEFT;
                    }
                    switch (mapValue) {
                        case 0:
                            tile = GameConstants.SafariTile.ground;
                            break;
                        case UP:
                            tile = GameConstants.SafariTile.waterU;
                            break;
                        case DOWN:
                            tile = GameConstants.SafariTile.waterD;
                            break;
                        case LEFT:
                            tile = GameConstants.SafariTile.waterL;
                            break;
                        case RIGHT:
                            tile = GameConstants.SafariTile.waterR;
                            break;
                        case UP | LEFT:
                            tile = GameConstants.SafariTile.waterUL;
                            break;
                        case UP | RIGHT:
                            tile = GameConstants.SafariTile.waterUR;
                            break;
                        case DOWN | LEFT:
                            tile = GameConstants.SafariTile.waterDL;
                            break;
                        case DOWN | RIGHT:
                            tile = GameConstants.SafariTile.waterDR;
                            break;
                        case UPRIGHT:
                            tile = GameConstants.SafariTile.waterURCorner;
                            break;
                        case UPLEFT:
                            tile = GameConstants.SafariTile.waterULCorner;
                            break;
                        case DOWNRIGHT:
                            tile = GameConstants.SafariTile.waterDRCorner;
                            break;
                        case DOWNLEFT:
                            tile = GameConstants.SafariTile.waterDLCorner;
                            break;
                        // Illegal water tile
                        default:
                            change = true;
                            tile = GameConstants.SafariTile.sandC;
                    }
                    this.grid[y][x] = tile;
                });
            });
        } while (change);
    }
    trim() {
        let change = false;
        do {
            change = false;
            if (this.grid[this.grid.length - 1].every(tile => tile === GameConstants.SafariTile.ground)) {
                this.grid.pop();
                change = true;
            }
            if (this.grid[0].every(tile => tile === GameConstants.SafariTile.ground)) {
                this.grid.shift();
                change = true;
            }
        } while (change);
        do {
            change = false;
            if (this.grid.every(row => row[0] === GameConstants.SafariTile.ground)) {
                this.grid.forEach(r => r.shift());
                change = true;
            }
            if (this.grid.every(row => row[row.length - 1] === GameConstants.SafariTile.ground)) {
                this.grid.forEach(r => r.pop());
                change = true;
            }
        } while (change);
    }
    /** sand is temporarily used as ground, because ground is temporarily used as water. This so we do not change too much code everywhere */
    constructor() {
        super();
        this.type = 'land';
        const tileArray = [];
        // The chance is weird, but it makes well-sized islands
        while (tileArray.length < 9 && Rand.chance(1 + tileArray.length / 5)) {
            tileArray.push(GameConstants.SafariTile.sandC);
        }
        // Fill the rest with "water" tiles
        while (tileArray.length < 9) {
            tileArray.push(GameConstants.SafariTile.ground);
        }
        LandBody.shuffle(tileArray);
        this.grid = [];
        while (tileArray.length > 0) {
            this.grid.push(tileArray.splice(0, 3));
        }
        this.fulfill();
        // Fulfill is directional so flippings will make it look more random
        if (Rand.boolean()) {
            this.grid.reverse();
        }
        if (Rand.boolean()) {
            this.grid.forEach(r => r.reverse());
        }
        this.grid.push(new Array(3).fill(GameConstants.SafariTile.ground));
        this.grid.unshift(new Array(3).fill(GameConstants.SafariTile.ground));
        this.grid.forEach(r => {
            r.push(GameConstants.SafariTile.ground);
            r.unshift(GameConstants.SafariTile.ground);
        });
        this.fulfill();
        this.trim();
        // https://static.wixstatic.com/media/997b44_90b0ef0cb8ef477c9d750565def78d0b~mv2.gif
        const landSize = this.grid.flat().reduce((acc, t) => acc + +(t === GameConstants.SafariTile.sandC), 0);
        this.grid.forEach((r, y) => {
            r.forEach((t, x) => {
                if (t === GameConstants.SafariTile.sandC && Rand.chance(Math.sqrt(landSize - 3) / 6)) {
                    this.grid[y][x] = GameConstants.SafariTile.grass;
                }
            });
        });
    }
}
Array.prototype.equals = function (array) {
    // if the other array is a falsy value, return
    if (!array) {
        return false;
    }
    // compare lengths - can save a lot of time
    if (this.length != array.length) {
        return false;
    }
    for (let i = 0, l = this.length; i < l; i++) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this[i].equals(array[i])) {
                return false;
            }
        }
        else if (this[i] != array[i]) {
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;
        }
    }
    return true;
};
class SafariItem {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
class SafariItemController {
    static getRandomItem() {
        if (!SafariItemController.list[player.region]) {
            return undefined;
        }
        const list = SafariItemController.list[player.region].filter((i) => (!i.requirement || i.requirement.isCompleted()) && BagHandler.isAvailable(i.item));
        return Rand.fromWeightedArray(list.map((i) => i.item), list.map((i) => i.weight));
    }
    static currentRegionHasItems() {
        if (SafariItemController.getRandomItem()) {
            return true;
        }
        return false;
    }
}
SafariItemController.list = {
    [GameConstants.Region.kanto]: [
        { item: { id: 'Razz', type: ItemType.berry }, weight: 1.8 },
        { item: { id: 'Nanab', type: ItemType.berry }, weight: 1.8 },
        { item: { id: 'Pinap', type: ItemType.berry }, weight: 1.8 },
        { item: { id: 'Sitrus', type: ItemType.berry }, weight: 1.8 },
        { item: { id: 'Oran', type: ItemType.berry }, weight: 1.8 },
        { item: { id: 'Leaf Stone', type: ItemType.underground }, weight: 0.25 },
        { item: { id: 'Fire Stone', type: ItemType.underground }, weight: 0.25 },
        { item: { id: 'Thunder Stone', type: ItemType.underground }, weight: 0.25 },
        { item: { id: 'Water Stone', type: ItemType.underground }, weight: 0.25 },
        { item: { id: 'MediumRestore', type: ItemType.item }, weight: 2.25 },
        { item: { id: 'LargeRestore', type: ItemType.item }, weight: 1.25 },
        { item: { id: 'Protein', type: ItemType.item }, weight: 0.25 },
        { item: { id: 'Rare_Candy', type: ItemType.item }, weight: 1 },
        { item: { id: 'Revive', type: ItemType.underground }, weight: 2.5 },
        { item: { id: 'Max Revive', type: ItemType.underground }, weight: 1.5 },
        { item: { id: 'Exeggcute (Single)', type: ItemType.item }, weight: 0.25, requirement: new MultiRequirement([new SafariLevelRequirement(5), new ObtainedPokemonRequirement('Exeggcute')]) },
        { item: { id: 'Pinsirite', type: ItemType.item }, weight: 1, requirement: new MultiRequirement([new MaxRegionRequirement(GameConstants.Region.kalos), new ObtainedPokemonRequirement('Pinsir'), new SafariLevelRequirement(10)]) },
    ],
    [GameConstants.Region.johto]: [
        { item: { id: 'Nestball', type: ItemType.item }, weight: 1 },
        { item: { id: 'Fastball', type: ItemType.item }, weight: 1 },
        { item: { id: 'Luxuryball', type: ItemType.item }, weight: 1 },
        { item: { id: 'MediumRestore', type: ItemType.item }, weight: 1 },
        { item: { id: 'LargeRestore', type: ItemType.item }, weight: 1 },
        { item: { id: 'Boost_Mulch', type: ItemType.item }, weight: 2 },
        { item: { id: 'Rich_Mulch', type: ItemType.item }, weight: 2 },
        { item: { id: 'Surprise_Mulch', type: ItemType.item }, weight: 2 },
        { item: { id: 'Amaze_Mulch', type: ItemType.item }, weight: 2 },
        { item: { id: 'Freeze_Mulch', type: ItemType.item }, weight: 2 },
        { item: { id: 'Berry_Shovel', type: ItemType.item }, weight: 1 },
        { item: { id: 'Mulch_Shovel', type: ItemType.item }, weight: 1 },
        { item: { id: 'Rare_Candy', type: ItemType.item }, weight: 1 },
        { item: { id: 'Sun Stone', type: ItemType.underground }, weight: 1 },
        { item: { id: 'Everstone', type: ItemType.underground }, weight: 1 },
    ],
    [GameConstants.Region.sinnoh]: [
        { item: { id: 'LargeRestore', type: ItemType.item }, weight: 1 },
        { item: { id: 'Calcium', type: ItemType.item }, weight: 0.25 },
        { item: { id: 'Rare_Candy', type: ItemType.item }, weight: 1 },
        { item: { id: 'Black Shard', type: ItemType.underground }, weight: 1 },
        { item: { id: 'Crimson Shard', type: ItemType.underground }, weight: 1 },
        { item: { id: 'Lime Shard', type: ItemType.underground }, weight: 1 },
        { item: { id: 'White Shard', type: ItemType.underground }, weight: 1 },
        { item: { id: 'Dawn Stone', type: ItemType.underground }, weight: 0.5 },
        { item: { id: 'Dusk Stone', type: ItemType.underground }, weight: 0.5 },
        { item: { id: 'Shiny Stone', type: ItemType.underground }, weight: 0.5 },
        { item: { id: 'Odd Keystone', type: ItemType.underground }, weight: 1 },
        { item: { id: 'Draco Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Dread Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Earth Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Fist Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Flame Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Icicle Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Insect Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Iron Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Meadow Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Mind Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Pixie Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Sky Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Splash Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Spooky Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Stone Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Toxic Plate', type: ItemType.underground }, weight: 0.1 },
        { item: { id: 'Zap Plate', type: ItemType.underground }, weight: 0.1 },
    ],
    [GameConstants.Region.kalos]: [
        { item: { id: 'Mago', type: ItemType.berry }, weight: 1.95 },
        { item: { id: 'Iapapa', type: ItemType.berry }, weight: 1.95 },
        { item: { id: 'Hondew', type: ItemType.berry }, weight: 1.95 },
        { item: { id: 'Tamato', type: ItemType.berry }, weight: 1.95 },
        { item: { id: 'Durin', type: ItemType.berry }, weight: 1.95 },
        { item: { id: 'Shiny Stone', type: ItemType.underground }, weight: 0.33 },
        { item: { id: 'Dusk Stone', type: ItemType.underground }, weight: 0.33 },
        { item: { id: 'Dawn Stone', type: ItemType.underground }, weight: 0.34 },
        { item: { id: 'Carbos', type: ItemType.item }, weight: 0.25 },
        { item: { id: 'Calcium', type: ItemType.item }, weight: 0.25 },
        { item: { id: 'Rare_Candy', type: ItemType.item }, weight: 1 },
        { item: { id: 'Duskball', type: ItemType.item }, weight: 2 },
        { item: { id: 'Luxuryball', type: ItemType.item }, weight: 2 },
        { item: { id: 'Repeatball', type: ItemType.item }, weight: 1.5 },
        { item: { id: 'Star Piece', type: ItemType.underground }, weight: 1 },
        { item: { id: 'Exeggcute (Single)', type: ItemType.item }, weight: 0.25, requirement: new MultiRequirement([new SafariLevelRequirement(5), new ObtainedPokemonRequirement('Exeggcute')]) },
        { item: { id: 'Scizorite', type: ItemType.item }, weight: 1, requirement: new MultiRequirement([new MaxRegionRequirement(GameConstants.Region.kalos), new ObtainedPokemonRequirement('Scizor'), new SafariLevelRequirement(15)]) },
    ],
    [GameConstants.Region.alola]: [
        { item: { id: 'Coba', type: ItemType.berry }, weight: 2 },
        { item: { id: 'Iapapa', type: ItemType.berry }, weight: 2 },
        { item: { id: 'Belue', type: ItemType.berry }, weight: 2 },
        { item: { id: 'Figy', type: ItemType.berry }, weight: 2 },
        { item: { id: 'Kelpsy', type: ItemType.berry }, weight: 2 },
        { item: { id: 'Damp Rock', type: ItemType.underground }, weight: 1 },
        { item: { id: 'Protein', type: ItemType.item }, weight: 0.5 },
        { item: { id: 'Carbos', type: ItemType.item }, weight: 0.5 },
        { item: { id: 'Magikarp_Biscuit', type: ItemType.item }, weight: 4 },
        { item: { id: 'Diveball', type: ItemType.item }, weight: 2 },
        { item: { id: 'Repeatball', type: ItemType.item }, weight: 2 },
    ],
};
class SafariPokemon {
    constructor(name, sprite) {
        this.shadow = GameConstants.ShadowStatus.None;
        // Used for overworld sprites
        this.x = 0;
        this.y = 0;
        this.steps = 0;
        const data = PokemonHelper.getPokemonByName(name);
        this.name = data.name;
        this.id = data.id;
        this.type1 = data.type1;
        this.type2 = data.type2;
        this.shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SAFARI);
        this._displayName = PokemonHelper.displayName(name);
        this.gender = PokemonFactory.generateGender(data.gender.femaleRatio, data.gender.type);
        PokemonHelper.incrementPokemonStatistics(this.id, GameConstants.PokemonStatisticsType.Encountered, this.shiny, this.gender, GameConstants.ShadowStatus.None);
        // Shiny
        if (this.shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${this.displayName}! ✨`,
                pokemonImage: PokemonHelper.getImage(this.id, this.shiny, this.gender, GameConstants.ShadowStatus.None),
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.General.shiny_long,
                setting: NotificationConstants.NotificationSetting.General.encountered_shiny,
            });
        }
        this.baseCatchFactor = data.catchRate * 1 / 6;
        this.baseEscapeFactor = 30;
        this._angry = ko.observable(0);
        this._eating = ko.observable(0);
        this._eatingBait = ko.observable(BaitType.Bait);
        this.levelModifier = (Safari.safariLevel() - 1) / 50;
        switch (sprite) {
            case 'base':
                this.spriteID = Math.floor(this.id);
                break;
            case 'self':
                this.spriteID = this.id;
                break;
            default: this.spriteID = PokemonHelper.getPokemonByName(sprite).id;
        }
    }
    static calcPokemonWeight(pokemon) {
        return pokemon.weight * (App.game.party.alreadyCaughtPokemonByName(pokemon.name) ? 1 : 2);
    }
    get catchFactor() {
        const oakBonus = App.game.oakItems.calculateBonus(OakItemType.Magic_Ball);
        let catchF = this.baseCatchFactor + oakBonus + (this.levelModifier * 10);
        if (this.eating > 0) {
            catchF /= 2 - this.levelModifier;
        }
        if (this.angry > 0) {
            catchF *= 2 + this.levelModifier;
        }
        if (this.eatingBait === BaitType.Nanab) {
            catchF *= 1.5 + this.levelModifier;
        }
        return Math.min(100, catchF);
    }
    get escapeFactor() {
        let escapeF = this.baseEscapeFactor;
        if (this.eating > 0) {
            escapeF /= 4 + this.levelModifier;
        }
        if (this.angry > 0) {
            escapeF *= 2 - this.levelModifier;
        }
        if (this.eatingBait === BaitType.Razz) {
            escapeF /= 1.5 + this.levelModifier;
        }
        return escapeF;
    }
    get angry() {
        return this._angry();
    }
    set angry(value) {
        this._angry(value);
    }
    get eating() {
        return this._eating();
    }
    set eating(value) {
        this._eating(value);
    }
    get eatingBait() {
        return this._eatingBait();
    }
    set eatingBait(value) {
        this._eatingBait(value);
    }
    static random(environment = SafariEnvironments.Grass) {
        // Get a random pokemon from current region and zone for Safari Zone
        const safariPokemon = SafariPokemonList.list[Safari.activeRegion()]().filter((p) => p.isAvailable() && p.environments.includes(environment));
        const pokemon = Rand.fromWeightedArray(safariPokemon, safariPokemon.map(p => p.weight));
        return new SafariPokemon(pokemon.name, pokemon.sprite);
    }
    get displayName() {
        return this._displayName();
    }
}
class SafariEncounter {
    constructor(name, weight, environments = [SafariEnvironments.Grass], requirement, // True is used to simplify Friend Safari Pokémon generation
    hide = true, // Hide from the list
    sprite = 'base') {
        this.name = name;
        this.weight = weight;
        this.environments = environments;
        this.hide = hide;
        this.sprite = sprite;
        this.requirement = requirement === true ? new ObtainedPokemonRequirement(this.name) : requirement;
    }
    isAvailable() {
        var _a, _b;
        return (_b = (_a = this.requirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
}
class SafariPokemonList {
    static generateSafariLists() {
        this.generateKantoSafariList();
        this.generateJohtoSafariList();
        this.generateSinnohSafariList();
        this.generateAlolaSafariList();
        // Always generate Kalos Safari last
        this.generateKalosSafariList();
    }
    static generateKantoSafariList() {
        // Lower weighted pokemon will appear less frequently, equally weighted are equally likely to appear
        const pokemon = [
            // Grass
            new SafariEncounter('Nidoran(F)', 15),
            new SafariEncounter('Nidorina', 10),
            new SafariEncounter('Nidoran(M)', 25),
            new SafariEncounter('Nidorino', 10),
            new SafariEncounter('Exeggcute', 20),
            new SafariEncounter('Paras', 5),
            new SafariEncounter('Parasect', 15),
            new SafariEncounter('Rhyhorn', 10),
            new SafariEncounter('Chansey', 4),
            new SafariEncounter('Scyther', 4),
            new SafariEncounter('Pinsir', 4),
            new SafariEncounter('Kangaskhan', 15),
            new SafariEncounter('Tauros', 10),
            new SafariEncounter('Cubone', 10),
            new SafariEncounter('Marowak', 5),
            new SafariEncounter('Tangela', 4),
            // Water
            new SafariEncounter('Magikarp', 20, [SafariEnvironments.Water]),
            new SafariEncounter('Psyduck', 20, [SafariEnvironments.Water]),
            new SafariEncounter('Slowpoke', 20, [SafariEnvironments.Water]),
            new SafariEncounter('Poliwag', 15, [SafariEnvironments.Water]),
            new SafariEncounter('Goldeen', 15, [SafariEnvironments.Water]),
            new SafariEncounter('Seaking', 5, [SafariEnvironments.Water]),
            new SafariEncounter('Dratini', 10, [SafariEnvironments.Water], true, false),
            new SafariEncounter('Dragonair', 4, [SafariEnvironments.Water], true, false),
        ];
        SafariPokemonList.list[GameConstants.Region.kanto](pokemon);
    }
    static generateJohtoSafariList() {
        // Lower weighted pokemon will appear less frequently, equally weighted are equally likely to appear
        // Unlocks new mons after being caught
        const pokemon = [
            // Grass
            new SafariEncounter('Caterpie', 5),
            new SafariEncounter('Metapod', 2),
            new SafariEncounter('Butterfree', 1),
            new SafariEncounter('Weedle', 5),
            new SafariEncounter('Kakuna', 2),
            new SafariEncounter('Beedrill', 1),
            new SafariEncounter('Venonat', 3),
            new SafariEncounter('Ledyba', 3),
            new SafariEncounter('Spinarak', 3),
            new SafariEncounter('Paras', 3),
            new SafariEncounter('Scyther', 3),
            new SafariEncounter('Pinsir', 2),
            new SafariEncounter('Pineco', 3),
            new SafariEncounter('Shuckle', 2),
            new SafariEncounter('Wurmple', 5, [SafariEnvironments.Grass], true),
            new SafariEncounter('Silcoon', 2, [SafariEnvironments.Grass], true),
            new SafariEncounter('Beautifly', 1, [SafariEnvironments.Grass], true),
            new SafariEncounter('Cascoon', 2, [SafariEnvironments.Grass], true),
            new SafariEncounter('Dustox', 1, [SafariEnvironments.Grass], true),
            new SafariEncounter('Masquerain', 1, [SafariEnvironments.Grass], true),
            new SafariEncounter('Nincada', 2, [SafariEnvironments.Grass], true),
            new SafariEncounter('Kricketot', 2, [SafariEnvironments.Grass], true),
            new SafariEncounter('Kricketune', 1, [SafariEnvironments.Grass], true),
            new SafariEncounter('Combee', 2, [SafariEnvironments.Grass], true),
            new SafariEncounter('Vespiquen', 1, [SafariEnvironments.Grass], true),
            new SafariEncounter('Yanmega', 1, [SafariEnvironments.Grass], true),
            new SafariEncounter('Sewaddle', 5, [SafariEnvironments.Grass], true),
            new SafariEncounter('Swadloon', 2, [SafariEnvironments.Grass], true),
            new SafariEncounter('Leavanny', 1, [SafariEnvironments.Grass], true),
            new SafariEncounter('Venipede', 5, [SafariEnvironments.Grass], true),
            new SafariEncounter('Whirlipede', 2, [SafariEnvironments.Grass], true),
            new SafariEncounter('Scolipede', 1, [SafariEnvironments.Grass], true),
            new SafariEncounter('Dwebble', 5, [SafariEnvironments.Grass], true),
            new SafariEncounter('Durant', 1, [SafariEnvironments.Grass], true),
            new SafariEncounter('Scatterbug', 5, [SafariEnvironments.Grass], true),
            new SafariEncounter('Spewpa', 2, [SafariEnvironments.Grass], true),
            new SafariEncounter('Grubbin', 5, [SafariEnvironments.Grass], true),
            new SafariEncounter('Charjabug', 2, [SafariEnvironments.Grass], true),
            new SafariEncounter('Vikavolt', 1, [SafariEnvironments.Grass], true),
            new SafariEncounter('Cutiefly', 2, [SafariEnvironments.Grass], true),
            new SafariEncounter('Blipbug', 5, [SafariEnvironments.Grass], true),
            new SafariEncounter('Dottler', 2, [SafariEnvironments.Grass], true),
            new SafariEncounter('Orbeetle', 1, [SafariEnvironments.Grass], true),
            new SafariEncounter('Sizzlipede', 2, [SafariEnvironments.Grass], true),
            new SafariEncounter('Snom', 2, [SafariEnvironments.Grass], true),
            // Water
            new SafariEncounter('Yanma', 1, [SafariEnvironments.Water]),
            new SafariEncounter('Surskit', 5, [SafariEnvironments.Water], true),
            new SafariEncounter('Dewpider', 5, [SafariEnvironments.Water], true),
            new SafariEncounter('Araquanid', 1, [SafariEnvironments.Water], true),
            new SafariEncounter('Wimpod', 1, [SafariEnvironments.Water], true),
            new SafariEncounter('Golisopod', 1, [SafariEnvironments.Water], true),
        ];
        SafariPokemonList.list[GameConstants.Region.johto](pokemon);
    }
    static generateSinnohSafariList() {
        // Lower weighted pokemon will appear less frequently, equally weighted are equally likely to appear
        const pokemon = [
            // Grass
            new SafariEncounter('Tangela', 20),
            new SafariEncounter('Paras', 10),
            new SafariEncounter('Exeggcute', 10),
            new SafariEncounter('Kangaskhan', 10),
            new SafariEncounter('Hoothoot', 15),
            new SafariEncounter('Noctowl', 10),
            new SafariEncounter('Yanma', 25),
            new SafariEncounter('Shroomish', 10),
            new SafariEncounter('Gulpin', 10),
            new SafariEncounter('Kecleon', 10),
            new SafariEncounter('Tropius', 15),
            new SafariEncounter('Bibarel', 20),
            new SafariEncounter('Skorupi', 10),
            new SafariEncounter('Drapion', 5),
            new SafariEncounter('Croagunk', 10),
            new SafariEncounter('Toxicroak', 5),
            new SafariEncounter('Carnivine', 10),
            // Water
            new SafariEncounter('Magikarp', 20, [SafariEnvironments.Water]),
            new SafariEncounter('Gyarados', 10, [SafariEnvironments.Water]),
            new SafariEncounter('Wooper', 20, [SafariEnvironments.Water]),
            new SafariEncounter('Quagsire', 5, [SafariEnvironments.Water]),
            new SafariEncounter('Barboach', 10, [SafariEnvironments.Water]),
            new SafariEncounter('Whiscash', 5, [SafariEnvironments.Water]),
            new SafariEncounter('Carvanha', 10, [SafariEnvironments.Water]),
        ];
        SafariPokemonList.list[GameConstants.Region.sinnoh](pokemon);
    }
    static generateKalosSafariList() {
        // Obtain the list of non-EVable pokemon and shuffle it
        // There may not be an evenly divisible number of pokemon so repeat list 5 times
        const friendSafariPokemon = pokemonList
            .filter((p) => PokemonLocations.isObtainableAndNotEvable(p.name)
            && PokemonHelper.calcNativeRegion(p.name) <= GameConstants.MAX_AVAILABLE_REGION)
            .map((p) => p.name);
        SeededRand.seed(+player.trainerId);
        const shuffledPokemon = new Array(GameConstants.FRIEND_SAFARI_POKEMON)
            .fill(SeededRand.shuffleArray(friendSafariPokemon)).flat();
        // Rotation is fixed, use the current date to determine where in the list to select the 5 pokemon
        const batchCount = Math.ceil(shuffledPokemon.length / GameConstants.FRIEND_SAFARI_POKEMON);
        const now = new Date();
        const startIndex = (Math.floor((now.getTime() - now.getTimezoneOffset() * 60 * 1000) / (24 * 60 * 60 * 1000)) % batchCount) * GameConstants.FRIEND_SAFARI_POKEMON;
        const endIndex = startIndex + GameConstants.FRIEND_SAFARI_POKEMON;
        const pokemon = shuffledPokemon.slice(startIndex, endIndex).map((p) => {
            return new SafariEncounter(p, 10, SafariPokemonList.getEnvironmentByPokemonType(p), true, false);
        });
        pokemon.push(new SafariEncounter('Shuckle', 2));
        pokemon.push(new SafariEncounter('Stunfisk', 2));
        pokemon.push(new SafariEncounter('Magmar', 2));
        pokemon.push(new SafariEncounter('Maractus', 2));
        pokemon.push(new SafariEncounter('Klefki', 2));
        pokemon.push(new SafariEncounter('Breloom', 2));
        pokemon.push(new SafariEncounter('Woobat', 2));
        pokemon.push(new SafariEncounter('Golurk', 2));
        pokemon.push(new SafariEncounter('Marowak', 2));
        // Water
        pokemon.push(new SafariEncounter('Lapras', 2, [SafariEnvironments.Water]));
        SafariPokemonList.list[GameConstants.Region.kalos](pokemon);
    }
    static generateAlolaSafariList() {
        // Lower weighted pokemon will appear less frequently, equally weighted are equally likely to appear
        // Filler
        const pokemon = [
            // Grass
            new SafariEncounter('Pidgeotto', 2.7),
            // Water
            new SafariEncounter('Magikarp', 0.7, [SafariEnvironments.Water]),
            new SafariEncounter('Magikarp Skelly', 2, [SafariEnvironments.Water], new GymBadgeRequirement(BadgeEnums.Quick_League), false, 'self'),
            new SafariEncounter('Magikarp Calico (White, Orange)', 2, [SafariEnvironments.Water], new TemporaryBattleRequirement('Magikarp Jump Karpen'), false, 'self'),
            new SafariEncounter('Magikarp Pink Dapples', 2, [SafariEnvironments.Water], new GymBadgeRequirement(BadgeEnums.Fast_League), false, 'self'),
            new SafariEncounter('Magikarp Grey Diamonds', 2, [SafariEnvironments.Water], new TemporaryBattleRequirement('Magikarp Jump Karpress 3'), false, 'self'),
            new SafariEncounter('Magikarp Purple Bubbles', 2, [SafariEnvironments.Water], new GymBadgeRequirement(BadgeEnums.Heal_League), false, 'self'),
            new SafariEncounter('Magikarp Purple Patches', 2, [SafariEnvironments.Water], new TemporaryBattleRequirement('Magikarp Jump Karpella 3'), false, 'self'),
            new SafariEncounter('Magikarp Brown Tiger', 2, [SafariEnvironments.Water], new GymBadgeRequirement(BadgeEnums.Ultra_League), false, 'self'),
            new SafariEncounter('Magikarp Orange Forehead', 2, [SafariEnvironments.Water], new GymBadgeRequirement(BadgeEnums.E4_League), false, 'self'),
            new SafariEncounter('Magikarp Black Mask', 2, [SafariEnvironments.Water], new TemporaryBattleRequirement('Magikarp Jump Tykarp 2'), false, 'self'),
            new SafariEncounter('Magikarp Saucy Blue', 2, [SafariEnvironments.Water], new QuestLineCompletedRequirement('Dr. Splash\'s Research Project'), false, 'self'),
            // Both, meme encounter
            new SafariEncounter('Ditto (Magikarp)', 0.3, [SafariEnvironments.Water, SafariEnvironments.Grass], new CaughtUniquePokemonByFilterRequirement((p) => Math.floor(p.id) === pokemonMap.Magikarp.id, 'Catch more Magikarp species.', 6), false, 'Magikarp'),
        ];
        SafariPokemonList.list[GameConstants.Region.alola](pokemon);
    }
    // Get SafariEnvironment according to the Pokemon types
    static getEnvironmentByPokemonType(p) {
        const pokemon = PokemonHelper.getPokemonByName(p);
        const safariEnvironments = [];
        // If Pokemon is water-type, add the water environment
        if (pokemon.type1 === PokemonType.Water || pokemon.type2 === PokemonType.Water) {
            safariEnvironments.push(SafariEnvironments.Water);
        }
        const pureWater = pokemon.type1 === PokemonType.Water && pokemon.type2 === PokemonType.None;
        const waterIce = pokemon.type1 === PokemonType.Water && pokemon.type2 === PokemonType.Ice;
        const iceWater = pokemon.type1 === PokemonType.Ice && pokemon.type2 === PokemonType.Water;
        // If Pokemon is not pure water, water/ice or ice/water, add the grass environment
        if (!(pureWater || waterIce || iceWater)) {
            safariEnvironments.push(SafariEnvironments.Grass);
        }
        return safariEnvironments;
    }
    static getDisplayList(region = player.region) {
        const encounters = [];
        if (!SafariPokemonList.list[region]) {
            return encounters;
        }
        const list = SafariPokemonList.list[region]();
        list.forEach(e => {
            if (e.hide && !e.isAvailable()) {
                return;
            }
            const pokemon = PokemonHelper.getPokemonByName(e.name);
            const partyPokemon = App.game.party.getPokemonByName(e.name);
            const eData = {
                image: PokemonHelper.getImage(pokemon.id, undefined, undefined, GameConstants.ShadowStatus.None),
                pkrsImage: (partyPokemon === null || partyPokemon === void 0 ? void 0 : partyPokemon.pokerus) > GameConstants.Pokerus.Uninfected ? `assets/images/breeding/pokerus/${GameConstants.Pokerus[partyPokemon.pokerus]}.png` : '',
                EVs: (partyPokemon === null || partyPokemon === void 0 ? void 0 : partyPokemon.pokerus) >= GameConstants.Pokerus.Contagious ? `EVs: ${partyPokemon.evs().toLocaleString('en-US')}` : '',
                shiny: (partyPokemon === null || partyPokemon === void 0 ? void 0 : partyPokemon.shiny) || false,
                hide: false,
                uncaught: !partyPokemon,
                lock: !e.isAvailable(),
                lockMessage: e.isAvailable() ? '' : e.requirement.hint(),
            };
            encounters.push(eData);
        });
        return encounters;
    }
}
SafariPokemonList.list = {
    [GameConstants.Region.kanto]: ko.observableArray(),
    [GameConstants.Region.johto]: ko.observableArray(),
    [GameConstants.Region.sinnoh]: ko.observableArray(),
    [GameConstants.Region.kalos]: ko.observableArray(),
    [GameConstants.Region.alola]: ko.observableArray(),
};
class SafariTownContent extends TownContent {
    constructor(buttonText) {
        super();
        this.buttonText = buttonText;
    }
    cssClass() {
        return 'btn btn-primary';
    }
    text() {
        var _a;
        return (_a = this.buttonText) !== null && _a !== void 0 ? _a : 'Enter Safari Zone';
    }
    onclick() {
        Safari.openModal();
    }
    areaStatus() {
        if (!SafariPokemonList.list[player.region]) {
            return [areaStatus.completed];
        }
        const pokemonStatusArray = [areaStatus.completed];
        const pokerusUnlocked = Settings.getSetting(`--${areaStatus[areaStatus.missingResistant]}`).isUnlocked();
        SafariPokemonList.list[player.region]().forEach(p => {
            if (!p.isAvailable()) {
                return;
            }
            const caughtStatus = PartyController.getCaughtStatusByName(p.name);
            if (caughtStatus == CaughtStatus.NotCaught) {
                pokemonStatusArray.push(areaStatus.uncaughtPokemon);
            }
            else if (caughtStatus == CaughtStatus.Caught) {
                pokemonStatusArray.push(areaStatus.uncaughtShinyPokemon);
            }
            else if (pokerusUnlocked && PartyController.getPokerusStatusByName(p.name) < GameConstants.Pokerus.Resistant) {
                pokemonStatusArray.push(areaStatus.missingResistant);
            }
        });
        return pokemonStatusArray;
    }
}
///<reference path="../towns/TownContent.ts"/>
class Shop extends TownContent {
    cssClass() {
        return 'btn btn-secondary';
    }
    text() {
        var _a;
        return (_a = this.name) !== null && _a !== void 0 ? _a : 'Poké Mart';
    }
    isVisible() {
        if (!super.isVisible()) {
            return false;
        }
        return !(this.hideBeforeUnlocked && !this.isUnlocked());
    }
    onclick() {
        ShopHandler.showShop(this);
        $('#shopModal').modal('show');
    }
    constructor(items, name = undefined, requirements = [], hideBeforeUnlocked = false) {
        super(requirements);
        this.items = items;
        this.name = name;
        this.hideBeforeUnlocked = hideBeforeUnlocked;
        this.tooltip = 'Visit shops to buy items.';
        this.amountInput = () => $('#shopModal').find('input[name="amountOfItems"]');
    }
    areaStatus() {
        const itemStatusArray = super.areaStatus();
        if (itemStatusArray.includes(areaStatus.locked)) {
            return [areaStatus.locked];
        }
        const pokerusUnlocked = Settings.getSetting(`--${areaStatus[areaStatus.missingResistant]}`).isUnlocked();
        this.items.forEach(i => {
            if (i instanceof PokemonItem) {
                if (i.getCaughtStatus() == CaughtStatus.NotCaught) {
                    itemStatusArray.push(areaStatus.uncaughtPokemon);
                }
                if (i.getCaughtStatus() == CaughtStatus.Caught) {
                    itemStatusArray.push(areaStatus.uncaughtShinyPokemon);
                }
                if (pokerusUnlocked && i.getPokerusStatus() < GameConstants.Pokerus.Resistant) {
                    itemStatusArray.push(areaStatus.missingResistant);
                }
            }
        });
        return itemStatusArray;
    }
    get displayName() {
        if (this.name) {
            return this.name;
        }
        if (!this.parent) {
            return 'Poké Mart';
        }
        return `Poké Mart ${this.parent.name}`;
    }
}
/// <reference path="./Shop.ts"/>
class BerryMasterShop extends Shop {
    constructor(location, items, name = 'Berry Master', requirements) {
        super(items, name, requirements);
        this.location = location;
        this.items = items;
        this.name = name;
        this.amountInput = () => $('#berryMasterModal').find('input[name="amountOfItems"]');
    }
    onclick() {
        ShopHandler.showShop(this);
        $('#berryMasterModal').modal('show');
    }
    areaStatus() {
        const itemStatusArray = super.areaStatus();
        if (itemStatusArray.includes(areaStatus.locked)) {
            return [areaStatus.locked];
        }
        const berryListIndex = GameConstants.BerryTraderLocations[this.parent.name];
        if (berryListIndex > -1) {
            const berryDeals = BerryDeal.list[berryListIndex]();
            const berryTraderPokemon = berryDeals.filter(d => d.item.itemType instanceof PokemonItem).map(d => d.item.itemType.type);
            if (!RouteHelper.listCompleted(berryTraderPokemon, false)) {
                itemStatusArray.push(areaStatus.uncaughtPokemon);
            }
            if (!RouteHelper.listCompleted(berryTraderPokemon, true)) {
                itemStatusArray.push(areaStatus.uncaughtShinyPokemon);
            }
            if (Settings.getSetting(`--${areaStatus[areaStatus.missingResistant]}`).isUnlocked() && RouteHelper.minPokerus(berryTraderPokemon) < GameConstants.Pokerus.Resistant) {
                itemStatusArray.push(areaStatus.missingResistant);
            }
        }
        return itemStatusArray;
    }
}
/// <reference path="./Shop.ts"/>
class GemMasterShop extends Shop {
    constructor(shop, name = 'Gem Master', requirements = [], hideBeforeUnlocked = false) {
        super([], name, requirements, hideBeforeUnlocked);
        this.shop = shop;
        this.name = name;
    }
    onclick() {
        ShopHandler.showShop(this);
        $('#gemMasterModal').modal('show');
    }
    areaStatus() {
        const itemStatusArray = super.areaStatus();
        if (itemStatusArray.includes(areaStatus.locked)) {
            return [areaStatus.locked];
        }
        const deals = GemDeals.getDeals(this.shop);
        if (deals) {
            const pokemonDeals = deals.filter(d => d.item.itemType instanceof PokemonItem && d.isVisible()).map(d => d.item.itemType.type);
            if (!RouteHelper.listCompleted(pokemonDeals, false)) {
                itemStatusArray.push(areaStatus.uncaughtPokemon);
            }
            if (!RouteHelper.listCompleted(pokemonDeals, true)) {
                itemStatusArray.push(areaStatus.uncaughtShinyPokemon);
            }
            if (Settings.getSetting(`--${areaStatus[areaStatus.missingResistant]}`).isUnlocked() && RouteHelper.minPokerus(pokemonDeals) < GameConstants.Pokerus.Resistant) {
                itemStatusArray.push(areaStatus.missingResistant);
            }
        }
        return itemStatusArray;
    }
}
/// <reference path="./Shop.ts"/>
class GenericTraderShop extends Shop {
    constructor(traderID, traderName = 'Trader', hidePlayerInventory = false, requirements = []) {
        super([], traderName, requirements);
        this.traderID = traderID;
        this.traderName = traderName;
        this.hidePlayerInventory = hidePlayerInventory;
    }
    onclick() {
        ShopHandler.showShop(this);
        $('#genericTraderModal').modal('show');
    }
    areaStatus() {
        var _a;
        const itemStatusArray = super.areaStatus();
        if (itemStatusArray.includes(areaStatus.locked)) {
            return [areaStatus.locked];
        }
        const deals = (_a = GenericDeal.getDeals(this.traderID)) === null || _a === void 0 ? void 0 : _a();
        if (((deals === null || deals === void 0 ? void 0 : deals.length) || 0) > 0) {
            const pokemonDeals = deals
                .flatMap(deal => deal.profits)
                .filter(profit => {
                if (profit.type === DealCostOrProfitType.Item) {
                    return profit.item.isVisible() && profit.item instanceof PokemonItem;
                }
                return false;
            })
                .map(profit => profit.item.type);
            if (!RouteHelper.listCompleted(pokemonDeals, false)) {
                itemStatusArray.push(areaStatus.uncaughtPokemon);
            }
            if (!RouteHelper.listCompleted(pokemonDeals, true)) {
                itemStatusArray.push(areaStatus.uncaughtShinyPokemon);
            }
            if (Settings.getSetting(`--${areaStatus[areaStatus.missingResistant]}`).isUnlocked() && RouteHelper.minPokerus(pokemonDeals) < GameConstants.Pokerus.Resistant) {
                itemStatusArray.push(areaStatus.missingResistant);
            }
        }
        return itemStatusArray;
    }
    isVisible() {
        var _a, _b;
        if (super.isVisible()) {
            const deals = (_a = GenericDeal.getDeals(this.traderID)) === null || _a === void 0 ? void 0 : _a();
            return (_b = deals === null || deals === void 0 ? void 0 : deals.some(deal => deal.isVisible())) !== null && _b !== void 0 ? _b : true;
        }
        return false;
    }
}
/// <reference path="./Shop.ts"/>
class ShardTraderShop extends Shop {
    constructor(location, name = 'Shard Trader', hidePlayerInventory = false, currencyName = 'Item') {
        super([], name);
        this.location = location;
        this.name = name;
        this.hidePlayerInventory = hidePlayerInventory;
        this.currencyName = currencyName;
    }
    onclick() {
        ShopHandler.showShop(this);
        $('#shardTraderModal').modal('show');
    }
    areaStatus() {
        var _a;
        const itemStatusArray = super.areaStatus();
        if (itemStatusArray.includes(areaStatus.locked)) {
            return [areaStatus.locked];
        }
        const deals = (_a = ShardDeal.getDeals(this.location)) === null || _a === void 0 ? void 0 : _a();
        if (deals) {
            const pokemonDeals = deals.filter(d => d.item.itemType instanceof PokemonItem && d.item.itemType.isVisible()).map(d => d.item.itemType.type);
            if (!RouteHelper.listCompleted(pokemonDeals, false)) {
                itemStatusArray.push(areaStatus.uncaughtPokemon);
            }
            if (!RouteHelper.listCompleted(pokemonDeals, true)) {
                itemStatusArray.push(areaStatus.uncaughtShinyPokemon);
            }
            if (Settings.getSetting(`--${areaStatus[areaStatus.missingResistant]}`).isUnlocked() && RouteHelper.minPokerus(pokemonDeals) < GameConstants.Pokerus.Resistant) {
                itemStatusArray.push(areaStatus.missingResistant);
            }
        }
        return itemStatusArray;
    }
    isVisible() {
        var _a, _b;
        if (super.isVisible()) {
            const deals = (_a = ShardDeal.getDeals(this.location)) === null || _a === void 0 ? void 0 : _a();
            return (_b = deals === null || deals === void 0 ? void 0 : deals.some(d => d.item.itemType.isVisible())) !== null && _b !== void 0 ? _b : true;
        }
        return false;
    }
}
///<reference path="Shop.ts"/>
class ShopHandler {
    static showShop(shop) {
        this.setSelected(0);
        this.resetAmount();
        this.shopObservable(shop);
        shop.items.forEach(item => {
            item.price(Math.round(item.basePrice * (player.itemMultipliers[item.saveName] || 1)));
        });
    }
    //#region Controls
    static setSelected(i) {
        this.selected(i);
    }
    static buyItem() {
        const item = this.shopObservable().items[ShopHandler.selected()];
        item.buy(this.amount());
        if (Settings.getSetting('resetShopAmountOnPurchase').observableValue()) {
            ShopHandler.resetAmount();
        }
    }
    static resetAmount() {
        this.shopObservable().amountInput().val(1).change();
    }
    static increaseAmount(n) {
        const newVal = (parseInt(this.shopObservable().amountInput().val().toString(), 10) || 0) + n;
        this.shopObservable().amountInput().val(newVal > 1 ? newVal : 1).change();
    }
    static multiplyAmount(n) {
        const newVal = (parseInt(this.shopObservable().amountInput().val().toString(), 10) || 0) * n;
        this.shopObservable().amountInput().val(newVal > 1 ? newVal : 1).change();
    }
    static maxAmount() {
        const item = this.shopObservable().items[ShopHandler.selected()];
        if (!item || !item.isAvailable()) {
            return this.shopObservable().amountInput().val(0).change();
        }
        const tooMany = (amt) => amt > item.maxAmount || !App.game.wallet.hasAmount(new Amount(item.totalPrice(amt), item.currency));
        const amt = GameHelper.binarySearch(tooMany, 0, Number.MAX_SAFE_INTEGER);
        this.shopObservable().amountInput().val(amt).change();
    }
    //#endregion
    //#region UI
    static calculateCss(i) {
        if (this.selected() == i) {
            return 'shopItem clickable btn btn-secondary active';
        }
        else {
            return 'shopItem clickable btn btn-secondary';
        }
    }
    static calculateButtonCss() {
        const item = this.shopObservable().items[ShopHandler.selected()];
        if (item && !(item.isAvailable() && App.game.wallet.hasAmount(new Amount(item.totalPrice(this.amount()), item.currency)))
            || this.amount() < 1) {
            return 'btn btn-danger smallButton smallFont';
        }
        else {
            return 'btn btn-success smallButton smallFont';
        }
    }
}
ShopHandler.shopObservable = ko.observable(new Shop([]));
ShopHandler.selected = ko.observable(0);
ShopHandler.amount = ko.observable(1);
//#endregion
ShopHandler.shortcutVisible = ko.pureComputed(() => {
    return App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Champion Lance')]() > 0;
});
class TemporaryBattle extends TownContent {
    cssClass() {
        return App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex(this.name)]() ?
            'btn btn-success' :
            'btn btn-secondary';
    }
    text() {
        return `Fight ${this.getDisplayName()}`;
    }
    isVisible() {
        var _a;
        return (this.isUnlocked() || ((_a = this.optionalArgs.visibleRequirement) === null || _a === void 0 ? void 0 : _a.isCompleted())) && !this.completeRequirements.every(r => r.isCompleted());
    }
    onclick() {
        TemporaryBattleRunner.startBattle(this);
    }
    areaStatus() {
        if (!this.isUnlocked()) {
            return [areaStatus.locked];
        }
        if (App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex(this.name)]() == 0 && this.isVisible()) {
            return [areaStatus.incomplete];
        }
        return [areaStatus.completed];
    }
    getDisplayName() {
        var _a;
        return (_a = this.optionalArgs.displayName) !== null && _a !== void 0 ? _a : this.name.replace(/( route)? \d+$/, '');
    }
    getTown() {
        var _a;
        return (_a = this.parent) !== null && _a !== void 0 ? _a : TownList[this.optionalArgs.returnTown];
    }
    getImage() {
        var _a, _b, _c, _d;
        const imageName = (_b = (_a = this.optionalArgs) === null || _a === void 0 ? void 0 : _a.imageName) !== null && _b !== void 0 ? _b : this.name;
        const finalMonImageName = (_d = (_c = this.optionalArgs) === null || _c === void 0 ? void 0 : _c.finalPokemonImage) !== null && _d !== void 0 ? _d : imageName;
        return TemporaryBattleRunner.finalPokemon() ? `assets/images/npcs/${finalMonImageName}.png` : `assets/images/npcs/${imageName}.png`;
    }
    constructor(name, pokemons, defeatMessage, requirements = [], completeRequirements = undefined, optionalArgs = {}) {
        super(requirements);
        this.name = name;
        this.pokemons = pokemons;
        this.defeatMessage = defeatMessage;
        this.optionalArgs = optionalArgs;
        if (!completeRequirements) {
            completeRequirements = [new TemporaryBattleRequirement(name)];
        }
        if (optionalArgs.isTrainerBattle == undefined) {
            optionalArgs.isTrainerBattle = true;
        }
        this.completeRequirements = completeRequirements;
    }
    getPokemonList() {
        return this.pokemons.filter((p) => p.requirements.every((r => r.isCompleted())));
    }
}
class TemporaryBattleBattle extends Battle {
    static pokemonAttack() {
        if (TemporaryBattleRunner.running()) {
            super.pokemonAttack();
        }
    }
    static clickAttack() {
        if (TemporaryBattleRunner.running()) {
            super.clickAttack();
        }
    }
    static defeatPokemon() {
        const enemyPokemon = super.enemyPokemon();
        if (!TemporaryBattleBattle.battle.optionalArgs.isTrainerBattle || enemyPokemon.shadow == GameConstants.ShadowStatus.Shadow) {
            // Attempting to catch Pokemon
            const isShiny = enemyPokemon.shiny;
            const isShadow = enemyPokemon.shadow == GameConstants.ShadowStatus.Shadow;
            const pokeBall = App.game.pokeballs.calculatePokeballToUse(enemyPokemon.id, isShiny, isShadow, enemyPokemon.encounterType);
            if (pokeBall !== GameConstants.Pokeball.None) {
                this.prepareCatch(enemyPokemon, pokeBall);
                setTimeout(() => {
                    this.attemptCatch(enemyPokemon, 1, player.region);
                    this.endFight();
                }, App.game.pokeballs.calculateCatchTime(pokeBall));
            }
            else {
                this.endFight();
            }
        }
        else {
            this.endFight();
        }
    }
    static endFight() {
        var _a;
        if (TemporaryBattleBattle.index() >= TemporaryBattleBattle.battle.getPokemonList().length) {
            TemporaryBattleRunner.battleWon(TemporaryBattleBattle.battle);
        }
        else {
            TemporaryBattleBattle.generateNewEnemy();
        }
        TemporaryBattleBattle.enemyPokemon().defeat((_a = this.battle.optionalArgs.isTrainerBattle) !== null && _a !== void 0 ? _a : true);
        TemporaryBattleBattle.index(TemporaryBattleBattle.index() + 1);
        if (TemporaryBattleBattle.index() >= TemporaryBattleBattle.battle.getPokemonList().length) {
            TemporaryBattleRunner.battleWon(TemporaryBattleBattle.battle);
        }
        else {
            TemporaryBattleBattle.generateNewEnemy();
        }
        player.lowerItemMultipliers(MultiplierDecreaser.Battle);
    }
    /**
     * Reset the counter.
     */
    static generateNewEnemy() {
        this.catching(false);
        TemporaryBattleBattle.counter = 0;
        TemporaryBattleBattle.enemyPokemon(PokemonFactory.generateTemporaryBattlePokemon(TemporaryBattleBattle.battle, TemporaryBattleBattle.index()));
    }
    static get battle() {
        return TemporaryBattleRunner.battleObservable();
    }
    static set battle(battle) {
        TemporaryBattleRunner.battleObservable(battle);
    }
}
TemporaryBattleBattle.index = ko.observable(0);
TemporaryBattleBattle.totalPokemons = ko.observable(0);
TemporaryBattleBattle.pokemonsDefeatedComputable = ko.pureComputed(() => {
    return TemporaryBattleBattle.index();
});
TemporaryBattleBattle.pokemonsUndefeatedComputable = ko.pureComputed(() => {
    return TemporaryBattleBattle.totalPokemons() - TemporaryBattleBattle.index();
});
/// <reference path="../../declarations/TemporaryScriptTypes.d.ts" />
const TemporaryBattleList = {};
//Kanto Temporary Battles
TemporaryBattleList['Blue 1'] = new TemporaryBattle('Blue 1', [
    new GymPokemon('Pidgey', 1040, 9),
    new GymPokemon('Charmander', 1678, 9, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Squirtle', 1678, 9, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Bulbasaur', 1678, 9, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Bulbasaur', 1678, 9, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
], 'I heard the Pokémon League is crawling with tough Trainers. I have to figure out how to get past them. You should quit dawdling and get a move on!', [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 22),
    new GymBadgeRequirement(BadgeEnums.Boulder, GameConstants.AchievementOption.less),
], undefined, {
    displayName: 'Rival Blue',
    returnTown: 'Viridian City',
    imageName: 'Blue1',
    battleBackground: 'Default',
});
TemporaryBattleList['Blue 2'] = new TemporaryBattle('Blue 2', [
    new GymPokemon('Pidgeotto', 3650, 17),
    new GymPokemon('Abra', 3230, 16),
    new GymPokemon('Rattata', 3370, 15),
    new GymPokemon('Charmander', 3791, 18, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Squirtle', 3791, 18, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Bulbasaur', 3791, 18, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Bulbasaur', 3791, 18, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
], 'Hey! Take it easy! You won already!', [new RouteKillRequirement(10, GameConstants.Region.kanto, 4)], undefined, {
    displayName: 'Rival Blue',
    returnTown: 'Cerulean City',
    imageName: 'Blue1',
});
TemporaryBattleList['Blue 3'] = new TemporaryBattle('Blue 3', [
    new GymPokemon('Pidgeotto', 12998, 19),
    new GymPokemon('Raticate', 11902, 16),
    new GymPokemon('Kadabra', 12094, 18),
    new GymPokemon('Charmeleon', 13437, 20, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Wartortle', 13437, 20, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Ivysaur', 13437, 20, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Ivysaur', 13437, 20, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
], 'Humph! At least you\'re raising your Pokémon!', [new RouteKillRequirement(10, GameConstants.Region.kanto, 6)], undefined, {
    displayName: 'Rival Blue',
    returnTown: 'Vermilion City',
    imageName: 'Blue2',
});
TemporaryBattleList['Blue 4'] = new TemporaryBattle('Blue 4', [
    new GymPokemon('Pidgeotto', 30398, 25),
    new GymPokemon('Exeggcute', 28878, 23, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Growlithe', 28878, 23, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Gyarados', 28878, 23, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Gyarados', 28878, 23, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
    new GymPokemon('Gyarados', 28878, 22, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Exeggcute', 28878, 22, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Growlithe', 28878, 22, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Growlithe', 28878, 22, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
    new GymPokemon('Kadabra', 30398, 20),
    new GymPokemon('Charmeleon', 33438, 25, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Wartortle', 33438, 25, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Ivysaur', 33438, 25, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Ivysaur', 33438, 25, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
], 'What? You stinker! I took it easy on you, too!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokémon Tower'))], undefined, {
    displayName: 'Rival Blue',
    imageName: 'Blue2',
});
TemporaryBattleList['Fighting Dojo'] = new TemporaryBattle('Fighting Dojo', [
    new GymPokemon('Hitmonlee', 108985, 37),
    new GymPokemon('Hitmonchan', 108985, 37),
], 'That was a great battle. Here, have this Fighting Egg as a reward for conquering the Fighting Dojo!</br>If you put it in the hatchery and you are lucky you can get a rare Pokémon that you might not be able to find anywhere else in Kanto, or unlucky and get a common Pokémon.</br>But if you don\'t get what you need, don\'t worry, you can buy as many eggs as you need in Poké Marts.', [
    new OneFromManyRequirement([
        new GymBadgeRequirement(BadgeEnums.Rainbow),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rocket Game Corner')),
    ]),
], undefined, {
    firstTimeRewardFunction: () => {
        BagHandler.gainItem({ type: ItemType.item, id: 'Fighting_egg' }, 1);
        Notifier.notify({
            message: 'You were awarded a Fighting Egg for defeating the Fighting Dojo!',
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
        });
    },
    imageName: 'Black Belt',
});
TemporaryBattleList['Snorlax route 12'] = new TemporaryBattle('Snorlax route 12', [new GymPokemon('Snorlax', 189990, 30)], undefined, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 12),
    new TemporaryBattleRequirement('Blue 4'),
], [new TemporaryBattleRequirement('Snorlax route 12'), new ObtainedPokemonRequirement('Snorlax')], {
    displayName: 'Snorlax',
    returnTown: 'Lavender Town',
    isTrainerBattle: false,
    hideTrainer: true,
    visibleRequirement: new OneFromManyRequirement([new RouteKillRequirement(10, GameConstants.Region.kanto, 11), new RouteKillRequirement(5, GameConstants.Region.kanto, 12)]),
});
TemporaryBattleList['Snorlax route 16'] = new TemporaryBattle('Snorlax route 16', [new GymPokemon('Snorlax', 189990, 30)], undefined, [new TemporaryBattleRequirement('Blue 4')], [new TemporaryBattleRequirement('Snorlax route 16'), new ObtainedPokemonRequirement('Snorlax')], {
    displayName: 'Snorlax',
    returnTown: 'Celadon City',
    isTrainerBattle: false,
    hideTrainer: true,
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.kanto, 7),
});
TemporaryBattleList['Blue 5'] = new TemporaryBattle('Blue 5', [
    new GymPokemon('Pidgeot', 41482, 37),
    new GymPokemon('Exeggcute', 38447, 38, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Growlithe', 38447, 38, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Gyarados', 38447, 38, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Gyarados', 38447, 38, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
    new GymPokemon('Gyarados', 38447, 35, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Exeggcute', 38447, 35, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Growlithe', 38447, 35, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Growlithe', 38447, 35, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
    new GymPokemon('Alakazam', 41482, 35),
    new GymPokemon('Charizard', 44113, 40, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Blastoise', 44113, 40, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Venusaur', 44113, 40, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Venusaur', 44113, 40, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
], 'I\'m moving on up and ahead! I\'m going to the Pokémon League to boot out the Elite Four! I\'ll become the world\'s most powerful Trainer! Well, good luck to you! Don\'t sweat it! Smell ya!', [new QuestLineStepCompletedRequirement('Team Rocket', 1)], undefined, {
    displayName: 'Rival Blue',
    imageName: 'Blue2',
});
TemporaryBattleList['Biker Goon 1'] = new TemporaryBattle('Biker Goon 1', [
    new GymPokemon('Koffing', 198477, 37),
    new GymPokemon('Grimer', 198477, 37),
], 'Wha... What is this kid?!', [new QuestLineStepCompletedRequirement('Bill\'s Errand', 1)], undefined, {
    displayName: 'Biker Goon',
    imageName: 'Biker Goon',
});
TemporaryBattleList['Biker Goon 2'] = new TemporaryBattle('Biker Goon 2', [new GymPokemon('Koffing', 396954, 38)], 'Stop fooling around!', [new QuestLineStepCompletedRequirement('Bill\'s Errand', 1)], undefined, {
    displayName: 'Biker Goon',
    imageName: 'Biker Goon',
});
TemporaryBattleList['Biker Goon 3'] = new TemporaryBattle('Biker Goon 3', [new GymPokemon('Grimer', 396954, 38)], '... ... ... ... ... ...', [new QuestLineStepCompletedRequirement('Bill\'s Errand', 1)], undefined, {
    displayName: 'Biker Goon',
    imageName: 'Biker Goon',
});
TemporaryBattleList['Cue Ball Paxton'] = new TemporaryBattle('Cue Ball Paxton', [
    new GymPokemon('Weezing', 221664, 39),
    new GymPokemon('Muk', 221664, 39),
], 'All right, enough! We\'ll leave like you wanted! We\'ll be happy to see the last of this boring island!', [
    new TemporaryBattleRequirement('Biker Goon 1'),
    new TemporaryBattleRequirement('Biker Goon 2'),
    new TemporaryBattleRequirement('Biker Goon 3'),
]);
TemporaryBattleList['Ash Ketchum New Island'] = new TemporaryBattle('Ash Ketchum New Island', [
    new GymPokemon('Bulbasaur', 151664, 25),
    new GymPokemon('Squirtle', 151664, 25),
    new GymPokemon('Pikachu', 151664, 30),
], 'I found this Clone Mewtwo left behind. Can you take care of it?', [new ClearDungeonRequirement(10, GameConstants.getDungeonIndex('New Island'))], undefined, {
    displayName: 'Ash Ketchum',
    imageName: 'Ash Ketchum',
    firstTimeRewardFunction: () => {
        App.game.party.gainPokemonByName('Pikachu (Clone)', PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_REWARD));
    },
});
TemporaryBattleList['Bill\'s Grandpa'] = new TemporaryBattle('Bill\'s Grandpa', [
    new GymPokemon('Vaporeon', 170000, 48),
    new GymPokemon('Jolteon', 175000, 49),
    new GymPokemon('Flareon', 180000, 50),
], 'Hahaha, that was one of the best battles I\'ve ever had.', [new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 10)], undefined, { imageName: 'Bill\'s Grandpa with Eevee' });
TemporaryBattleList['Blue 6'] = new TemporaryBattle('Blue 6', [
    new GymPokemon('Pidgeot', 84840, 47),
    new GymPokemon('Rhyhorn', 82269, 45),
    new GymPokemon('Exeggcute', 82269, 45, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Growlithe', 82269, 45, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Gyarados', 82269, 45, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Gyarados', 82269, 45, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
    new GymPokemon('Gyarados', 82269, 45, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Exeggcute', 82269, 45, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Growlithe', 82269, 45, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Growlithe', 82269, 45, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
    new GymPokemon('Alakazam', 84840, 47),
    new GymPokemon('Charizard', 92553, 53, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Grass)),
    new GymPokemon('Blastoise', 92553, 53, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Fire)),
    new GymPokemon('Venusaur', 92553, 53, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Water)),
    new GymPokemon('Venusaur', 92553, 53, new StarterRequirement(GameConstants.Region.kanto, GameConstants.Starter.Special)),
], 'That loosened me up. I\'m ready for the Pokémon League! You need more practice! But hey, you know that! I\'m out of here. Smell ya!', [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 22),
    new GymBadgeRequirement(BadgeEnums.Earth),
], undefined, {
    displayName: 'Rival Blue',
    returnTown: 'Viridian City',
    imageName: 'Blue2',
});
// Kanto Christmas Temporary Battles, based on Blue 2
TemporaryBattleList['Santa Jynx 1'] = new TemporaryBattle('Santa Jynx 1', [
    new GymPokemon('Santa Jynx', 2512, 20),
    new GymPokemon('Santa Jynx', 2512, 20),
    new GymPokemon('Santa Jynx', 2512, 20),
    new GymPokemon('Santa Jynx', 2512, 20),
], 'Huh? They ran off and are trying to blend in with the local Pokémon population. Find those Santa Jynx and collect more Christmas presents!', [
    new SpecialEventRequirement('Merry Christmas!'),
    new ItemOwnedRequirement('Christmas_present', 11, GameConstants.AchievementOption.less),
    new TemporaryBattleRequirement('Santa Jynx 2', 1, GameConstants.AchievementOption.less),
    new TemporaryBattleRequirement('Santa Jynx 3', 1, GameConstants.AchievementOption.less),
    new TemporaryBattleRequirement('Santa Jynx 4', 1, GameConstants.AchievementOption.less),
], undefined, {
    displayName: 'Santa Jynx Band',
    firstTimeRewardFunction: () => {
        ItemList.Christmas_present.gain();
    },
    resetDaily: true,
    hideTrainer: true,
    imageName: 'Bill\'s Grandpa without Eevee',
});
TemporaryBattleList['Santa Jynx 2'] = new TemporaryBattle('Santa Jynx 2', [
    new GymPokemon('Santa Jynx', 2512, 20),
    new GymPokemon('Santa Jynx', 2512, 20),
    new GymPokemon('Santa Jynx', 2512, 20),
    new GymPokemon('Santa Jynx', 2512, 20),
    new GymPokemon('Santa Jynx', 2512, 20),
], 'Huh? They ran off and are trying to blend in with the local Pokémon population. Find those Santa Jynx and collect more Christmas presents!', [
    new SpecialEventRequirement('Merry Christmas!'),
    new ItemOwnedRequirement('Christmas_present', 27, GameConstants.AchievementOption.less),
    new ItemOwnedRequirement('Christmas_present', 11),
    new TemporaryBattleRequirement('Santa Jynx 1', 1, GameConstants.AchievementOption.less),
    new TemporaryBattleRequirement('Santa Jynx 3', 1, GameConstants.AchievementOption.less),
    new TemporaryBattleRequirement('Santa Jynx 4', 1, GameConstants.AchievementOption.less),
], undefined, {
    displayName: 'Santa Jynx Band',
    firstTimeRewardFunction: () => {
        new ChristmasPresent(3).gain();
    },
    resetDaily: true,
    hideTrainer: true,
    imageName: 'Bill\'s Grandpa without Eevee',
});
TemporaryBattleList['Santa Jynx 3'] = new TemporaryBattle('Santa Jynx 3', [
    new GymPokemon('Santa Jynx', 2512, 20),
    new GymPokemon('Santa Jynx', 2512, 20),
    new GymPokemon('Santa Jynx', 2512, 20),
    new GymPokemon('Santa Jynx', 2512, 20),
    new GymPokemon('Santa Jynx', 2512, 20),
    new GymPokemon('Santa Jynx', 2512, 20),
], 'Huh? They ran off and are trying to blend in with the local Pokémon population. Find those Santa Jynx and collect more Christmas presents!', [
    new SpecialEventRequirement('Merry Christmas!'),
    new ItemOwnedRequirement('Christmas_present', 49, GameConstants.AchievementOption.less),
    new ItemOwnedRequirement('Christmas_present', 27),
    new TemporaryBattleRequirement('Santa Jynx 1', 1, GameConstants.AchievementOption.less),
    new TemporaryBattleRequirement('Santa Jynx 2', 1, GameConstants.AchievementOption.less),
    new TemporaryBattleRequirement('Santa Jynx 4', 1, GameConstants.AchievementOption.less),
], undefined, {
    displayName: 'Santa Jynx Band',
    firstTimeRewardFunction: () => {
        new ChristmasPresent(6).gain();
    },
    resetDaily: true,
    hideTrainer: true,
    imageName: 'Bill\'s Grandpa without Eevee',
});
TemporaryBattleList['Santa Jynx 4'] = new TemporaryBattle('Santa Jynx 4', [
    new GymPokemon('Santa Jynx', 3768, 20),
    new GymPokemon('Santa Jynx', 3768, 20),
    new GymPokemon('Santa Jynx', 3768, 20),
    new GymPokemon('Santa Jynx', 3768, 20),
    new GymPokemon('Santa Jynx', 3768, 20),
], 'Huh? They ran off and are trying to blend in with the local Pokémon population. Find those Santa Jynx and collect more Christmas presents!', [
    new SpecialEventRequirement('Merry Christmas!'),
    new ItemOwnedRequirement('Christmas_present', 49),
    new TemporaryBattleRequirement('Santa Jynx 1', 1, GameConstants.AchievementOption.less),
    new TemporaryBattleRequirement('Santa Jynx 2', 1, GameConstants.AchievementOption.less),
    new TemporaryBattleRequirement('Santa Jynx 3', 1, GameConstants.AchievementOption.less),
], undefined, {
    displayName: 'Santa Jynx Band',
    firstTimeRewardFunction: () => {
        new ChristmasPresent(10).gain();
    },
    rewardFunction: () => {
        if (player.itemList.Christmas_present() >= 150) {
            player.itemList.Christmas_present(50);
        }
    },
    resetDaily: true,
    hideTrainer: true,
    imageName: 'Bill\'s Grandpa without Eevee',
});
//Johto Temporary Battles
TemporaryBattleList['Silver 1'] = new TemporaryBattle('Silver 1', [
    new GymPokemon('Cyndaquil', 176000, 5, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Grass)),
    new GymPokemon('Totodile', 176000, 5, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Fire)),
    new GymPokemon('Chikorita', 176000, 5, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Water)),
], '...Humph! Are you happy you won?', [new RouteKillRequirement(10, GameConstants.Region.johto, 30)], undefined, {
    displayName: 'Rival Silver',
    returnTown: 'Cherrygrove City',
    imageName: 'Silver',
});
TemporaryBattleList['Silver 2'] = new TemporaryBattle('Silver 2', [
    new GymPokemon('Gastly', 220788, 14),
    new GymPokemon('Zubat', 220788, 16),
    new GymPokemon('Quilava', 237772, 18, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Grass)),
    new GymPokemon('Croconaw', 237772, 18, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Fire)),
    new GymPokemon('Bayleef', 237772, 18, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Water)),
], '...Humph! Useless Pokémon! Listen, you. You only won because my Pokémon were weak.', [new RouteKillRequirement(10, GameConstants.Region.johto, 33)], undefined, {
    displayName: 'Rival Silver',
    returnTown: 'Azalea Town',
    imageName: 'Silver',
});
TemporaryBattleList.Sudowoodo = new TemporaryBattle('Sudowoodo', [new GymPokemon('Sudowoodo', 540000, 20)], undefined, [new GymBadgeRequirement(BadgeEnums.Plain)], [new TemporaryBattleRequirement('Sudowoodo'), new ObtainedPokemonRequirement('Sudowoodo')], {
    isTrainerBattle: false,
    returnTown: 'Goldenrod City',
    hideTrainer: true,
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.johto, 31),
});
TemporaryBattleList['Silver 3'] = new TemporaryBattle('Silver 3', [
    new GymPokemon('Gastly', 227997, 20),
    new GymPokemon('Zubat', 227997, 20),
    new GymPokemon('Magnemite', 223344, 18),
    new GymPokemon('Quilava', 251262, 22, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Grass)),
    new GymPokemon('Croconaw', 251262, 22, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Fire)),
    new GymPokemon('Bayleef', 251262, 22, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Water)),
], '...Humph! I\'m not fighting with another weakling ever again. It\'s just too much playing around.', [new QuestLineStepCompletedRequirement('The Legendary Beasts', 1)], undefined, {
    displayName: 'Rival Silver',
    imageName: 'Silver',
});
TemporaryBattleList['Silver 4'] = new TemporaryBattle('Silver 4', [
    new GymPokemon('Golbat', 274520, 32),
    new GymPokemon('Magnemite', 260794, 30),
    new GymPokemon('Haunter', 260794, 30),
    new GymPokemon('Sneasel', 281383, 34),
    new GymPokemon('Quilava', 295109, 34, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Grass)),
    new GymPokemon('Feraligatr', 295109, 32, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Fire)),
    new GymPokemon('Meganium', 295109, 34, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Water)),
], '...Why... Why do I lose? I\'ve assembled the toughest Pokémon. I haven\'t eased up on the gas. So why do I lose?', [
    new GymBadgeRequirement(BadgeEnums.Mineral),
    new GymBadgeRequirement(BadgeEnums.Glacier),
], undefined, {
    displayName: 'Rival Silver',
    imageName: 'Silver',
    visibleRequirement: new QuestLineStepCompletedRequirement('Team Rocket Again', 1),
});
TemporaryBattleList['Silver 5'] = new TemporaryBattle('Silver 5', [
    new GymPokemon('Sneasel', 363709, 36),
    new GymPokemon('Golbat', 375075, 38),
    new GymPokemon('Magneton', 375075, 37),
    new GymPokemon('Kadabra', 363709, 37),
    new GymPokemon('Haunter', 363709, 37),
    new GymPokemon('Typhlosion', 397807, 40, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Grass)),
    new GymPokemon('Feraligatr', 397807, 40, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Fire)),
    new GymPokemon('Meganium', 397807, 40, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Water)),
], '.................. I haven\'t given up on becoming the greatest Trainer... I\'m going to find out why I can\'t win and become stronger... When I do, I will challenge you. I\'ll beat you down with all my power. ...Humph! You keep at it until then.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Johto'))], undefined, {
    displayName: 'Rival Silver',
    returnTown: 'Victory Road Johto',
    imageName: 'Silver',
});
TemporaryBattleList['Suicune 1'] = new TemporaryBattle('Suicune 1', [new GymPokemon('Suicune', 1044000, 40)], '<i>Suicune fled.</i>', [
    new QuestLineStartedRequirement('Eusine\'s Chase'),
    new RouteKillRequirement(10, GameConstants.Region.johto, 41),
], undefined, {
    displayName: 'Suicune',
    returnTown: 'Cianwood City',
    imageName: '../pokemon/245',
    hideTrainer: true,
});
TemporaryBattleList.Eusine = new TemporaryBattle('Eusine', [
    new GymPokemon('Drowzee', 348000, 25),
    new GymPokemon('Haunter', 348000, 25),
    new GymPokemon('Electrode', 359000, 27),
], 'I hate to admit it, but you win. You\'re amazing! I\'m starting to understand why Suicune was keeping an eye on you. I\'m going to keep searching for Suicune. I have a feeling we\'ll see each other again. See you around!', [new QuestLineStepCompletedRequirement('Eusine\'s Chase', 1)], undefined, {
    displayName: 'Eusine',
    returnTown: 'Cianwood City',
});
TemporaryBattleList['Suicune 2'] = new TemporaryBattle('Suicune 2', [new GymPokemon('Suicune', 1115500, 40)], '<i>Suicune fled.</i>', [
    new QuestLineStepCompletedRequirement('Eusine\'s Chase', 2),
    new RouteKillRequirement(10, GameConstants.Region.johto, 42),
], undefined, {
    displayName: 'Suicune',
    returnTown: 'Mahogany Town',
    imageName: '../pokemon/245',
    hideTrainer: true,
});
TemporaryBattleList['Red Gyarados'] = new TemporaryBattle('Red Gyarados', [new GymPokemon('Gyarados', 1100000, 30, undefined, true)], undefined, [
    new QuestLineStartedRequirement('Team Rocket Again'),
    new RouteKillRequirement(10, GameConstants.Region.johto, 43),
], undefined, {
    displayName: 'Red Gyarados',
    returnTown: 'Mahogany Town',
    isTrainerBattle: false,
    hideTrainer: true,
    visibleRequirement: new QuestLineStartedRequirement('Team Rocket Again'),
});
TemporaryBattleList['Suicune 3'] = new TemporaryBattle('Suicune 3', [new GymPokemon('Suicune', 3269100, 40)], '<i>Suicune fled.</i>', [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion), new QuestLineStepCompletedRequirement('Eusine\'s Chase', 4)], undefined, {
    displayName: 'Suicune',
    returnTown: 'Vermilion City',
    imageName: '../pokemon/245',
    hideTrainer: true,
    visibleRequirement: new QuestLineStepCompletedRequirement('Eusine\'s Chase', 4),
});
TemporaryBattleList['Suicune 4'] = new TemporaryBattle('Suicune 4', [new GymPokemon('Suicune', 3359100, 40)], '<i>Suicune fled.</i>', [
    new QuestLineStepCompletedRequirement('Eusine\'s Chase', 6),
    new RouteKillRequirement(10, GameConstants.Region.kanto, 14),
], undefined, {
    displayName: 'Suicune',
    returnTown: 'Fuchsia City',
    imageName: '../pokemon/245',
    hideTrainer: true,
});
TemporaryBattleList['Suicune 5'] = new TemporaryBattle('Suicune 5', [new GymPokemon('Suicune', 3449100, 40)], '<i>Suicune didn\'t flee.</i>', [new QuestLineStepCompletedRequirement('Eusine\'s Chase', 8)], undefined, {
    displayName: 'Suicune',
    returnTown: 'Bill\'s House',
    imageName: '../pokemon/245',
    hideTrainer: true,
});
TemporaryBattleList['Suicune 6'] = new TemporaryBattle('Suicune 6', [new GymPokemon('Suicune', 3449100, 40)], '', [new QuestLineStepCompletedRequirement('Eusine\'s Chase', 10)], [new QuestLineStepCompletedRequirement('Eusine\'s Chase', 11)], {
    displayName: 'Suicune',
    returnTown: 'Bill\'s House',
    imageName: '../pokemon/245',
    hideTrainer: true,
    isTrainerBattle: false,
});
TemporaryBattleList['Kimono Girls'] = new TemporaryBattle('Kimono Girls', [
    new GymPokemon('Umbreon', 660000, 42),
    new GymPokemon('Espeon', 660000, 43),
    new GymPokemon('Flareon', 660000, 46),
    new GymPokemon('Jolteon', 660000, 40),
    new GymPokemon('Vaporeon', 660000, 40),
], 'You have beautifully proven that the bond between people can be extended to the bond between people and Pokémon. We all appreciate that you have lived up to our expectations. This Clear Bell will signal to Ho-Oh that you are worthy of its attentions.', [new QuestLineStepCompletedRequirement('Rainbow Guardian', 0)], undefined, {
    imageName: 'Kimono Girl',
});
TemporaryBattleList['Spiky-eared Pichu'] = new TemporaryBattle('Spiky-eared Pichu', [new GymPokemon('Spiky-eared Pichu', 3178500, 20)], '<b><i>The Spiky-eared Pichu ran into the forest!</i></b>', [new QuestLineStepCompletedRequirement('Unfinished Business', 6)], undefined, {
    displayName: 'Strange Pichu',
    hideTrainer: true,
    imageName: '../pokemon/172.01',
});
TemporaryBattleList['Rocket Boss Giovanni'] = new TemporaryBattle('Rocket Boss Giovanni', [
    new GymPokemon('Nidoking', 861275, 42),
    new GymPokemon('Murkrow', 861275, 43),
    new GymPokemon('Nidoqueen', 861275, 46),
    new GymPokemon('Kangaskhan', 875275, 40),
], 'What in the world are you? How this is possible...? How can a kid like you manage to destroy my dream once again? The precious dream of Team Rocket has become little more than an illusion...', [new QuestLineStepCompletedRequirement('Unfinished Business', 9)]);
TemporaryBattleList['Silver 6'] = new TemporaryBattle('Silver 6', [
    new GymPokemon('Sneasel', 540775, 46),
    new GymPokemon('Golbat', 540775, 47),
    new GymPokemon('Magneton', 554465, 46),
    new GymPokemon('Alakazam', 554465, 48),
    new GymPokemon('Gengar', 554465, 48),
    new GymPokemon('Typhlosion', 581846, 50, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Grass)),
    new GymPokemon('Feraligatr', 581846, 50, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Fire)),
    new GymPokemon('Meganium', 581846, 50, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Water)),
], 'My training\'s still not good enough...? My Pokémon are so weak, it makes me frustrated... But I can feel that they are getting better after each battle.................. Tch! They\'re still too weak! I need to give them more training...', [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)], undefined, {
    displayName: 'Rival Silver',
    imageName: 'Silver',
});
TemporaryBattleList['Silver 7'] = new TemporaryBattle('Silver 7', [
    new GymPokemon('Sneasel', 633820, 55),
    new GymPokemon('Magneton', 653626, 55),
    new GymPokemon('Gengar', 669472, 56),
    new GymPokemon('Alakazam', 669472, 56),
    new GymPokemon('Crobat', 693240, 58),
    new GymPokemon('Typhlosion', 705124, 60, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Grass)),
    new GymPokemon('Feraligatr', 705124, 60, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Fire)),
    new GymPokemon('Meganium', 705124, 60, new StarterRequirement(GameConstants.Region.johto, GameConstants.Starter.Water)),
], '...Oh, no... I still can\'t win after all that training... I...I have to believe more in my Pokémon... ...No big deal. Sorry to have got in the way. Don\'t forget to rest your Pokémon before you challenge the Champion again!', [new TemporaryBattleRequirement('Silver 6')], [new NullRequirement], {
    displayName: 'Rival Silver',
    imageName: 'Silver',
    rewardFunction: () => Notifier.notify({ message: 'Congratulations on beating Silver at his best! Come back to fight him again at any time.' }),
});
TemporaryBattleList.Red = new TemporaryBattle('Red', [
    new GymPokemon('Pikachu', 643820, 81),
    new GymPokemon('Espeon', 663626, 73),
    new GymPokemon('Snorlax', 679472, 75),
    new GymPokemon('Venusaur', 679472, 77),
    new GymPokemon('Charizard', 679472, 77),
    new GymPokemon('Blastoise', 803240, 77),
], '...', [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion), new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Silver'))], undefined, {
    rewardFunction: () => {
        BagHandler.gainItem({ type: ItemType.item, id: 'Light_Ball' }, 1);
        Notifier.notify({
            message: 'You were awarded a Light Ball for defeating Red.',
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.Items.dropped_item,
        });
    },
    resetDaily: true,
    returnTown: 'Mt. Silver',
});
TemporaryBattleList['Youngster Joey'] = new TemporaryBattle('Youngster Joey', [new GymPokemon('Rattata', 548919101828, 100)], 'How?!? My Rattata is in the top percentage of all Rattata!', [new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Elite_KantoChampion), new SpecialEventRequirement('Hoopa Day')])], undefined, {
    displayName: 'Youngster Joey',
    returnTown: 'Cherrygrove City',
    imageName: 'Youngster',
    rewardFunction: () => {
        const reward = 64;
        App.game.wallet.gainMoney(reward, true);
        Notifier.notify({
            message: TextMerger.mergeText(`Youngster Joey was defeated!
$playername$ got <img src="./assets/images/currency/money.svg" height="24px"/> ${reward.toLocaleString('en-US')} for winning!`),
            type: NotificationConstants.NotificationOption.danger,
            timeout: 3.6e7,
            title: 'You defeated Youngster Joey!',
        });
    },
});
//Hoenn Temporary Battles
TemporaryBattleList['May 1'] = new TemporaryBattle('May 1', [
    new GymPokemon('Torchic', 823400, 5, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Grass)),
    new GymPokemon('Mudkip', 823400, 5, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Fire)),
    new GymPokemon('Treecko', 823400, 5, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Water)),
], 'Wow! That\'s great! You\'re pretty good!', [new RouteKillRequirement(10, GameConstants.Region.hoenn, 103)], undefined, {
    displayName: 'Pokémon Trainer May',
    returnTown: 'Oldale Town',
    imageName: 'May',
});
TemporaryBattleList['May 2'] = new TemporaryBattle('May 2', [
    new GymPokemon('Lotad', 1124608, 13, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Grass)),
    new GymPokemon('Torkoal', 1124608, 13, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Fire)),
    new GymPokemon('Wingull', 1124608, 13, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Water)),
    new GymPokemon('Torchic', 1197952, 15, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Grass)),
    new GymPokemon('Mudkip', 1197952, 15, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Fire)),
    new GymPokemon('Treecko', 1197952, 15, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Water)),
], 'Yikes! You\'re better than I expected!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rusturf Tunnel'))], undefined, {
    displayName: 'Pokémon Trainer May',
    returnTown: 'Rustboro City',
    imageName: 'May',
});
TemporaryBattleList['May 3'] = new TemporaryBattle('May 3', [
    new GymPokemon('Wingull', 1119525, 18, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Grass)),
    new GymPokemon('Lombre', 1119525, 18, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Fire)),
    new GymPokemon('Wingull', 1119525, 18, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Water)),
    new GymPokemon('Lombre', 1119525, 18, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Grass)),
    new GymPokemon('Slugma', 1119525, 18, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Fire)),
    new GymPokemon('Slugma', 1119525, 18, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Water)),
    new GymPokemon('Combusken', 1153450, 20, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Grass)),
    new GymPokemon('Marshtomp', 1153450, 20, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Fire)),
    new GymPokemon('Grovyle', 1153450, 20, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Water)),
], 'Yikes! You\'re better than I expected!', [new RouteKillRequirement(10, GameConstants.Region.hoenn, 110)], undefined, {
    displayName: 'Pokémon Trainer May',
    returnTown: 'Slateport City',
    imageName: 'May',
});
TemporaryBattleList['Wally 1'] = new TemporaryBattle('Wally 1', [new GymPokemon('Ralts', 1234567, 16)], '... ... ... ... ... ... ... ... ... ... ... ... ... ... ... I lost...', [new TemporaryBattleRequirement('May 3')], undefined, {
    displayName: 'Pokémon Trainer Wally',
    returnTown: 'Mauville City',
    imageName: 'Wally',
});
TemporaryBattleList['May 4'] = new TemporaryBattle('May 4', [
    new GymPokemon('Pelipper', 1832160, 29, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Grass)),
    new GymPokemon('Lombre', 1832160, 29, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Fire)),
    new GymPokemon('Slugma', 1832160, 29, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Water)),
    new GymPokemon('Lombre', 1832160, 29, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Grass)),
    new GymPokemon('Slugma', 1832160, 29, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Fire)),
    new GymPokemon('Lombre', 1832160, 29, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Water)),
    new GymPokemon('Combusken', 1887680, 31, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Grass)),
    new GymPokemon('Marshtomp', 1887680, 31, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Fire)),
    new GymPokemon('Grovyle', 1887680, 31, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Water)),
], 'Achah! You\'re strong! I was worried that you might be struggling with your training.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Weather Institute'))], undefined, {
    displayName: 'Pokémon Trainer May',
    returnTown: 'Weather Institute',
    imageName: 'May',
});
TemporaryBattleList['Kecleon 1'] = new TemporaryBattle('Kecleon 1', [new GymPokemon('Kecleon', 6000000, 20)], undefined, [new TemporaryBattleRequirement('May 4')], [new TemporaryBattleRequirement('Kecleon 1'), new ObtainedPokemonRequirement('Kecleon')], {
    isTrainerBattle: false,
    returnTown: 'Fortree City',
    hideTrainer: true,
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.hoenn, 119),
});
TemporaryBattleList['Kecleon 2'] = new TemporaryBattle('Kecleon 2', [new GymPokemon('Kecleon', 7000000, 20)], undefined, [new TemporaryBattleRequirement('Kecleon 1')], [new TemporaryBattleRequirement('Kecleon 2')], {
    isTrainerBattle: false,
    returnTown: 'Fortree City',
    hideTrainer: true,
});
TemporaryBattleList['Kecleon 3'] = new TemporaryBattle('Kecleon 3', [new GymPokemon('Kecleon', 7000000, 20)], undefined, [new TemporaryBattleRequirement('Kecleon 2')], [new TemporaryBattleRequirement('Kecleon 3')], {
    isTrainerBattle: false,
    returnTown: 'Fortree City',
    hideTrainer: true,
});
TemporaryBattleList['May 5'] = new TemporaryBattle('May 5', [
    new GymPokemon('Tropius', 1932600, 31),
    new GymPokemon('Pelipper', 2013125, 32, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Grass)),
    new GymPokemon('Ludicolo', 2013125, 32, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Fire)),
    new GymPokemon('Slugma', 2013125, 32, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Water)),
    new GymPokemon('Ludicolo', 2013125, 32, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Grass)),
    new GymPokemon('Slugma', 2013125, 32, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Fire)),
    new GymPokemon('Pelipper', 2013125, 32, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Water)),
    new GymPokemon('Combusken', 2133912, 34, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Grass)),
    new GymPokemon('Marshtomp', 2133912, 34, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Fire)),
    new GymPokemon('Grovyle', 2133912, 34, new StarterRequirement(GameConstants.Region.hoenn, GameConstants.Starter.Water)),
], 'I remember the battle I had with you on Route 103. That battle helped you become this strong, didn\'t it?', [new RouteKillRequirement(10, GameConstants.Region.hoenn, 121)], undefined, {
    displayName: 'Pokémon Trainer May',
    returnTown: 'Lilycove City',
    imageName: 'May',
});
TemporaryBattleList['Wally 2'] = new TemporaryBattle('Wally 2', [
    new GymPokemon('Altaria', 2048719, 44),
    new GymPokemon('Delcatty', 2048719, 43),
    new GymPokemon('Roselia', 2048719, 44),
    new GymPokemon('Magneton', 2048719, 41),
    new GymPokemon('Gardevoir', 2206313, 45),
], 'Wow! You are strong, after all! I couldn\'t beat you today, but one of these days, I\'ll catch up to you!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Hoenn'))], [new NullRequirement], {
    displayName: 'Pokémon Trainer Wally',
    imageName: 'Wally',
    rewardFunction: () => Notifier.notify({ message: 'Congratulations on beating Wally at his best! Come back to fight him again at any time.' }),
});
TemporaryBattleList['Clown Jessie & James'] = new TemporaryBattle('Clown Jessie & James', [
    new GymPokemon('Victreebel', 3006000, 40),
    new GymPokemon('Weezing', 3006000, 50),
    new GymPokemon('Seviper', 3006000, 50),
    new GymPokemon('Dustox', 3006000, 50),
    new GymPokemon('Meowth', 2000, 5),
], 'We\'re blasting off again!!!!', [new QuestLineStepCompletedRequirement('Wish Maker', 0)], undefined, {
    displayName: 'Jessie & James',
});
TemporaryBattleList['Butler 1'] = new TemporaryBattle('Butler 1', [
    new GymPokemon('Kirlia', 3066000, 50),
    new GymPokemon('Mightyena', 3066000, 50),
    new GymPokemon('Dusclops', 3066000, 50),
], '<i>Butler managed to load Jirachi into a cage and escaped in his van. He is headed for the Jagged Pass!</i>', [new QuestLineStepCompletedRequirement('Wish Maker', 5)], undefined, {
    displayName: 'Butler',
    imageName: 'Butler',
});
TemporaryBattleList['Butler 2'] = new TemporaryBattle('Butler 2', [
    new GymPokemon('Kirlia', 3066000, 50),
    new GymPokemon('Mightyena', 3066000, 50),
    new GymPokemon('Dusclops', 3066000, 50),
    new GymPokemon('Salamence', 4166000, 80),
], '<i>Butler throws the switch on a machine, causing the earth to quake. A huge, ominous shape begins to rise from the ground!</i>', [new QuestLineStepCompletedRequirement('Wish Maker', 6)], undefined, {
    displayName: 'Butler',
    imageName: 'Butler',
});
TemporaryBattleList['Meta Groudon'] = new TemporaryBattle('Meta Groudon', [new GymPokemon('Meta Groudon', 13800000, 100)], '<i>Meta Groudon lets out a guttural roar and melts back into the earth!</i>', [new QuestLineStepCompletedRequirement('Wish Maker', 7)], undefined, {
    displayName: 'Meta Groudon',
    returnTown: 'Lavaridge Town',
    imageName: '../pokemon/383.02',
    hideTrainer: true,
});
TemporaryBattleList.Latias = new TemporaryBattle('Latias', [new GymPokemon('Latias', 13800000, 100)], '<i>Latias joins your party, and Latios flies away back to the mainland.</i>', [new MultiRequirement([new QuestLineStepCompletedRequirement('The Eon Duo', 3), new CustomRequirement(ko.pureComputed(() => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Latios')]()), 1, undefined, GameConstants.AchievementOption.less)])], undefined, {
    displayName: 'Latias',
    firstTimeRewardFunction: () => {
        App.game.party.gainPokemonByName('Latias', PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_REWARD));
    },
    returnTown: 'Southern Island',
    imageName: '../pokemon/380',
    hideTrainer: true,
});
TemporaryBattleList.Latios = new TemporaryBattle('Latios', [new GymPokemon('Latios', 13800000, 100)], '<i>Latios joins your party, and Latias flies away back to the mainland.</i>', [new MultiRequirement([new QuestLineStepCompletedRequirement('The Eon Duo', 3), new CustomRequirement(ko.pureComputed(() => App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Latias')]()), 1, undefined, GameConstants.AchievementOption.less)])], undefined, {
    displayName: 'Latios',
    firstTimeRewardFunction: () => {
        App.game.party.gainPokemonByName('Latios', PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_REWARD));
    },
    returnTown: 'Southern Island',
    imageName: '../pokemon/381',
    hideTrainer: true,
});
TemporaryBattleList.Willie = new TemporaryBattle('Willie', [
    new GymPokemon('Zigzagoon', 6900000, 24),
    new GymPokemon('Zigzagoon', 6900000, 24),
], 'Whew! With skills like that, y\'all should head to Phenac City.', [new QuestLineStepCompletedRequirement('Shadows in the Desert', 0)], undefined, {
    displayName: 'Willie',
    imageName: 'Willie',
});
TemporaryBattleList.Folly = new TemporaryBattle('Folly', [
    new GymPokemon('Whismur', 6950000, 25),
    new GymPokemon('Whismur', 6950000, 25),
], '<i>The shady guy flees, dropping a mysterious sack. The sack.... cries out in pain?</i>', [new QuestLineStepCompletedRequirement('Shadows in the Desert', 1)], undefined, {
    displayName: 'Shady Guy',
    imageName: 'Miror B. Peon (folly)',
});
TemporaryBattleList['Cipher Peon Doven'] = new TemporaryBattle('Cipher Peon Doven', [
    new GymPokemon('Spheal', 7300000, 33),
    new GymPokemon('Carvanha', 7300000, 34),
], 'Rats! Foiled by some nobody!', [new QuestLineStepCompletedRequirement('Shadows in the Desert', 14)], undefined, {
    displayName: 'Cipher Peon Doven',
    imageName: 'Cipher Peon (female)',
});
TemporaryBattleList['Cipher Peon Silton'] = new TemporaryBattle('Cipher Peon Silton', [
    new GymPokemon('Shroomish', 7300000, 34),
    new GymPokemon('Cacnea', 7300000, 34),
], 'Man! I was really having fun doing these crimes.', [new QuestLineStepCompletedRequirement('Shadows in the Desert', 14)], undefined, {
    displayName: 'Cipher Peon Silton',
    imageName: 'Cipher Peon (male)',
});
TemporaryBattleList['Cipher Peon Kass'] = new TemporaryBattle('Cipher Peon Kass', [
    new GymPokemon('Baltoy', 4900000, 35),
    new GymPokemon('Ralts', 4900000, 35),
    new GymPokemon('Kirlia', 4900000, 35),
], 'Run away!', [new QuestLineStepCompletedRequirement('Shadows in the Desert', 14)], undefined, {
    displayName: 'Cipher Peon Kass',
    imageName: 'Cipher Peon (female)',
});
TemporaryBattleList['Cipher Peon Naps'] = new TemporaryBattle('Cipher Peon Naps', [new GymPokemon('Teddiursa', 110813753, 11, undefined, undefined, GameConstants.ShadowStatus.Shadow)], // Slightly weaker than Calem 1
'What was that? My Shadow Pokémon! It doesn\'t matter though, my teammates escaped with Professor Krane!', [new QuestLineStepCompletedRequirement('Gale of Darkness', 0)], undefined, {
    displayName: 'Cipher Peon Naps',
    imageName: 'Cipher Peon (yellow)',
});
TemporaryBattleList['Chobin 1'] = new TemporaryBattle('Chobin 1', [
    new GymPokemon('Sunkern', 57406876, 6),
    new GymPokemon('Magikarp', 57406876, 6),
], 'Huh? Closer observation reveals that the subject is a trainer. Ergo, the subject is not a burglar! Ahaha! Chobin wishes you spoke up right away. You\'re $playername$? Chobin apologizes for jumping to the wrong conclusion.', [new QuestLineStepCompletedRequirement('Gale of Darkness', 2)], undefined, {
    displayName: 'Chobin',
    imageName: 'Chobin',
});
TemporaryBattleList['Miror B. 1'] = new TemporaryBattle('Miror B. 1', [
    new GymPokemon('Lombre', 34444125, 17),
    new GymPokemon('Lombre', 34444125, 17),
    new GymPokemon('Lombre', 34444125, 17),
    new GymPokemon('Voltorb', 34444125, 19, undefined, undefined, GameConstants.ShadowStatus.Shadow),
], 'You messed up my rhythm! I just can\'t, no, I just can\'t do it! Shouldn\'t you be paying more attention to what\'s happening in the Pyrite Buiding than to me?', [new QuestLineStepCompletedRequirement('Gale of Darkness', 9)], undefined, {
    displayName: 'Miror B.',
    imageName: 'Cipher Admin Miror B',
    returnTown: 'Pyrite Town',
    firstTimeRewardFunction: () => {
        BagHandler.gainItem({ type: ItemType.item, id: 'Magnet' }, 1);
        Notifier.notify({
            message: 'You snagged a Magnet from Miror B\'s Voltorb!',
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
        });
    },
});
TemporaryBattleList['Chobin 2'] = new TemporaryBattle('Chobin 2', [
    new GymPokemon('Sunflora', 48221775, 26),
    new GymPokemon('Gyarados', 48221775, 26),
    new GymPokemon('Hoppip', 48221775, 26),
    new GymPokemon('Tropius', 48221775, 26),
], 'Huh? Oh, you\'re that trainer from before?! Chobin wishes you spoke up right away.', [new QuestLineStepCompletedRequirement('Gale of Darkness', 17)], undefined, {
    displayName: 'Chobin',
    imageName: 'Robo Groudon',
});
TemporaryBattleList['Cipher Peon Smarton'] = new TemporaryBattle('Cipher Peon Smarton', [
    new GymPokemon('Huntail', 49221775, 27),
    new GymPokemon('Cacnea', 49221775, 27),
    new GymPokemon('Teddiursa', 49221775, 27),
    new GymPokemon('Koffing', 49221775, 27),
], 'You\'re too late! We already took everything we needed!', [new QuestLineStepCompletedRequirement('Gale of Darkness', 19)], undefined, {
    displayName: 'Cipher Peon Smarton',
    imageName: 'Cipher Peon (yellow)',
});
TemporaryBattleList.Zook = new TemporaryBattle('Zook', [
    new GymPokemon('Zangoose', 35797654, 28, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    new GymPokemon('Doduo', 35797654, 26),
    new GymPokemon('Carvanha', 35797654, 26),
    new GymPokemon('Seviper', 35797654, 26),
    new GymPokemon('Relicanth', 35797654, 26),
], 'Yeah, whatever! I was leaving anyways.', [new QuestLineStepCompletedRequirement('Gale of Darkness', 21)], undefined, {
    displayName: 'Zook',
    imageName: 'Thug',
    returnTown: 'Pyrite Town',
});
TemporaryBattleList['Miror B. 2'] = new TemporaryBattle('Miror B. 2', [
    new GymPokemon('Lombre', 38797654, 26),
    new GymPokemon('Lombre', 38797654, 26),
    new GymPokemon('Lombre', 38797654, 26),
    new GymPokemon('Nosepass', 38797654, 25, undefined, undefined, GameConstants.ShadowStatus.Shadow),
    new GymPokemon('Ludicolo', 38797654, 26),
], 'I shouldn\'t have done something this strenuous right after eating… I\'ll need to get some new Shadow Pokémon from Team Snagem.', [new QuestLineStepCompletedRequirement('Gale of Darkness', 22)], undefined, {
    displayName: 'Miror B.',
    imageName: 'Cipher Admin Miror B',
});
TemporaryBattleList['Sevii Rocket Grunt 1'] = new TemporaryBattle('Sevii Rocket Grunt 1', [
    new GymPokemon('Cubone', 3861120, 37),
    new GymPokemon('Marowak', 4182880, 37),
], 'Huh, what? Why\'d you have to win?', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 1)], undefined, {
    displayName: 'Team Rocket Grunt',
    imageName: 'Team Rocket Grunt (female)',
});
TemporaryBattleList['Sevii Rocket Grunt 2'] = new TemporaryBattle('Sevii Rocket Grunt 2', [
    new GymPokemon('Rattata', 1850120, 35),
    new GymPokemon('Raticate', 2011000, 35),
    new GymPokemon('Sandshrew', 1930560, 35),
    new GymPokemon('Sandslash', 2091440, 35),
], 'Develop amnesia conveniently and forget everything you heard!', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 1)], undefined, {
    displayName: 'Team Rocket Grunt',
    imageName: 'Team Rocket Grunt (male)',
});
TemporaryBattleList['Sevii Rocket Grunt 3'] = new TemporaryBattle('Sevii Rocket Grunt 3', [
    new GymPokemon('Houndour', 4309500, 49),
    new GymPokemon('Houndour', 4309500, 49),
], 'Oh, but... Too much!', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 8)], undefined, {
    displayName: 'Team Rocket Grunt',
    imageName: 'Team Rocket Grunt (female)',
});
TemporaryBattleList['Sevii Rocket Grunt 4'] = new TemporaryBattle('Sevii Rocket Grunt 4', [
    new GymPokemon('Machop', 2844270, 48),
    new GymPokemon('Machop', 2844270, 48),
    new GymPokemon('Machoke', 2930460, 48),
], 'What do you think you\'re doing?!', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 8)], undefined, {
    displayName: 'Team Rocket Grunt',
    imageName: 'Team Rocket Grunt (male)',
});
TemporaryBattleList['Sevii Rocket Grunt 5'] = new TemporaryBattle('Sevii Rocket Grunt 5', [
    new GymPokemon('Hypno', 4309500, 49),
    new GymPokemon('Hypno', 4309500, 49),
], 'Don\'t...you...dare...laugh...', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 8)], undefined, {
    displayName: 'Team Rocket Grunt',
    imageName: 'Team Rocket Grunt (male)',
});
TemporaryBattleList['Sevii Rocket Ariana'] = new TemporaryBattle('Sevii Rocket Ariana', [
    new GymPokemon('Muk', 2910600, 52),
    new GymPokemon('Arbok', 2910600, 53),
    new GymPokemon('Vileplume', 2998800, 54),
], 'You\'re doing things according to your beliefs and morals. I understand now...', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 9)], undefined, {
    displayName: 'Team Rocket Executive Ariana',
    imageName: 'Rocket Executive (ariana)',
});
TemporaryBattleList['Sevii Rocket Archer'] = new TemporaryBattle('Sevii Rocket Archer', [
    new GymPokemon('Golbat', 3045900, 53),
    new GymPokemon('Weezing', 3045900, 54),
    new GymPokemon('Houndoom', 3138200, 55),
], 'Urgh... You were too strong... ... Th-that\'s Giovanni\'s Badge! So it\'s true? Team Rocket really has disbanded? ...We will abandon this warehouse. But don\'t think this is over. I won\'t let this be the end. I will find Giovanni. And I will resurrect Team Rocket! I will... Until then, farewell!', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 10)], undefined, {
    displayName: 'Team Rocket Executive Archer',
    imageName: 'Rocket Executive (archer)',
});
TemporaryBattleList['Scientist Gideon'] = new TemporaryBattle('Scientist Gideon', [
    new GymPokemon('Voltorb', 1623360, 46),
    new GymPokemon('Electrode', 1724820, 46),
    new GymPokemon('Magnemite', 1623360, 46),
    new GymPokemon('Magneton', 1724820, 46),
    new GymPokemon('Porygon', 1877010, 46),
], 'If I can\'t sell the Sapphire, it\'s worthless! Go ahead, take it!', [new QuestLineStepCompletedRequirement('Celio\'s Errand', 11)]);
TemporaryBattleList['Pinkan Jessie & James'] = new TemporaryBattle('Pinkan Jessie & James', [
    new GymPokemon('Lickitung', 2000000, 40),
    new GymPokemon('Pinkan Weezing', 3000000, 50),
    new GymPokemon('Pinkan Arbok', 3000000, 50),
    new GymPokemon('Meowth', 2000, 5),
], 'We\'re blasting off again!!!!', [new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 4)], undefined, {
    displayName: 'Jessie & James',
});
TemporaryBattleList['Pinkan Officer Jenny'] = new TemporaryBattle('Pinkan Officer Jenny', [
    new GymPokemon('Growlithe', 2000000, 40),
    new GymPokemon('Arcanine', 3500000, 55),
    new GymPokemon('Pinkan Nidoking', 4000000, 70),
], 'So you\'re not with them? Okay... Just don\'t help those criminals in the future, got it? Looks like some new Pinkan Pokémon have made their way to the island, if you bring us some Pinkan Berries we\'ll trade you for them.', [new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 5)], undefined, {
    displayName: 'Officer Jenny',
});
//Sinnoh Temporary Battles
TemporaryBattleList['Barry 1'] = new TemporaryBattle('Barry 1', [
    new GymPokemon('Chimchar', 1689240, 5, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Piplup', 1689240, 5, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Turtwig', 1689240, 5, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
], 'What are you saying?! We ended up losing?!', [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)], undefined, {
    displayName: 'Pokémon Trainer Barry',
    returnTown: 'Twinleaf Town',
    imageName: 'Barry',
});
TemporaryBattleList['Barry 2'] = new TemporaryBattle('Barry 2', [
    new GymPokemon('Starly', 2886187, 7),
    new GymPokemon('Chimchar', 3074416, 9, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Piplup', 3074416, 9, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Turtwig', 3074416, 9, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
], 'What just happened? I lost?!', [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 202)], undefined, {
    displayName: 'Pokémon Trainer Barry',
    returnTown: 'Jubilife City',
    imageName: 'Barry',
});
TemporaryBattleList['Barry 3'] = new TemporaryBattle('Barry 3', [
    new GymPokemon('Staravia', 2239850, 25),
    new GymPokemon('Buizel', 2195053, 23, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Ponyta', 2195053, 23, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Buizel', 2195053, 23, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
    new GymPokemon('Roselia', 2195053, 23, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Roselia', 2195053, 23, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Ponyta', 2195053, 23, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
    new GymPokemon('Monferno', 2329444, 27, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Prinplup', 2329444, 27, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Grotle', 2329444, 27, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
], 'Waaah! It goes to show my surefire winning strategy doesn\'t work.', [new GymBadgeRequirement(BadgeEnums.Relic)], undefined, {
    displayName: 'Pokémon Trainer Barry',
    returnTown: 'Hearthome City',
    imageName: 'Barry',
});
TemporaryBattleList['Barry 4'] = new TemporaryBattle('Barry 4', [
    new GymPokemon('Staravia', 2490700, 34),
    new GymPokemon('Buizel', 2440886, 32, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Ponyta', 2440886, 32, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Buizel', 2440886, 32, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
    new GymPokemon('Roselia', 2440886, 32, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Roselia', 2440886, 32, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Ponyta', 2440886, 32, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
    new GymPokemon('Monferno', 2590328, 36, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Prinplup', 2590328, 36, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Grotle', 2590328, 36, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
], 'Heh, yeah, maybe you did get a bit tougher since last time.', [
    new GymBadgeRequirement(BadgeEnums.Cobble),
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 213),
], undefined, {
    displayName: 'Pokémon Trainer Barry',
    returnTown: 'Pastoria City',
    imageName: 'Barry',
});
TemporaryBattleList['Galactic Boss Cyrus'] = new TemporaryBattle('Galactic Boss Cyrus', [
    new GymPokemon('Sneasel', 3255000, 34),
    new GymPokemon('Golbat', 3460000, 34),
    new GymPokemon('Murkrow', 3665000, 36),
], 'Impressive. Your prowess is notable.', [new QuestLineStepCompletedRequirement('A New World', 2)], undefined, { imageName: 'Galactic Boss (cyrus)' });
TemporaryBattleList['Barry 5'] = new TemporaryBattle('Barry 5', [
    new GymPokemon('Staraptor', 2104080, 36),
    new GymPokemon('Heracross', 2104080, 37),
    new GymPokemon('Floatzel', 2051478, 35, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Rapidash', 2051478, 35, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Floatzel', 2051478, 35, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
    new GymPokemon('Roserade', 2051478, 35, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Roserade', 2051478, 35, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Rapidash', 2051478, 35, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
    new GymPokemon('Infernape', 2209284, 38, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Empoleon', 2209284, 38, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Torterra', 2209284, 38, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
], 'Yeah, yeah, you\'re just a bit better than me, as usual.', [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 218)], undefined, {
    displayName: 'Pokémon Trainer Barry',
    returnTown: 'Canalave City',
    imageName: 'Barry',
});
TemporaryBattleList['Barry 6'] = new TemporaryBattle('Barry 6', [
    new GymPokemon('Staraptor', 3974738, 48),
    new GymPokemon('Floatzel', 3740930, 47, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Rapidash', 3740930, 47, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Rapidash', 3740930, 47, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
    new GymPokemon('Snorlax', 3857834, 49, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Snorlax', 3857834, 49, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Floatzel', 3740930, 47, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
    new GymPokemon('Heracross', 3857834, 48),
    new GymPokemon('Roserade', 3740930, 47, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Roserade', 3740930, 47, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Snorlax', 3857834, 49, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
    new GymPokemon('Infernape', 4161784, 51, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Empoleon', 4161784, 51, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Torterra', 4161784, 51, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
], 'I guess I\'m not ready for the Pokémon League if I\'m losing to you! Darn it! You watch, though! I\'ll get tougher and win my way through the Pokémon League! Because I\'m going to become the Champion, the toughest Trainer! You\'d better not lose to anyone before me!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Sinnoh'))], undefined, {
    displayName: 'Pokémon Trainer Barry',
    returnTown: 'Victory Road Sinnoh',
    imageName: 'Barry',
});
TemporaryBattleList['Barry 7'] = new TemporaryBattle('Barry 7', [
    new GymPokemon('Staraptor', 9727091, 81),
    new GymPokemon('Floatzel', 9212128, 79, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Roserade', 9212128, 79, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Rapidash', 9212128, 79, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
    new GymPokemon('Roserade', 9212128, 79, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Rapidash', 9212128, 79, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Floatzel', 9212128, 79, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
    new GymPokemon('Heracross', 9498219, 81),
    new GymPokemon('Snorlax', 9498219, 83),
    new GymPokemon('Infernape', 10184837, 85, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Grass)),
    new GymPokemon('Empoleon', 10184837, 85, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Fire)),
    new GymPokemon('Torterra', 10184837, 85, new StarterRequirement(GameConstants.Region.sinnoh, GameConstants.Starter.Water)),
], '...! It\'s all right, though. Keep getting tougher. The more you do, the tougher my Pokémon and I get, too. There\'s no end to Pokémon. That\'s what I\'m saying!', [
    new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion),
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 225),
], [new NullRequirement], {
    displayName: 'Pokémon Trainer Barry',
    imageName: 'Barry',
    rewardFunction: () => Notifier.notify({ message: 'Congratulations on beating Barry at his best! Come back to fight him again at any time.' }),
});
TemporaryBattleList['Manaphy Go-Rock MGrunt 1'] = new TemporaryBattle('Manaphy Go-Rock MGrunt 1', [
    new GymPokemon('Graveler', 2920000, 22),
    new GymPokemon('Graveler', 2920000, 22),
    new GymPokemon('Graveler', 2920000, 22),
], 'Your teamwork is too good!', [new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 2)], undefined, {
    displayName: 'Go-Rock Squad Grunt',
    imageName: 'Go-Rock Squad Grunt (male)',
});
TemporaryBattleList['Manaphy Go-Rock FGrunt 1'] = new TemporaryBattle('Manaphy Go-Rock FGrunt 1', [
    new GymPokemon('Rattata', 2200000, 22),
    new GymPokemon('Rattata', 2200000, 22),
    new GymPokemon('Rattata', 2200000, 22),
    new GymPokemon('Rattata', 2200000, 22),
], 'Your battling skills are solid...', [new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 4)], undefined, {
    displayName: 'Go-Rock Squad Grunt',
    imageName: 'Go-Rock Squad Grunt (female)',
});
TemporaryBattleList['Manaphy Go-Rock MGrunt 2'] = new TemporaryBattle('Manaphy Go-Rock MGrunt 2', [
    new GymPokemon('Zubat', 2200000, 22),
    new GymPokemon('Zubat', 2200000, 22),
    new GymPokemon('Zubat', 2200000, 22),
    new GymPokemon('Zubat', 2200000, 22),
], 'Darn it! You better remember this!', [new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 5)], undefined, {
    displayName: 'Go-Rock Squad Grunt',
    imageName: 'Go-Rock Squad Grunt (male)',
});
TemporaryBattleList['Manaphy Go-Rock MGrunt 3'] = new TemporaryBattle('Manaphy Go-Rock MGrunt 3', [
    new GymPokemon('Rattata', 2200000, 22),
    new GymPokemon('Rattata', 2200000, 22),
    new GymPokemon('Meowth', 4400000, 22),
], 'The Go-Rock Squad\'s future looks bleak...', [new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 5)], undefined, {
    displayName: 'Go-Rock Squad Grunt',
    imageName: 'Go-Rock Squad Grunt (male)',
});
TemporaryBattleList['Manaphy Go-Rock FGrunt 2'] = new TemporaryBattle('Manaphy Go-Rock FGrunt 2', [new GymPokemon('Scyther', 8800000, 22)], 'Bleh to you!', [new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 5)], undefined, {
    displayName: 'Go-Rock Squad Grunt',
    imageName: 'Go-Rock Squad Grunt (female)',
});
TemporaryBattleList['Manaphy Go-Rock MGrunt 4'] = new TemporaryBattle('Manaphy Go-Rock MGrunt 4', [
    new GymPokemon('Zubat', 2200000, 22),
    new GymPokemon('Zubat', 2200000, 22),
    new GymPokemon('Zubat', 2200000, 22),
    new GymPokemon('Politoed', 2800000, 22),
], 'Darn it! You better remember this! ...Wait, didn\'t I already say that...?', [new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 8)], undefined, {
    displayName: 'Go-Rock Squad Grunt',
    imageName: 'Go-Rock Squad Grunt (male)',
});
TemporaryBattleList['Manaphy Go-Rock Commander'] = new TemporaryBattle('Manaphy Go-Rock Commander', [
    new GymPokemon('Scyther', 3200000, 25),
    new GymPokemon('Scyther', 3200000, 25),
    new GymPokemon('Venusaur', 3500000, 30),
], 'Owowow! Okay, okay, I got it! You can have your stupid egg!', [new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 9)], undefined, {
    displayName: 'Go-Rock Squad Commander',
    imageName: 'Go-Rock Squad Commander',
});
TemporaryBattleList['Manaphy Go-Rock Pincher'] = new TemporaryBattle('Manaphy Go-Rock Pincher', [
    new GymPokemon('Poochyena', 5500000, 40),
    new GymPokemon('Carvanha', 5500000, 40),
], 'Argh! With that Manaphy Egg, I thought even an ex-Go-Rock like me could live out the rest of my life in ease! That Happiny took the egg to the south-east, across the water. I wanted to pursue it, but Carvanha are not... comfortable to ride on.', [new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 21)], undefined, {
    displayName: 'Go-Rock Pokémon Pincher',
    imageName: 'Go-Rock Squad Grunt (male)',
});
TemporaryBattleList['Manaphy Egg Protectors'] = new TemporaryBattle('Manaphy Egg Protectors', [
    new GymPokemon('Glameow', 3500000, 40),
    new GymPokemon('Pichu', 3600000, 40),
    new GymPokemon('Happiny', 5000000, 45),
], '<i>As you step over the defeated Pokémon, the Manaphy egg glows... and hatches!</i>', [new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 24)], undefined, {
    displayName: 'Manaphy Egg Protectors',
    imageName: 'specialNPCs/Manaphy Egg',
    firstTimeRewardFunction: () => {
        App.game.party.gainPokemonByName('Manaphy', PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_REWARD));
    },
});
TemporaryBattleList.Zero = new TemporaryBattle('Zero', [
    new GymPokemon('Magnemite', 10120000, 70),
    new GymPokemon('Magneton', 10870000, 72),
    new GymPokemon('Magnezone', 11420000, 75),
], 'Argh! I can\'t believe I lost to someone like you! You can keep the key for now, but I\'ll get my revenge one day.', [new QuestLineStepCompletedRequirement('Zero\'s Ambition', 12)]);
//Unova Temporary Battles
TemporaryBattleList['Hugh 1'] = new TemporaryBattle('Hugh 1', [
    new GymPokemon('Tepig', 7269010, 5, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Grass)),
    new GymPokemon('Oshawott', 7269010, 5, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Fire)),
    new GymPokemon('Snivy', 7269010, 5, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Water)),
], 'I couldn\'t achieve victory for my partner... I won\'t let myself forget this frustration!', [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)], undefined, {
    displayName: 'Pokémon Trainer Hugh',
    returnTown: 'Aspertia City',
    imageName: 'Hugh',
});
TemporaryBattleList['Hugh 2'] = new TemporaryBattle('Hugh 2', [
    new GymPokemon('Tepig', 11630416, 8, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Grass)),
    new GymPokemon('Oshawott', 11630416, 8, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Fire)),
    new GymPokemon('Snivy', 11630416, 8, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Water)),
], 'It can\'t be! How could I have lost? I need to apologize to my partner...', [
    new RouteKillRequirement(10, GameConstants.Region.unova, 20),
    new TemporaryBattleRequirement('Hugh 1'),
], undefined, {
    displayName: 'Pokémon Trainer Hugh',
    returnTown: 'Floccesy Town',
    imageName: 'Hugh',
});
TemporaryBattleList['Team Plasma Grunt 1'] = new TemporaryBattle('Team Plasma Grunt 1', [new GymPokemon('Patrat', 5492150, 14)], 'Plasmaaaa! I lost! This is awful!', [new GymBadgeRequirement(BadgeEnums.Toxic)], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: 'Team Plasma Grunt (male)',
});
TemporaryBattleList['Colress 1'] = new TemporaryBattle('Colress 1', [
    new GymPokemon('Magnemite', 15852768, 21),
    new GymPokemon('Klink', 16843566, 23),
], 'Splendid! You are quite the Trainer!', [
    new RouteKillRequirement(10, GameConstants.Region.unova, 4),
    new GymBadgeRequirement(BadgeEnums.Insect),
], undefined, {
    displayName: 'Pokémon Trainer Colress',
    returnTown: 'Castelia City',
    imageName: 'Team Plasma (colress)',
});
TemporaryBattleList['Team Plasma Grunt 2'] = new TemporaryBattle('Team Plasma Grunt 2', [new GymPokemon('Trubbish', 35896600, 27)], 'Don\'t let it go to your head... But you put up a good fight, kid!', [
    new GymBadgeRequirement(BadgeEnums.Bolt),
    new TemporaryBattleRequirement('Team Plasma Grunt 1'),
    new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 3),
], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: 'Team Plasma Grunt (male)',
});
TemporaryBattleList['Team Plasma Grunt 3'] = new TemporaryBattle('Team Plasma Grunt 3', [new GymPokemon('Watchog', 35896600, 27)], 'What\'s the big idea? This Pokémon I stole is useless!', [
    new GymBadgeRequirement(BadgeEnums.Bolt),
    new TemporaryBattleRequirement('Team Plasma Grunt 1'),
    new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 3),
], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: 'Team Plasma Grunt (female)',
});
TemporaryBattleList['Hugh 3'] = new TemporaryBattle('Hugh 3', [
    new GymPokemon('Pignite', 13864044, 25, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Grass)),
    new GymPokemon('Dewott', 13864044, 25, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Fire)),
    new GymPokemon('Servine', 13864044, 25, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Water)),
    new GymPokemon('Simipour', 13456278, 25, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Grass)),
    new GymPokemon('Simisage', 13456278, 25, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Fire)),
    new GymPokemon('Tranquill', 13456278, 25),
    new GymPokemon('Simisear', 13456278, 25, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Water)),
], 'Man! I lost... You\'ve become way too tough! But, I\'m gonna get stronger, too!', [new GymBadgeRequirement(BadgeEnums.Quake)], undefined, {
    displayName: 'Pokémon Trainer Hugh',
    returnTown: 'Driftveil City',
    imageName: 'Hugh',
});
TemporaryBattleList.Cheren = new TemporaryBattle('Cheren', [
    new GymPokemon('Stoutland', 14251644, 25),
    new GymPokemon('Cinccino', 13832478, 25),
    new GymPokemon('Watchog', 13832478, 25),
], 'Fantastic! You and your Pokémon have grown much stronger!', [new TemporaryBattleRequirement('Hugh 3')], undefined, {
    displayName: 'Pokémon Trainer Cheren',
    returnTown: 'Driftveil City',
    imageName: 'Cheren',
});
TemporaryBattleList['Colress 2'] = new TemporaryBattle('Colress 2', [
    new GymPokemon('Magneton', 14768444, 25),
    new GymPokemon('Elgyem', 14334078, 25),
    new GymPokemon('Klink', 14334078, 25),
], 'Well done! I learned much from this battle!', [new TemporaryBattleRequirement('Cheren')], undefined, {
    displayName: 'Pokémon Trainer Colress',
    returnTown: 'Driftveil City',
    imageName: 'Team Plasma (colress)',
});
TemporaryBattleList['Team Plasma Grunt 4'] = new TemporaryBattle('Team Plasma Grunt 4', [new GymPokemon('Koffing', 39496600, 30)], 'You! So you\'re a Trainer who fights while believing in your Pokémon, are you?', [new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 5)], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: 'Team Plasma Grunt (male)',
});
TemporaryBattleList['Team Plasma Grunt 5'] = new TemporaryBattle('Team Plasma Grunt 5', [new GymPokemon('Trubbish', 39496600, 30)], 'Plasmaaaa! Plasmaaaa!!', [new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 5)], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: 'Team Plasma Grunt (male)',
});
TemporaryBattleList['Team Plasma Grunts 1'] = new TemporaryBattle('Team Plasma Grunts 1', [
    new GymPokemon('Golbat', 9774150, 29),
    new GymPokemon('Liepard', 9974150, 29),
    new GymPokemon('Grimer', 9774150, 29),
    new GymPokemon('Krokorok', 9974150, 29),
], 'The Gym Leader is tough, but you... Are you even human?! I tried to use the same combination as you, and yet...', [new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 5)], undefined, {
    displayName: 'Team Plasma Grunts',
    imageName: 'Team Plasma Grunts (male)',
});
TemporaryBattleList['Team Plasma Grunts 2'] = new TemporaryBattle('Team Plasma Grunts 2', [
    new GymPokemon('Koffing', 9774150, 29),
    new GymPokemon('Watchog', 9974150, 29),
    new GymPokemon('Grimer', 9774150, 29),
    new GymPokemon('Raticate', 9974150, 29),
], 'No! At this rate, I... I won\'t be able to protect the Plasma Frigate! P-P-P-Plasmaaaa!', [new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 5)], undefined, {
    displayName: 'Team Plasma Grunts',
    imageName: 'Team Plasma Grunts (male)',
});
TemporaryBattleList['Hugh 4'] = new TemporaryBattle('Hugh 4', [
    new GymPokemon('Unfezant', 16756278, 39),
    new GymPokemon('Simipour', 16756278, 39, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Grass)),
    new GymPokemon('Simisage', 16756278, 39, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Fire)),
    new GymPokemon('Simisear', 16756278, 39, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Water)),
    new GymPokemon('Emboar', 17264044, 41, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Grass)),
    new GymPokemon('Samurott', 17264044, 41, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Fire)),
    new GymPokemon('Serperior', 17264044, 41, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Water)),
], 'I couldn\'t even draw out my team\'s real strength... How pathetic!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))], undefined, {
    displayName: 'Pokémon Trainer Hugh',
    returnTown: 'Undella Town',
    imageName: 'Hugh',
});
TemporaryBattleList['Team Plasma Grunt 6'] = new TemporaryBattle('Team Plasma Grunt 6', [
    new GymPokemon('Golbat', 22848300, 39),
    new GymPokemon('Garbodor', 24848300, 39),
], 'What a blunder to have made in front of Zinzolin...', [
    new TemporaryBattleRequirement('Team Plasma Grunt 4'),
    new TemporaryBattleRequirement('Team Plasma Grunt 5'),
    new TemporaryBattleRequirement('Team Plasma Grunts 1'),
    new TemporaryBattleRequirement('Team Plasma Grunts 2'),
    new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 8),
], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: 'Team Plasma Grunt (male)',
});
TemporaryBattleList['Zinzolin 1'] = new TemporaryBattle('Zinzolin 1', [
    new GymPokemon('Cryogonal', 23848300, 42),
    new GymPokemon('Sneasel', 25848300, 44),
], 'You can\'t stop us! We will use the DNA Splicers to awaken the true power of the legendary Dragon-type Pokémon! We will steal the Splicers from the Opelucid City gym leader!', [new TemporaryBattleRequirement('Team Plasma Grunt 6')], undefined, {
    displayName: 'Zinzolin',
    imageName: 'Team Plasma (zinzolin)',
});
TemporaryBattleList['Team Plasma Grunt 7'] = new TemporaryBattle('Team Plasma Grunt 7', [
    new GymPokemon('Watchog', 26298300, 44),
    new GymPokemon('Muk', 28298300, 44),
], 'You little... You knocked out my stupid pawns!', [new TemporaryBattleRequirement('Zinzolin 1')], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: 'Team Plasma Grunt (male)',
});
TemporaryBattleList['Team Plasma Grunt 8'] = new TemporaryBattle('Team Plasma Grunt 8', [
    new GymPokemon('Golbat', 26298300, 44),
    new GymPokemon('Garbodor', 28298300, 44),
], 'Argh! Lame! Stupid! Fool! Plasmaaaa!', [new TemporaryBattleRequirement('Zinzolin 1')], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: 'Team Plasma Grunt (female)',
});
TemporaryBattleList['Team Plasma Grunt 9'] = new TemporaryBattle('Team Plasma Grunt 9', [
    new GymPokemon('Seviper', 26298300, 44),
    new GymPokemon('Weezing', 28298300, 44),
], 'Even if I lose, I will not give up on justice for Team Plasma! That\'s all!', [new TemporaryBattleRequirement('Zinzolin 1')], undefined, {
    displayName: 'Team Plasma Grunt',
    imageName: 'Team Plasma Grunt (male)',
});
TemporaryBattleList['Zinzolin 2'] = new TemporaryBattle('Zinzolin 2', [
    new GymPokemon('Cryogonal', 17632200, 46),
    new GymPokemon('Cryogonal', 17632200, 46),
    new GymPokemon('Weavile', 20632200, 48),
], 'Have you gotten even stronger than you were in Lacunosa Town? How, in such a brief amount of time...', [
    new TemporaryBattleRequirement('Team Plasma Grunt 7'),
    new TemporaryBattleRequirement('Team Plasma Grunt 8'),
    new TemporaryBattleRequirement('Team Plasma Grunt 9'),
], undefined, {
    displayName: 'Zinzolin',
    imageName: 'Team Plasma (zinzolin)',
});
TemporaryBattleList['Plasma Shadow 1'] = new TemporaryBattle('Plasma Shadow 1', [
    new GymPokemon('Pawniard', 18065533, 46),
    new GymPokemon('Pawniard', 18065533, 46),
    new GymPokemon('Absol', 21065533, 48),
], 'I hate to admit it, but... You\'re a good trainer. Awww. How unlucky. I don\'t happen to be the one holding the DNA Splicers. I was just buying time for the others to escape. Cheerio, bye-bye, whatever.', [new TemporaryBattleRequirement('Zinzolin 2')], undefined, {
    displayName: 'Plasma Shadow',
    imageName: 'Plasma Shadow',
});
TemporaryBattleList['Colress 3'] = new TemporaryBattle('Colress 3', [
    new GymPokemon('Magneton', 13557307, 50),
    new GymPokemon('Metang', 13557307, 50),
    new GymPokemon('Beheeyem', 13557307, 50),
    new GymPokemon('Magnezone', 13657307, 50),
    new GymPokemon('Klinklang', 13957307, 52),
], 'So this is what it means to draw forth the power hidden in your Pokémon! To me, whether Team Plasma wins or whether you win will decide how the relationship between people and Pokémon should be! You\'d better hurry, they have already captured the legendary Dragon-type Pokémon! Good luck in your battle!', [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Giant Chasm')),
    new TemporaryBattleRequirement('Plasma Shadow 1'),
    new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 17),
], undefined, {
    displayName: 'Colress',
    imageName: 'Team Plasma (colress)',
});
TemporaryBattleList['Plasma Shadow 2'] = new TemporaryBattle('Plasma Shadow 2', [
    new GymPokemon('Pawniard', 25025488, 49),
    new GymPokemon('Pawniard', 25025488, 49),
    new GymPokemon('Absol', 28025488, 51),
], 'It doesn\'t bother us a bit if the stolen Pokémon cry or beg.', [new TemporaryBattleRequirement('Colress 3')], undefined, {
    displayName: 'Plasma Shadow',
    imageName: 'Plasma Shadow',
});
TemporaryBattleList['Plasma Shadow 3'] = new TemporaryBattle('Plasma Shadow 3', [
    new GymPokemon('Pawniard', 25025488, 49),
    new GymPokemon('Pawniard', 25025488, 49),
    new GymPokemon('Banette', 28025488, 51),
], 'It doesn\'t bother us a bit if we have to use another Pokémon after one is defeated.', [new TemporaryBattleRequirement('Colress 3')], undefined, {
    displayName: 'Plasma Shadow',
    imageName: 'Plasma Shadow',
});
TemporaryBattleList['Plasma Shadow 4'] = new TemporaryBattle('Plasma Shadow 4', [
    new GymPokemon('Pawniard', 25025488, 49),
    new GymPokemon('Pawniard', 25025488, 49),
    new GymPokemon('Accelgor', 28025488, 51),
], 'It doesn\'t bother us a bit if Pokémon win or lose.', [new TemporaryBattleRequirement('Colress 3')], undefined, {
    displayName: 'Plasma Shadow',
    imageName: 'Plasma Shadow',
});
TemporaryBattleList['Ghetsis 1'] = new TemporaryBattle('Ghetsis 1', [
    new GymPokemon('Kyurem (Black)', 43933198, 50),
    new GymPokemon('Kyurem (White)', 43933198, 50),
], 'I can\'t believe it! The Black and White Kyurem I went to all the trouble of preparing! How irritating! Now I have to go recapture Kyurem, don\'t I? But first, I\'ll take down this disgusting Trainer with my own hand! This time I WILL succeed! No matter what they try, no one will be able to stop me!', [
    new TemporaryBattleRequirement('Plasma Shadow 2'),
    new TemporaryBattleRequirement('Plasma Shadow 3'),
    new TemporaryBattleRequirement('Plasma Shadow 4'),
    new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 20),
], undefined, {
    displayName: 'Ghetsis',
    imageName: 'Ghetsis',
});
TemporaryBattleList['Ghetsis 2'] = new TemporaryBattle('Ghetsis 2', [
    new GymPokemon('Cofagrigus', 16176055, 50),
    new GymPokemon('Seismitoad', 16176055, 50),
    new GymPokemon('Eelektross', 16176055, 50),
    new GymPokemon('Drapion', 16176055, 50),
    new GymPokemon('Toxicroak', 16276055, 50),
    new GymPokemon('Hydreigon', 16676055, 52),
], 'My plans for complete and total world domination foiled yet again? No! It mustn\'t be! I couldn\'t have been defeated by some random Trainer from who knows where!', [new TemporaryBattleRequirement('Ghetsis 1')], undefined, {
    displayName: 'Ghetsis',
    imageName: 'Ghetsis',
});
TemporaryBattleList['Hugh 5'] = new TemporaryBattle('Hugh 5', [
    new GymPokemon('Unfezant', 23557462, 55),
    new GymPokemon('Simipour', 23086313, 55, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Grass)),
    new GymPokemon('Simisage', 23086313, 55, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Fire)),
    new GymPokemon('Simisear', 23086313, 55, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Water)),
    new GymPokemon('Bouffalant', 23557462, 55),
    new GymPokemon('Emboar', 24217071, 57, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Grass)),
    new GymPokemon('Samurott', 24217071, 57, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Fire)),
    new GymPokemon('Serperior', 24217071, 57, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Water)),
], '...Phew! You\'re really something! Thanks to you, I accomplished what I set out to do during my journey! I think you\'re really amazing! So become the Champion! Get the proof that you\'re a Trainer your Pokémon can be proud of! See you!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Unova'))], undefined, {
    displayName: 'Pokémon Trainer Hugh',
    returnTown: 'Victory Road Unova',
    imageName: 'Hugh',
});
TemporaryBattleList['Hugh 6'] = new TemporaryBattle('Hugh 6', [
    new GymPokemon('Unfezant', 31270484, 62),
    new GymPokemon('Simipour', 30507789, 62, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Grass)),
    new GymPokemon('Simisage', 30507789, 62, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Fire)),
    new GymPokemon('Simisear', 30507789, 62, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Water)),
    new GymPokemon('Bouffalant', 31270484, 62),
    new GymPokemon('Flygon', 30507789, 62),
    new GymPokemon('Eelektross', 30507789, 62),
    new GymPokemon('Emboar', 32605200, 64, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Grass)),
    new GymPokemon('Samurott', 32605200, 64, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Fire)),
    new GymPokemon('Serperior', 32605200, 64, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Water)),
], 'This bitter...yet refreshing feeling.', [new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)], undefined, {
    displayName: 'Pokémon Trainer Hugh',
    returnTown: 'Undella Town',
    imageName: 'Hugh',
});
TemporaryBattleList['Hugh 7'] = new TemporaryBattle('Hugh 7', [
    new GymPokemon('Unfezant', 35809748, 65),
    new GymPokemon('Simipour', 34936339, 65, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Grass)),
    new GymPokemon('Simisage', 34936339, 65, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Fire)),
    new GymPokemon('Simisear', 34936339, 65, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Water)),
    new GymPokemon('Bouffalant', 35809748, 65),
    new GymPokemon('Flygon', 34936339, 65),
    new GymPokemon('Eelektross', 34936339, 65),
    new GymPokemon('Emboar', 37338212, 67, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Grass)),
    new GymPokemon('Samurott', 37338212, 67, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Fire)),
    new GymPokemon('Serperior', 37338212, 67, new StarterRequirement(GameConstants.Region.unova, GameConstants.Starter.Water)),
], 'Just as I\'d expected! You are really drawing forth your Pokémon\'s power!... I suppose that\'s it. If winning in battles is strength, then believing that your Pokémon will come back and waiting for its return is also strength. Doing what you think is right no matter what anyone else says, like these guys do, is strength, too.', [new TemporaryBattleRequirement('Hugh 6')], [new NullRequirement], {
    displayName: 'Pokémon Trainer Hugh',
    imageName: 'Hugh',
    rewardFunction: () => Notifier.notify({ message: 'Congratulations on beating Hugh at his best! Come back to fight him again at any time.' }),
});
TemporaryBattleList['Terrakion 1'] = new TemporaryBattle('Terrakion 1', [new GymPokemon('Terrakion', 175698480, 50, undefined, false)], 'You\'re actually very strong. It\'s very possible that Cobalion trusted you to find us. Well then, where are we supposed to meet? The Moor of Icirrus? Very well, I shall make my way there, then. You should come, too. Cobalion should know where you might find our companion, Virizion.', [new QuestLineStepCompletedRequirement('Swords of Justice', 4)], undefined, {
    displayName: 'Terrakion',
    imageName: '../pokemon/639',
    hideTrainer: true,
    visibleRequirement: new QuestLineStepCompletedRequirement('Swords of Justice', 5),
});
TemporaryBattleList['Swords of Justice 1'] = new TemporaryBattle('Swords of Justice 1', [
    new GymPokemon('Cobalion', 60042160, 55, undefined, false),
    new GymPokemon('Terrakion', 60042160, 55, undefined, false),
    new GymPokemon('Virizion', 60042160, 55, undefined, false),
], 'It seems you\'re pretty strong, $playername$. We\'ll let you help us since you were able to defeat us in a battle. Now, onto the plan. We\'ll start by searching for clues on where Kyurem might attack, so you\'ll start by looking around the Giant Chasm. Good luck in your endeavour, report back with your findings.', [new QuestLineStepCompletedRequirement('Swords of Justice', 11)], undefined, {
    displayName: 'Swords of Justice',
    imageName: 'specialNPCs/Swords',
    hideTrainer: true,
    visibleRequirement: new QuestLineStepCompletedRequirement('Swords of Justice', 11),
});
TemporaryBattleList['Kyurem 1'] = new TemporaryBattle('Kyurem 1', [new GymPokemon('Kyurem', 183060808, 60, undefined, false)], undefined, [new QuestLineStepCompletedRequirement('Swords of Justice', 14)], undefined, {
    displayName: 'Kyurem',
    hideTrainer: true,
    visibleRequirement: new QuestLineStepCompletedRequirement('Swords of Justice', 14),
});
TemporaryBattleList['Kyurem 2'] = new TemporaryBattle('Kyurem 2', [
    new GymPokemon('Kyurem', 62098860, 60, undefined, false),
    new GymPokemon('Kyurem (Black)', 62098860, 60, undefined, false),
    new GymPokemon('Kyurem (White)', 62098860, 60, undefined, false),
], undefined, [new QuestLineStepCompletedRequirement('Swords of Justice', 17)], undefined, {
    displayName: 'Kyurem',
    hideTrainer: true,
    visibleRequirement: new QuestLineStepCompletedRequirement('Swords of Justice', 17),
});
TemporaryBattleList['Kyurem 3'] = new TemporaryBattle('Kyurem 3', [
    new GymPokemon('Kyurem', 66667405, 60, undefined, false),
    new GymPokemon('Kyurem (Black)', 66667405, 60, undefined, false),
    new GymPokemon('Kyurem (White)', 66667405, 60, undefined, false),
], undefined, [new QuestLineStepCompletedRequirement('Swords of Justice', 19)], undefined, {
    displayName: 'Kyurem',
    hideTrainer: true,
    visibleRequirement: new QuestLineStepCompletedRequirement('Swords of Justice', 19),
});
TemporaryBattleList['Red Genesect 1'] = new TemporaryBattle('Red Genesect 1', [new GymPokemon('Genesect', 174858488, 80, undefined, true)], undefined, [new QuestLineStepCompletedRequirement('The Legend Awakened', 0)], undefined, {
    displayName: 'Red Genesect',
    hideTrainer: true,
    visibleRequirement: new QuestLineStepCompletedRequirement('The Legend Awakened', 0),
});
TemporaryBattleList['Genesect Burn'] = new TemporaryBattle('Genesect Burn', [new GymPokemon('Genesect (Burn)', 180858488, 80, undefined, false)], undefined, [new QuestLineStepCompletedRequirement('The Legend Awakened', 3)], undefined, {
    displayName: 'Burn Drive Genesect',
    returnTown: 'Castelia Sewers',
    hideTrainer: true,
    visibleRequirement: new QuestLineStepCompletedRequirement('The Legend Awakened', 3),
});
TemporaryBattleList['Genesect Chill'] = new TemporaryBattle('Genesect Chill', [new GymPokemon('Genesect (Chill)', 180858488, 80, undefined, false)], undefined, [new QuestLineStepCompletedRequirement('The Legend Awakened', 3)], undefined, {
    displayName: 'Chill Drive Genesect',
    returnTown: 'Castelia Sewers',
    hideTrainer: true,
    visibleRequirement: new QuestLineStepCompletedRequirement('The Legend Awakened', 3),
});
TemporaryBattleList['Genesect Douse'] = new TemporaryBattle('Genesect Douse', [new GymPokemon('Genesect (Douse)', 180858488, 80, undefined, false)], undefined, [new QuestLineStepCompletedRequirement('The Legend Awakened', 3)], undefined, {
    displayName: 'Douse Drive Genesect',
    returnTown: 'Castelia Sewers',
    hideTrainer: true,
    visibleRequirement: new QuestLineStepCompletedRequirement('The Legend Awakened', 3),
});
TemporaryBattleList['Genesect Shock'] = new TemporaryBattle('Genesect Shock', [new GymPokemon('Genesect (Shock)', 180858488, 80, undefined, false)], undefined, [new QuestLineStepCompletedRequirement('The Legend Awakened', 3)], undefined, {
    displayName: 'Shock Drive Genesect',
    returnTown: 'Castelia Sewers',
    hideTrainer: true,
    visibleRequirement: new QuestLineStepCompletedRequirement('The Legend Awakened', 3),
});
TemporaryBattleList['Red Genesect 2'] = new TemporaryBattle('Red Genesect 2', [new GymPokemon('Genesect (High-Speed)', 182858488, 80, undefined, true)], undefined, [new QuestLineStepCompletedRequirement('The Legend Awakened', 4)], undefined, {
    displayName: 'Red Genesect',
    hideTrainer: true,
    visibleRequirement: new QuestLineStepCompletedRequirement('The Legend Awakened', 4),
});
TemporaryBattleList['Dream Researcher'] = new TemporaryBattle('Dream Researcher', [new GymPokemon('Mega Audino', 125000000, 32)], 'Wow! You have proven that you have total power over the realm of dreams! The location of this Audinite was revealed to me in a dream, you deserve to have it!</br><img src="assets/images/megaStone/Audinite.png"/>', [new ObtainedPokemonRequirement('Landorus (Therian)'), new ObtainedPokemonRequirement('Audino'), new MaxRegionRequirement(GameConstants.Region.kalos)], undefined, {
    imageName: 'Scientist (female)',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Audinite),
});
//Kalos Temporary Battles
TemporaryBattleList['Shauna 1'] = new TemporaryBattle('Shauna 1', [
    new GymPokemon('Froakie', 24906504, 5, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Grass)),
    new GymPokemon('Chespin', 24906504, 5, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Fire)),
    new GymPokemon('Fennekin', 24906504, 5, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Water)),
], 'Hey! I wasn\'t done watching my cute Li\'l Pokémon yet!', [new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)], undefined, {
    displayName: 'Pokémon Trainer Shauna',
    returnTown: 'Aquacorde Town',
    imageName: 'Shauna',
});
TemporaryBattleList['Sycamore 1'] = new TemporaryBattle('Sycamore 1', [
    new GymPokemon('Bulbasaur', 17568392, 10),
    new GymPokemon('Charmander', 17568392, 10),
    new GymPokemon('Squirtle', 17568392, 10),
], 'Ha ha! You\'re too much for me! You\'re really something, aren\'t you?', [new RouteKillRequirement(10, GameConstants.Region.kalos, 4)], undefined, {
    firstTimeRewardFunction: () => {
        App.game.quests.getQuestLine('A Beautiful World').beginQuest(0, undefined, true);
    },
    displayName: 'Pokémon Professor Sycamore',
    imageName: 'Sycamore',
});
TemporaryBattleList['Tierno 1'] = new TemporaryBattle('Tierno 1', [new GymPokemon('Corphish', 40132328, 12)], 'That was some nice footwork!', [new RouteKillRequirement(10, GameConstants.Region.kalos, 5)], undefined, {
    displayName: 'Pokémon Trainer Tierno',
    returnTown: 'Camphrier Town',
    imageName: 'Tierno',
});
TemporaryBattleList['Trevor & Tierno'] = new TemporaryBattle('Trevor & Tierno', [
    new GymPokemon('Pikachu', 23154377, 14),
    new GymPokemon('Corphish', 23856025, 16),
    new GymPokemon('Flabébé (Orange)', 23154377, 14),
], 'So you can\'t learn everything just from the Pokédex... I see!', [new RouteKillRequirement(10, GameConstants.Region.kalos, 7)], undefined, {
    displayName: 'Pokémon Trainer Trevor & Pokémon Trainer Tierno',
    returnTown: 'Camphrier Town',
});
TemporaryBattleList['Team Flare Grunt 1'] = new TemporaryBattle('Team Flare Grunt 1', [
    new GymPokemon('Houndour', 35486579, 18),
    new GymPokemon('Zubat', 36513421, 18),
], 'You may have beaten me, but when I lose, I go out in style!', [new QuestLineStepCompletedRequirement('A Beautiful World', 3)], undefined, {
    displayName: 'Team Flare Grunt',
    imageName: 'Team Flare Grunt (male)',
});
TemporaryBattleList['Team Flare Grunt 2'] = new TemporaryBattle('Team Flare Grunt 2', [
    new GymPokemon('Houndour', 37260908, 21),
    new GymPokemon('Golbat', 39069360, 23),
], 'You may have beaten me... again, but when I lose, I go out in style! But first hear this, pip-squeak! Team Flare is gonna use the stones on Route 10 and a fantastic treasure to make everyone on our team happy! In this world the ones who have power are the ones who win with flair!', [new QuestLineStepCompletedRequirement('A Beautiful World', 7)], undefined, {
    displayName: 'Team Flare Grunt',
    imageName: 'Team Flare Grunt (male)',
});
TemporaryBattleList['Calem 1'] = new TemporaryBattle('Calem 1', [
    new GymPokemon('Meowstic', 40271251, 28),
    new GymPokemon('Absol', 40271251, 28),
    new GymPokemon('Braixen', 41888812, 30, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Grass)),
    new GymPokemon('Frogadier', 41888812, 30, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Fire)),
    new GymPokemon('Quilladin', 41888812, 30, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Water)),
], 'Your bonds with your Pokémon are really strong. Although, I don\'t like losing much...', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reflection Cave'))], undefined, {
    displayName: 'Pokémon Trainer Calem',
    returnTown: 'Shalour City',
    imageName: 'Calem',
});
TemporaryBattleList.Korrina = new TemporaryBattle('Korrina', [new GymPokemon('Mega Lucario', 135000000, 32)], 'What an incredible bond you have! What amazing power! You and Lucario are worthy of this Lucarionite!</br><img src="assets/images/megaStone/Lucarionite.png"/>', [new GymBadgeRequirement(BadgeEnums.Rumble), new ObtainedPokemonRequirement('Lucario')], undefined, {
    imageName: 'Korrina',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Lucarionite),
});
TemporaryBattleList['Courtney 1'] = new TemporaryBattle('Courtney 1', [new GymPokemon('Camerupt', 135000000, 53)], 'Tedious...bothersome...child...You should...just be quiet...and give me...the Key Stone! Bah! I need a vacation somewhere warm.', [new QuestLineStepCompletedRequirement('The Delta Episode', 4)], undefined, {
    displayName: 'Magma Admin Courtney',
    imageName: 'Magma Admin (courtney)',
});
TemporaryBattleList['Matt 1'] = new TemporaryBattle('Matt 1', [new GymPokemon('Sharpedo', 135000000, 53)], 'Hooaahhh! You clown! Always gettin\' all up in my business! If it\'s gonna be like that, I\'m outta here! The Southern Island\'s gotta be more fun than this.', [new QuestLineStepCompletedRequirement('The Delta Episode', 4)], undefined, {
    displayName: 'Aqua Admin Matt',
    imageName: 'Aqua Admin (matt)',
});
TemporaryBattleList['Zinnia 1'] = new TemporaryBattle('Zinnia 1', [
    new GymPokemon('Tyrantrum', 35437500, 53),
    new GymPokemon('Altaria', 35437500, 53),
    new GymPokemon('Salamence', 35437500, 53),
    new GymPokemon('Whismur', 35437500, 53),
], 'Niiice! Real nice! Ohhh, I really felt that one! Full points to you! That settles it! You get this Meteorite Shard as a reward!', [new QuestLineStepCompletedRequirement('The Delta Episode', 8)], undefined, {
    displayName: 'Zinnia',
    imageName: 'Zinnia',
});
TemporaryBattleList['Draconid Elder'] = new TemporaryBattle('Draconid Elder', [
    new GymPokemon('Dragonite', 37209375, 53),
    new GymPokemon('Flygon', 37209375, 53),
    new GymPokemon('Haxorus', 37209375, 53),
    new GymPokemon('Garchomp', 37209375, 53),
], 'You are indeed powerful. I think you can help Zinnia.', [new QuestLineStepCompletedRequirement('The Delta Episode', 15)], undefined, {
    displayName: 'Draconid Elder',
    imageName: 'Draconid Elder',
});
TemporaryBattleList['Aqua Grunt'] = new TemporaryBattle('Aqua Grunt', [
    new GymPokemon('Zubat', 35437500, 33),
    new GymPokemon('Grimer', 35437500, 33),
    new GymPokemon('Corphish', 35437500, 33),
    new GymPokemon('Carvanha', 35437500, 33),
], 'Baaah! I gotta get out of here!', [new QuestLineStepCompletedRequirement('The Delta Episode', 17)], undefined, {
    displayName: 'Aqua Grunt',
    imageName: 'Team Aqua Grunt (female)',
});
TemporaryBattleList['Magma Grunt'] = new TemporaryBattle('Magma Grunt', [
    new GymPokemon('Zubat', 35437500, 33),
    new GymPokemon('Koffing', 35437500, 33),
    new GymPokemon('Poochyena', 35437500, 33),
    new GymPokemon('Numel', 35437500, 33),
], 'The boss is gonna be so mad!', [new QuestLineStepCompletedRequirement('The Delta Episode', 17)], undefined, {
    displayName: 'Magma Grunt',
    imageName: 'Team Magma Grunt (male)',
});
TemporaryBattleList['Courtney 2'] = new TemporaryBattle('Courtney 2', [new GymPokemon('Mega Camerupt', 198102712, 55)], 'Why? Why must...you always...Always, always, always, always...Get in my way!', [new QuestLineStepCompletedRequirement('The Delta Episode', 18)], undefined, {
    displayName: 'Magma Admin Courtney',
    imageName: 'Magma Admin (courtney)',
});
TemporaryBattleList['Matt 2'] = new TemporaryBattle('Matt 2', [new GymPokemon('Mega Sharpedo', 198102712, 55)], 'Dang it! Am I not good enough, bro?!', [new QuestLineStepCompletedRequirement('The Delta Episode', 18)], undefined, {
    displayName: 'Aqua Admin Matt',
    imageName: 'Aqua Admin (matt)',
});
TemporaryBattleList['Delta Wallace'] = new TemporaryBattle('Delta Wallace', [
    new GymPokemon('Wailord', 36318830, 56),
    new GymPokemon('Tentacruel', 36318830, 56),
    new GymPokemon('Ludicolo', 36318830, 56),
    new GymPokemon('Whiscash', 36318830, 56),
    new GymPokemon('Gyarados', 36318830, 56),
    new GymPokemon('Milotic', 36318830, 56),
], 'Zinnia has gone to the top of the Sky Pillar to try to summon Rayquaza. Please, try to help her. This Key Stone may help you.', [new QuestLineStepCompletedRequirement('The Delta Episode', 25)], undefined, {
    displayName: 'Wallace',
    imageName: 'Wallace',
    firstTimeRewardFunction: () => {
        BagHandler.gainItem({ type: ItemType.item, id: 'Key_stone' }, 1);
        Notifier.notify({
            message: 'You were awarded a Key Stone from Wallace!',
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
        });
    },
});
TemporaryBattleList['Zinnia 2'] = new TemporaryBattle('Zinnia 2', [
    new GymPokemon('Goodra', 47940856, 60),
    new GymPokemon('Tyrantrum', 47940856, 60),
    new GymPokemon('Altaria', 47940856, 53),
    new GymPokemon('Noivern', 47940856, 53),
    new GymPokemon('Mega Salamence', 47940856, 53),
], 'I thought... But I\'m supposed to be the one who saves the world...', [new QuestLineStepCompletedRequirement('The Delta Episode', 26)], undefined, {
    displayName: 'Zinnia',
    imageName: 'Zinnia',
});
TemporaryBattleList.Deoxys = new TemporaryBattle('Deoxys', [new GymPokemon('Deoxys', 293674710, 100)], '<i>The Meteor disintegrates into thousands of pieces.</i>', [new QuestLineStepCompletedRequirement('The Delta Episode', 31)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/386',
});
TemporaryBattleList['Delta Giovanni'] = new TemporaryBattle('Delta Giovanni', [
    new GymPokemon('Golem', 39620542, 60),
    new GymPokemon('Nidoqueen', 39620542, 60),
    new GymPokemon('Nidoking', 39620542, 63),
    new GymPokemon('Cloyster', 39620542, 63),
    new GymPokemon('Mega Beedrill', 42620542, 63),
], 'Even here? Is there no getting rid of you? Take this and leave me alone. </br><img src="assets/images/megaStone/Beedrillite.png"/>', [new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 17), new ObtainedPokemonRequirement('Beedrill')])], undefined, {
    displayName: 'Giovanni',
    imageName: 'Team Rocket Boss Giovanni',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Beedrillite),
});
TemporaryBattleList['Mr. Stone'] = new TemporaryBattle('Mr. Stone', [
    new GymPokemon('Castform', 67500000, 60),
    new GymPokemon('Mega Pidgeot', 67500000, 63),
], 'You\'re really strong! You should take this, it might come in handy with all this meteor business.</br><img src="assets/images/megaStone/Pidgeotite.png"/>', [new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 6), new ObtainedPokemonRequirement('Pidgeot')])], undefined, {
    displayName: 'Mr. Stone',
    imageName: 'Mr Stone',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Pidgeotite),
});
TemporaryBattleList['Shoal Fisherman'] = new TemporaryBattle('Shoal Fisherman', [new GymPokemon('Mega Slowbro', 148837500, 63)], 'I found this neat rock while hunting for shells! You want it?</br><img src="assets/images/megaStone/Slowbronite.png"/>', [new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 6), new ObtainedPokemonRequirement('Slowbro')])], undefined, {
    displayName: 'Shoal Fisherman',
    imageName: 'Fisherman',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Slowbronite),
});
TemporaryBattleList['Delta Brock'] = new TemporaryBattle('Delta Brock', [
    new GymPokemon('Sudowoodo', 47250000, 63),
    new GymPokemon('Crobat', 47250000, 63),
    new GymPokemon('Mega Steelix', 47250000, 63),
], 'Seems like you\'ve gotten really strong since Kanto! I found this neat rock in the cave, you should keep it.</br><img src="assets/images/megaStone/Steelixite.png"/>', [new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 9), new ObtainedPokemonRequirement('Steelix')])], undefined, {
    displayName: 'Brock',
    imageName: 'Brock',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Steelixite),
});
TemporaryBattleList['Delta Tabitha'] = new TemporaryBattle('Delta Tabitha', [new GymPokemon('Mega Camerupt', 217912983, 63)], 'I guess you\'ve earned this Cameruptite. Make sure your Camerupt holds on to it tightly.</br><img src="assets/images/megaStone/Cameruptite.png"/>', [new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 26), new ObtainedPokemonRequirement('Camerupt')])], undefined, {
    displayName: 'Magma Admin Tabitha',
    imageName: 'Magma Admin',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Cameruptite),
});
TemporaryBattleList['Delta Shelly'] = new TemporaryBattle('Delta Shelly', [new GymPokemon('Mega Sharpedo', 217912983, 63)], 'Fine you win. Take this Sharpedonite. Make sure your Sharpedo holds on to it tightly.</br><img src="assets/images/megaStone/Sharpedonite.png"/>', [new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 26), new ObtainedPokemonRequirement('Sharpedo')])], undefined, {
    displayName: 'Aqua Admin Shelly',
    imageName: 'Aqua Admin (shelly)',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Sharpedonite),
});
TemporaryBattleList['Icy Boulder'] = new TemporaryBattle('Icy Boulder', [new GymPokemon('Mega Glalie', 141750000, 66)], '<i>The Glalie flees, dropping a stone.</i></br><img src="assets/images/megaStone/Glalitite.png"/>', [new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 4), new ObtainedPokemonRequirement('Glalie')])], undefined, {
    displayName: 'Icy Boulder',
    imageName: '../pokemon/362.01',
    hideTrainer: true,
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Glalitite),
});
TemporaryBattleList['Mega Draconid Elder'] = new TemporaryBattle('Mega Draconid Elder', [
    new GymPokemon('Dragonite', 37209375, 53),
    new GymPokemon('Flygon', 37209375, 53),
    new GymPokemon('Haxorus', 37209375, 53),
    new GymPokemon('Garchomp', 37209375, 53),
    new GymPokemon('Mega Salamence', 114837210, 70),
], 'You truly are a master of dragons. Please, take this stone.</br><img src="assets/images/megaStone/Salamencite.png"/>', [new MultiRequirement([new QuestLineCompletedRequirement('The Delta Episode'), new ObtainedPokemonRequirement('Salamence')])], undefined, {
    displayName: 'Draconid Elder',
    imageName: 'Draconid Elder',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Salamencite),
});
TemporaryBattleList['Delta Steven'] = new TemporaryBattle('Delta Steven', [
    new GymPokemon('Skarmory', 33017118, 57),
    new GymPokemon('Aggron', 33017118, 57),
    new GymPokemon('Claydol', 33017118, 57),
    new GymPokemon('Cradily', 33017118, 57),
    new GymPokemon('Armaldo', 33017118, 57),
    new GymPokemon('Mega Metagross', 36017118, 63),
], 'I have to admit, you keep surprising me! You deserve to have this.</br><img src="assets/images/megaStone/Metagrossite.png"/>', [new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 23), new ObtainedPokemonRequirement('Metagross')])], undefined, {
    displayName: 'Steven',
    imageName: 'Steven',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Metagrossite),
});
TemporaryBattleList['Dr Cozmo'] = new TemporaryBattle('Dr Cozmo', [
    new GymPokemon('Lunatone', 79901427, 57),
    new GymPokemon('Solrock', 79901427, 57),
    new GymPokemon('Mega Gallade', 79901427, 63),
], 'That was invigorating! Please take this!</br><img src="assets/images/megaStone/Galladite.png"/>', [new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 27), new ObtainedPokemonRequirement('Gallade')])], undefined, {
    displayName: 'Dr. Cozmo',
    imageName: 'Dr Cozmo',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Galladite),
});
TemporaryBattleList['Matt 3'] = new TemporaryBattle('Matt 3', [
    new GymPokemon('Grimer', 70875000, 57),
    new GymPokemon('Sharpedo', 70875000, 63),
], '<i>The Latias that Matt was harassing flies away, leaving a stone behind.</i></br><img src="assets/images/megaStone/Latiasite.png"/>', [new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 5), new ObtainedPokemonRequirement('Latias')])], undefined, {
    displayName: 'Aqua Admin Matt',
    imageName: 'Aqua Admin (matt)',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Latiasite),
});
TemporaryBattleList['Courtney 3'] = new TemporaryBattle('Courtney 3', [
    new GymPokemon('Koffing', 70875000, 57),
    new GymPokemon('Camerupt', 70875000, 63),
], '<i>The Latios that Courtney was harassing flies away, leaving a stone behind.</i></br><img src="assets/images/megaStone/Latiosite.png"/>', [new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 5), new ObtainedPokemonRequirement('Latios')])], undefined, {
    displayName: 'Magma Admin Courtney',
    imageName: 'Magma Admin (courtney)',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Latiosite),
});
TemporaryBattleList['Hoenn Stone Salesman'] = new TemporaryBattle('Hoenn Stone Salesman', [
    new GymPokemon('Mega Sceptile', 72637661, 63),
    new GymPokemon('Mega Blaziken', 72637661, 63),
    new GymPokemon('Mega Swampert', 72637661, 63),
], 'Wow! I\'ll let you buy some of my super fancy stones, now that I know you\'re a serious trainer!', [new QuestLineStepCompletedRequirement('The Delta Episode', 5)], undefined, {
    imageName: 'Ruin Maniac gen3',
    firstTimeRewardFunction: () => {
        if ((App.game.party.alreadyCaughtPokemonByName('Sceptile') == true) && (player.regionStarters[GameConstants.Region.hoenn]() == GameConstants.Starter.Grass)) {
            player.gainMegaStone(GameConstants.MegaStoneType.Sceptilite);
            Notifier.notify({
                message: 'You were awarded Sceptilite!',
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
            });
        }
        else if ((App.game.party.alreadyCaughtPokemonByName('Blaziken') == true) && (player.regionStarters[GameConstants.Region.hoenn]() == GameConstants.Starter.Fire)) {
            player.gainMegaStone(GameConstants.MegaStoneType.Blazikenite);
            Notifier.notify({
                message: 'You were awarded Blazikenite!',
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
            });
        }
        else if ((App.game.party.alreadyCaughtPokemonByName('Swampert') == true) && (player.regionStarters[GameConstants.Region.hoenn]() == GameConstants.Starter.Water)) {
            player.gainMegaStone(GameConstants.MegaStoneType.Swampertite);
            Notifier.notify({
                message: 'You were awarded Swampertite!',
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
            });
        }
        else {
            BagHandler.gainItem({ type: ItemType.item, id: 'Key_stone' }, 1);
            Notifier.notify({
                message: 'You were awarded a Key Stone!',
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
            });
        }
    },
});
TemporaryBattleList['Kalos Stone Salesman'] = new TemporaryBattle('Kalos Stone Salesman', [
    new GymPokemon('Mega Venusaur', 54478245, 63),
    new GymPokemon('Mega Charizard X', 54478245, 63),
    new GymPokemon('Mega Charizard Y', 54478245, 63),
    new GymPokemon('Mega Blastoise', 54478245, 63),
], 'Wow! I\'ll let you buy some of my super fancy stones, now that I know you\'re a serious trainer!', [new QuestLineStepCompletedRequirement('A Beautiful World', 12)], undefined, {
    imageName: 'Owner',
    firstTimeRewardFunction: () => {
        if ((App.game.party.alreadyCaughtPokemonByName('Venusaur')) && (player.regionStarters[GameConstants.Region.kanto]() == GameConstants.Starter.Grass)) {
            player.gainMegaStone(GameConstants.MegaStoneType.Venusaurite);
            Notifier.notify({
                message: 'You were awarded Venusaurite!',
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
            });
        }
        else if ((App.game.party.alreadyCaughtPokemonByName('Charizard')) && (player.regionStarters[GameConstants.Region.kanto]() == GameConstants.Starter.Fire)) {
            player.gainMegaStone(GameConstants.MegaStoneType.Charizardite_Y);
            Notifier.notify({
                message: 'You were awarded Charizardite Y!',
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
            });
        }
        else if ((App.game.party.alreadyCaughtPokemonByName('Blastoise')) && (player.regionStarters[GameConstants.Region.kanto]() == GameConstants.Starter.Water)) {
            player.gainMegaStone(GameConstants.MegaStoneType.Blastoisinite);
            Notifier.notify({
                message: 'You were awarded Blastoisinite!',
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
            });
        }
        else {
            BagHandler.gainItem({ type: ItemType.item, id: 'Key_stone' }, 1);
            Notifier.notify({
                message: 'You were awarded a Key Stone!',
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.Dungeons.rare_dungeon_item_found,
            });
        }
    },
});
TemporaryBattleList['Captain Stern'] = new TemporaryBattle('Captain Stern', [new GymPokemon('Sealeo', 217912983, 59)], 'Well I\'ll be! You\'re quite the trainer!', [new QuestLineStepCompletedRequirement('Primal Reversion', 4)], undefined, {
    displayName: 'Captain Stern',
    imageName: '../npcs/Sailor',
});
TemporaryBattleList['Archie Primal'] = new TemporaryBattle('Archie Primal', [
    new GymPokemon('Mightyena', 59926070, 60),
    new GymPokemon('Crobat', 59926070, 60),
    new GymPokemon('Muk', 59926070, 60),
    new GymPokemon('Sharpedo', 59926070, 60),
], 'You\'re too late, $playername$! I have uncovered the secrets of the Blue Orb, despite Maxie\'s meddling!', [new QuestLineStepCompletedRequirement('Primal Reversion', 9)], undefined, {
    displayName: 'Archie',
    imageName: '../npcs/Aqua Leader',
});
TemporaryBattleList['Maxie Primal'] = new TemporaryBattle('Maxie Primal', [
    new GymPokemon('Mightyena', 59926070, 60),
    new GymPokemon('Crobat', 59926070, 60),
    new GymPokemon('Weezing', 59926070, 60),
    new GymPokemon('Camerupt', 59926070, 60),
], 'You\'re too late, $playername$! I have uncovered the secrets of the Red Orb, despite Archie\'s meddling!', [new QuestLineStepCompletedRequirement('Primal Reversion', 9)], undefined, {
    displayName: 'Maxie',
    imageName: '../npcs/Magma Leader',
});
TemporaryBattleList['Primal Groudon'] = new TemporaryBattle('Primal Groudon', [new GymPokemon('Primal Groudon', 293674710, 100)], '<i>Primal Groudon lets out a terrifying roar, then drops the Red Orb and returns to its normal form.</i></br><img src="assets/images/megaStone/Red_Orb.png"/>', [new MultiRequirement([new QuestLineStepCompletedRequirement('Primal Reversion', 14), new WeatherRequirement([WeatherType.Harsh_Sunlight])])], undefined, {
    hideTrainer: true,
    returnTown: 'Mt. Pyre',
    imageName: '../pokemon/383.01',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Red_Orb),
});
TemporaryBattleList['Primal Kyogre'] = new TemporaryBattle('Primal Kyogre', [new GymPokemon('Primal Kyogre', 293674710, 100)], '<i>Primal Kyogre lets out a terrifying roar, then drops the Blue Orb and returns to its normal form.</i></br><img src="assets/images/megaStone/Blue_Orb.png"/>', [new MultiRequirement([new QuestLineStepCompletedRequirement('Primal Reversion', 14), new WeatherRequirement([WeatherType.Rain])])], undefined, {
    hideTrainer: true,
    returnTown: 'Mt. Pyre',
    imageName: '../pokemon/382.01',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Blue_Orb),
});
TemporaryBattleList['Aipom Alley'] = new TemporaryBattle('Aipom Alley', [
    new GymPokemon('Aipom', 31200000, 66),
    new GymPokemon('Aipom', 31200000, 66),
    new GymPokemon('Aipom', 31200000, 66),
    new GymPokemon('Aipom', 31200000, 66),
    new GymPokemon('Aipom', 31200000, 66),
], '<i>The Aipoms run off, dropping a small glass vial.</i>', [new QuestLineStepCompletedRequirement('Detective Pikachu', 0)], undefined, {
    hideTrainer: true,
    imageName: 'specialNPCs/Aipom Alley',
});
TemporaryBattleList['Mime Interview'] = new TemporaryBattle('Mime Interview', [new GymPokemon('Mr. Mime', 160225334, 100)], '<i>Mr. Mime relents and agrees to tell you what he knows.</i>', [new QuestLineStepCompletedRequirement('Detective Pikachu', 3)], undefined, {
    hideTrainer: true,
    imageName: 'specialNPCs/Mime Interview',
});
TemporaryBattleList['Underground Fighting Ring'] = new TemporaryBattle('Underground Fighting Ring', [
    new GymPokemon('Charizard', 83224411, 70),
    new GymPokemon('Magikarp', 10, 70),
    new GymPokemon('Gyarados', 85658821, 70),
], 'OK, OK! I get my R from a guy at Clifford Industries, in Goldenrod City.', [new QuestLineStepCompletedRequirement('Detective Pikachu', 5)], undefined, { imageName: 'Veteran (male)' });
TemporaryBattleList['Lab Ambush'] = new TemporaryBattle('Lab Ambush', [
    new GymPokemon('Greninja', 58333333, 70),
    new GymPokemon('Greninja', 58333333, 70),
    new GymPokemon('Greninja', 58333333, 70),
], '<i>As the dust clears from the battle, you see that Detective Pikachu has been wounded!</i>', [new QuestLineStepCompletedRequirement('Detective Pikachu', 9)], undefined, {
    hideTrainer: true,
    imageName: 'specialNPCs/Lab Ambush',
});
TemporaryBattleList.Imposter = new TemporaryBattle('Imposter', [new GymPokemon('Ditto', 186753099, 100)], '<i>The Ditto loses its human form and collapses to the floor.</i>', [new QuestLineStepCompletedRequirement('Detective Pikachu', 12)], undefined, {
    hideTrainer: true,
    imageName: 'Office Worker (male)',
});
TemporaryBattleList['Possessed Mewtwo'] = new TemporaryBattle('Possessed Mewtwo', [new GymPokemon('Mewtwo', 214456599, 100)], '<i>Howard\'s headset sparks and breaks. Mewtwo calms down, apparently free from Howard\'s influence. Mewtwo gives you a brief nod and flies off.</i>', [new QuestLineStepCompletedRequirement('Detective Pikachu', 14)], undefined, {
    hideTrainer: true,
    imageName: 'specialNPCs/Possessed Mewtwo',
});
TemporaryBattleList.Riot = new TemporaryBattle('Riot', [
    new GymPokemon('Ninjask', 136471274, 70),
    new GymPokemon('Ninjask', 136471274, 70),
    new GymPokemon('Greninja', 140718837, 70),
], 'Curse you! Diancie has escaped!', [new QuestLineStepCompletedRequirement('Princess Diancie', 0)]);
TemporaryBattleList.Merilyn = new TemporaryBattle('Merilyn', [
    new GymPokemon('Yanma', 207131881, 80),
    new GymPokemon('Delphox', 212229898, 80),
], 'You ruined my shopping spree!', [new QuestLineStepCompletedRequirement('Princess Diancie', 1)]);
TemporaryBattleList['Millis and Argus Steel'] = new TemporaryBattle('Millis and Argus Steel', [
    new GymPokemon('Honedge', 107376526, 70),
    new GymPokemon('Doublade', 110485698, 70),
    new GymPokemon('Aegislash (Blade)', 110510597, 70),
    new GymPokemon('Chesnaught', 111743528, 70),
], 'Our plans are ruined! Retreat!', [new QuestLineStepCompletedRequirement('Princess Diancie', 3)]);
TemporaryBattleList['Rampaging Yveltal'] = new TemporaryBattle('Rampaging Yveltal', [new GymPokemon('Yveltal', 446974112, 80)], '<i>Diancie fights alongside you, Mega Evolving to land the final blow! She hands you her Mega Stone after the fight.</i></br><img src="assets/images/megaStone/Diancite.png"/></br>', [new QuestLineStepCompletedRequirement('Princess Diancie', 8)], undefined, {
    displayName: 'Rampaging Yveltal',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Diancite),
    imageName: '../pokemon/717',
    hideTrainer: true,
    returnTown: 'Shalour City',
});
TemporaryBattleList['Hoopa 1'] = new TemporaryBattle('Hoopa 1', [new GymPokemon('Lugia', 446974112, 80)], '<i>The Unbound Hoopa casts you through a ring to a faraway land, escaping for now.</i>', [new QuestLineStepCompletedRequirement('Clash of Ages', 7)], undefined, {
    displayName: 'Unbound Hoopa',
    imageName: '../pokemon/720.01',
    hideTrainer: true,
    returnTown: 'Shalour City',
});
TemporaryBattleList['Hoopa 2'] = new TemporaryBattle('Hoopa 2', [
    new GymPokemon('Rayquaza', 163890507, 80),
    new GymPokemon('Latias', 163890507, 80),
    new GymPokemon('Latios', 163890507, 80),
], '<i>The Unbound Hoopa casts you through a ring to a faraway land, escaping for now.</i>', [new QuestLineStepCompletedRequirement('Clash of Ages', 8)], undefined, {
    displayName: 'Unbound Hoopa',
    imageName: '../pokemon/720.01',
    hideTrainer: true,
    returnTown: 'Lumiose City',
});
TemporaryBattleList['Hoopa 3'] = new TemporaryBattle('Hoopa 3', [
    new GymPokemon('Primal Groudon', 107273786, 80),
    new GymPokemon('Primal Kyogre', 107273786, 80),
    new GymPokemon('Kyurem', 107273786, 80),
    new GymPokemon('Dialga', 107273786, 80),
    new GymPokemon('Palkia', 107273786, 80),
], '<i>The Unbound Hoopa casts you through a ring to a faraway land, escaping for now.</i>', [new QuestLineStepCompletedRequirement('Clash of Ages', 9)], undefined, {
    displayName: 'Unbound Hoopa',
    imageName: '../pokemon/720.01',
    hideTrainer: true,
    returnTown: 'Anistar City',
});
TemporaryBattleList['Hoopa 4'] = new TemporaryBattle('Hoopa 4', [
    new GymPokemon('Mega Rayquaza', 193688781, 80),
    new GymPokemon('Mega Latias', 193688781, 80),
    new GymPokemon('Mega Latios', 193688781, 80),
], '<i>The Unbound Hoopa casts you through a ring to a faraway land, escaping for now.</i>', [new QuestLineStepCompletedRequirement('Clash of Ages', 10)], undefined, {
    displayName: 'Unbound Hoopa',
    imageName: '../pokemon/720.01',
    hideTrainer: true,
    returnTown: 'Laverre City',
});
TemporaryBattleList['Hoopa 5'] = new TemporaryBattle('Hoopa 5', [
    new GymPokemon('Kyurem (Black)', 312881878, 80),
    new GymPokemon('Kyurem (White)', 312881878, 80),
], '<i>The Unbound Hoopa casts you through a ring to a faraway land, escaping for now.</i>', [new QuestLineStepCompletedRequirement('Clash of Ages', 11)], undefined, {
    displayName: 'Unbound Hoopa',
    imageName: '../pokemon/720.01',
    hideTrainer: true,
    returnTown: 'Vaniville Town',
});
TemporaryBattleList['Hoopa 6'] = new TemporaryBattle('Hoopa 6', [new GymPokemon('Hoopa (Unbound)', 670461168, 80)], '<i>The Unbound Hoopa is sucked into the Prison Bottle, and you gain control of it.</i>', [new QuestLineStepCompletedRequirement('Clash of Ages', 12)], undefined, {
    displayName: 'Unbound Hoopa',
    imageName: '../pokemon/720.01',
    hideTrainer: true,
    returnTown: 'Kiloude City',
    firstTimeRewardFunction: () => {
        App.game.party.gainPokemonByName('Hoopa (Unbound)', PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_REWARD));
    },
});
TemporaryBattleList['Calem 2'] = new TemporaryBattle('Calem 2', [
    new GymPokemon('Meowstic', 52417332, 31),
    new GymPokemon('Absol', 52417332, 31),
    new GymPokemon('Braixen', 54231360, 33, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Grass)),
    new GymPokemon('Frogadier', 54231360, 33, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Fire)),
    new GymPokemon('Quilladin', 54231360, 33, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Water)),
], 'Oof. I\'d kind of forgotten how strong you are.', [new RouteKillRequirement(10, GameConstants.Region.kalos, 12)], undefined, {
    displayName: 'Pokémon Trainer Calem',
    returnTown: 'Coumarine City',
    imageName: 'Calem',
});
TemporaryBattleList['Calem 3'] = new TemporaryBattle('Calem 3', [
    new GymPokemon('Meowstic', 65491998, 35),
    new GymPokemon('Absol', 65491998, 35),
    new GymPokemon('Delphox', 67476604, 37, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Grass)),
    new GymPokemon('Greninja', 67476604, 37, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Fire)),
    new GymPokemon('Chesnaught', 67476604, 37, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Water)),
], 'Battling with you is fun, but losing all the time doesn\'t really make me look all that good.', [new QuestLineStepCompletedRequirement('A Beautiful World', 13)], undefined, {
    displayName: 'Pokémon Trainer Calem',
    returnTown: 'Lumiose City',
    imageName: 'Calem',
});
TemporaryBattleList['Calem 4'] = new TemporaryBattle('Calem 4', [
    new GymPokemon('Meowstic', 60349527, 44),
    new GymPokemon('Absol', 60349527, 44),
    new GymPokemon('Jolteon', 61391150, 44, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Grass)),
    new GymPokemon('Flareon', 61391150, 44, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Fire)),
    new GymPokemon('Vaporeon', 61391150, 44, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Water)),
    new GymPokemon('Delphox', 63846796, 46, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Grass)),
    new GymPokemon('Greninja', 63846796, 46, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Fire)),
    new GymPokemon('Chesnaught', 63846796, 46, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Water)),
], 'Why am I still playing catch-up to you?!', [new RouteKillRequirement(10, GameConstants.Region.kalos, 17)], undefined, {
    displayName: 'Pokémon Trainer Calem',
    returnTown: 'Anistar City',
    imageName: 'Calem',
});
TemporaryBattleList['Team Flare Lysandre 1'] = new TemporaryBattle('Team Flare Lysandre 1', [
    new GymPokemon('Mienfoo', 66360070, 45),
    new GymPokemon('Murkrow', 66360070, 45),
    new GymPokemon('Pyroar', 67714357, 47),
    new GymPokemon('Gyarados', 69068644, 49),
], 'Excellent! I can feel the fire of your convictions burning deep within your heart! I tried to save people--and the world--with the profit from this lab. But my efforts had no effect... This world will eventually reach the point of no return... Saving the lives of all is impossible. Only the chosen ones will obtain a ticket to tomorrow. Do you want to have a ticket? Or, do you want to stop me? Show me in battle!', [new QuestLineStepCompletedRequirement('A Beautiful World', 20)], undefined, {
    displayName: 'Team Flare Lysandre',
    imageName: 'Team Flare Lysandre',
});
TemporaryBattleList['Team Flare Xerosic'] = new TemporaryBattle('Team Flare Xerosic', [
    new GymPokemon('Crobat', 128657279, 46),
    new GymPokemon('Malamar', 131365853, 48),
], 'Oh ho ho! You\'re wonderful! Your Pokémon are amazing.', [new QuestLineStepCompletedRequirement('A Beautiful World', 22)], undefined, {
    displayName: 'Team Flare Xerosic',
    imageName: 'Team Flare Xerosic',
});
TemporaryBattleList.Xerneas = new TemporaryBattle('Xerneas', [new GymPokemon('Xerneas (Active)', 281500000, 50)], 'You calmed down Xerneas and it ran away to the back of the lab.', [new QuestLineStepCompletedRequirement('A Beautiful World', 30)], undefined, {
    displayName: 'Xerneas',
    imageName: '../pokemon/716',
    hideTrainer: true,
});
TemporaryBattleList.Yveltal = new TemporaryBattle('Yveltal', [new GymPokemon('Yveltal', 281500000, 50)], 'You calmed down Yveltal and it ran away to the back of the lab.', [new QuestLineStepCompletedRequirement('A Beautiful World', 30)], undefined, {
    displayName: 'Yveltal',
    imageName: '../pokemon/717',
    hideTrainer: true,
});
TemporaryBattleList['Team Flare Boss Lysandre 1'] = new TemporaryBattle('Team Flare Boss Lysandre 1', [
    new GymPokemon('Mienshao', 68927443, 49),
    new GymPokemon('Honchkrow', 68927443, 49),
    new GymPokemon('Pyroar', 70334126, 51),
    new GymPokemon('Mega Gyarados', 71740808, 53),
], 'It\'s over... Fools with no vision will continue to befoul this beautiful world. They will go on until the only thing left to do is squabble over the remaining scraps of hope...', [new QuestLineStepCompletedRequirement('A Beautiful World', 32)], undefined, {
    displayName: 'Team Flare Boss Lysandre',
    imageName: 'Team Flare Boss Lysandre',
});
TemporaryBattleList['Sycamore 2'] = new TemporaryBattle('Sycamore 2', [
    new GymPokemon('Venusaur', 88799088, 50),
    new GymPokemon('Charizard', 88799088, 50),
    new GymPokemon('Blastoise', 88799088, 50),
], 'You are really something! You and your Pokémon have developed strong bonds by spending time together and by caring about one another. That\'s why you and your Pokémon are so strong.', [new RouteKillRequirement(10, GameConstants.Region.kalos, 18)], undefined, {
    displayName: 'Pokémon Professor Sycamore',
    imageName: 'Sycamore',
});
TemporaryBattleList['Shauna 2'] = new TemporaryBattle('Shauna 2', [
    new GymPokemon('Delcatty', 91718405, 49),
    new GymPokemon('Goodra', 91718405, 49),
    new GymPokemon('Greninja', 94497751, 51, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Grass)),
    new GymPokemon('Chesnaught', 94497751, 51, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Fire)),
    new GymPokemon('Delphox', 94497751, 51, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Water)),
], 'Battles with friends are really, really exciting!', [new RouteKillRequirement(10, GameConstants.Region.kalos, 19)], undefined, {
    displayName: 'Pokémon Trainer Shauna',
    returnTown: 'Couriway Town',
    imageName: 'Shauna',
});
TemporaryBattleList['Tierno 2'] = new TemporaryBattle('Tierno 2', [
    new GymPokemon('Talonflame', 91601632, 48),
    new GymPokemon('Roserade', 91718405, 49),
    new GymPokemon('Crawdaunt', 94618062, 52),
], 'It\'s weird, but… I don\'t get that down when I lose to you.', [new TemporaryBattleRequirement('Shauna 2')], undefined, {
    displayName: 'Pokémon Trainer Tierno',
    returnTown: 'Couriway Town',
    imageName: 'Tierno',
});
TemporaryBattleList.Trevor = new TemporaryBattle('Trevor', [
    new GymPokemon('Raichu', 91718405, 49),
    new GymPokemon('Aerodactyl', 91718405, 49),
    new GymPokemon('Florges (Orange)', 94858684, 51),
], 'There is still so much I don\'t know. Do I just not have what it takes?', [new TemporaryBattleRequirement('Tierno 2')], undefined, {
    displayName: 'Pokémon Trainer Trevor',
    returnTown: 'Couriway Town',
});
TemporaryBattleList['Calem 5'] = new TemporaryBattle('Calem 5', [
    new GymPokemon('Meowstic', 67294391, 57),
    new GymPokemon('Jolteon', 67294391, 57, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Grass)),
    new GymPokemon('Flareon', 67294391, 57, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Fire)),
    new GymPokemon('Vaporeon', 67294391, 57, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Water)),
    new GymPokemon('Altaria', 67294391, 58),
    new GymPokemon('Absol', 71149798, 59),
    new GymPokemon('Delphox', 76407173, 61, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Grass)),
    new GymPokemon('Greninja', 76407173, 61, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Fire)),
    new GymPokemon('Chesnaught', 76407173, 61, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Water)),
], 'I\'m still no match for you... You know, it\'s because I met you that I was able to get this far... But our journey\'s just getting started. Who knows what heights we\'ll reach!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Kalos'))], undefined, {
    displayName: 'Pokémon Trainer Calem',
    returnTown: 'Victory Road Kalos',
    imageName: 'Calem',
});
TemporaryBattleList.AZ = new TemporaryBattle('AZ', [
    new GymPokemon('Torkoal', 153757520, 60),
    new GymPokemon('Golurk', 153757520, 60),
    new GymPokemon('Sigilyph', 153757520, 60),
], 'Thank you very much for battling with me. Now I finally feel free…', [new QuestLineStepCompletedRequirement('A Beautiful World', 34)], undefined, {
    displayName: 'Pokémon Trainer AZ',
});
TemporaryBattleList['Ash Ketchum Kanto'] = new TemporaryBattle('Ash Ketchum Kanto', [
    new GymPokemon('Pikachu (Partner Cap)', 123551, 58),
    new GymPokemon('Pidgeot', 122352, 56),
    new GymPokemon('Muk', 122352, 56),
    new GymPokemon('Bulbasaur', 122352, 60),
    new GymPokemon('Squirtle', 122352, 60),
    new GymPokemon('Charizard', 124751, 62),
], 'That was a fun battle!', [new GymBadgeRequirement(BadgeEnums.Elite_KantoChampion)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Pallet Town',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Ash Ketchum Johto'] = new TemporaryBattle('Ash Ketchum Johto', [
    new GymPokemon('Pikachu (Partner Cap)', 544557, 58),
    new GymPokemon('Heracross', 540067, 56),
    new GymPokemon('Noctowl', 540067, 56, undefined, true),
    new GymPokemon('Bayleef', 540067, 60),
    new GymPokemon('Cyndaquil', 540067, 62),
    new GymPokemon('Totodile', 540067, 62),
], 'Don\'t I know you from somewhere?', [new TemporaryBattleRequirement('Ash Ketchum Kanto'), new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion), new RouteKillRequirement(10, GameConstants.Region.johto, 48)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Cianwood City',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Ash Ketchum Hoenn'] = new TemporaryBattle('Ash Ketchum Hoenn', [
    new GymPokemon('Pikachu (Partner Cap)', 2426336, 58),
    new GymPokemon('Swellow', 2402780, 56),
    new GymPokemon('Torkoal', 2402780, 56),
    new GymPokemon('Glalie', 2402780, 60),
    new GymPokemon('Corphish', 2402780, 62),
    new GymPokemon('Grovyle', 2449893, 62),
], 'That was a nice rematch. You sure are a strong Pokémon trainer! I\'ll beat you next time!', [new TemporaryBattleRequirement('Ash Ketchum Johto'), new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Lilycove City',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Ash Ketchum Sinnoh'] = new TemporaryBattle('Ash Ketchum Sinnoh', [
    new GymPokemon('Pikachu (Partner Cap)', 7170362, 58),
    new GymPokemon('Staraptor', 7100747, 56),
    new GymPokemon('Gible', 7100747, 60),
    new GymPokemon('Torterra', 7100747, 56),
    new GymPokemon('Buizel', 7100747, 62),
    new GymPokemon('Infernape', 7239977, 62),
], 'Wow, these battles are intense. It\'s getting hard to keep up with you... I think I need a break.', [new TemporaryBattleRequirement('Ash Ketchum Hoenn'), new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion), new RouteKillRequirement(10, GameConstants.Region.sinnoh, 226)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Survival Area',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Ash Ketchum Unova'] = new TemporaryBattle('Ash Ketchum Unova', [
    new GymPokemon('Pikachu (Partner Cap)', 26397028, 58),
    new GymPokemon('Unfezant', 26140747, 56),
    new GymPokemon('Snivy', 26140747, 62),
    new GymPokemon('Pignite', 26140747, 60),
    new GymPokemon('Oshawott', 26140747, 56),
    new GymPokemon('Krookodile', 26653310, 62),
], 'Hey, what gives? I was just trying to relax here!', [new TemporaryBattleRequirement('Ash Ketchum Sinnoh'), new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Mistralton City',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Ash Ketchum Kalos'] = new TemporaryBattle('Ash Ketchum Kalos', [
    new GymPokemon('Pikachu (Partner Cap)', 85803654, 58),
    new GymPokemon('Talonflame', 84970609, 56),
    new GymPokemon('Hawlucha', 84970609, 56),
    new GymPokemon('Goodra', 84970609, 60),
    new GymPokemon('Noivern', 84970609, 62),
    new GymPokemon('Ash-Greninja', 86636699, 62),
], 'I forgive you for chasing me around. I\'m going to take some time off with a long vacation on a tropical island! Before I go, though, I\'m gonna release Greninja. I think it\'s best for him to have experiences with other trainers. If you want to see if that could be you, he\'ll be roaming the region.', [new TemporaryBattleRequirement('Ash Ketchum Unova'), new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Kiloude City',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Ash Ketchum Pinkan'] = new TemporaryBattle('Ash Ketchum Pinkan', [
    new GymPokemon('Pinkan Pikachu', 1930220, 58),
    new GymPokemon('Snorlax', 1911480, 56),
    new GymPokemon('Lapras', 1911480, 56),
    new GymPokemon('Kingler', 1911480, 60),
    new GymPokemon('Tauros', 1911480, 62),
    new GymPokemon('Charizard', 1948960, 62),
], 'Hey, you found me on my vacation! Did you see my Pikachu? Looks like it ate some of the berries here. Maybe you can find some other Pikachu like it hiding around here?', [new TemporaryBattleRequirement('Ash Ketchum Hoenn'), new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pinkan Mountain'))], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Pinkan Mountain',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Calem 6'] = new TemporaryBattle('Calem 6', [
    new GymPokemon('Meowstic', 94468205, 66),
    new GymPokemon('Clefable', 94468205, 68),
    new GymPokemon('Jolteon', 99137044, 66, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Grass)),
    new GymPokemon('Flareon', 99137044, 66, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Fire)),
    new GymPokemon('Vaporeon', 99137044, 66, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Water)),
    new GymPokemon('Altaria', 94468205, 67),
    new GymPokemon('Delphox', 105685546, 70, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Grass)),
    new GymPokemon('Greninja', 105685546, 70, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Fire)),
    new GymPokemon('Chesnaught', 105685546, 70, new StarterRequirement(GameConstants.Region.kalos, GameConstants.Starter.Water)),
    new GymPokemon('Mega Absol', 118054939, 68),
], 'Here, this is for you!</br><img src="assets/images/megaStone/Absolite.png"/></br>That\'s right. It\'s Absolite. I found two of them. After everything we said to Lysandre, it just wouldn\'t be right if I didn\'t share one with you.', [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion), new ObtainedPokemonRequirement('Absol')], [new NullRequirement], {
    displayName: 'Pokémon Trainer Calem',
    imageName: 'Calem',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Absolite),
    rewardFunction: () => Notifier.notify({ message: 'Congratulations on beating Calem at his best! Come back to fight him again at any time.' }),
});
TemporaryBattleList.Twerps = new TemporaryBattle('Twerps', [
    new GymPokemon('Meowth', 40271251, 49),
    new GymPokemon('Pumpkaboo (Super Size)', 40271251, 49),
    new GymPokemon('Inkay (Pikachu)', 40271251, 51),
], 'What do you mean "how is Pikachu floating?", all Pikachu can float! Because, uh... electromagnetism!', [new RouteKillRequirement(10, GameConstants.Region.kalos, 10)], undefined, {
    displayName: 'Twerps?',
});
TemporaryBattleList['Marquis Grant'] = new TemporaryBattle('Marquis Grant', [
    new GymPokemon('Aurorus', 152318215, 80),
    new GymPokemon('Tyrantrum', 152318215, 80),
    new GymPokemon('Mega Tyranitar', 166650000, 80),
], 'To commemorate such an impressive show of teamwork, please accept this gift!</br><img src="assets/images/megaStone/Tyranitarite.png"/></br>', [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion), new ClearGymRequirement(2000, GameConstants.getGymIndex('Cyllage City')), new ObtainedPokemonRequirement('Tyranitar')], undefined, {
    displayName: 'Marquis Grant',
    imageName: 'Grant',
    firstTimeRewardFunction: () => [player.gainMegaStone(GameConstants.MegaStoneType.Tyranitarite)],
});
TemporaryBattleList['Grand Duchess Diantha'] = new TemporaryBattle('Grand Duchess Diantha', [
    new GymPokemon('Hawlucha', 110668215, 80),
    new GymPokemon('Gourgeist (Average)', 115668215, 80),
    new GymPokemon('Goodra', 120770015, 80),
    new GymPokemon('Mega Gardevoir', 125000000, 80),
], 'Witnessing the noble spirits of you and your Pokémon in battle has really touched my heart... Please, take this Gardevoirite.</br><img src="assets/images/megaStone/Gardevoirite.png"/></br>I just... I just don\'t know what to say... I can hardly express this feeling...', [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion), new ObtainedPokemonRequirement('Gardevoir')], undefined, {
    displayName: 'Grand Duchess Diantha',
    imageName: 'Diantha',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Gardevoirite),
});
TemporaryBattleList['Team Flare Boss Lysandre 2'] = new TemporaryBattle('Team Flare Boss Lysandre 2', [
    new GymPokemon('Mienshao', 127138249, 79),
    new GymPokemon('Honchkrow', 127138249, 79),
    new GymPokemon('Pyroar', 124595484, 81),
    new GymPokemon('Mega Gyarados', 129681014, 83),
], 'I see the strength to protect within you... Hopefully you can do a better job than me and protect a tomorrow that will be better than today. Take this Gyaradosite.</br><img src="assets/images/megaStone/Gyaradosite.png"/></br>', [new QuestLineStepCompletedRequirement('A Beautiful World', 35), new ObtainedPokemonRequirement('Gyarados'), new DayCyclePartRequirement([DayCyclePart.Dusk])], undefined, {
    displayName: 'Team Flare Boss Lysandre',
    imageName: 'Team Flare Boss Lysandre',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Gyaradosite),
});
TemporaryBattleList['Hex Maniac Aster'] = new TemporaryBattle('Hex Maniac Aster', [
    new GymPokemon('Gastly', 40250000, 25),
    new GymPokemon('Haunter', 60770015, 30),
    new GymPokemon('Haunter', 60770015, 30),
    new GymPokemon('Medicham', 60770015, 30),
], 'What’s this?! I see... Perhaps a Trainer as accomplished as you can get the most out of this.</br><img src="assets/images/megaStone/Gengarite.png"/></br>', [
    new StatisticRequirement(['pokemonEncountered', PokemonHelper.getPokemonByName('Gastly').id], 666, 'Encounter at least 666 wild Gastly.'),
    new StatisticRequirement(['pokemonEncountered', PokemonHelper.getPokemonByName('Haunter').id], 444, 'Encounter at least 444 wild Haunter.'),
    new StatisticRequirement(['pokemonEncountered', PokemonHelper.getPokemonByName('Gengar').id], 13, 'Encounter at least 13 wild Gengar.'),
    new ObtainedPokemonRequirement('Gengar'),
], undefined, {
    displayName: 'Hex Maniac Aster',
    imageName: 'Hex Maniac',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Gengarite),
});
TemporaryBattleList['Wild Houndour Horde'] = new TemporaryBattle('Wild Houndour Horde', [
    new GymPokemon('Houndour', 60000000, 40),
    new GymPokemon('Houndour', 60000000, 40),
    new GymPokemon('Houndour', 60000000, 40),
    new GymPokemon('Houndour', 60000000, 40),
    new GymPokemon('Houndour', 60000000, 40),
    new GymPokemon('Mega Houndoom', 120000000, 60),
], '<i>With the leader of the pack defeated, the Houndour horde scatters, their fiery fury reduced to ashes. In the gleaming sunlight, you catch sight of a small gem left behind by their leader...</i></br><img src="assets/images/megaStone/Houndoominite.png"/></br><i>You obtained the Houndoominite!</i>', [
    new ObtainedPokemonRequirement('Houndoom'),
    new WeatherRequirement([WeatherType.Harsh_Sunlight]),
    new StatisticRequirement(['pokemonCaptured', PokemonHelper.getPokemonByName('Houndour').id], 500, 'Capture a total of 500 or more Houndour.'),
    new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion),
], undefined, {
    displayName: 'Wild Houndour Horde',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Houndoominite),
    imageName: '../pokemon/229.01',
    hideTrainer: true,
    returnTown: 'Dendemille Town',
});
TemporaryBattleList['Wild Electrike Horde'] = new TemporaryBattle('Wild Electrike Horde', [
    new GymPokemon('Electrike', 60000000, 40),
    new GymPokemon('Electrike', 60000000, 40),
    new GymPokemon('Electrike', 60000000, 40),
    new GymPokemon('Electrike', 60000000, 40),
    new GymPokemon('Electrike', 60000000, 40),
    new GymPokemon('Mega Manectric', 120000000, 60),
], '<i>With the leader of the pack defeated, the Electrike horde scatters, their thunderous rage utterly depleted. In a thunderbolt\'s flash, you catch sight of a small gem left behind by their leader...</i></br><img src="assets/images/megaStone/Manectite.png"/></br><i>You obtained the Manectite!</i>', [
    new ObtainedPokemonRequirement('Manectric'),
    new WeatherRequirement([WeatherType.Thunderstorm]),
    new StatisticRequirement(['pokemonCaptured', PokemonHelper.getPokemonByName('Electrike').id], 500, 'Capture a total of 500 or more Electrike.'),
    new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion),
], undefined, {
    displayName: 'Wild Electrike Horde',
    firstTimeRewardFunction: () => player.gainMegaStone(GameConstants.MegaStoneType.Manectite),
    imageName: '../pokemon/310.01',
    hideTrainer: true,
    returnTown: 'Dendemille Town',
});
TemporaryBattleList['Unrivaled Red'] = new TemporaryBattle('Unrivaled Red', [
    new GymPokemon('Pikachu', 82741389, 85),
    new GymPokemon('Machamp', 82239926, 85),
    new GymPokemon('Arcanine', 82239926, 85),
    new GymPokemon('Lapras', 82239926, 85),
    new GymPokemon('Snorlax', 82239926, 85),
    new GymPokemon('Mega Venusaur', 90263333, 85),
], '... ... ...!', [new MultiRequirement([new QuestLineStepCompletedRequirement('An Unrivaled Power', 0, GameConstants.AchievementOption.less), new QuestLineStartedRequirement('An Unrivaled Power')])], undefined, {
    displayName: 'Pokémon Trainer Red',
    imageName: 'Red',
});
TemporaryBattleList['Unrivaled Blue'] = new TemporaryBattle('Unrivaled Blue', [
    new GymPokemon('Tauros', 82390364, 66),
    new GymPokemon('Alakazam', 82390364, 66),
    new GymPokemon('Gyarados', 82390364, 66),
    new GymPokemon('Exeggutor', 82390364, 66),
    new GymPokemon('Aerodactyl', 82390364, 66),
    new GymPokemon('Mega Charizard Y', 90363626, 68),
], 'Aw man, what was I doing?', [new QuestLineStepCompletedRequirement('An Unrivaled Power', 1)], undefined, {
    displayName: 'Gym Leader Blue',
    imageName: 'Blue-lgpe',
});
TemporaryBattleList['Unrivaled Green'] = new TemporaryBattle('Unrivaled Green', [
    new GymPokemon('Clefable', 82490657, 66),
    new GymPokemon('Gengar', 82490657, 66),
    new GymPokemon('Victreebel', 82490657, 66),
    new GymPokemon('Ninetales', 82490657, 66),
    new GymPokemon('Kangaskhan', 82490657, 66),
    new GymPokemon('Mega Blastoise', 90514065, 68),
], 'Come on! What\'s with that...?', [new QuestLineStepCompletedRequirement('An Unrivaled Power', 5)], undefined, {
    displayName: 'Pokémon Trainer Green',
    imageName: 'Green',
});
TemporaryBattleList['Anomaly Mewtwo 1'] = new TemporaryBattle('Anomaly Mewtwo 1', [new GymPokemon('Mega Mewtwo X', 500000000, 70)], '<i>I see. You are indeed strong. But I do not wish to talk to you. As I already told you, do not continue to follow me.</i>', [new QuestLineStepCompletedRequirement('An Unrivaled Power', 8)], undefined, {
    displayName: 'Anomaly Mewtwo',
    imageName: '../pokemon/150.01',
    hideTrainer: true,
    returnTown: 'Cerulean Cave',
});
TemporaryBattleList['Anomaly Mewtwo 2'] = new TemporaryBattle('Anomaly Mewtwo 2', [new GymPokemon('Mega Mewtwo X', 510000000, 70)], '<i>Do you not comprehend human speech?! Fine then, if you will not leave me alone, then I will not let you catch up to me!</i>', [new QuestLineStepCompletedRequirement('An Unrivaled Power', 9)], undefined, {
    displayName: 'Anomaly Mewtwo',
    imageName: '../pokemon/150.01',
    hideTrainer: true,
    returnTown: 'Mt. Silver',
});
TemporaryBattleList['Anomaly Mewtwo 3'] = new TemporaryBattle('Anomaly Mewtwo 3', [new GymPokemon('Mega Mewtwo Y', 520000000, 70)], '<i>Damn it! How could you possibly pursue me so quickly!</i>', [new QuestLineStepCompletedRequirement('An Unrivaled Power', 10)], undefined, {
    displayName: 'Anomaly Mewtwo',
    imageName: '../pokemon/150.02',
    hideTrainer: true,
    returnTown: 'Lilycove City',
});
TemporaryBattleList['Anomaly Mewtwo 4'] = new TemporaryBattle('Anomaly Mewtwo 4', [new GymPokemon('Mega Mewtwo Y', 530000000, 70)], '<i>WHAT DO YOU WANT WITH ME, HUMAN?!</i>', [new QuestLineStepCompletedRequirement('An Unrivaled Power', 11)], undefined, {
    displayName: 'Anomaly Mewtwo',
    imageName: '../pokemon/150.02',
    hideTrainer: true,
    returnTown: 'Spear Pillar',
});
TemporaryBattleList['Anomaly Mewtwo 5'] = new TemporaryBattle('Anomaly Mewtwo 5', [new GymPokemon('Mega Mewtwo Y', 540000000, 70)], '<i>GAARGH!!! ......... What? ......... You say you truly just want to help me? You are irritatingly persistant. Fine then. You say you know of a place where I can live undisturbed? Take me there.</i>', [new QuestLineStepCompletedRequirement('An Unrivaled Power', 12)], undefined, {
    displayName: 'Anomaly Mewtwo',
    imageName: '../pokemon/150.02',
    hideTrainer: true,
    returnTown: 'Castelia City',
});
//Alola Temporary Battles
TemporaryBattleList['Hau 1'] = new TemporaryBattle('Hau 1', [
    new GymPokemon('Popplio', 71131094, 5, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Grass)),
    new GymPokemon('Rowlet', 71131094, 5, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Fire)),
    new GymPokemon('Litten', 71131094, 5, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Water)),
], 'Whoa! That was awesome! You and your Pokémon were both so cool!<br>Oh yeah! I\'m Hau! You should totally check out Iki Town! We\'re holding a festival soon!', [new RouteKillRequirement(10, GameConstants.Region.alola, 1)], undefined, {
    firstTimeRewardFunction: () => {
        App.game.quests.getQuestLine('Welcome to Paradise, Cousin!').beginQuest(0, undefined, true);
    },
    displayName: 'Pokémon Trainer Hau',
    returnTown: 'Iki Town Outskirts',
    imageName: 'Rival Hau',
});
TemporaryBattleList['Melemele Spearow'] = new TemporaryBattle('Melemele Spearow', [new GymPokemon('Spearow', 117328860, 4)], undefined, [new QuestLineStartedRequirement('Welcome to Paradise, Cousin!')], undefined, {
    displayName: 'Agitated Spearow',
    imageName: '../pokemon/789',
});
TemporaryBattleList['Hau 2'] = new TemporaryBattle('Hau 2', [
    new GymPokemon('Pichu', 75473838, 6),
    new GymPokemon('Popplio', 81763320, 7, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Grass)),
    new GymPokemon('Rowlet', 81763320, 7, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Fire)),
    new GymPokemon('Litten', 81763320, 7, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Water)),
], 'Phew... That was awesome! That was a really great battle! I had a blast fighting you!', [new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 1)], undefined, {
    displayName: 'Pokémon Trainer Hau',
    returnTown: 'Iki Town',
    imageName: 'Rival Hau',
    /* Uncomment once Z-Moves are ready
    firstTimeRewardFunction: () => {
        App.game.keyItems.gainKeyItem(KeyItemType['Z-Power_Ring'], true);
    },*/
});
TemporaryBattleList['Skull 1'] = new TemporaryBattle('Skull 1', [new GymPokemon('Zubat', 193227888, 9)], undefined, // custom quest message
[new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 2)], undefined, {
    displayName: 'Team Skull Grunts A and B',
    returnTown: 'Hau\'oli City',
    imageName: 'Team Skull Grunts (male)',
});
TemporaryBattleList.Ilima = new TemporaryBattle('Ilima', [
    new GymPokemon('Yungoos', 99760695, 10),
    new GymPokemon('Smeargle', 184903445, 11),
], 'You- or should I say you and your Pokémon- make quite the interesting team! I do hope you\'ll come to Verdant Cavern and attempt my trial!', [new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 3)], undefined, {
    displayName: 'Captain Ilima',
    returnTown: 'Hau\'oli City',
});
TemporaryBattleList['Skull 2'] = new TemporaryBattle('Skull 2', [new GymPokemon('Drowzee', 325654668, 10)], 'Seriously, home slice?! You\'re too strong for a kid, yo! I\'ve gotta go make someone else miserable to feel better! We\'re gonna go mess with Verdant Cavern!', [new MultiRequirement([new TemporaryBattleRequirement('Ilima'), new RouteKillRequirement(10, GameConstants.Region.alola, 2)])], undefined, {
    displayName: 'Team Skull Grunts A and B',
    returnTown: 'Hau\'oli City',
    imageName: 'Team Skull Grunts (male)',
});
TemporaryBattleList['Recon Squad 1'] = new TemporaryBattle('Recon Squad 1', [new GymPokemon('Furfrou', 334332002, 13)], undefined, // custom quest message
[new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 7)], undefined, {
    displayName: 'Ultra Recon Squad',
    imageName: 'specialNPCs/Ultra Recon Squad (ultra moon)',
});
TemporaryBattleList['Hau 3'] = new TemporaryBattle('Hau 3', [
    new GymPokemon('Popplio', 111444000, 13, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Grass)),
    new GymPokemon('Rowlet', 111444000, 13, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Fire)),
    new GymPokemon('Litten', 111444000, 13, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Water)),
    new GymPokemon('Noibat', 104983480, 11),
    new GymPokemon('Pikachu', 104983480, 12),
], 'Aww, man! I wanted to show off my Pokémon\'s best side more!', [new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 9)], undefined, {
    displayName: 'Pokémon Trainer Hau',
    returnTown: 'Melemele Meadow',
    imageName: 'Rival Hau',
});
TemporaryBattleList.Dexio = new TemporaryBattle('Dexio', [
    new GymPokemon('Mime Jr.', 184013368, 15),
    new GymPokemon('Espeon', 195395639, 15),
], 'That\'s what I would expect from a Trainer doing the island challenge. I felt the bond between you and your Pokémon!', [new GymBadgeRequirement(BadgeEnums.Melemele_Stamp)], undefined, {
    // Starts Akala story quest if both Sina and Dexio are defeated.
    firstTimeRewardFunction: () => {
        if (App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Sina')]() >= 1) {
            App.game.quests.getQuestLine('Symbiotic Relations').beginQuest(0, undefined, true);
            // TODO: zygarde quest thing
        }
    },
    displayName: 'Pokémon Trainer Dexio',
});
TemporaryBattleList.Sina = new TemporaryBattle('Sina', [
    new GymPokemon('Smoochum', 184013368, 15),
    new GymPokemon('Glaceon', 195395639, 15),
], 'I get it... Facing trials helps you grow close to your team. I think that\'s absolutely wonderful!', [new GymBadgeRequirement(BadgeEnums.Melemele_Stamp)], undefined, {
    // Starts Akala story quest if both Sina and Dexio are defeated.
    firstTimeRewardFunction: () => {
        if (App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex('Dexio')]() >= 1) {
            App.game.quests.getQuestLine('Symbiotic Relations').beginQuest(0, undefined, true);
            // TODO: zygarde quest thing
        }
    },
    displayName: 'Pokémon Trainer Sina',
});
TemporaryBattleList['Hau 4'] = new TemporaryBattle('Hau 4', [
    new GymPokemon('Brionne', 99628133, 16, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Grass)),
    new GymPokemon('Dartrix', 99628133, 16, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Fire)),
    new GymPokemon('Torracat', 99628133, 16, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Water)),
    new GymPokemon('Pikachu', 95796282, 15),
    new GymPokemon('Noibat', 93880356, 14),
    new GymPokemon('Eevee', 93880356, 14),
], 'Nice! How\'d you come up with that kind of battle plan? You gotta tell me!', [new RouteKillRequirement(10, GameConstants.Region.alola, 4)], undefined, {
    displayName: 'Pokémon Trainer Hau',
    returnTown: 'Paniola Town',
    imageName: 'Rival Hau',
});
TemporaryBattleList['Gladion 1'] = new TemporaryBattle('Gladion 1', [
    new GymPokemon('Zorua', 127447988, 17),
    new GymPokemon('Zubat', 127447988, 17),
    new GymPokemon('Type: Null', 135172109, 18),
], 'Hmph... It\'s not like me to slip up like that. I\'ve got to keep fighting stronger opponents. Looks like I\'m still not ready...', [new RouteKillRequirement(10, GameConstants.Region.alola, 5)], undefined, {
    displayName: 'Team Skull Gladion',
    returnTown: 'Paniola Town',
    imageName: 'Gladion',
});
TemporaryBattleList['Recon Squad 2'] = new TemporaryBattle('Recon Squad 2', [new GymPokemon('Sudowoodo', 412520122, 20)], undefined, // custom quest message
[new QuestLineStepCompletedRequirement('Symbiotic Relations', 1)], undefined, {
    isTrainerBattle: false,
    displayName: 'Ultra Recon Squad',
    returnTown: 'Paniola Town',
    imageName: 'specialNPCs/Ultra Recon Squad (ultra sun)',
    visibleRequirement: new TemporaryBattleRequirement('Gladion 1'),
});
TemporaryBattleList['Skull 3'] = new TemporaryBattle('Skull 3', [new GymPokemon('Drowzee', 421944535, 17)], undefined, // custom quest message
[
    new RouteKillRequirement(10, GameConstants.Region.alola, 6),
    new QuestLineStepCompletedRequirement('Symbiotic Relations', 2),
], undefined, {
    displayName: 'Team Skull Grunts',
    returnTown: 'Heahea City',
    imageName: 'Team Skull Grunts (male)',
});
TemporaryBattleList['Battle Royal'] = new TemporaryBattle('Battle Royal', [
    new GymPokemon('Type: Null', 143802105, 20),
    new GymPokemon('Rockruff', 143802105, 20),
    new GymPokemon('Brionne', 143802105, 20, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Grass)),
    new GymPokemon('Dartrix', 143802105, 20, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Fire)),
    new GymPokemon('Torracat', 143802105, 20, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Water)),
], 'The battle is over!', [new RouteKillRequirement(10, GameConstants.Region.alola, 6)], undefined, { imageName: 'specialNPCs/Battle Royal' });
TemporaryBattleList['Plumeria 1'] = new TemporaryBattle('Plumeria 1', [
    new GymPokemon('Golbat', 213829395, 26),
    new GymPokemon('Salandit', 227055956, 27),
], 'Hmmph! You\'re pretty strong. I\'ll give you that. But mess with anyone in Team Skull again, and I\'ll show you how serious I can get.', [new RouteKillRequirement(10, GameConstants.Region.alola, 21)], undefined, {
    displayName: 'Team Skull Admin Plumeria',
    returnTown: 'Memorial Hill',
    imageName: 'Plumeria',
});
TemporaryBattleList['Ultra Wormhole'] = new TemporaryBattle('Ultra Wormhole', [new GymPokemon('???', 508485861, 27)], undefined, // custom quest message
[new QuestLineStepCompletedRequirement('Symbiotic Relations', 8)], [new QuestLineCompletedRequirement('Symbiotic Relations')], // to work better with 10.20 story quests if already beaten
{ imageName: 'specialNPCs/Wormhole' });
TemporaryBattleList['Hau 5'] = new TemporaryBattle('Hau 5', [
    new GymPokemon('Brionne', 101997102, 30, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Grass)),
    new GymPokemon('Dartrix', 101997102, 30, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Fire)),
    new GymPokemon('Torracat', 101997102, 30, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Water)),
    new GymPokemon('Flareon', 92508999, 28, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Grass)),
    new GymPokemon('Vaporeon', 92508999, 28, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Fire)),
    new GymPokemon('Leafeon', 92508999, 28, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Water)),
    new GymPokemon('Noibat', 90136973, 28),
    new GymPokemon('Tauros', 90136973, 28),
    new GymPokemon('Alolan Raichu', 96541443, 29),
], 'Bwah!! I had my breath held that whole battle!', [new TemporaryBattleRequirement('Ultra Wormhole')], undefined, {
    firstTimeRewardFunction: () => {
        App.game.quests.getQuestLine('Child of the Stars').beginQuest(0, undefined, true);
    },
    displayName: 'Pokémon Trainer Hau',
    returnTown: 'Malie City',
    imageName: 'Rival Hau',
});
TemporaryBattleList['Skull 4'] = new TemporaryBattle('Skull 4', [
    new GymPokemon('Houndour', 161175513, 28),
    new GymPokemon('Golbat', 161175513, 28),
    new GymPokemon('Alolan Raticate', 172626132, 29),
], 'Yo, think about the bus drivers! If we take this bus stop, they can all chill!', [
    new RouteKillRequirement(10, GameConstants.Region.alola, 10),
    new QuestLineStepCompletedRequirement('Child of the Stars', 0),
], undefined, {
    displayName: 'Team Skull Grunts',
    returnTown: 'Malie City',
    imageName: 'Team Skull Grunts (male)',
});
TemporaryBattleList.Molayne = new TemporaryBattle('Molayne', [
    new GymPokemon('Skarmory', 170174638, 29),
    new GymPokemon('Metang', 170174638, 29),
    new GymPokemon('Alolan Dugtrio', 175257094, 30),
], 'Here\'s a little something to remember our meeting by! I gathered these Z-Crystals when I was on my own island challenge back in my own day. Take it, and use it well.</br></br><img width="100" src="assets/images/items/zCrystal/Steelium Z.svg">', [new QuestLineStepCompletedRequirement('Child of the Stars', 2)], undefined, {
    firstTimeRewardFunction: QuestLineHelper.zCrystalGet(PokemonType.Steel),
});
TemporaryBattleList['Skull 5'] = new TemporaryBattle('Skull 5', [new GymPokemon('Drowzee', 533664170, 33)], undefined, // custom quest message
[new QuestLineStepCompletedRequirement('Child of the Stars', 3)], undefined, {
    displayName: 'Team Skull Grunt',
    returnTown: 'Aether House',
    imageName: 'Team Skull Grunt (male)',
});
TemporaryBattleList['Psychium Z Trial'] = new TemporaryBattle('Psychium Z Trial', [
    // same HP as route mons
    new GymPokemon('Krokorok', 7829809, 32),
    new GymPokemon('Gabite', 7940429, 32),
    new GymPokemon('Trapinch', 7622397, 32),
    new GymPokemon('Alolan Dugtrio', 7484122, 32),
    new GymPokemon('Trapinch', 7622397, 32),
], '<i>Lucky you! There was a Z-Crystal hidden here all along! You obtained a Psychium Z!<i></br></br><img width="100" src="assets/images/items/zCrystal/Psychium Z.svg">', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Thrifty Megamart')), new RouteKillRequirement(10, GameConstants.Region.alola, 23)], undefined, {
    firstTimeRewardFunction: QuestLineHelper.zCrystalGet(PokemonType.Psychic),
    displayName: 'Trial Site of Haina Desert',
    returnTown: 'Tapu Village',
    isTrainerBattle: false,
    imageName: 'Trial Site',
});
TemporaryBattleList['Plumeria 2'] = new TemporaryBattle('Plumeria 2', [
    new GymPokemon('Golbat', 255005022, 37),
    new GymPokemon('Salazzle', 270778528, 38),
], 'Hmmph. Guess you are pretty tough. Now I understand why my Grunts waste so much time battling kids. But if you want us to return the Pokémon, then you\'ll have to come to us. Alone. The boss is dying to meet you, hmmph! See you at our base in Po Town!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Thrifty Megamart'))], undefined, {
    displayName: 'Team Skull Admin Plumeria',
    returnTown: 'Aether House',
    imageName: 'Plumeria',
});
TemporaryBattleList['Gladion 2'] = new TemporaryBattle('Gladion 2', [
    new GymPokemon('Golbat', 179161733, 42),
    new GymPokemon('Zoroark', 179161733, 42),
    new GymPokemon('Type: Null', 190020020, 43),
], 'That was wrong of me... I shouldn\'t have dragged you into a meaningless battle like that...</br>But that Cosmog will bring disaster to all of Alola! I have to get it back from them! You\'re coming with me whether you like it or not. Get on the boat.', [new QuestLineStepCompletedRequirement('Child of the Stars', 6)], undefined, {
    displayName: 'Team Skull Gladion',
    returnTown: 'Aether House',
    imageName: 'Gladion (stance)',
});
TemporaryBattleList['Exeggutor Tree'] = new TemporaryBattle('Exeggutor Tree', [new GymPokemon('Alolan Exeggutor', 1100000, 40)], // same HP as dungeon mons
'Phew... That was an Exeggutor, wasn\'t it? This island is full of them! I think that they should all clear out once we get past them.', [new QuestLineStepCompletedRequirement('Emissary of Light', 2, GameConstants.AchievementOption.less)], undefined, {
    displayName: 'A Tree?',
    isTrainerBattle: false,
    imageName: 'Lillie (z powered)',
});
TemporaryBattleList['Skull 6'] = new TemporaryBattle('Skull 6', [
    new GymPokemon('Ekans', 104373405, 45),
    new GymPokemon('Fomantis', 104373405, 45),
    new GymPokemon('Alolan Raticate', 104373405, 45),
    new GymPokemon('Mareanie', 104373405, 45),
    new GymPokemon('Golbat', 104373405, 45),
    new GymPokemon('Houndour', 104373405, 45),
], undefined, [new QuestLineStepCompletedRequirement('Emissary of Light', 2)], undefined, {
    displayName: 'Team Skull Grunts',
    returnTown: 'Seafolk Village',
    imageName: 'specialNPCs/Team Skull Grunts (group)',
});
TemporaryBattleList['Recon Squad 3'] = new TemporaryBattle('Recon Squad 3', [new GymPokemon('Poipole', 629719547, 49)], 'Perhaps it is time that we stop taking matters into our own hands and instead start relying on others. Must we start by putting our faith in you?', [new QuestLineStepCompletedRequirement('Emissary of Light', 3)], undefined, {
    displayName: 'Ultra Recon Squad',
    imageName: 'specialNPCs/Ultra Recon Squad (all)',
});
TemporaryBattleList.Lusamine = new TemporaryBattle('Lusamine', [
    new GymPokemon('Clefable', 109925182, 47),
    new GymPokemon('Lilligant', 109925182, 47),
    new GymPokemon('Mismagius', 109925182, 47),
    new GymPokemon('Milotic', 109925182, 47),
    new GymPokemon('Bewear', 109925182, 47),
    new GymPokemon('You hateful little Trainer!', 183208637, 47),
], undefined, [new QuestLineStepCompletedRequirement('Emissary of Light', 6)], undefined, {
    imageName: '../pokemon/-793.01',
    finalPokemonImage: 'specialNPCs/Transparent',
});
TemporaryBattleList.Necrozma = new TemporaryBattle('Necrozma', [
    // base HP: 364088130
    new GymPokemon('Necrozma (Dusk Mane)', 338601960, 50),
    new GymPokemon('Necrozma (Dawn Wings)', 353165486, 50),
], 'Lusamine\'s interference summoned not one, but two Necrozma! That egotistical woman! You have driven one away and our Pokémon is safe, but the other is still in possession of that girl\'s "Nebby" and has taken on its true form!', [new QuestLineCompletedRequirement('Emissary of Light')], undefined, {
    hideTrainer: true,
    imageName: 'Phyco',
});
TemporaryBattleList['Ultra Megalopolis'] = new TemporaryBattle('Ultra Megalopolis', [new GymPokemon('Ultra Necrozma', 800540100, 60)], undefined, // custom quest message
[new TemporaryBattleRequirement('Necrozma'), new QuestLineCompletedRequirement('Emissary of Light')], undefined, {
    hideTrainer: true,
    imageName: 'specialNPCs/Wormhole',
    displayName: 'Ultra Necrozma',
});
TemporaryBattleList['Captain Mina'] = new TemporaryBattle('Captain Mina', [
    new GymPokemon('Mawile', 262098263, 51),
    new GymPokemon('Granbull', 262098263, 51),
    new GymPokemon('Ribombee', 274011820, 51),
], 'Woah! I\'m shocked at your strength! But you\'ve only just begun my real trial. Now you have to go around to all the captains in Alola!', [new DevelopmentRequirement(new QuestLineCompletedRequirement('Island Challenge'))], undefined, { imageName: 'Mina' });
TemporaryBattleList['Captain Ilima'] = new TemporaryBattle('Captain Ilima', [
    new GymPokemon('Gumshoos', 262098263, 51),
    new GymPokemon('Smeargle', 262098263, 51),
    new GymPokemon('Komala', 274011820, 51),
], 'Yes! You have emerged victorious! You and your Pokémon have become quite a delightful team! Off to Lush Jungle? It\'s been a while since I last visited Akala.', [new TemporaryBattleRequirement('Captain Mina')], undefined, { imageName: 'Ilima' });
TemporaryBattleList['Captain Mallow'] = new TemporaryBattle('Captain Mallow', [
    new GymPokemon('Trevenant', 262098263, 51),
    new GymPokemon('Shiinotic', 262098263, 51),
    new GymPokemon('Tsareena', 274011820, 51),
], 'Sure enough, when it comes to you and Pokémon, the quality of the ingredients shines forth! Once you defeat Lana do you want to go to Wela Volcano Park with two pretty pals like us?', [new TemporaryBattleRequirement('Captain Ilima')], undefined, { imageName: 'Mallow' });
TemporaryBattleList['Captain Lana'] = new TemporaryBattle('Captain Lana', [
    new GymPokemon('Lanturn', 262098263, 51),
    new GymPokemon('Cloyster', 262098263, 51),
    new GymPokemon('Araquanid', 274011820, 51),
], 'Well! Once again, you certainly reeled me in. Please have a good time with Kiawe.', [new TemporaryBattleRequirement('Captain Mallow')], undefined, { imageName: 'Lana' });
TemporaryBattleList['Captain Kiawe'] = new TemporaryBattle('Captain Kiawe', [
    new GymPokemon('Arcanine', 262098263, 51),
    new GymPokemon('Talonflame', 262098263, 51),
    new GymPokemon('Alolan Marowak', 274011820, 51),
], 'Not enough dancing! If you\'re hoping to complete Mina\'s trial, you should make for Hokulani Observatory next. Ula\'Ula is only a stone\'s throw away when Charizard is one of your Ride Pokémon!', [new TemporaryBattleRequirement('Captain Lana')], undefined, { imageName: 'Kiawe' });
TemporaryBattleList['Captain Sophocles'] = new TemporaryBattle('Captain Sophocles', [
    new GymPokemon('Togedemaru', 262098263, 51),
    new GymPokemon('Magnezone', 262098263, 51),
    new GymPokemon('Alolan Golem', 274011820, 51),
], 'I couldn\'t get it done. Don\'t worry about it, my precious Pokémon... You\'ve gotta finish Mina\'s trial, right? Are you going to Aether House?', [new TemporaryBattleRequirement('Captain Kiawe')], undefined, { imageName: 'Sophocles' });
TemporaryBattleList['Kahuna Nanu'] = new TemporaryBattle('Kahuna Nanu', [
    new GymPokemon('Sableye', 262098263, 51),
    new GymPokemon('Absol', 262098263, 51),
    new GymPokemon('Alolan Persian', 274011820, 51),
], 'Heh... You got me good, kid. Hope I don\'t get in trouble with the girl for this. You should go tell that young filly Mina that you\'re done with what she asked you to do.', [new TemporaryBattleRequirement('Captain Sophocles')], undefined, { imageName: 'Nanu' });
TemporaryBattleList['Gladion 3'] = new TemporaryBattle('Gladion 3', [
    new GymPokemon('Crobat', 194154232, 53),
    new GymPokemon('Zoroark', 194154232, 53),
    new GymPokemon('Lucario', 194154232, 53),
    new GymPokemon('Silvally (Fire)', 213569655, 55, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Grass)),
    new GymPokemon('Silvally (Water)', 213569655, 55, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Fire)),
    new GymPokemon('Silvally (Grass)', 213569655, 55, new StarterRequirement(GameConstants.Region.alola, GameConstants.Starter.Water)),
], 'You\'ve got good Pokémon. I know what kind of Trainer you are now. And what kind of journey you\'ve been through.</br>Lillie\'s looking after our mother at the foundation. Hau\'s working hard to get stronger, too...</br>I know we aren\'t friends. But we aren\'t enemies anymore either. Keep winning. Maybe I\'ll see you again if you do.', [new QuestLineStepCompletedRequirement('Eater of Light', 3)], undefined, {
    displayName: 'Pokémon Trainer Gladion',
    returnTown: 'Tapu Village',
    imageName: 'Gladion',
});
TemporaryBattleList.Lillie = new TemporaryBattle('Lillie', [
    new GymPokemon('Solgaleo', 728176260, 50, new StatisticRequirement(['npcTalkedTo', GameHelper.hash('SunFlute')], 1, 'Must have played the Sun Flute during Emissary of Light quest line')),
    new GymPokemon('Lunala', 728176260, 50, new StatisticRequirement(['npcTalkedTo', GameHelper.hash('MoonFlute')], 1, 'Must have played the Moon Flute during Emissary of Light quest line')),
], 'Nebby, you want to keep on traveling together with $playername$, don\'t you? Of course I can tell how you feel! After all...we\'re family now, aren\'t we?</br>$playername$! Nebby doesn\'t want this journey with you to end. And I want you to grant it this wish! Share the world with Nebby!', [new QuestLineStepCompletedRequirement('Eater of Light', 1)], [new TemporaryBattleRequirement('Lillie'), new OneFromManyRequirement([new ObtainedPokemonRequirement('Solgaleo'), new ObtainedPokemonRequirement('Lunala')])], {
    isTrainerBattle: false,
    displayName: 'Pokémon Trainer Lillie',
    imageName: 'Lillie (z powered)',
});
TemporaryBattleList['Guzma Bug Memory'] = new TemporaryBattle('Guzma Bug Memory', [
    new GymPokemon('Golisopod', 225357859, 63),
    new GymPokemon('Ariados', 225357859, 63),
    new GymPokemon('Masquerain', 225357859, 63),
    new GymPokemon('Pinsir', 225357859, 63),
    new GymPokemon('Scizor', 225357859, 63),
], 'That was a good beat-down, Champion! You sure wrecked me again. This just proves how much of a tough trainer you are. Here is the Memory you\'ve been looking for. </br><img src="assets/images/items/quest/Bug_Memory_Silvally.png"></br><i>You obtained a Bug Silvally Memory!</i>', [new QuestLineStepCompletedRequirement('Typing some Memories', 19)], undefined, {
    displayName: 'Guzma',
    imageName: 'Guzma',
});
TemporaryBattleList['Kahili Flying Memory'] = new TemporaryBattle('Kahili Flying Memory', [
    new GymPokemon('Skarmory', 231357859, 63),
    new GymPokemon('Crobat', 231357859, 63),
    new GymPokemon('Oricorio (Baile)', 231357859, 63),
    new GymPokemon('Mandibuzz', 231357859, 63),
    new GymPokemon('Toucannon', 231357859, 63),
], 'You\'re pretty talented, $playername$! No wonder you\'ve become the Champion of Alola! Anyways, here is the Memory. I said I\'d give it to you. </br><img src="assets/images/items/quest/Flying_Memory_Silvally.png"></br><i>You obtained a Flying Silvally Memory!</i>', [new QuestLineStepCompletedRequirement('Typing some Memories', 21)], undefined, {
    displayName: 'Kahili',
    imageName: 'Kahili',
});
TemporaryBattleList['Plumeria Poison Memory'] = new TemporaryBattle('Plumeria Poison Memory', [
    new GymPokemon('Gengar', 237357859, 63),
    new GymPokemon('Alolan Muk', 237357859, 63),
    new GymPokemon('Crobat', 237357859, 63),
    new GymPokemon('Toxapex', 237357859, 63),
    new GymPokemon('Salazzle', 237357859, 63),
], 'You\'re pretty strong, $playername$. Maybe my Pokémon and I need to go through more together to deepen our friendship. Take the Memory with you, you deserve it. </br><img src="assets/images/items/quest/Poison_Memory_Silvally.png"></br><i>You obtained a Poison Silvally Memory!</i>', [new QuestLineStepCompletedRequirement('Typing some Memories', 23)], undefined, {
    displayName: 'Plumeria',
    imageName: 'Plumeria (league)',
});
TemporaryBattleList['Acerola Ghost Memory'] = new TemporaryBattle('Acerola Ghost Memory', [
    new GymPokemon('Banette', 243357859, 63),
    new GymPokemon('Drifblim', 243357859, 63),
    new GymPokemon('Dhelmise', 243357859, 63),
    new GymPokemon('Froslass', 243357859, 63),
    new GymPokemon('Palossand', 243357859, 63),
], 'That was so much fun, $playername$! I hope you come by more times so we can battle more often! Anyways, here is the Memory Mimikyu had found. </br><img src="assets/images/items/quest/Ghost_Memory_Silvally.png"></br><i>You obtained a Ghost Silvally Memory!</i>', [new QuestLineStepCompletedRequirement('Typing some Memories', 25)], undefined, {
    displayName: 'Captain Acerola',
    imageName: 'Acerola',
});
TemporaryBattleList['Faba Psychic Memory'] = new TemporaryBattle('Faba Psychic Memory', [
    new GymPokemon('Claydol', 249357859, 63),
    new GymPokemon('Bruxish', 249357859, 63),
    new GymPokemon('Alolan Raichu', 249357859, 63),
    new GymPokemon('Alakazam', 249357859, 63),
    new GymPokemon('Hypno', 249357859, 63),
], 'You\'re still pretty strong after all that time since our last battle. Well, take this Memory. Now off with you! </br><img src="assets/images/items/quest/Psychic_Memory_Silvally.png"></br><i>You obtained a Psychic Silvally Memory!</i>', [new QuestLineStepCompletedRequirement('Typing some Memories', 27)], undefined, {
    displayName: 'Aether Branch Chief Faba',
    imageName: 'Aether Branch Chief (faba)',
});
TemporaryBattleList['Molayne Steel Memory'] = new TemporaryBattle('Molayne Steel Memory', [
    new GymPokemon('Klefki', 255357859, 63),
    new GymPokemon('Bisharp', 255357859, 63),
    new GymPokemon('Magnezone', 255357859, 63),
    new GymPokemon('Metagross', 255357859, 63),
    new GymPokemon('Alolan Dugtrio', 255357859, 63),
], 'That was a good match! Thank you for helping me train in here and as a reward for being the first person to defeat me, you can take this strange disk! </br><img src="assets/images/items/quest/Steel_Memory_Silvally.png"></br><i>You obtained a Steel Silvally Memory!</i>', [new QuestLineStepCompletedRequirement('Typing some Memories', 29)], undefined, {
    displayName: 'Molayne',
    imageName: 'Molayne',
});
TemporaryBattleList['Ryuki Dragon Memory'] = new TemporaryBattle('Ryuki Dragon Memory', [
    new GymPokemon('Garchomp', 261357859, 63),
    new GymPokemon('Drampa', 261357859, 63),
    new GymPokemon('Turtonator', 261357859, 63),
    new GymPokemon('Dragonite', 261357859, 63),
    new GymPokemon('Kommo-o', 261357859, 63),
], 'And the crowd goes wild! $playername$! You should come by my Gym someday! It\'s in Malie city on Ula\'ula Island right above the Poké Mart, can\'t miss it. What? You\'ve never seen it? It\'s totally there and a real thing! Anyways you can take this.. What was it\'s name? Oh, right. You can take this Memory with you. </br><img src="assets/images/items/quest/Dragon_Memory_Silvally.png"></br><i>You obtained a Dragon Silvally Memory!</i>', [new QuestLineStepCompletedRequirement('Typing some Memories', 31)], undefined, {
    displayName: 'Ryuki',
    imageName: 'Ryuki',
});
TemporaryBattleList.Anabel = new TemporaryBattle('Anabel', [
    new GymPokemon('Alakazam', 229464883, 61),
    new GymPokemon('Weavile', 229464883, 61),
    new GymPokemon('Mismagius', 229464883, 61),
    new GymPokemon('Salamence', 229464883, 61),
    new GymPokemon('Snorlax', 234464883, 61),
], 'Oh you\'re good! You might just have a shot, here are some Beast Balls. Go hunt down those strange Ultra Beasts! If you need more Beast Balls, you can buy them here.', [new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 0)]);
TemporaryBattleList['Captain Mina UB'] = new TemporaryBattle('Captain Mina UB', [
    new GymPokemon('Klefki', 205591231, 61),
    new GymPokemon('Granbull', 239464883, 61),
    new GymPokemon('Shiinotic', 239464883, 61),
    new GymPokemon('Wigglytuff', 239464883, 61),
    new GymPokemon('Ribombee', 244464883, 61),
], 'Your strength is still shocking!', [new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 7)], undefined, {
    displayName: 'Captain Mina',
    imageName: 'Mina',
});
TemporaryBattleList['Kahuna Nanu UB'] = new TemporaryBattle('Kahuna Nanu UB', [
    new GymPokemon('Sableye', 249464883, 63),
    new GymPokemon('Krookodile', 249464883, 63),
    new GymPokemon('Honchkrow', 249464883, 63),
    new GymPokemon('Absol', 249464883, 63),
    new GymPokemon('Alolan Persian', 254464883, 63),
], 'I had to be sure. Sure that you\'re ready for what\'s coming...', [new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 13)], undefined, {
    displayName: 'Kahuna Nanu',
    imageName: 'Nanu',
});
TemporaryBattleList['Ash Ketchum Alola'] = new TemporaryBattle('Ash Ketchum Alola', [
    new GymPokemon('Pikachu (Partner Cap)', 182908638, 58),
    new GymPokemon('Rowlet', 182908638, 56),
    new GymPokemon('Incineroar', 182908638, 56),
    new GymPokemon('Lycanroc (Dusk)', 182908638, 60),
    new GymPokemon('Naganadel', 182908638, 62),
    new GymPokemon('Melmetal', 182908638, 62),
], 'Thanks for battling with me again! I\'ve reignited my passion to battle after a nice, long break! ....Did one of the Pikachu here steal my Pikachu\'s hat? Oh well. I have spares. It\'ll be somewhere around here if you want it.', [new TemporaryBattleRequirement('Ash Ketchum Kalos'), new GymBadgeRequirement(BadgeEnums.Champion_Stamp)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Pikachu Valley',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Rainbow Rocket Grunt 1'] = new TemporaryBattle('Rainbow Rocket Grunt 1', [
    new GymPokemon('Golbat', 433000000, 100),
    new GymPokemon('Raticate', 433000000, 100),
    new GymPokemon('Persian', 450000000, 100),
], 'Hmph! I\'ll have you know defeating me won\'t do you any good, anyway.', [
    new QuestLineStepCompletedRequirement('Let\'s Go, Meltan!', 9),
    new QuestLineStepCompletedRequirement('Defeat Rainbow Rocket', 0, GameConstants.AchievementOption.less),
], undefined, {
    displayName: 'Rainbow Rocket Grunt',
    returnTown: 'Aether Paradise',
    imageName: 'Team Rainbow Rocket Grunt (female)',
});
TemporaryBattleList['Rainbow Rocket Grunt 2'] = new TemporaryBattle('Rainbow Rocket Grunt 2', [
    new GymPokemon('Weezing', 433000000, 100),
    new GymPokemon('Electrode', 433000000, 100),
    new GymPokemon('Cloyster', 450000000, 100),
], 'Hmph! I\'ll have you know defeating me won\'t do you any good, anyway.', [
    new QuestLineStepCompletedRequirement('Let\'s Go, Meltan!', 9),
    new QuestLineStepCompletedRequirement('Defeat Rainbow Rocket', 0, GameConstants.AchievementOption.less),
], undefined, {
    displayName: 'Rainbow Rocket Grunt',
    returnTown: 'Aether Paradise',
    imageName: 'Team Rainbow Rocket Grunt (male)',
});
TemporaryBattleList['Aether Branch Chief Faba'] = new TemporaryBattle('Aether Branch Chief Faba', [
    new GymPokemon('Claydol', 450000000, 60),
    new GymPokemon('Bruxish', 450000000, 60),
    new GymPokemon('Hypno', 480000000, 60),
], 'Hmph! I\'ll have you know defeating me won\'t do you any good, anyway.', [new QuestLineStepCompletedRequirement('Defeat Rainbow Rocket', 0)], undefined, {
    imageName: 'Aether Branch Chief (faba)',
});
TemporaryBattleList['Team Aqua Leader Archie'] = new TemporaryBattle('Team Aqua Leader Archie', [
    new GymPokemon('Mightyena', 270000000, 60),
    new GymPokemon('Crobat', 270000000, 60),
    new GymPokemon('Muk', 270000000, 60),
    new GymPokemon('Sharpedo', 270000000, 60),
    new GymPokemon('Kyogre', 300000000, 60),
], 'You\'ve made your point. I can see you are not one to be trifled with.', [new QuestLineStepCompletedRequirement('Defeat Rainbow Rocket', 1)], undefined, {
    imageName: 'Aqua Leader',
});
TemporaryBattleList['Team Magma Leader Maxie'] = new TemporaryBattle('Team Magma Leader Maxie', [
    new GymPokemon('Mightyena', 270000000, 60),
    new GymPokemon('Crobat', 270000000, 60),
    new GymPokemon('Weezing', 270000000, 60),
    new GymPokemon('Camerupt', 270000000, 60),
    new GymPokemon('Groudon', 300000000, 60),
], 'I fell behind, but only by an inch.', [new QuestLineStepCompletedRequirement('Defeat Rainbow Rocket', 1)], undefined, {
    imageName: 'Magma Leader',
});
TemporaryBattleList['Team Galactic Leader Cyrus'] = new TemporaryBattle('Team Galactic Leader Cyrus', [
    new GymPokemon('Houndoom', 225000000, 60),
    new GymPokemon('Honchkrow', 225000000, 60),
    new GymPokemon('Crobat', 225000000, 60),
    new GymPokemon('Weavile', 225000000, 60),
    new GymPokemon('Dialga', 240000000, 60),
    new GymPokemon('Palkia', 240000000, 60),
], 'Impressive. Your prowess is notable.', [new QuestLineStepCompletedRequirement('Defeat Rainbow Rocket', 2)], undefined, {
    imageName: 'Galactic Boss (cyrus)',
});
TemporaryBattleList['Team Flare Leader Lysandre'] = new TemporaryBattle('Team Flare Leader Lysandre', [
    new GymPokemon('Mienshao', 225000000, 60),
    new GymPokemon('Pyroar', 225000000, 60),
    new GymPokemon('Honchkrow', 225000000, 60),
    new GymPokemon('Mega Gyarados', 225000000, 60),
    new GymPokemon('Xerneas (Active)', 240000000, 60),
    new GymPokemon('Yveltal', 240000000, 60),
], 'I can feel the fire of your convictions burning deep within your heart!', [new QuestLineStepCompletedRequirement('Defeat Rainbow Rocket', 3)], undefined, {
    imageName: 'Team Flare Lysandre',
});
TemporaryBattleList['Team Plasma Leader Ghetsis'] = new TemporaryBattle('Team Plasma Leader Ghetsis', [
    new GymPokemon('Cofagrigus', 225000000, 60),
    new GymPokemon('Bouffalant', 225000000, 60),
    new GymPokemon('Bisharp', 225000000, 60),
    new GymPokemon('Hydreigon', 225000000, 60),
    new GymPokemon('Zekrom', 240000000, 60),
    new GymPokemon('Reshiram', 240000000, 60),
], 'I couldn\'t have been defeated by some random Trainer from who knows where!', [new QuestLineStepCompletedRequirement('Defeat Rainbow Rocket', 4)], undefined, {
    imageName: 'Ghetsis',
});
TemporaryBattleList['Team Rainbow Leader Giovanni'] = new TemporaryBattle('Team Rainbow Leader Giovanni', [
    new GymPokemon('Dugtrio', 230000000, 60),
    new GymPokemon('Nidoking', 230000000, 60),
    new GymPokemon('Nidoqueen', 230000000, 60),
    new GymPokemon('Rhyperior', 230000000, 60),
    new GymPokemon('Mega Mewtwo X', 245000000, 60),
    new GymPokemon('Mega Mewtwo Y', 245000000, 60),
], 'Ha! That was a truly intense fight!', [new QuestLineStepCompletedRequirement('Defeat Rainbow Rocket', 5)]);
// Magikarp Jump Temp Battles
TemporaryBattleList['Magikarp Jump Koylee'] = new TemporaryBattle('Magikarp Jump Koylee', [new GymPokemon('Magikarp Calico (Orange, White)', 1701000, 20)], 'Your scales are full of heart!', [new RouteKillRequirement(10, GameConstants.Region.alola, 32)], undefined, {
    displayName: 'Koylee',
    imageName: 'Jump Champ Green',
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Karpella'] = new TemporaryBattle('Magikarp Jump Karpella', [new GymPokemon('Magikarp Calico (Orange, White, Black)', 4252500, 20)], 'Wow, you\'re the cream of the \'karp, alright!', [new RouteKillRequirement(10, GameConstants.Region.alola, 33)], undefined, {
    displayName: 'Karpella',
    imageName: 'Jump Champ Red',
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Karpen'] = new TemporaryBattle('Magikarp Jump Karpen', [new GymPokemon('Magikarp Calico (White, Orange)', 4488750, 20)], 'Are you sure your Karp isn\'t flying-type?', [new TemporaryBattleRequirement('Magikarp Jump Karpella')], undefined, {
    displayName: 'Karpen',
    imageName: 'Jump Champ Green',
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.alola, 33),
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Tykarp'] = new TemporaryBattle('Magikarp Jump Tykarp', [new GymPokemon('Magikarp Calico (Orange, White)', 6804000, 20)], 'I lost because of my karpal tunnel...', [new RouteKillRequirement(10, GameConstants.Region.alola, 34)], undefined, {
    displayName: 'Tykarp',
    imageName: 'Jump Champ Blue',
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Karpress'] = new TemporaryBattle('Magikarp Jump Karpress', [new GymPokemon('Magikarp Calico (Orange, White, Black)', 7182000, 20)], '<i>Basculin</i> the glory while you can, I\'ll get you next time! Wahaa!', [new TemporaryBattleRequirement('Magikarp Jump Tykarp')], undefined, {
    displayName: 'Karpress',
    imageName: 'Jump Champ Red',
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.alola, 34),
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Karami'] = new TemporaryBattle('Magikarp Jump Karami', [new GymPokemon('Magikarp Calico (Orange, White)', 12757500, 20)], 'Well, it\'s oh-fish-ial! You win!', [new RouteKillRequirement(10, GameConstants.Region.alola, 35)], undefined, {
    displayName: 'Karami',
    imageName: 'Jump Champ Green',
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Karson'] = new TemporaryBattle('Magikarp Jump Karson', [new GymPokemon('Magikarp Skelly', 13466250, 20)], 'Hey, would you mind letting minnow when you want to rematch?', [new TemporaryBattleRequirement('Magikarp Jump Karami')], undefined, {
    displayName: 'Karson',
    imageName: 'Jump Champ Blue',
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.alola, 35),
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Karpress 2'] = new TemporaryBattle('Magikarp Jump Karpress 2', [new GymPokemon('Magikarp Calico (Orange, White)', 17010000, 20)], 'I\'m fin-ished...', [new RouteKillRequirement(10, GameConstants.Region.alola, 36)], undefined, {
    displayName: 'Karpress',
    imageName: 'Jump Champ Red',
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Karpen 2'] = new TemporaryBattle('Magikarp Jump Karpen 2', [new GymPokemon('Magikarp Calico (White, Orange)', 17955000, 20)], 'Magikarp is so classy, it\'s so-fish-ticated', [new TemporaryBattleRequirement('Magikarp Jump Karpress 2')], undefined, {
    displayName: 'Karpen',
    imageName: 'Jump Champ Green',
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.alola, 36),
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Karbuck'] = new TemporaryBattle('Magikarp Jump Karbuck', [new GymPokemon('Magikarp Calico (Orange, Gold)', 18333000, 20)], 'That battle scared the karp out of me!', [new TemporaryBattleRequirement('Magikarp Jump Karpen 2')], undefined, {
    displayName: 'Karbuck',
    imageName: 'Jump Champ Blue',
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.alola, 36),
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Skyhopper'] = new TemporaryBattle('Magikarp Jump Skyhopper', [new GymPokemon('Magikarp Calico (Orange, White)', 25515000, 20)], 'I will jump away from this battle!', [new RouteKillRequirement(10, GameConstants.Region.alola, 37)], undefined, {
    displayName: 'Skyhopper',
    imageName: 'Jump Champ Red',
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Karpen 3'] = new TemporaryBattle('Magikarp Jump Karpen 3', [new GymPokemon('Magikarp Skelly', 26932500, 20)], 'Are you trying to fly to the stratosphere?', [new TemporaryBattleRequirement('Magikarp Jump Skyhopper')], undefined, {
    displayName: 'Karpen',
    imageName: 'Jump Champ Blue',
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.alola, 37),
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Karpella 2'] = new TemporaryBattle('Magikarp Jump Karpella 2', [new GymPokemon('Magikarp Calico (Orange, White, Black)', 27499500, 20)], 'I hate fish puns...', [new TemporaryBattleRequirement('Magikarp Jump Karpen 3')], undefined, {
    displayName: 'Karpella',
    imageName: 'Jump Champ Green',
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.alola, 37),
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Karbuck 2'] = new TemporaryBattle('Magikarp Jump Karbuck 2', [new GymPokemon('Magikarp Calico (Orange, White)', 34020000, 20)], 'I wish a Pidgeotto would steal me away about now...', [new RouteKillRequirement(10, GameConstants.Region.alola, 38)], undefined, {
    displayName: 'Karbuck',
    imageName: 'Jump Champ Red',
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Kareign'] = new TemporaryBattle('Magikarp Jump Kareign', [new GymPokemon('Magikarp Calico (White, Orange)', 35910000, 20)], 'Wow, you\'ve been drinking your Training Sodas!', [new TemporaryBattleRequirement('Magikarp Jump Karbuck 2')], undefined, {
    displayName: 'Kareign',
    imageName: 'Jump Champ Blue',
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.alola, 38),
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Koylee 2'] = new TemporaryBattle('Magikarp Jump Koylee 2', [new GymPokemon('Magikarp Calico (Orange, White, Black)', 36666000, 20)], 'I need to find more sunken treasures...', [new TemporaryBattleRequirement('Magikarp Jump Kareign')], undefined, {
    displayName: 'Koylee',
    imageName: 'Jump Champ Green',
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.alola, 38),
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Karpress 3'] = new TemporaryBattle('Magikarp Jump Karpress 3', [new GymPokemon('Magikarp Grey Diamonds', 51030000, 20)], 'You cheater! I have seen Rowlet giving you money!!!', [new RouteKillRequirement(10, GameConstants.Region.alola, 39)], undefined, {
    displayName: 'Karpress',
    imageName: 'Jump Champ Blue',
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Karpen 4'] = new TemporaryBattle('Magikarp Jump Karpen 4', [new GymPokemon('Magikarp Brown Tiger', 53865000, 20)], 'My Magikarp might not jump high but it\'s fast enough to win the Naskarp Cup.', [new TemporaryBattleRequirement('Magikarp Jump Karpress 3')], undefined, {
    displayName: 'Karpen',
    imageName: 'Jump Champ Red',
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.alola, 39),
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Karpella 3'] = new TemporaryBattle('Magikarp Jump Karpella 3', [new GymPokemon('Magikarp Purple Patches', 54999000, 20)], 'I will beat you next time! Any fin is possible if you believe in it!', [new TemporaryBattleRequirement('Magikarp Jump Karpen 4')], undefined, {
    displayName: 'Karpella',
    imageName: 'Jump Champ Green',
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.alola, 39),
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Skyhopper 2'] = new TemporaryBattle('Magikarp Jump Skyhopper 2', [new GymPokemon('Magikarp Calico (Orange, Gold)', 68040000, 20)], 'Who wants to place a bait on a rematch?', [new RouteKillRequirement(10, GameConstants.Region.alola, 40)], undefined, {
    displayName: 'Skyhopper',
    imageName: 'Jump Champ Blue',
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
TemporaryBattleList['Magikarp Jump Tykarp 2'] = new TemporaryBattle('Magikarp Jump Tykarp 2', [new GymPokemon('Magikarp Black Mask', 71820000, 20)], 'The way my Magikarp performed is a-trout-cious!', [new TemporaryBattleRequirement('Magikarp Jump Skyhopper 2')], undefined, {
    displayName: 'Tykarp',
    imageName: 'Jump Champ Red',
    visibleRequirement: new RouteKillRequirement(10, GameConstants.Region.alola, 40),
    firstTimeRewardFunction: () => {
        Notifier.notify({
            message: 'You were awarded a Magikarp Biscuit!',
            type: NotificationConstants.NotificationOption.success,
            image: ItemList.Magikarp_Biscuit.image,
        });
        player.gainItem('Magikarp_Biscuit', 1);
    },
});
//Galar Temporary Battles
TemporaryBattleList['Hop 1'] = new TemporaryBattle('Hop 1', [
    new GymPokemon('Wooloo', 131822195, 3),
    new GymPokemon('Sobble', 142807378, 5, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Grass)),
    new GymPokemon('Grookey', 142807378, 5, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Fire)),
    new GymPokemon('Scorbunny', 142807378, 5, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Water)),
], 'Well, that was a shock! Guess I know now why Lee thought he should give you a Pokémon, too...', [new GymBadgeRequirement(BadgeEnums.Champion_Stamp)], undefined, {
    displayName: 'Pokémon Trainer Hop',
    returnTown: 'Postwick',
    imageName: 'Hop',
});
TemporaryBattleList.Mirages = new TemporaryBattle('Mirages', [
    new GymPokemon('Zacian (Battle Hero)', 155623424, 70),
    new GymPokemon('Zamazenta (Battle Hero)', 155623424, 70),
], '<i>The Pokémon fled.</i>', [new TemporaryBattleRequirement('Hop 1')], undefined, {
    hideTrainer: true,
    imageName: 'specialNPCs/Mirages',
});
TemporaryBattleList['Hop 2'] = new TemporaryBattle('Hop 2', [
    new GymPokemon('Wooloo', 120799263, 6),
    new GymPokemon('Rookidee', 120799263, 5),
    new GymPokemon('Sobble', 124574239, 8, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Grass)),
    new GymPokemon('Grookey', 124574239, 8, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Fire)),
    new GymPokemon('Scorbunny', 124574239, 8, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Water)),
], 'And I even got my Pokéball throw perfect too!', [new RouteKillRequirement(10, GameConstants.Region.galar, 2)], undefined, {
    displayName: 'Pokémon Trainer Hop',
    returnTown: 'Professor Magnolia\'s House',
    imageName: 'Hop',
});
TemporaryBattleList['Hop 3'] = new TemporaryBattle('Hop 3', [
    new GymPokemon('Wooloo', 139059603, 11),
    new GymPokemon('Rookidee', 139059603, 12),
    new GymPokemon('Sobble', 143273544, 14, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Grass)),
    new GymPokemon('Grookey', 143273544, 14, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Fire)),
    new GymPokemon('Scorbunny', 143273544, 14, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Water)),
], 'Was that really good training? Looks like I\'d better keep my guard up!', [new RouteKillRequirement(10, GameConstants.Region.galar, 6)], undefined, {
    displayName: 'Pokémon Trainer Hop',
    returnTown: 'Motostoke',
    imageName: 'Hop',
});
TemporaryBattleList['Bede 1'] = new TemporaryBattle('Bede 1', [
    new GymPokemon('Solosis', 150454779, 13),
    new GymPokemon('Gothita', 150454779, 15),
    new GymPokemon('Hatenna', 155014016, 16),
], 'I see... Well, that\'s fine. I wasn\'t really trying all that hard anyway.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Galar Mine'))], undefined, {
    displayName: 'Pokémon Trainer Bede',
    imageName: 'Bede',
});
TemporaryBattleList['Hop 4'] = new TemporaryBattle('Hop 4', [
    new GymPokemon('Wooloo', 197427719, 18),
    new GymPokemon('Corvisquire', 197427719, 19),
    new GymPokemon('Drizzile', 203410376, 21, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Grass)),
    new GymPokemon('Thwackey', 203410376, 21, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Fire)),
    new GymPokemon('Raboot', 203410376, 21, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Water)),
], 'We both got ourselves the same Grass Badge, so how come you\'re so much stronger?', [new RouteKillRequirement(10, GameConstants.Region.galar, 14)], undefined, {
    displayName: 'Pokémon Trainer Hop',
    returnTown: 'Turffield',
    imageName: 'Hop',
});
TemporaryBattleList['Bede 2'] = new TemporaryBattle('Bede 2', [
    new GymPokemon('Solosis', 184374062, 21),
    new GymPokemon('Gothita', 184374062, 22),
    new GymPokemon('Galarian Ponyta', 184374062, 22),
    new GymPokemon('Hatenna', 190359516, 23),
], 'You showed at least a little effort, so I decided I should let you win!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Galar Mine No. 2'))], undefined, {
    displayName: 'Pokémon Trainer Bede',
    imageName: 'Bede',
});
TemporaryBattleList['Marnie 1'] = new TemporaryBattle('Marnie 1', [
    new GymPokemon('Croagunk', 249033761, 24),
    new GymPokemon('Scraggy', 249033761, 24),
    new GymPokemon('Morpeko', 256580237, 26),
], 'You beat me... Guess you must not be so bad after all, huh?', [new RouteKillRequirement(10, GameConstants.Region.galar, 15)], undefined, {
    displayName: 'Pokémon Trainer Marnie',
    imageName: 'Marnie',
});
TemporaryBattleList['Hop 5'] = new TemporaryBattle('Hop 5', [
    new GymPokemon('Cramorant', 250716184, 28),
    new GymPokemon('Toxel', 250716184, 29),
    new GymPokemon('Silicobra', 250716184, 30),
    new GymPokemon('Drizzile', 258803803, 33, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Grass)),
    new GymPokemon('Thwackey', 258803803, 33, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Fire)),
    new GymPokemon('Raboot', 258803803, 33, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Water)),
], 'My strategy goes right to pot when I\'ve got all these bad thoughts running through my head...', [new RouteKillRequirement(10, GameConstants.Region.galar, 23)], undefined, {
    displayName: 'Pokémon Trainer Hop',
    returnTown: 'Stow-on-Side',
    imageName: 'Hop',
});
TemporaryBattleList['Bede 3'] = new TemporaryBattle('Bede 3', [
    new GymPokemon('Duosion', 269057258, 32),
    new GymPokemon('Gothorita', 269057258, 32),
    new GymPokemon('Galarian Ponyta', 269057258, 33),
    new GymPokemon('Hattrem', 277736524, 35),
], 'This has to be some kind of mistake. I demand a do-over!', [new QuestLineStepCompletedRequirement('The Darkest Day', 0)], undefined, {
    displayName: 'Pokémon Trainer Bede',
    returnTown: 'Stow-on-Side',
    imageName: 'Bede',
});
TemporaryBattleList['Hop 6'] = new TemporaryBattle('Hop 6', [
    new GymPokemon('Trevenant', 223228748, 34),
    new GymPokemon('Heatmor', 223228748, 34),
    new GymPokemon('Snorlax', 223228748, 35),
    new GymPokemon('Boltund', 223228748, 35),
    new GymPokemon('Inteleon', 229959263, 37, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Grass)),
    new GymPokemon('Rillaboom', 229959263, 37, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Fire)),
    new GymPokemon('Cinderace', 229959263, 37, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Water)),
], 'This is rubbish... My team can\'t perform if I can\'t get my own head straight as their Trainer...', [new GymBadgeRequirement(BadgeEnums.Galar_Fairy)], undefined, {
    displayName: 'Pokémon Trainer Hop',
    returnTown: 'Hammerlocke',
    imageName: 'Hop',
});
TemporaryBattleList['Hop 7'] = new TemporaryBattle('Hop 7', [
    new GymPokemon('Dubwool', 230701817, 40),
    new GymPokemon('Corviknight', 230701817, 40),
    new GymPokemon('Pincurchin', 230701817, 39),
    new GymPokemon('Snorlax', 230701817, 39),
    new GymPokemon('Inteleon', 237657651, 41, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Grass)),
    new GymPokemon('Rillaboom', 237657651, 41, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Fire)),
    new GymPokemon('Cinderace', 237657651, 41, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Water)),
], 'I still can\'t even beat you, my true rival... But I think I\'m starting to see the light!', [
    new MultiRequirement([
        new TemporaryBattleRequirement('Hop 6'),
        new GymBadgeRequirement(BadgeEnums.Galar_Rock),
        new GymBadgeRequirement(BadgeEnums.Galar_Ice),
    ]),
], undefined, {
    displayName: 'Pokémon Trainer Hop',
    returnTown: 'Circhester',
    imageName: 'Hop',
});
TemporaryBattleList['Marnie 2'] = new TemporaryBattle('Marnie 2', [
    new GymPokemon('Liepard', 291088850, 42),
    new GymPokemon('Toxicroak', 291088850, 43),
    new GymPokemon('Scrafty', 291088850, 43),
    new GymPokemon('Morpeko', 300478812, 44),
], 'What\'s with that?! My Pokémon didn\'t get a chance to really do their thing at all. Ugh!', [new RouteKillRequirement(10, GameConstants.Region.galar, 30)], undefined, {
    displayName: 'Pokémon Trainer Marnie',
    returnTown: 'Circhester',
    imageName: 'Marnie',
});
TemporaryBattleList.Eternatus = new TemporaryBattle('Eternatus', [new GymPokemon('Eternatus', 1978787544, 60)], '<i>You defeated Eternatus, but it looks like it\'s not over yet!</i>', [new QuestLineStepCompletedRequirement('The Darkest Day', 16)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/890',
});
TemporaryBattleList['The Darkest Day'] = new TemporaryBattle('The Darkest Day', [new GymPokemon('Eternamax Eternatus', 2132337401, 60)], '<b><i>You finally defeated Eternatus!</i></b>', [new TemporaryBattleRequirement('Eternatus')], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/890',
});
TemporaryBattleList['Hop 8'] = new TemporaryBattle('Hop 8', [
    new GymPokemon('Dubwool', 406369343, 59),
    new GymPokemon('Pincurchin', 406369343, 59),
    new GymPokemon('Cramorant', 406369343, 58),
    new GymPokemon('Snorlax', 406369343, 58),
    new GymPokemon('Corviknight', 406369343, 58),
    new GymPokemon('Inteleon', 410276760, 60, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Grass)),
    new GymPokemon('Rillaboom', 410276760, 60, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Fire)),
    new GymPokemon('Cinderace', 410276760, 60, new StarterRequirement(GameConstants.Region.galar, GameConstants.Starter.Water)),
], 'I didn\'t expect there to be such a gap between you and me, mate...', [new QuestLineStepCompletedRequirement('Sword and Shield', 0)], undefined, {
    displayName: 'Pokémon Trainer Hop',
    imageName: 'Hop',
});
TemporaryBattleList['Sordward 1'] = new TemporaryBattle('Sordward 1', [
    new GymPokemon('Sirfetch\'d', 613640125, 60),
    new GymPokemon('Golisopod', 613640125, 60),
    new GymPokemon('Doublade', 613640125, 60),
    new GymPokemon('Bisharp', 633434967, 60),
], 'Oh... How can this be? My...my Pokémon...', [new QuestLineStepCompletedRequirement('Sword and Shield', 2)], undefined, {
    displayName: 'Pokémon Trainer Sordward',
    imageName: 'Sordward',
});
TemporaryBattleList['Shielbert 1'] = new TemporaryBattle('Shielbert 1', [
    new GymPokemon('Sirfetch\'d', 613640125, 60),
    new GymPokemon('Bronzong', 613640125, 60),
    new GymPokemon('Falinks', 613640125, 60),
    new GymPokemon('Klinklang', 633434967, 60),
], 'Oh... How can this be? My...my Pokémon...', [new QuestLineStepCompletedRequirement('Sword and Shield', 2)], undefined, {
    displayName: 'Pokémon Trainer Shielbert',
    imageName: 'Shielbert',
});
TemporaryBattleList['Rampaging Tsareena'] = new TemporaryBattle('Rampaging Tsareena', [new GymPokemon('Tsareena', 2401180786, 60)], '<i>The Rampaging Tsareena fainted.</i>', [new QuestLineStepCompletedRequirement('Sword and Shield', 3)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/763',
});
TemporaryBattleList['Rampaging Gyarados'] = new TemporaryBattle('Rampaging Gyarados', [new GymPokemon('Gyarados', 2401180786, 60)], '<i>The Rampaging Gyarados fainted.</i>', [new QuestLineStepCompletedRequirement('Sword and Shield', 4)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/130',
});
TemporaryBattleList['Rampaging Torkoal'] = new TemporaryBattle('Rampaging Torkoal', [new GymPokemon('Torkoal', 2401180786, 60)], '<i>The Rampaging Torkoal fainted.</i>', [new QuestLineStepCompletedRequirement('Sword and Shield', 5)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/324',
});
TemporaryBattleList['Sordward & Shielbert'] = new TemporaryBattle('Sordward & Shielbert', [
    new GymPokemon('Golisopod', 432185147, 62),
    new GymPokemon('Bronzong', 432185147, 62),
    new GymPokemon('Doublade', 432185147, 62),
    new GymPokemon('Falinks', 432185147, 62),
    new GymPokemon('Bisharp', 449825356, 62),
    new GymPokemon('Klinklang', 449825356, 62),
], 'Quite the vexing predicament indeed, surely this must be some kind of mistake...', [new QuestLineStepCompletedRequirement('Sword and Shield', 7)]);
TemporaryBattleList['Rampaging Conkeldurr'] = new TemporaryBattle('Rampaging Conkeldurr', [new GymPokemon('Conkeldurr', 2749793992, 60)], '<i>The Rampaging Conkeldurr fainted.</i>', [new QuestLineStepCompletedRequirement('Sword and Shield', 8)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/534',
});
TemporaryBattleList['Rampaging Dusknoir'] = new TemporaryBattle('Rampaging Dusknoir', [new GymPokemon('Dusknoir', 2749793992, 60)], '<i>The Rampaging Dusknoir fainted.</i>', [new QuestLineStepCompletedRequirement('Sword and Shield', 8)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/477',
});
TemporaryBattleList['Gym Leader Bede'] = new TemporaryBattle('Gym Leader Bede', [
    new GymPokemon('Mawile', 676486974, 61),
    new GymPokemon('Gardevoir', 676486974, 61),
    new GymPokemon('Galarian Rapidash', 676486974, 62),
    new GymPokemon('Hatterene', 698309136, 63),
], 'Thank you for the battle. I can now accept you as the Champion. It\'s painful to admit, but I\'ve come to realise a few of my weaknesses. But I\'ll keep getting stronger. I\'ll reach the pinnacle of what Fairy types can do.', [new QuestLineStepCompletedRequirement('Sword and Shield', 9)], undefined, { imageName: 'Gym Leader Bede' });
TemporaryBattleList['Rampaging Gigalith'] = new TemporaryBattle('Rampaging Gigalith', [new GymPokemon('Gigalith', 2749793992, 60)], '<i>The Rampaging Gigalith fainted.</i>', [new QuestLineStepCompletedRequirement('Sword and Shield', 10)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/526',
});
TemporaryBattleList['Rampaging Froslass'] = new TemporaryBattle('Rampaging Froslass', [new GymPokemon('Froslass', 2749793992, 60)], '<i>The Rampaging Froslass fainted.</i>', [new QuestLineStepCompletedRequirement('Sword and Shield', 10)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/478',
});
TemporaryBattleList['Gym Leader Marnie'] = new TemporaryBattle('Gym Leader Marnie', [
    new GymPokemon('Liepard', 542115147, 59),
    new GymPokemon('Toxicroak', 542115147, 59),
    new GymPokemon('Scrafty', 542115147, 59),
    new GymPokemon('Morpeko', 548679609, 60),
    new GymPokemon('Grimmsnarl', 563532116, 60),
], 'Yeah I lost, but I\'m gonna learn from your battle style and everythin\'!', [new QuestLineStepCompletedRequirement('Sword and Shield', 11)]);
TemporaryBattleList['Rampaging Haxorus'] = new TemporaryBattle('Rampaging Haxorus', [new GymPokemon('Haxorus', 2841435245, 60)], '<i>The Rampaging Haxorus fainted.</i>', [new QuestLineStepCompletedRequirement('Sword and Shield', 12)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/612',
});
TemporaryBattleList['Sordward 2'] = new TemporaryBattle('Sordward 2', [
    new GymPokemon('Sirfetch\'d', 699950617, 64),
    new GymPokemon('Golisopod', 699950617, 64),
    new GymPokemon('Doublade', 699950617, 64),
    new GymPokemon('Bisharp', 722539114, 64),
], 'Oho... My noble Pokémon...', [new QuestLineStepCompletedRequirement('Sword and Shield', 14)], undefined, {
    displayName: 'Pokémon Trainer Sordward',
    imageName: 'Sordward',
});
TemporaryBattleList['Shielbert 2'] = new TemporaryBattle('Shielbert 2', [
    new GymPokemon('Sirfetch\'d', 699950617, 64),
    new GymPokemon('Bronzong', 699950617, 64),
    new GymPokemon('Falinks', 699950617, 64),
    new GymPokemon('Klinklang', 722539114, 64),
], 'Oho... My noble Pokémon...', [new QuestLineStepCompletedRequirement('Sword and Shield', 14)], undefined, {
    displayName: 'Pokémon Trainer Shielbert',
    imageName: 'Shielbert',
});
TemporaryBattleList['Rampaging Zacian'] = new TemporaryBattle('Rampaging Zacian', [new GymPokemon('Zacian (Crowned Sword)', 2980285799, 70)], '<i>Zacian fainted.</i>', [new QuestLineStepCompletedRequirement('Sword and Shield', 16)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/888.01',
});
TemporaryBattleList['Rampaging Zamazenta'] = new TemporaryBattle('Rampaging Zamazenta', [new GymPokemon('Zamazenta (Crowned Shield)', 2980285799, 70)], '<i>Zamazenta fainted.</i>', [new QuestLineStepCompletedRequirement('Sword and Shield', 16)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/889.01',
});
TemporaryBattleList['Klara 1'] = new TemporaryBattle('Klara 1', [
    new GymPokemon('Venipede', 1241081506, 58),
    new GymPokemon('Galarian Slowpoke', 1266153856, 60),
], 'Oh, my next Pokémon\'s gonna make short work-- Huh? That was my last one?', [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)], undefined, {
    displayName: 'Pokémon Trainer Klara',
    returnTown: 'Armor Station',
    imageName: 'Klara',
});
TemporaryBattleList['Avery 1'] = new TemporaryBattle('Avery 1', [
    new GymPokemon('Abra', 1241081506, 58),
    new GymPokemon('Galarian Slowpoke', 1266153856, 60),
], 'Such strength! I\'m in Psyshock!', [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)], undefined, {
    displayName: 'Pokémon Trainer Avery',
    returnTown: 'Armor Station',
    imageName: 'Avery',
});
TemporaryBattleList.Mustard = new TemporaryBattle('Mustard', [
    new GymPokemon('Mienfoo', 1277045143, 60),
    new GymPokemon('Shinx', 1277045143, 60),
], 'That was everything I hoped for and more!', [new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 0)], undefined, {
    displayName: 'Dojo Master Mustard',
});
TemporaryBattleList['Klara 2'] = new TemporaryBattle('Klara 2', [
    new GymPokemon('Galarian Slowpoke', 873047014, 62),
    new GymPokemon('Koffing', 873047014, 62),
    new GymPokemon('Whirlipede', 899502986, 63),
], 'Just what have you got that I don\'t?', [
    new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 6),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Warm-Up Tunnel')),
], undefined, {
    displayName: 'Pokémon Trainer Klara',
    imageName: 'Klara',
});
TemporaryBattleList['Avery 2'] = new TemporaryBattle('Avery 2', [
    new GymPokemon('Galarian Slowpoke', 873047014, 62),
    new GymPokemon('Woobat', 873047014, 62),
    new GymPokemon('Kadabra', 899502986, 63),
], 'What a Psystrike to my poor pride...', [
    new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 6),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Warm-Up Tunnel')),
], undefined, {
    displayName: 'Pokémon Trainer Avery',
    imageName: 'Avery',
});
TemporaryBattleList['Klara 3'] = new TemporaryBattle('Klara 3', [
    new GymPokemon('Skorupi', 676780921, 65),
    new GymPokemon('Galarian Weezing', 676780921, 66),
    new GymPokemon('Whirlipede', 676780921, 66),
    new GymPokemon('Galarian Slowbro', 704125603, 67),
], 'But I didn\'t hold back! I gave it everything I\'ve got...', [new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 9)], undefined, {
    displayName: 'Pokémon Trainer Klara',
    returnTown: 'Master Dojo',
    imageName: 'Klara',
});
TemporaryBattleList['Avery 3'] = new TemporaryBattle('Avery 3', [
    new GymPokemon('Galarian Ponyta', 676780921, 65),
    new GymPokemon('Swoobat', 676780921, 66),
    new GymPokemon('Kadabra', 676780921, 66),
    new GymPokemon('Galarian Slowbro', 704125603, 67),
], 'Oh, I should just Imprison myself for this!', [new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 9)], undefined, {
    displayName: 'Pokémon Trainer Avery',
    returnTown: 'Master Dojo',
    imageName: 'Avery',
});
TemporaryBattleList.Kubfu = new TemporaryBattle('Kubfu', [new GymPokemon('Kubfu', 2911282519, 50)], undefined, [new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 11)], [new OneFromManyRequirement([new ObtainedPokemonRequirement('Kubfu'), new ObtainedPokemonRequirement('Urshifu (Single Strike)'), new ObtainedPokemonRequirement('Urshifu (Rapid Strike)')])], {
    isTrainerBattle: false,
    hideTrainer: true,
    imageName: '../pokemon/891',
});
TemporaryBattleList['Zarude Tribe 1'] = new TemporaryBattle('Zarude Tribe 1', [
    new GymPokemon('Zarude', 521084874, 79),
    new GymPokemon('Zarude', 521084874, 80),
    new GymPokemon('Zarude', 521084874, 81),
    new GymPokemon('Zarude', 521084874, 81),
    new GymPokemon('Zarude', 521084874, 81),
], 'Za! Za! Zarude!', [new QuestLineStepCompletedRequirement('Secrets of the Jungle', 3)], undefined, {
    displayName: 'Zarude Tribe',
    imageName: 'specialNPCs/Zarude Tribe',
    hideTrainer: true,
});
TemporaryBattleList['Zarude Tribe 2'] = new TemporaryBattle('Zarude Tribe 2', [
    new GymPokemon('Zarude', 453871360, 82),
    new GymPokemon('Zarude', 453871360, 82),
    new GymPokemon('Zarude', 453871360, 83),
    new GymPokemon('Zarude', 453871360, 83),
    new GymPokemon('Zarude', 453871360, 84),
    new GymPokemon('Zarude', 453871360, 85),
], 'Za! Za! Zarude!', [new QuestLineStepCompletedRequirement('Secrets of the Jungle', 5)], undefined, {
    displayName: 'Zarude Tribe',
    imageName: 'specialNPCs/Zarude Tribe',
    hideTrainer: true,
});
TemporaryBattleList['Zarude Tribe 3'] = new TemporaryBattle('Zarude Tribe 3', [
    new GymPokemon('Zarude', 453871360, 85),
    new GymPokemon('Zarude', 453871360, 85),
    new GymPokemon('Zarude', 453871360, 86),
    new GymPokemon('Zarude', 453871360, 86),
    new GymPokemon('Zarude', 453871360, 87),
    new GymPokemon('Zarude', 453871360, 88),
], 'Za! Za! Zarude!', [new QuestLineStepCompletedRequirement('Secrets of the Jungle', 5)], undefined, {
    displayName: 'Zarude Tribe',
    imageName: 'specialNPCs/Zarude Tribe',
    hideTrainer: true,
});
TemporaryBattleList['Ash Ketchum Galar'] = new TemporaryBattle('Ash Ketchum Galar', [
    new GymPokemon('Pikachu (Partner Cap)', 447517503, 58),
    new GymPokemon('Sirfetch\'d', 439711964, 56),
    new GymPokemon('Dragonite', 439711964, 56),
    new GymPokemon('Dracovish', 439711964, 60),
    new GymPokemon('Gigantamax Gengar', 460526732, 62),
    new GymPokemon('Mega Lucario', 473535961, 62),
], '...I really thought I could beat you this time. Still, it was a really fun battle! Okay, let\'s go to Glimwood Tangle! I\'ll beat you there!', [new QuestLineStepCompletedRequirement('Secrets of the Jungle', 8)], undefined, {
    displayName: 'Ash Ketchum',
    returnTown: 'Master Dojo',
    imageName: 'Ash Ketchum',
});
TemporaryBattleList['Zarude (Dada)'] = new TemporaryBattle('Zarude (Dada)', [new GymPokemon('Zarude (Dada)', 2887787136, 90)], 'Zaru Zaruza. Zarude!', [new QuestLineStepCompletedRequirement('Secrets of the Jungle', 10)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/893.01',
});
TemporaryBattleList['Flowering Celebi'] = new TemporaryBattle('Flowering Celebi', [new GymPokemon('Flowering Celebi', 2960030616, 100)], 'Cel Cel! Celebi!', [new QuestLineStepCompletedRequirement('Secrets of the Jungle', 12)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/251.01',
});
TemporaryBattleList.Peony = new TemporaryBattle('Peony', [
    new GymPokemon('Copperajah', 1290271017, 70),
    new GymPokemon('Aggron', 1302273540, 70),
], 'Gahahaaa! Look at me, takin\' a thrashin\' from a youngster like you!', [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)], undefined, {
    displayName: 'Pokémon Trainer Peony',
    imageName: 'Peony',
});
TemporaryBattleList.Calyrex = new TemporaryBattle('Calyrex', [new GymPokemon('Calyrex', 2745599773, 80)], 'Cracrown crow. Roooooowwwn rown crown.', [new QuestLineStepCompletedRequirement('The Crown of Galar', 0)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/898',
});
TemporaryBattleList.Glastrier = new TemporaryBattle('Glastrier', [new GymPokemon('Glastrier', 2935511652, 75)], '<i>The Pokémon ran away!</i>', [new QuestLineStepCompletedRequirement('The Crown of Galar', 4)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/896',
});
TemporaryBattleList.Spectrier = new TemporaryBattle('Spectrier', [new GymPokemon('Spectrier', 2935511652, 75)], '<i>The Pokémon ran away!</i>', [new QuestLineStepCompletedRequirement('The Crown of Galar', 4)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/897',
});
TemporaryBattleList['Dyna Tree Birds'] = new TemporaryBattle('Dyna Tree Birds', [
    new GymPokemon('Galarian Articuno', 884062476, 70),
    new GymPokemon('Galarian Zapdos', 884062476, 70),
    new GymPokemon('Galarian Moltres', 884062476, 70),
], '<i>The legendary birds fled in different directions.</i>', [new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 1)], undefined, {
    hideTrainer: true,
    returnTown: 'Dyna Tree Hill',
    imageName: 'specialNPCs/Dyna Tree Birds',
});
TemporaryBattleList['Galarian Articuno 1'] = new TemporaryBattle('Galarian Articuno 1', [new GymPokemon('Galarian Articuno', 2746123804, 100)], '<i>Galarian Articuno fled to elsewhere in the Crown Tundra.</i>', [
    new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 3),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Roaring-Sea Caves')),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Articuno',
    returnTown: 'Roaring-Sea Caves',
    imageName: '../pokemon/144.01',
    visibleRequirement: new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 3),
});
TemporaryBattleList['Galarian Articuno 2'] = new TemporaryBattle('Galarian Articuno 2', [new GymPokemon('Galarian Articuno', 2840817728, 100)], '<i>Galarian Articuno fled to elsewhere in the Crown Tundra.</i>', [
    new TemporaryBattleRequirement('Galarian Articuno 1'),
    new RouteKillRequirement(10, GameConstants.Region.galar, 51),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Articuno',
    returnTown: 'Roaring-Sea Caves',
    imageName: '../pokemon/144.01',
    visibleRequirement: new TemporaryBattleRequirement('Galarian Articuno 1'),
});
TemporaryBattleList['Galarian Articuno 3'] = new TemporaryBattle('Galarian Articuno 3', [new GymPokemon('Galarian Articuno', 2911838171, 100)], '<i>Galarian Articuno fled to elsewhere in the Crown Tundra.</i>', [
    new TemporaryBattleRequirement('Galarian Articuno 2'),
    new RouteKillRequirement(10, GameConstants.Region.galar, 55),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Articuno',
    returnTown: 'Tunnel to the Top',
    imageName: '../pokemon/144.01',
    visibleRequirement: new TemporaryBattleRequirement('Galarian Articuno 2'),
});
TemporaryBattleList['Galarian Zapdos 1'] = new TemporaryBattle('Galarian Zapdos 1', [new GymPokemon('Galarian Zapdos', 2746123804, 100)], '<i>Galarian Zapdos fled to elsewhere in the Wild Area.</i>', [new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 3)], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Zapdos',
    returnTown: 'Motostoke',
    imageName: '../pokemon/145.01',
});
TemporaryBattleList['Galarian Zapdos 2'] = new TemporaryBattle('Galarian Zapdos 2', [new GymPokemon('Galarian Zapdos', 2840817728, 100)], '<i>Galarian Zapdos fled to elsewhere in the Wild Area.</i>', [
    new TemporaryBattleRequirement('Galarian Zapdos 1'),
    new RouteKillRequirement(10, GameConstants.Region.galar, 19),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Zapdos',
    returnTown: 'Dusty Bowl',
    imageName: '../pokemon/145.01',
    visibleRequirement: new TemporaryBattleRequirement('Galarian Zapdos 1'),
});
TemporaryBattleList['Galarian Zapdos 3'] = new TemporaryBattle('Galarian Zapdos 3', [new GymPokemon('Galarian Zapdos', 2911838171, 100)], '<i>Galarian Zapdos fled to elsewhere in the Wild Area.</i>', [
    new TemporaryBattleRequirement('Galarian Zapdos 2'),
    new RouteKillRequirement(10, GameConstants.Region.galar, 7),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Zapdos',
    returnTown: 'Motostoke',
    imageName: '../pokemon/145.01',
    visibleRequirement: new TemporaryBattleRequirement('Galarian Zapdos 2'),
});
TemporaryBattleList['Galarian Moltres 1'] = new TemporaryBattle('Galarian Moltres 1', [new GymPokemon('Galarian Moltres', 2746123804, 100)], '<i>Galarian Moltres fled to elsewhere in the Isle of Armor.</i>', [
    new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 3),
    new RouteKillRequirement(10, GameConstants.Region.galar, 37),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Moltres',
    returnTown: 'Courageous Cavern',
    imageName: '../pokemon/146.01',
    visibleRequirement: new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 3),
});
TemporaryBattleList['Galarian Moltres 2'] = new TemporaryBattle('Galarian Moltres 2', [new GymPokemon('Galarian Moltres', 2840817728, 100)], '<i>Galarian Moltres fled to elsewhere in the Isle of Armor.</i>', [
    new TemporaryBattleRequirement('Galarian Moltres 1'),
    new RouteKillRequirement(10, GameConstants.Region.galar, 41),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Moltres',
    returnTown: 'Master Dojo',
    imageName: '../pokemon/146.01',
    visibleRequirement: new TemporaryBattleRequirement('Galarian Moltres 1'),
});
TemporaryBattleList['Galarian Moltres 3'] = new TemporaryBattle('Galarian Moltres 3', [new GymPokemon('Galarian Moltres', 2911838171, 100)], '<i>Galarian Moltres fled to elsewhere in the Isle of Armor.</i>', [
    new TemporaryBattleRequirement('Galarian Moltres 2'),
    new RouteKillRequirement(10, GameConstants.Region.galar, 34),
], undefined, {
    hideTrainer: true,
    displayName: 'Galarian Moltres',
    returnTown: 'Master Dojo',
    imageName: '../pokemon/146.01',
    visibleRequirement: new TemporaryBattleRequirement('Galarian Moltres 2'),
});
TemporaryBattleList.Regigigas = new TemporaryBattle('Regigigas', [new GymPokemon('Regigigas', 2959185134, 100)], '<i>The ancient giant was defeated!</i>', [new QuestLineStepCompletedRequirement('The Ancient Golems', 6)], [new QuestLineStepCompletedRequirement('The Ancient Golems', 7)], {
    hideTrainer: true,
    isTrainerBattle: false,
    returnTown: 'Freezington',
    imageName: '../pokemon/486',
});
TemporaryBattleList['Max Raid Venusaur'] = new TemporaryBattle('Max Raid Venusaur', [new GymPokemon('Gigantamax Venusaur', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 33), new SeededDateSelectNRequirement(0, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Master Dojo',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Charizard'] = new TemporaryBattle('Max Raid Charizard', [new GymPokemon('Gigantamax Charizard', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new SeededDateSelectNRequirement(1, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Motostoke',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Blastoise'] = new TemporaryBattle('Max Raid Blastoise', [new GymPokemon('Gigantamax Blastoise', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 41), new SeededDateSelectNRequirement(2, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Master Dojo',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Butterfree'] = new TemporaryBattle('Max Raid Butterfree', [new GymPokemon('Gigantamax Butterfree', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 34), new SeededDateSelectNRequirement(3, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Master Dojo',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Pikachu'] = new TemporaryBattle('Max Raid Pikachu', [new GymPokemon('Gigantamax Pikachu', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 48), new SeededDateSelectNRequirement(4, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Freezington',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Meowth'] = new TemporaryBattle('Max Raid Meowth', [new GymPokemon('Gigantamax Meowth', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 54), new SeededDateSelectNRequirement(5, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Tunnel to the Top',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Machamp'] = new TemporaryBattle('Max Raid Machamp', [new GymPokemon('Gigantamax Machamp', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new SeededDateSelectNRequirement(6, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Motostoke',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Gengar'] = new TemporaryBattle('Max Raid Gengar', [new GymPokemon('Gigantamax Gengar', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 11), new SeededDateSelectNRequirement(7, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Motostoke',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Kingler'] = new TemporaryBattle('Max Raid Kingler', [new GymPokemon('Gigantamax Kingler', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 5), new SeededDateSelectNRequirement(8, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Motostoke',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Lapras'] = new TemporaryBattle('Max Raid Lapras', [new GymPokemon('Gigantamax Lapras', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 51), new SeededDateSelectNRequirement(9, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Roaring-Sea Caves',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Eevee'] = new TemporaryBattle('Max Raid Eevee', [new GymPokemon('Gigantamax Eevee', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new SeededDateSelectNRequirement(10, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Freezington',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Snorlax'] = new TemporaryBattle('Max Raid Snorlax', [new GymPokemon('Gigantamax Snorlax', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 53), new SeededDateSelectNRequirement(11, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Dyna Tree Hill',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Garbodor'] = new TemporaryBattle('Max Raid Garbodor', [new GymPokemon('Gigantamax Garbodor', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 38), new SeededDateSelectNRequirement(12, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Warm-Up Tunnel',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Rillaboom'] = new TemporaryBattle('Max Raid Rillaboom', [new GymPokemon('Gigantamax Rillaboom', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 35), new OneFromManyRequirement([new RouteKillRequirement(10, GameConstants.Region.galar, 34), new RouteKillRequirement(10, GameConstants.Region.galar, 40)]), new SeededDateSelectNRequirement(13, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Brawlers\' Cave',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Cinderace'] = new TemporaryBattle('Max Raid Cinderace', [new GymPokemon('Gigantamax Cinderace', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 40), new SeededDateSelectNRequirement(14, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Brawlers\' Cave',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Inteleon'] = new TemporaryBattle('Max Raid Inteleon', [new GymPokemon('Gigantamax Inteleon', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 43), new SeededDateSelectNRequirement(15, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Courageous Cavern',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Corviknight'] = new TemporaryBattle('Max Raid Corviknight', [new GymPokemon('Gigantamax Corviknight', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new SeededDateSelectNRequirement(16, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Professor Magnolia\'s House',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Orbeetle'] = new TemporaryBattle('Max Raid Orbeetle', [new GymPokemon('Gigantamax Orbeetle', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 21), new SeededDateSelectNRequirement(17, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Dusty Bowl',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Drednaw'] = new TemporaryBattle('Max Raid Drednaw', [new GymPokemon('Gigantamax Drednaw', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 8), new SeededDateSelectNRequirement(18, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Professor Magnolia\'s House',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Coalossal'] = new TemporaryBattle('Max Raid Coalossal', [new GymPokemon('Gigantamax Coalossal', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new SeededDateSelectNRequirement(19, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Motostoke',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Flapple'] = new TemporaryBattle('Max Raid Flapple', [new GymPokemon('Gigantamax Flapple', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 50), new SeededDateSelectNRequirement(20, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Roaring-Sea Caves',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Appletun'] = new TemporaryBattle('Max Raid Appletun', [new GymPokemon('Gigantamax Appletun', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 48), new SeededDateSelectNRequirement(21, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Rock Peak Ruins',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Sandaconda'] = new TemporaryBattle('Max Raid Sandaconda', [new GymPokemon('Gigantamax Sandaconda', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 39), new SeededDateSelectNRequirement(22, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Warm-Up Tunnel',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Toxtricity'] = new TemporaryBattle('Max Raid Toxtricity', [new GymPokemon('Gigantamax Toxtricity', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 36), new SeededDateSelectNRequirement(23, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Courageous Cavern',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Centiskorch'] = new TemporaryBattle('Max Raid Centiskorch', [new GymPokemon('Gigantamax Centiskorch', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new SeededDateSelectNRequirement(24, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Motostoke',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Hatterene'] = new TemporaryBattle('Max Raid Hatterene', [new GymPokemon('Gigantamax Hatterene', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 50), new SeededDateSelectNRequirement(25, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Roaring-Sea Caves',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Grimmsnarl'] = new TemporaryBattle('Max Raid Grimmsnarl', [new GymPokemon('Gigantamax Grimmsnarl', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 52), new SeededDateSelectNRequirement(26, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Roaring-Sea Caves',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Alcremie'] = new TemporaryBattle('Max Raid Alcremie', [new GymPokemon('Gigantamax Alcremie', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new SeededDateSelectNRequirement(27, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Dusty Bowl',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Copperajah'] = new TemporaryBattle('Max Raid Copperajah', [new GymPokemon('Gigantamax Copperajah', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 49), new SeededDateSelectNRequirement(28, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Iron Ruins',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Max Raid Duraludon'] = new TemporaryBattle('Max Raid Duraludon', [new GymPokemon('Gigantamax Duraludon', 3077552890, 70)], undefined, [new QuestLineStepCompletedRequirement('The Lair of Giants', 2), new RouteKillRequirement(10, GameConstants.Region.galar, 7), new SeededDateSelectNRequirement(29, 30, 10)], undefined, {
    hideTrainer: true,
    displayName: 'Max Raid',
    returnTown: 'Professor Magnolia\'s House',
    rewardFunction: () => ItemList.Wishing_Piece.gain(1),
    resetDaily: true,
});
TemporaryBattleList['Eternamax Eternatus'] = new TemporaryBattle('Eternamax Eternatus', [new GymPokemon('Eternamax Eternatus', 3148573341, 60)], '<b><i>Defeated again, Eternatus fled far to the south!</i></b>', [new QuestLineStepCompletedRequirement('The Lair of Giants', 34)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/890.01',
});
// Hisui Temporary Battles
TemporaryBattleList['Volo 1'] = new TemporaryBattle('Volo 1', [new GymPokemon('Togepi', 348526193, 5)], 'Moves, items... Use them well, and the world will open up to you!', [new DevelopmentRequirement()], undefined, {
    displayName: 'Ginkgo Guild Member Volo',
    imageName: 'Volo (Ginkgo)',
});
TemporaryBattleList['Akari 1'] = new TemporaryBattle('Akari 1', [new GymPokemon('Pikachu', 348526193, 9)], 'You and your Pokémon seem completely in step with one another.', [new DevelopmentRequirement()], undefined, {
    displayName: 'The Survey Corps\' Akari',
    imageName: 'Akari',
});
TemporaryBattleList['Warden Mai'] = new TemporaryBattle('Warden Mai', [new GymPokemon('Munchlax', 348526193, 10)], 'You really aren\'t one of the usual Galaxy buffoons if you could defeat my partner... Well fought, Munchlax.', [new DevelopmentRequirement()], undefined, {
    imageName: 'Mai',
});
TemporaryBattleList['Alpha Kricketune'] = new TemporaryBattle('Alpha Kricketune', [new GymPokemon('Kricketune', 2031393560, 12)], 'You defeated Kricketune!', [new DevelopmentRequirement()], undefined, {
    isTrainerBattle: false,
    hideTrainer: true,
    imageName: '../pokemon/402',
});
TemporaryBattleList['Warden Lian'] = new TemporaryBattle('Warden Lian', [new GymPokemon('Goomy', 348526193, 15)], 'H-how can this be...', [new DevelopmentRequirement()], undefined, {
    imageName: 'Lian',
});
TemporaryBattleList['Irida 1'] = new TemporaryBattle('Irida 1', [new GymPokemon('Glaceon', 348526193, 17)], 'I see now... Poké Balls are simply your tool of choice, not products of disregard for Pokémon. You still understand the Pokémon and trust them as partners. I feel better putting my trust in you now, I think.', [new DevelopmentRequirement()], undefined, {
    displayName: 'Clan Leader Irida',
    imageName: 'Irida',
});
TemporaryBattleList['Lord of the Woods: Kleavor'] = new TemporaryBattle('Lord of the Woods: Kleavor', [new GymPokemon('Noble Kleavor', 2031393560, 18)], 'The golden light was dispelled from Kleavor, calming it.', [new DevelopmentRequirement()], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/900.01',
});
TemporaryBattleList['Akari 2'] = new TemporaryBattle('Akari 2', [new GymPokemon('Pikachu', 348526193, 9)], 'Oops! I keep finding myself caught up in observing the way the Pokémon use their moves...', [new DevelopmentRequirement()], undefined, {
    displayName: 'The Survey Corps\' Akari',
    imageName: 'Akari',
});
TemporaryBattleList['Volo 2'] = new TemporaryBattle('Volo 2', [
    new GymPokemon('Togepi', 348526193, 22),
    new GymPokemon('Gible', 348526193, 22),
], 'Oh, my! You\'re quite adept at instructing your Pokémon in battle! My goodness, that was fun!', [new DevelopmentRequirement()], undefined, {
    displayName: 'Ginkgo Guild Member Volo',
    imageName: 'Volo (Ginkgo)',
});
TemporaryBattleList['Coin 1'] = new TemporaryBattle('Coin 1', [new GymPokemon('Toxicroak', 348526193, 23)], 'I\'m not fond of this outcome, but at least it\'s still better than plowing fields for the Galaxy Team!', [new DevelopmentRequirement()], undefined, {
    displayName: 'The Bandit Coin',
    imageName: 'Coin',
});
TemporaryBattleList.Ursaluna = new TemporaryBattle('Ursaluna', [new GymPokemon('Ursaluna', 2031393560, 26)], 'You defeated Ursaluna!', [new DevelopmentRequirement()], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/901',
});
TemporaryBattleList['Lady of the Ridge: Lilligant'] = new TemporaryBattle('Lady of the Ridge: Lilligant', [new GymPokemon('Noble Lilligant', 2031393560, 30)], 'The golden light was dispelled from Lilligant, calming it.', [new DevelopmentRequirement()], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/549.02',
});
TemporaryBattleList['Irida 2'] = new TemporaryBattle('Irida 2', [
    new GymPokemon('Eevee', 348526193, 15),
    new GymPokemon('Glaceon', 348526193, 30),
], 'Ah, now I feel better! The world is vast...and I am small within it.', [new DevelopmentRequirement()], undefined, {
    displayName: 'Clan Leader Irida',
    imageName: 'Irida',
});
TemporaryBattleList.Clover = new TemporaryBattle('Clover', [new GymPokemon('Abomasnow', 348526193, 35)], 'I don\'t get it! How\'d I lose?!', [new DevelopmentRequirement()], undefined, {
    displayName: 'The Bandit Clover',
});
TemporaryBattleList['Coin 2'] = new TemporaryBattle('Coin 2', [new GymPokemon('Toxicroak', 348526193, 34)], 'What a blithering mooncalf I am. How could I let myself lose...', [new TemporaryBattleRequirement('Clover')], undefined, {
    displayName: 'The Bandit Coin',
    imageName: 'Coin',
});
TemporaryBattleList['Charm 1'] = new TemporaryBattle('Charm 1', [
    new GymPokemon('Rhydon', 348526193, 34),
    new GymPokemon('Gengar', 348526193, 35),
], 'What a disgrace...', [new TemporaryBattleRequirement('Coin 2')], undefined, {
    displayName: 'The Bandit Charm',
    imageName: 'Charm',
});
TemporaryBattleList['Lord of the Isles: Arcanine'] = new TemporaryBattle('Lord of the Isles: Arcanine', [new GymPokemon('Noble Arcanine', 2031393560, 36)], 'The golden light was dispelled from Arcanine, calming it.', [new DevelopmentRequirement()], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/59.02',
});
TemporaryBattleList['Adaman 1'] = new TemporaryBattle('Adaman 1', [
    new GymPokemon('Eevee', 348526193, 18),
    new GymPokemon('Leafeon', 348526193, 36),
], 'You see how good they are now, yes? No more sneering at them!', [new DevelopmentRequirement()], undefined, {
    displayName: 'Clan Leader Adaman',
    imageName: 'Adaman',
});
TemporaryBattleList['Melli 1'] = new TemporaryBattle('Melli 1', [new GymPokemon('Skuntank', 348526193, 40)], 'Listen here! Neither I nor Skuntank admit defeat to you just yet-our challenge to you still stands!', [new DevelopmentRequirement()], undefined, {
    displayName: 'Warden Melli',
    imageName: 'Melli',
});
TemporaryBattleList['Warden Ingo'] = new TemporaryBattle('Warden Ingo', [
    new GymPokemon('Machoke', 348526193, 41),
    new GymPokemon('Tangela', 348526193, 41),
    new GymPokemon('Gliscor', 348526193, 42),
], 'Bravo! Excellent! Your talent has brought you to the destination called Victory! Now, allow me to call Sneasler...', [new DevelopmentRequirement()], undefined, {
    imageName: 'Ingo',
});
TemporaryBattleList['Melli 2'] = new TemporaryBattle('Melli 2', [
    new GymPokemon('Skorupi', 348526193, 22),
    new GymPokemon('Zubat', 348526193, 22),
    new GymPokemon('Skuntank', 348526193, 44),
], 'Let\'s make one thing clear: I didn\'t lose! You may have won...but there\'s a difference!', [new DevelopmentRequirement()], undefined, {
    displayName: 'Warden Melli',
    imageName: 'Melli',
});
TemporaryBattleList['Lord of the Hollow: Electrode'] = new TemporaryBattle('Lord of the Hollow: Electrode', [new GymPokemon('Noble Electrode', 2031393560, 46)], 'The golden light was dispelled from Electrode, calming it.', [new DevelopmentRequirement()], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/101.02',
});
TemporaryBattleList['Warden Gaeric'] = new TemporaryBattle('Warden Gaeric', [
    new GymPokemon('Froslass', 348526193, 24),
    new GymPokemon('Glalie', 348526193, 48),
], 'Outstanding! I\'m tough as an iceberg, but you smashed me through and through!', [new DevelopmentRequirement()], undefined, {
    imageName: 'Gaeric',
});
TemporaryBattleList['Warden Sabi'] = new TemporaryBattle('Warden Sabi', [
    new GymPokemon('Electivire', 348526193, 30),
    new GymPokemon('Magmortar', 348526193, 30),
    new GymPokemon('Rhyperior', 348526193, 50),
], 'Wow, you caught us AND you beat us. You\'ve won all our games so far! But Braviary still wants to get to know you even better. Up to the roof we go! All right, Braviary! Why not test out their strength for yourself?', [new DevelopmentRequirement()], undefined, {
    imageName: 'Sabi',
});
TemporaryBattleList['Hisuian Braviary'] = new TemporaryBattle('Hisuian Braviary', [new GymPokemon('Hisuian Braviary', 2031393560, 54)], 'You defeated Braviary!', [new DevelopmentRequirement()], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/628.01',
});
TemporaryBattleList['Lord of the Tundra: Avalugg'] = new TemporaryBattle('Lord of the Tundra: Avalugg', [new GymPokemon('Noble Avalugg', 2031393560, 56)], 'The golden light was dispelled from Avalugg, calming it.', [new DevelopmentRequirement()], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/713.02',
});
TemporaryBattleList.Beni = new TemporaryBattle('Beni', [
    new GymPokemon('Mismagius', 348526193, 59),
    new GymPokemon('Sneasler', 348526193, 59),
    new GymPokemon('Gardevoir', 348526193, 60),
    new GymPokemon('Gallade', 348526193, 60),
], 'It seems my ninja techniques will soon be consigned to history...', [new DevelopmentRequirement()], undefined, {
    displayName: 'The Galaxy Team\'s Beni',
    imageName: 'Beni (Ninja)',
});
TemporaryBattleList['Charm 2'] = new TemporaryBattle('Charm 2', [
    new GymPokemon('Rhydon', 348526193, 61),
    new GymPokemon('Gengar', 348526193, 62),
], 'Well, you are rather formidable...', [new TemporaryBattleRequirement('Coin 2')], undefined, {
    displayName: 'The Bandit Charm',
    imageName: 'Charm',
});
TemporaryBattleList['Dialga (Origin)'] = new TemporaryBattle('Dialga (Origin)', [new GymPokemon('Dialga (Origin)', 2031393560, 65)], 'Dialga was captured in the Origin Ball and returned to its base form!', [new DevelopmentRequirement()], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/483.01',
});
TemporaryBattleList['Palkia (Origin)'] = new TemporaryBattle('Palkia (Origin)', [new GymPokemon('Palkia (Origin)', 2031393560, 65)], 'Palkia was captured in the Origin Ball and returned to its base form!', [new DevelopmentRequirement()], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/484.01',
});
TemporaryBattleList['The Galaxy Team\'s Kamado'] = new TemporaryBattle('The Galaxy Team\'s Kamado', [
    new GymPokemon('Golem', 348526193, 65),
    new GymPokemon('Clefable', 348526193, 65),
    new GymPokemon('Hisuian Braviary', 348526193, 65),
    new GymPokemon('Heracross', 348526193, 65),
    new GymPokemon('Snorlax', 348526193, 66),
], 'Even frightful creatures like Pokémon can become powerful allies...', [new DevelopmentRequirement()]);
TemporaryBattleList['Adaman 2'] = new TemporaryBattle('Adaman 2', [
    new GymPokemon('Umbreon', 348526193, 32),
    new GymPokemon('Vaporeon', 348526193, 32),
    new GymPokemon('Leafeon', 348526193, 64),
], 'You\'re really something...and I\'m a man of my word. So, here\'s that treasure.', [new DevelopmentRequirement()], undefined, {
    displayName: 'Clan Leader Adaman',
    imageName: 'Adaman',
});
TemporaryBattleList['Irida 3'] = new TemporaryBattle('Irida 3', [
    new GymPokemon('Espeon', 348526193, 32),
    new GymPokemon('Flareon', 348526193, 32),
    new GymPokemon('Glaceon', 348526193, 64),
], 'I wonder... Are there people even stronger than you out in the world, with Pokémon stronger than yours? I\'ll just have to find out for myself I suppose! Here! The treasure I promised you.', [new DevelopmentRequirement()], undefined, {
    displayName: 'Clan Leader Irida',
    imageName: 'Irida',
});
TemporaryBattleList['Volo 3'] = new TemporaryBattle('Volo 3', [
    new GymPokemon('Giratina (Altered)', 348526193, 70),
    new GymPokemon('Giratina (Origin)', 348526193, 70),
], 'Turning tail and running? From this puny HUMAN? Pathetic! I was the one to feed you the power you needed so that you could take on Arceus! I was the one who gave you the chance to claw open that space-time rift, driving the deity of space and time mad so that you could drag the creator out from hiding!', [new DevelopmentRequirement()], undefined, {
    displayName: 'Pokémon Wielder Volo',
    imageName: 'Volo',
});
TemporaryBattleList['Tornadus 1'] = new TemporaryBattle('Tornadus 1', [new GymPokemon('Tornadus', 2031393560, 70)], undefined, [new QuestLineStepCompletedRequirement('Incarnate Forces of Hisui', 0)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/641',
    returnTown: 'Ancient Retreat',
});
TemporaryBattleList['Tornadus 2'] = new TemporaryBattle('Tornadus 2', [new GymPokemon('Tornadus', 2031393560, 70)], undefined, [new TemporaryBattleRequirement('Tornadus 1')], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/641',
    returnTown: 'Ancient Retreat',
});
TemporaryBattleList['Tornadus 3'] = new TemporaryBattle('Tornadus 3', [new GymPokemon('Tornadus', 2031393560, 70)], undefined, [new TemporaryBattleRequirement('Tornadus 2')], [new QuestLineStepCompletedRequirement('Incarnate Forces of Hisui', 1), new TemporaryBattleRequirement('Tornadus 3')], {
    isTrainerBattle: false,
    hideTrainer: true,
    imageName: '../pokemon/641',
    returnTown: 'Ancient Retreat',
});
TemporaryBattleList['Thundurus 1'] = new TemporaryBattle('Thundurus 1', [new GymPokemon('Thundurus', 2031393560, 70)], undefined, [new QuestLineStepCompletedRequirement('Incarnate Forces of Hisui', 0)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/642',
    returnTown: 'Ancient Retreat',
});
TemporaryBattleList['Thundurus 2'] = new TemporaryBattle('Thundurus 2', [new GymPokemon('Thundurus', 2031393560, 70)], undefined, [new TemporaryBattleRequirement('Thundurus 1')], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/642',
    returnTown: 'Ancient Retreat',
});
TemporaryBattleList['Thundurus 3'] = new TemporaryBattle('Thundurus 3', [new GymPokemon('Thundurus', 2031393560, 70)], undefined, [new TemporaryBattleRequirement('Thundurus 2')], [new QuestLineStepCompletedRequirement('Incarnate Forces of Hisui', 1), new TemporaryBattleRequirement('Thundurus 3')], {
    isTrainerBattle: false,
    hideTrainer: true,
    imageName: '../pokemon/642',
    returnTown: 'Ancient Retreat',
});
TemporaryBattleList['Landorus 1'] = new TemporaryBattle('Landorus 1', [new GymPokemon('Landorus', 2031393560, 70)], undefined, [new QuestLineStepCompletedRequirement('Incarnate Forces of Hisui', 0)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/645',
    returnTown: 'Ancient Retreat',
});
TemporaryBattleList['Landorus 2'] = new TemporaryBattle('Landorus 2', [new GymPokemon('Landorus', 2031393560, 70)], undefined, [new TemporaryBattleRequirement('Landorus 1')], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/645',
    returnTown: 'Ancient Retreat',
});
TemporaryBattleList['Landorus 3'] = new TemporaryBattle('Landorus 3', [new GymPokemon('Landorus', 2031393560, 70)], undefined, [new TemporaryBattleRequirement('Landorus 2')], [new QuestLineStepCompletedRequirement('Incarnate Forces of Hisui', 1), new TemporaryBattleRequirement('Landorus 3')], {
    isTrainerBattle: false,
    hideTrainer: true,
    imageName: '../pokemon/645',
    returnTown: 'Ancient Retreat',
});
TemporaryBattleList['Enamorus 1'] = new TemporaryBattle('Enamorus 1', [new GymPokemon('Enamorus', 2031393560, 65)], undefined, [new QuestLineStepCompletedRequirement('Incarnate Forces of Hisui', 2)], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/905',
    returnTown: 'Ancient Retreat',
});
TemporaryBattleList['Enamorus 2'] = new TemporaryBattle('Enamorus 2', [new GymPokemon('Enamorus', 2031393560, 65)], undefined, [new TemporaryBattleRequirement('Enamorus 1')], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/905',
    returnTown: 'Ancient Retreat',
});
TemporaryBattleList['Enamorus 3'] = new TemporaryBattle('Enamorus 3', [new GymPokemon('Enamorus', 2031393560, 65)], 'Before you could attempt to capture it, Enamorus fled to roam the region!', [new TemporaryBattleRequirement('Enamorus 2')], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/905',
    returnTown: 'Ancient Retreat',
});
TemporaryBattleList.Arceus = new TemporaryBattle('Arceus', [new GymPokemon('Arceus (Normal)', 2031393560, 75)], 'Arceus granted you a part of its self, and the Legend Plate!', //That text needs changed, not sure what to, though,
[new DevelopmentRequirement()], undefined, {
    hideTrainer: true,
    imageName: '../pokemon/493',
});
// Paldea Temporary Battles
TemporaryBattleList['Paradise Protection Protocol'] = new TemporaryBattle('Paradise Protection Protocol', [
    new GymPokemon('Koraidon', 710987746, 70),
    new GymPokemon('Miraidon', 710987746, 70),
], '<i>The Guardians of Paradise were defeated!</i>', [
    new GymBadgeRequirement(BadgeEnums.Scarlet),
    new GymBadgeRequirement(BadgeEnums.Violet),
]);
TemporaryBattleList;
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/enums/Badges.d.ts" />
class TemporaryBattleRunner {
    static startBattle(battle) {
        var _a;
        this.running(false);
        this.battleObservable(battle);
        App.game.gameState = GameConstants.GameState.idle;
        DungeonRunner.timeBonus(FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute));
        this.timeLeft(GameConstants.TEMP_BATTLE_TIME * this.timeBonus());
        this.timeLeftPercentage(100);
        player.route = 0;
        Battle.route = 0;
        Battle.catching(!((_a = battle.optionalArgs.isTrainerBattle) !== null && _a !== void 0 ? _a : true));
        TemporaryBattleBattle.totalPokemons(battle.getPokemonList().length);
        TemporaryBattleBattle.index(0);
        TemporaryBattleBattle.generateNewEnemy();
        App.game.gameState = GameConstants.GameState.temporaryBattle;
        this.running(true);
        this.resetGif();
        setTimeout(() => {
            this.hideGif();
        }, GameConstants.GYM_COUNTDOWN);
    }
    static hideGif() {
        $('#temporaryBattleGoContainer').hide();
    }
    static resetGif() {
        if (!Settings.getSetting('showGymGoAnimation').value) {
            return;
        }
        $('#temporaryBattleGoContainer').show();
        setTimeout(() => {
            $('#temporaryBattleGo').attr('src', 'assets/gifs/go.gif');
        }, 0);
    }
    static tick() {
        if (!this.running()) {
            return;
        }
        if (this.timeLeft() < 0) {
            this.battleLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.TEMP_BATTLE_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / (GameConstants.TEMP_BATTLE_TIME * FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute)) * 100));
        const currentFluteBonus = FluteEffectRunner.getFluteMultiplier(GameConstants.FluteItemType.Time_Flute);
        if (currentFluteBonus != this.timeBonus()) {
            if (currentFluteBonus > this.timeBonus()) {
                if (this.timeBonus() === 1) {
                    this.timeBonus(currentFluteBonus);
                    this.timeLeft(this.timeLeft() * this.timeBonus());
                }
                else {
                    this.timeLeft(this.timeLeft() / this.timeBonus());
                    this.timeBonus(currentFluteBonus);
                    this.timeLeft(this.timeLeft() * this.timeBonus());
                }
            }
            else {
                this.timeLeft(this.timeLeft() / this.timeBonus());
                this.timeBonus(currentFluteBonus);
            }
        }
    }
    static battleLost() {
        var _a;
        if (this.running()) {
            this.running(false);
            Notifier.notify({
                message: `It appears you are not strong enough to defeat ${TemporaryBattleBattle.battle.getDisplayName()}.`,
                type: NotificationConstants.NotificationOption.danger,
            });
            player.town = (_a = TemporaryBattleBattle.battle.getTown()) !== null && _a !== void 0 ? _a : TownList[GameConstants.StartingTowns[player.region]];
            App.game.gameState = GameConstants.GameState.town;
        }
    }
    static battleWon(battle) {
        var _a, _b, _c, _d, _e;
        if (this.running()) {
            this.running(false);
            if (App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex(battle.name)]() == 0) {
                (_b = (_a = battle.optionalArgs).firstTimeRewardFunction) === null || _b === void 0 ? void 0 : _b.call(_a);
                if (battle.defeatMessage) {
                    $('#temporaryBattleWonModal').modal('show');
                }
            }
            (_d = (_c = battle.optionalArgs).rewardFunction) === null || _d === void 0 ? void 0 : _d.call(_c);
            GameHelper.incrementObservable(App.game.statistics.temporaryBattleDefeated[GameConstants.getTemporaryBattlesIndex(battle.name)]);
            player.town = (_e = battle.getTown()) !== null && _e !== void 0 ? _e : TownList[GameConstants.StartingTowns[player.region]];
            App.game.gameState = GameConstants.GameState.town;
        }
    }
    static finalPokemon() {
        return TemporaryBattleBattle.pokemonsUndefeatedComputable() === 1;
    }
    static getEnvironmentArea() {
        const battle = TemporaryBattleRunner.battleObservable();
        return battle === null || battle === void 0 ? void 0 : battle.optionalArgs.environment;
    }
    static getBattleBackgroundImage() {
        var _a, _b, _c;
        const battle = TemporaryBattleRunner.battleObservable();
        return (_c = (_a = battle === null || battle === void 0 ? void 0 : battle.optionalArgs.battleBackground) !== null && _a !== void 0 ? _a : (_b = battle === null || battle === void 0 ? void 0 : battle.parent) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : battle === null || battle === void 0 ? void 0 : battle.optionalArgs.returnTown;
    }
}
TemporaryBattleRunner.timeLeft = ko.observable(GameConstants.TEMP_BATTLE_TIME);
TemporaryBattleRunner.timeLeftPercentage = ko.observable(100);
TemporaryBattleRunner.timeBonus = ko.observable(1);
TemporaryBattleRunner.battleObservable = ko.observable();
TemporaryBattleRunner.running = ko.observable(false);
TemporaryBattleRunner.timeLeftSeconds = ko.pureComputed(() => {
    return (Math.ceil(TemporaryBattleRunner.timeLeft() / 100) / 10).toFixed(1);
});
/* Uncomment once Z-Moves are ready
document.addEventListener('DOMContentLoaded', () => {
    $('#temporaryBattleWonModal').on('hidden.bs.modal', () => {
        if (TemporaryBattleBattle.battle.name === 'Hau 2') {
            KeyItemController.showGainModal(KeyItemType['Z-Power_Ring']);
        }
    });
});*/
class NPC {
    constructor(name, dialog, options = {}, type = NPCType.Default) {
        this.name = name;
        this.dialog = dialog;
        this.options = options;
        this.type = type;
        this.talkedTo = ko.observable(false); // Used for custom quests
        this.saveKey = 0;
        if (this.options.saveKey) {
            this.saveKey = GameHelper.hash(this.options.saveKey);
        }
    }
    get dialogHTML() {
        return this.dialog.map(line => `<p>${TextMerger.mergeText(line)}</p>`).join('\n');
    }
    isVisible() {
        var _a, _b;
        return (_b = (_a = this.options.requirement) === null || _a === void 0 ? void 0 : _a.isCompleted()) !== null && _b !== void 0 ? _b : true;
    }
    setTalkedTo() {
        this.talkedTo(true);
        if (this.saveKey && !this.hasTalkedTo()) {
            GameHelper.incrementObservable(App.game.statistics.npcTalkedTo[this.saveKey]);
        }
    }
    hasTalkedTo() {
        return this.saveKey ? App.game.statistics.npcTalkedTo[this.saveKey]() > 0 : false;
    }
}
///<reference path="./NPC.ts"/>
class AssistantNPC extends NPC {
    constructor(name, dialogue, listingDialogue, assistantType, image = undefined, requirement) {
        super(name, dialogue, { image: image, requirement: requirement });
        this.name = name;
        this.dialogue = dialogue;
        this.listingDialogue = listingDialogue;
        this.assistantType = assistantType;
    }
    get dialogHTML() {
        const pokemonList = () => {
            switch (this.assistantType) {
                case 'baby':
                    return App.game.party.caughtPokemon.filter(p => pokemonBabyPrevolutionMap[p.name] &&
                        player.highestRegion() >= pokemonMap[pokemonBabyPrevolutionMap[p.name]].nativeRegion &&
                        !App.game.party.caughtPokemon.some(e => e.name === pokemonBabyPrevolutionMap[p.name])).sort((a, b) => a.id - b.id);
                case 'evolution':
                    return App.game.party.caughtPokemon.filter(p => {
                        var _a;
                        return (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.some(e => e.trigger !== EvoTrigger.NONE &&
                            !App.game.party.caughtPokemon.some(p => p.name === e.evolvedPokemon) &&
                            player.highestRegion() >= pokemonMap[e.evolvedPokemon].nativeRegion &&
                            Math.floor(pokemonMap[e.basePokemon].id) != Math.floor(pokemonMap[e.evolvedPokemon].id));
                    }).sort((a, b) => a.id - b.id);
                default:
                    return ['Pikachu'];
            }
        };
        // If list, lead into it with dialogue
        let leadingDialogue = '';
        if (pokemonList === null || pokemonList === void 0 ? void 0 : pokemonList().length) {
            leadingDialogue = `<p>${this.listingDialogue.join('')}</p>`;
        }
        const imageListHTML = pokemonList === null || pokemonList === void 0 ? void 0 : pokemonList().map(p => `<img width="72" src="assets/images/pokemon/${p.id}.png" />`).join('');
        return super.dialogHTML + leadingDialogue + imageListHTML;
    }
}
class BattleCafe extends TownContent {
    constructor() {
        super([new ObtainedPokemonRequirement('Milcery')]);
    }
    cssClass() {
        return 'btn btn-info';
    }
    onclick() {
        $('#battleCafeModal').modal('show');
    }
    text() {
        return 'Battle Café';
    }
    areaStatus() {
        const status = super.areaStatus();
        if (status.includes(areaStatus.locked)) {
            return [areaStatus.locked];
        }
        const pokerusUnlocked = Settings.getSetting(`--${areaStatus[areaStatus.missingResistant]}`).isUnlocked();
        const alcremieList = Object.values(BattleCafeController.evolutions).flatMap(sweet => Object.values(sweet));
        let incomplete = false;
        if (alcremieList.some(a => a.getCaughtStatus() == CaughtStatus.NotCaught)) {
            status.push(areaStatus.uncaughtPokemon);
            incomplete = true;
        }
        if (alcremieList.some(a => a.getCaughtStatus() == CaughtStatus.Caught)) {
            status.push(areaStatus.uncaughtShinyPokemon);
            incomplete = true;
        }
        if (pokerusUnlocked && alcremieList.some(a => a.getPokerusStatus() < GameConstants.Pokerus.Resistant)) {
            status.push(areaStatus.missingResistant);
            incomplete = true;
        }
        if (incomplete && BattleCafeController.spinsLeft() > 0) {
            status.push(areaStatus.incomplete);
        }
        return status;
    }
}
class BattleCafeSaveObject {
    constructor() {
        this.saveKey = 'BattleCafe';
    }
    toJSON() {
        return {
            spinsLeft: BattleCafeController.spinsLeft(),
        };
    }
    fromJSON(json) {
        var _a;
        if (!json) {
            return;
        }
        BattleCafeController.spinsLeft((_a = json.spinsLeft) !== null && _a !== void 0 ? _a : BattleCafeController.baseDailySpins);
    }
}
class BattleCafeController {
    static spinsPerDay() {
        // Give additional spins for each sweet type completed, shiny, and resistant
        let spins = this.baseDailySpins;
        const sweetStatus = GameHelper.enumStrings(GameConstants.AlcremieSweet)
            .map((s) => ({
            caught: BattleCafeController.getCaughtStatus(GameConstants.AlcremieSweet[s])(),
            pokerus: BattleCafeController.getPokerusStatus(GameConstants.AlcremieSweet[s])(),
        }));
        // Caught
        spins += sweetStatus.filter((s) => s.caught >= CaughtStatus.Caught).length;
        // Caught Shiny
        spins += sweetStatus.filter((s) => s.caught == CaughtStatus.CaughtShiny).length;
        // Resistant
        spins += sweetStatus.filter((s) => s.pokerus == GameConstants.Pokerus.Resistant).length;
        return spins;
    }
    static spin(clockwise) {
        if (!BattleCafeController.canSpin()) {
            return;
        }
        BattleCafeController.clockwise(clockwise);
        BattleCafeController.isSpinning(true);
        const spinTime = +$('#battleCafeDuration').val();
        const sweet = BattleCafeController.selectedSweet();
        setTimeout(() => {
            BattleCafeController.isSpinning(false);
            BattleCafeController.unlockAlcremie(clockwise, spinTime, sweet);
            BattleCafeController.spinsLeft(BattleCafeController.spinsLeft() - 1);
            BattleCafeController.getPrice(sweet).forEach(b => GameHelper.incrementObservable(App.game.farming.berryList[b.berry], b.amount * -1));
        }, spinTime * 1000);
    }
    static unlockAlcremie(clockwise, spinTime, sweet) {
        let spin;
        if (spinTime == 3600) {
            (new PokemonItem('Milcery (Cheesy)', 0)).gain(1);
            return;
        }
        if (DayCycle.currentDayCyclePart() === DayCyclePart.Dusk && !clockwise && spinTime > 10) {
            spin = GameConstants.AlcremieSpins.at5Above10;
        }
        else if ([DayCyclePart.Night, DayCyclePart.Dawn].includes(DayCycle.currentDayCyclePart())) {
            if (clockwise && spinTime < 5) {
                spin = GameConstants.AlcremieSpins.nightClockwiseBelow5;
            }
            else if (clockwise && spinTime >= 5) {
                spin = GameConstants.AlcremieSpins.nightClockwiseAbove5;
            }
            else if (!clockwise && spinTime < 5) {
                spin = GameConstants.AlcremieSpins.nightCounterclockwiseBelow5;
            }
            else if (!clockwise && spinTime >= 5) {
                spin = GameConstants.AlcremieSpins.nightCounterclockwiseAbove5;
            }
        }
        else { // Is day
            if (clockwise && spinTime < 5) {
                spin = GameConstants.AlcremieSpins.dayClockwiseBelow5;
            }
            else if (clockwise && spinTime >= 5) {
                spin = GameConstants.AlcremieSpins.dayClockwiseAbove5;
            }
            else if (!clockwise && spinTime < 5) {
                spin = GameConstants.AlcremieSpins.dayCounterclockwiseBelow5;
            }
            else if (!clockwise && spinTime >= 5) {
                spin = GameConstants.AlcremieSpins.dayCounterclockwiseAbove5;
            }
        }
        BattleCafeController.evolutions[sweet][spin].gain(1);
    }
    static canSpin() {
        if (BattleCafeController.selectedSweet() == undefined) {
            Notifier.notify({
                message: 'No sweet selected.',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (BattleCafeController.isSpinning()) {
            Notifier.notify({
                message: 'Already spinning.',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (BattleCafeController.spinsLeft() < 1) {
            Notifier.notify({
                message: 'No spins left today.',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (+$('#battleCafeDuration').val() > 20 && +$('#battleCafeDuration').val() != 3600) {
            Notifier.notify({
                message: 'Can\'t spin for more than 20 seconds, unless...',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (+$('#battleCafeDuration').val() < 1) {
            Notifier.notify({
                message: 'It only counts as spinning, if you spin for some time...',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        if (!BattleCafeController.canBuySweet(BattleCafeController.selectedSweet())()) {
            Notifier.notify({
                message: 'Not enough berries for this sweet.',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        return true;
    }
    static canBuySweet(sweet) {
        return ko.pureComputed(() => {
            return BattleCafeController.getPrice(sweet).every(b => {
                if (App.game.farming.berryList[b.berry]() < b.amount) {
                    return false;
                }
                return true;
            });
        });
    }
    static getCaughtStatus(sweet) {
        return ko.pureComputed(() => {
            return Math.min(...Object.values(BattleCafeController.evolutions[sweet]).map((pokemon) => pokemon.getCaughtStatus()));
        });
    }
    static getPokerusStatus(sweet) {
        return ko.pureComputed(() => {
            return Math.min(...Object.values(BattleCafeController.evolutions[sweet]).map((pokemon) => pokemon.getPokerusStatus()));
        });
    }
    static getPrice(sweet) {
        switch (sweet) {
            // should be easy to do, without touching the farm
            case GameConstants.AlcremieSweet['Strawberry Sweet']:
                return [
                    { berry: BerryType.Cheri, amount: 500 },
                    { berry: BerryType.Leppa, amount: 500 },
                    { berry: BerryType.Razz, amount: 50 },
                ];
            // max gen 2
            case GameConstants.AlcremieSweet['Clover Sweet']:
                return [
                    { berry: BerryType.Wepear, amount: 1000 },
                    { berry: BerryType.Aguav, amount: 2000 },
                    { berry: BerryType.Lum, amount: 10 },
                ];
            // max gen 3
            case GameConstants.AlcremieSweet['Star Sweet']:
                return [
                    { berry: BerryType.Pinap, amount: 2000 },
                    { berry: BerryType.Grepa, amount: 100 },
                    { berry: BerryType.Nomel, amount: 50 },
                ];
            // max gen 4
            case GameConstants.AlcremieSweet['Berry Sweet']:
                return [
                    { berry: BerryType.Passho, amount: 1000 },
                    { berry: BerryType.Yache, amount: 75 },
                    { berry: BerryType.Coba, amount: 150 },
                ];
            // max gen 4
            case GameConstants.AlcremieSweet['Ribbon Sweet']:
                return [
                    { berry: BerryType.Bluk, amount: 3000 },
                    { berry: BerryType.Pamtre, amount: 50 },
                    { berry: BerryType.Payapa, amount: 100 },
                ];
            // max gen 5
            case GameConstants.AlcremieSweet['Flower Sweet']:
                return [
                    { berry: BerryType.Figy, amount: 15000 },
                    { berry: BerryType.Iapapa, amount: 20000 },
                    { berry: BerryType.Liechi, amount: 3 },
                ];
            // max gen 5
            case GameConstants.AlcremieSweet['Love Sweet']:
                return [
                    { berry: BerryType.Haban, amount: 200 },
                    { berry: BerryType.Roseli, amount: 700 },
                    { berry: BerryType.Lansat, amount: 5 },
                ];
        }
    }
    static calcMaxSpins(sweet) {
        const maxSpins = BattleCafeController.getPrice(sweet)
            .map((cost) => Math.floor(App.game.farming.berryList[cost.berry]() / cost.amount));
        return Math.min(...maxSpins);
    }
}
BattleCafeController.selectedSweet = ko.observable(undefined);
BattleCafeController.baseDailySpins = 3;
BattleCafeController.spinsLeft = ko.observable(BattleCafeController.baseDailySpins);
BattleCafeController.isSpinning = ko.observable(false);
BattleCafeController.clockwise = ko.observable(false);
BattleCafeController.evolutions = {
    [GameConstants.AlcremieSweet['Strawberry Sweet']]: {
        [GameConstants.AlcremieSpins.dayClockwiseBelow5]: new PokemonItem('Alcremie (Strawberry Vanilla)'),
        [GameConstants.AlcremieSpins.dayCounterclockwiseBelow5]: new PokemonItem('Alcremie (Strawberry Ruby Cream)'),
        [GameConstants.AlcremieSpins.nightClockwiseBelow5]: new PokemonItem('Alcremie (Strawberry Matcha)'),
        [GameConstants.AlcremieSpins.nightCounterclockwiseAbove5]: new PokemonItem('Alcremie (Strawberry Mint)'),
        [GameConstants.AlcremieSpins.nightClockwiseAbove5]: new PokemonItem('Alcremie (Strawberry Lemon)'),
        [GameConstants.AlcremieSpins.nightCounterclockwiseBelow5]: new PokemonItem('Alcremie (Strawberry Salted)'),
        [GameConstants.AlcremieSpins.dayCounterclockwiseAbove5]: new PokemonItem('Alcremie (Strawberry Ruby Swirl)'),
        [GameConstants.AlcremieSpins.dayClockwiseAbove5]: new PokemonItem('Alcremie (Strawberry Caramel)'),
        [GameConstants.AlcremieSpins.at5Above10]: new PokemonItem('Alcremie (Strawberry Rainbow)'),
    },
    [GameConstants.AlcremieSweet['Love Sweet']]: {
        [GameConstants.AlcremieSpins.dayClockwiseBelow5]: new PokemonItem('Alcremie (Love Vanilla)'),
        [GameConstants.AlcremieSpins.dayCounterclockwiseBelow5]: new PokemonItem('Alcremie (Love Ruby Cream)'),
        [GameConstants.AlcremieSpins.nightClockwiseBelow5]: new PokemonItem('Alcremie (Love Matcha)'),
        [GameConstants.AlcremieSpins.nightCounterclockwiseAbove5]: new PokemonItem('Alcremie (Love Mint)'),
        [GameConstants.AlcremieSpins.nightClockwiseAbove5]: new PokemonItem('Alcremie (Love Lemon)'),
        [GameConstants.AlcremieSpins.nightCounterclockwiseBelow5]: new PokemonItem('Alcremie (Love Salted)'),
        [GameConstants.AlcremieSpins.dayCounterclockwiseAbove5]: new PokemonItem('Alcremie (Love Ruby Swirl)'),
        [GameConstants.AlcremieSpins.dayClockwiseAbove5]: new PokemonItem('Alcremie (Love Caramel)'),
        [GameConstants.AlcremieSpins.at5Above10]: new PokemonItem('Alcremie (Love Rainbow)'),
    },
    [GameConstants.AlcremieSweet['Berry Sweet']]: {
        [GameConstants.AlcremieSpins.dayClockwiseBelow5]: new PokemonItem('Alcremie (Berry Vanilla)'),
        [GameConstants.AlcremieSpins.dayCounterclockwiseBelow5]: new PokemonItem('Alcremie (Berry Ruby Cream)'),
        [GameConstants.AlcremieSpins.nightClockwiseBelow5]: new PokemonItem('Alcremie (Berry Matcha)'),
        [GameConstants.AlcremieSpins.nightCounterclockwiseAbove5]: new PokemonItem('Alcremie (Berry Mint)'),
        [GameConstants.AlcremieSpins.nightClockwiseAbove5]: new PokemonItem('Alcremie (Berry Lemon)'),
        [GameConstants.AlcremieSpins.nightCounterclockwiseBelow5]: new PokemonItem('Alcremie (Berry Salted)'),
        [GameConstants.AlcremieSpins.dayCounterclockwiseAbove5]: new PokemonItem('Alcremie (Berry Ruby Swirl)'),
        [GameConstants.AlcremieSpins.dayClockwiseAbove5]: new PokemonItem('Alcremie (Berry Caramel)'),
        [GameConstants.AlcremieSpins.at5Above10]: new PokemonItem('Alcremie (Berry Rainbow)'),
    },
    [GameConstants.AlcremieSweet['Clover Sweet']]: {
        [GameConstants.AlcremieSpins.dayClockwiseBelow5]: new PokemonItem('Alcremie (Clover Vanilla)'),
        [GameConstants.AlcremieSpins.dayCounterclockwiseBelow5]: new PokemonItem('Alcremie (Clover Ruby Cream)'),
        [GameConstants.AlcremieSpins.nightClockwiseBelow5]: new PokemonItem('Alcremie (Clover Matcha)'),
        [GameConstants.AlcremieSpins.nightCounterclockwiseAbove5]: new PokemonItem('Alcremie (Clover Mint)'),
        [GameConstants.AlcremieSpins.nightClockwiseAbove5]: new PokemonItem('Alcremie (Clover Lemon)'),
        [GameConstants.AlcremieSpins.nightCounterclockwiseBelow5]: new PokemonItem('Alcremie (Clover Salted)'),
        [GameConstants.AlcremieSpins.dayCounterclockwiseAbove5]: new PokemonItem('Alcremie (Clover Ruby Swirl)'),
        [GameConstants.AlcremieSpins.dayClockwiseAbove5]: new PokemonItem('Alcremie (Clover Caramel)'),
        [GameConstants.AlcremieSpins.at5Above10]: new PokemonItem('Alcremie (Clover Rainbow)'),
    },
    [GameConstants.AlcremieSweet['Flower Sweet']]: {
        [GameConstants.AlcremieSpins.dayClockwiseBelow5]: new PokemonItem('Alcremie (Flower Vanilla)'),
        [GameConstants.AlcremieSpins.dayCounterclockwiseBelow5]: new PokemonItem('Alcremie (Flower Ruby Cream)'),
        [GameConstants.AlcremieSpins.nightClockwiseBelow5]: new PokemonItem('Alcremie (Flower Matcha)'),
        [GameConstants.AlcremieSpins.nightCounterclockwiseAbove5]: new PokemonItem('Alcremie (Flower Mint)'),
        [GameConstants.AlcremieSpins.nightClockwiseAbove5]: new PokemonItem('Alcremie (Flower Lemon)'),
        [GameConstants.AlcremieSpins.nightCounterclockwiseBelow5]: new PokemonItem('Alcremie (Flower Salted)'),
        [GameConstants.AlcremieSpins.dayCounterclockwiseAbove5]: new PokemonItem('Alcremie (Flower Ruby Swirl)'),
        [GameConstants.AlcremieSpins.dayClockwiseAbove5]: new PokemonItem('Alcremie (Flower Caramel)'),
        [GameConstants.AlcremieSpins.at5Above10]: new PokemonItem('Alcremie (Flower Rainbow)'),
    },
    [GameConstants.AlcremieSweet['Star Sweet']]: {
        [GameConstants.AlcremieSpins.dayClockwiseBelow5]: new PokemonItem('Alcremie (Star Vanilla)'),
        [GameConstants.AlcremieSpins.dayCounterclockwiseBelow5]: new PokemonItem('Alcremie (Star Ruby Cream)'),
        [GameConstants.AlcremieSpins.nightClockwiseBelow5]: new PokemonItem('Alcremie (Star Matcha)'),
        [GameConstants.AlcremieSpins.nightCounterclockwiseAbove5]: new PokemonItem('Alcremie (Star Mint)'),
        [GameConstants.AlcremieSpins.nightClockwiseAbove5]: new PokemonItem('Alcremie (Star Lemon)'),
        [GameConstants.AlcremieSpins.nightCounterclockwiseBelow5]: new PokemonItem('Alcremie (Star Salted)'),
        [GameConstants.AlcremieSpins.dayCounterclockwiseAbove5]: new PokemonItem('Alcremie (Star Ruby Swirl)'),
        [GameConstants.AlcremieSpins.dayClockwiseAbove5]: new PokemonItem('Alcremie (Star Caramel)'),
        [GameConstants.AlcremieSpins.at5Above10]: new PokemonItem('Alcremie (Star Rainbow)'),
    },
    [GameConstants.AlcremieSweet['Ribbon Sweet']]: {
        [GameConstants.AlcremieSpins.dayClockwiseBelow5]: new PokemonItem('Alcremie (Ribbon Vanilla)'),
        [GameConstants.AlcremieSpins.dayCounterclockwiseBelow5]: new PokemonItem('Alcremie (Ribbon Ruby Cream)'),
        [GameConstants.AlcremieSpins.nightClockwiseBelow5]: new PokemonItem('Alcremie (Ribbon Matcha)'),
        [GameConstants.AlcremieSpins.nightCounterclockwiseAbove5]: new PokemonItem('Alcremie (Ribbon Mint)'),
        [GameConstants.AlcremieSpins.nightClockwiseAbove5]: new PokemonItem('Alcremie (Ribbon Lemon)'),
        [GameConstants.AlcremieSpins.nightCounterclockwiseBelow5]: new PokemonItem('Alcremie (Ribbon Salted)'),
        [GameConstants.AlcremieSpins.dayCounterclockwiseAbove5]: new PokemonItem('Alcremie (Ribbon Ruby Swirl)'),
        [GameConstants.AlcremieSpins.dayClockwiseAbove5]: new PokemonItem('Alcremie (Ribbon Caramel)'),
        [GameConstants.AlcremieSpins.at5Above10]: new PokemonItem('Alcremie (Ribbon Rainbow)'),
    },
};
class DreamOrbLoot {
    constructor(item, weight) {
        this.item = item;
        this.weight = weight;
    }
}
class DreamOrb {
    constructor(color, requirement, items) {
        this.color = color;
        this.requirement = requirement;
        this.items = items;
        this.amount = ko.observable(0);
    }
}
class DreamOrbController {
    constructor() {
        this.amountSelected = ko.observable(1);
        this.amountOpened = ko.observable(0);
        this.itemsReceived = ko.observableArray();
        this.orbs = [
            new DreamOrb('Pink', undefined, [
                new DreamOrbLoot({ type: ItemType.item, id: 'Shuckle' }, 0.125),
                new DreamOrbLoot({ type: ItemType.item, id: 'Swablu' }, 0.125),
                new DreamOrbLoot({ type: ItemType.item, id: 'Riolu' }, 0.125),
                new DreamOrbLoot({ type: ItemType.item, id: 'Munna' }, 0.125),
                new DreamOrbLoot({ type: ItemType.item, id: 'Tornadus (Therian)' }, 0.075),
                new DreamOrbLoot({ type: ItemType.item, id: 'Sun_stone' }, 0.15),
                new DreamOrbLoot({ type: ItemType.item, id: 'Water_stone' }, 0.15),
                new DreamOrbLoot({ type: ItemType.item, id: 'Revive' }, 0.125),
            ]),
            new DreamOrb('Green', new ObtainedPokemonRequirement('Tornadus (Therian)'), [
                new DreamOrbLoot({ type: ItemType.item, id: 'Drifloon' }, 0.15),
                new DreamOrbLoot({ type: ItemType.item, id: 'Bronzor' }, 0.15),
                new DreamOrbLoot({ type: ItemType.item, id: 'Sigilyph' }, 0.125),
                new DreamOrbLoot({ type: ItemType.item, id: 'Thundurus (Therian)' }, 0.075),
                new DreamOrbLoot({ type: ItemType.item, id: 'Red_shard' }, 0.125),
                new DreamOrbLoot({ type: ItemType.item, id: 'Blue_shard' }, 0.125),
                new DreamOrbLoot({ type: ItemType.item, id: 'Yellow_shard' }, 0.125),
                new DreamOrbLoot({ type: ItemType.item, id: 'Green_shard' }, 0.125),
            ]),
            new DreamOrb('Orange', new ObtainedPokemonRequirement('Thundurus (Therian)'), [
                new DreamOrbLoot({ type: ItemType.item, id: 'Staryu' }, 0.1),
                new DreamOrbLoot({ type: ItemType.item, id: 'Ralts' }, 0.1),
                new DreamOrbLoot({ type: ItemType.item, id: 'Rotom' }, 0.1),
                new DreamOrbLoot({ type: ItemType.item, id: 'Landorus (Therian)' }, 0.075),
                new DreamOrbLoot({ type: ItemType.item, id: 'Fire_stone' }, 0.2),
                new DreamOrbLoot({ type: ItemType.item, id: 'Protein' }, 0.091),
                new DreamOrbLoot({ type: ItemType.item, id: 'Calcium' }, 0.092),
                new DreamOrbLoot({ type: ItemType.item, id: 'Carbos' }, 0.092),
                new DreamOrbLoot({ type: ItemType.item, id: 'Rare_Candy' }, 0.15),
            ]),
            new DreamOrb('Blue', new MultiRequirement([new ObtainedPokemonRequirement('Landorus (Therian)'), new ObtainedPokemonRequirement('Enamorus')]), [
                new DreamOrbLoot({ type: ItemType.item, id: 'Igglybuff' }, 0.2),
                new DreamOrbLoot({ type: ItemType.item, id: 'Smoochum' }, 0.2),
                new DreamOrbLoot({ type: ItemType.item, id: 'Enamorus (Therian)' }, 0.05),
                new DreamOrbLoot({ type: ItemType.item, id: 'Moon_stone' }, 0.1),
                new DreamOrbLoot({ type: ItemType.item, id: 'Leaf_stone' }, 0.1),
                new DreamOrbLoot({ type: ItemType.item, id: 'Thunder_stone' }, 0.1),
                new DreamOrbLoot({ type: ItemType.item, id: 'Heart_scale' }, 0.125),
                new DreamOrbLoot({ type: ItemType.item, id: 'Max_revive' }, 0.1),
            ]),
        ];
        this.saveKey = 'dream-orbs';
        this.selectedOrb = ko.observable(this.orbs[0]);
        this.opening = ko.observable(false);
        this.item = ko.observable(undefined);
    }
    open() {
        if (this.opening()) {
            return;
        }
        const selectedOrb = this.selectedOrb();
        if (!selectedOrb.amount()) {
            Notifier.notify({
                message: 'No orbs left.',
                type: NotificationConstants.NotificationOption.danger,
            });
            return;
        }
        const amountToOpen = Math.min(this.amountSelected(), selectedOrb.amount());
        this.opening(true);
        this.item(undefined);
        Notifier.notify({
            sound: NotificationConstants.NotificationSound.General.dream_orb,
        });
        setTimeout(() => {
            const itemWeights = selectedOrb.items.map((i) => i.weight);
            const items = {};
            for (let i = 0; i < amountToOpen; i++) {
                const orbLoot = Rand.fromWeightedArray(selectedOrb.items, itemWeights);
                items[orbLoot.item.id] ?
                    items[orbLoot.item.id].amount++ :
                    items[orbLoot.item.id] = { item: orbLoot.item, amount: 1 };
                if (i + 1 >= amountToOpen) {
                    this.item(orbLoot);
                }
            }
            GameHelper.incrementObservable(selectedOrb.amount, amountToOpen * -1);
            Object.keys(items).forEach((key) => {
                BagHandler.gainItem(items[key].item, items[key].amount);
            });
            this.opening(false);
            this.amountOpened(amountToOpen);
            this.itemsReceived(Object.values(items).map((item) => (Object.assign({ name: BagHandler.displayName(item.item) }, item))));
            if (amountToOpen > 1) {
                $('#dreamOrbsOpenedModal').modal('show');
            }
        }, 1800);
    }
    toJSON() {
        return {
            orbs: this.orbs.map((o) => ({ amount: o.amount(), color: o.color })),
        };
    }
    fromJSON(json) {
        var _a;
        (_a = json === null || json === void 0 ? void 0 : json.orbs) === null || _a === void 0 ? void 0 : _a.forEach((o) => { var _a; return (_a = this.orbs.find((o2) => o2.color == o.color)) === null || _a === void 0 ? void 0 : _a.amount(o.amount); });
    }
}
class DreamOrbTownContent extends TownContent {
    constructor() {
        super([
            new ObtainedPokemonRequirement('Tornadus'),
            new ObtainedPokemonRequirement('Thundurus'),
            new ObtainedPokemonRequirement('Landorus'),
        ]);
    }
    cssClass() {
        return 'btn btn-info';
    }
    text() {
        return 'Open Dream Orbs';
    }
    onclick() {
        $('#dreamOrbsModal').modal('show');
    }
}
///<reference path="./NPC.ts"/>
class GiftNPC extends NPC {
    constructor(name, dialog, giftFunction, giftImage, options = {}) {
        super(name, dialog, options, NPCType.Gift);
        this.name = name;
        this.dialog = dialog;
        this.giftFunction = giftFunction;
        this.giftImage = giftImage;
    }
    isVisible() {
        return super.isVisible() && !this.hasTalkedTo();
    }
    acceptGift() {
        var _a;
        (_a = this.giftFunction) === null || _a === void 0 ? void 0 : _a.call(this);
        GameHelper.incrementObservable(App.game.statistics.npcTalkedTo[this.saveKey]);
    }
    setTalkedTo() {
        this.talkedTo(true);
    }
}
///<reference path="./NPC.ts"/>
class KantoBerryMasterNPC extends NPC {
    constructor(name, dialog) {
        super(name, dialog);
        this.name = name;
        this.dialog = dialog;
    }
    get dialogHTML() {
        // Before the player has unlocked the farm
        if (!App.game.farming.canAccess()) {
            return super.dialogHTML;
        }
        // After the farm is unlocked
        return `<p>${KantoBerryMasterNPC.generateMessage(GameHelper.today())}</p>`;
    }
    static generateMessage(date) {
        if (App.game.farming.unlockedBerries.every(berry => berry())) {
            return 'The disciple has surpassed the master. I have nothing more to teach you.';
        }
        const possibleMutations = App.game.farming.mutations.filter((mut) => mut.unlocked && mut.showHint && !App.game.farming.unlockedBerries[mut.mutatedBerry]());
        if (possibleMutations.length === 0) {
            return 'It seems as though you have hit a roadblock in your Berry progress. Focus on other areas before returning.';
        }
        SeededRand.seedWithDate(date);
        possibleMutations.forEach(b => SeededRand.boolean());
        const mutationToShow = SeededRand.fromArray(possibleMutations);
        mutationToShow.hintSeen = true;
        if (mutationToShow instanceof EnigmaMutation) {
            return mutationToShow.partialHint;
        }
        return mutationToShow.hint;
    }
}
class NPCController {
    static openDialog(npc) {
        this.selectedNPC(npc);
        $('#npc-modal').modal();
        npc.setTalkedTo();
        if (!this.modalState) {
            this.modalState = DisplayObservables.modalState['npc-modalObservable'].subscribe((value) => {
                if (value === 'hidden') {
                    this.selectedNPC(null);
                }
            });
        }
    }
}
NPCController.selectedNPC = ko.observable();
var NPCType;
(function (NPCType) {
    NPCType[NPCType["Default"] = 0] = "Default";
    NPCType[NPCType["Gift"] = 1] = "Gift";
})(NPCType || (NPCType = {}));
class PokemonGiftNPC extends GiftNPC {
    constructor(name, dialog, giftPokemon, giftImage, options = {}) {
        const giftFunction = () => {
            App.game.party.gainPokemonByName(this.giftPokemon, PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_REWARD));
        };
        super(name, dialog, giftFunction, giftImage, options);
        this.name = name;
        this.dialog = dialog;
        this.giftPokemon = giftPokemon;
        this.giftImage = giftImage;
    }
    areaStatus() {
        const status = [];
        if (!App.game.party.alreadyCaughtPokemonByName(this.giftPokemon)) {
            status.push(areaStatus.uncaughtPokemon);
        }
        if (!App.game.party.alreadyCaughtPokemonByName(this.giftPokemon, true)) {
            status.push(areaStatus.uncaughtShinyPokemon);
        }
        return status;
    }
}
class ProfNPC extends NPC {
    constructor(name, region, pokedexCompleteText, nextRegionUnlockedText, image = undefined, requirement) {
        super(name, undefined, { image: image, requirement: requirement });
        this.name = name;
        this.region = region;
        this.pokedexCompleteText = pokedexCompleteText;
        this.nextRegionUnlockedText = nextRegionUnlockedText;
    }
    get dialogHTML() {
        var _a, _b;
        const requiresCompleteDex = App.game.challenges.list.requireCompletePokedex.active();
        const nextRegionUnlocked = (_b = (_a = TownList[GameConstants.StartingTowns[this.region + 1]]) === null || _a === void 0 ? void 0 : _a.isUnlocked()) !== null && _b !== void 0 ? _b : false;
        const completeDexAchievement = AchievementHandler.findByName(`${GameConstants.camelCaseToString(GameConstants.Region[this.region])} Master`);
        if (!nextRegionUnlocked) {
            return `<p>Hello, new Champion, you've come a long way!</p>
                    <p>Come see me once you've beat the Elite Four!</p>`;
        }
        let html = '';
        if (completeDexAchievement.isCompleted()) {
            html += `<p>${this.pokedexCompleteText}</p>`;
        }
        else {
            if (requiresCompleteDex) {
                html += '<p>To progress to the next region, you need to catch all Pokémon native to this region.</p>';
            }
            html += `<p>You still have ${completeDexAchievement.property.requiredValue - completeDexAchievement.getProgress()} left to catch in this region! You're almost there!</p>`;
        }
        if (nextRegionUnlocked && (completeDexAchievement.isCompleted() || !requiresCompleteDex)) {
            html += `<p>${this.nextRegionUnlockedText}</p>`;
        }
        return html;
    }
}
class PurifyChamberTownContent extends TownContent {
    constructor() {
        super([PurifyChamber.requirements]);
    }
    cssClass() {
        return 'btn btn-info';
    }
    text() {
        return 'Purify Chamber';
    }
    onclick() {
        PurifyChamber.openPurifyChamberModal();
    }
    isUnlocked() {
        return PurifyChamber.requirements.isCompleted();
    }
    areaStatus() {
        if (!this.isUnlocked()) {
            return [areaStatus.locked];
        }
        const canPurify = App.game.purifyChamber.currentFlow() >= App.game.purifyChamber.flowNeeded() && App.game.party.caughtPokemon.some(p => p.shadow == GameConstants.ShadowStatus.Shadow);
        return [canPurify ? areaStatus.incomplete : areaStatus.completed];
    }
}
class PurifyChamber {
    constructor() {
        this.notified = false;
        this.saveKey = 'PurifyChamber';
        this.selectedPokemon = ko.observable(undefined);
        this.currentFlow = ko.observable(0);
        this.flowNeeded = ko.pureComputed(() => {
            const purifiedPokemon = App.game.party.caughtPokemon.filter((p) => p.shadow == GameConstants.ShadowStatus.Purified).length;
            const flow = 15 * purifiedPokemon * purifiedPokemon +
                15 * purifiedPokemon +
                1500 * Math.exp(0.1 * purifiedPokemon);
            return Math.round(flow);
        });
    }
    canPurify() {
        if (!this.selectedPokemon()) {
            return false;
        }
        if (this.selectedPokemon().shadow != GameConstants.ShadowStatus.Shadow) {
            return false;
        }
        if (this.currentFlow() < this.flowNeeded()) {
            return false;
        }
        return true;
    }
    purify() {
        if (!this.canPurify()) {
            return;
        }
        this.selectedPokemon().shadow = GameConstants.ShadowStatus.Purified;
        this.currentFlow(0);
        this.notified = false;
    }
    gainFlow(exp) {
        if (!PurifyChamber.requirements.isCompleted() || !App.game.party.hasShadowPokemon()) {
            return;
        }
        const newFlow = Math.round(this.currentFlow() + exp / 1000);
        this.currentFlow(Math.min(newFlow, this.flowNeeded()));
        if (!this.notified && this.currentFlow() >= this.flowNeeded()) {
            this.notified = true;
            Notifier.notify({
                title: 'Purify Chamber',
                message: 'Maximum Flow has accumulated at the Purify Chamber in Orre!',
                type: NotificationConstants.NotificationOption.primary,
                sound: NotificationConstants.NotificationSound.General.max_flow,
                timeout: 15 * GameConstants.MINUTE,
            });
        }
    }
    static openPurifyChamberModal() {
        if (PurifyChamber.requirements.isCompleted()) {
            $('#purifyChamberModal').modal('show');
        }
        else {
            Notifier.notify({
                message: 'You need to progress in the Shadows in the Desert quest line to unlock this feature.',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    toJSON() {
        var _a;
        return {
            selectedPokemon: (_a = this.selectedPokemon()) === null || _a === void 0 ? void 0 : _a.id,
            currentFlow: this.currentFlow(),
        };
    }
    fromJSON(json) {
        var _a;
        if (json) {
            if (json.selectedPokemon) {
                let selectedPokemon = App.game.party.getPokemon(json.selectedPokemon);
                if (selectedPokemon.shadow != GameConstants.ShadowStatus.Shadow) {
                    selectedPokemon = undefined;
                }
                this.selectedPokemon(selectedPokemon);
                this.currentFlow((_a = json.currentFlow) !== null && _a !== void 0 ? _a : 0);
            }
        }
    }
}
PurifyChamber.requirements = new QuestLineStepCompletedRequirement('Shadows in the Desert', 17);
PurifyChamber.shortcutRequirement = new MultiRequirement([
    new ShadowPokemonRequirement(1, GameConstants.ShadowStatus.Purified),
    new ShadowPokemonRequirement(131, GameConstants.ShadowStatus.Purified, GameConstants.AchievementOption.less),
]);
PurifyChamber.shortcutVisible = ko.pureComputed(() => {
    return PurifyChamber.shortcutRequirement.isCompleted();
});
class RoamerNPC extends NPC {
    constructor(name, dialog, region, subRegionRoamerGroup, image = undefined, requirement) {
        super(name, dialog, { image: image, requirement: requirement });
        this.name = name;
        this.dialog = dialog;
        this.region = region;
        this.subRegionRoamerGroup = subRegionRoamerGroup;
    }
    get dialogHTML() {
        var _a, _b, _c, _d;
        const route = RoamingPokemonList.getIncreasedChanceRouteBySubRegionGroup(this.region, this.subRegionRoamerGroup);
        const roamers = RoamingPokemonList.getSubRegionalGroupRoamers(this.region, this.subRegionRoamerGroup);
        // If no roaming Pokemon yet
        if (!roamers.length) {
            const regionName = (_c = (_b = (_a = RoamingPokemonList.roamerGroups[this.region]) === null || _a === void 0 ? void 0 : _a[this.subRegionRoamerGroup]) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : GameConstants.camelCaseToString(GameConstants.Region[this.region]);
            return `There haven't been any reports of roaming Pokémon around ${regionName} lately.`;
        }
        roamers.forEach((roamer) => {
            if (App.game.statistics.pokemonEncountered[roamer.pokemon.id]() === 0 && App.game.statistics.pokemonSeen[roamer.pokemon.id]() === 0) {
                GameHelper.incrementObservable(App.game.statistics.pokemonSeen[roamer.pokemon.id]);
            }
        });
        const roamersHTML = roamers.map(r => `<img class="npc-roamer-image" src="assets/images/pokemon/${r.pokemon.id}.png" />`).join('');
        return super.dialogHTML.replace(/{ROUTE_NAME}/g, (_d = route()) === null || _d === void 0 ? void 0 : _d.routeName) + roamersHTML;
    }
}
/// <reference path="../../declarations/TemporaryScriptTypes.d.ts" />
///<reference path="../../declarations/enums/Badges.d.ts"/>
///<reference path="NPC.ts"/>
///<reference path="KantoBerryMasterNPC.ts"/>
///<reference path="ProfNPC.ts"/>
///<reference path="RoamerNPC.ts"/>
///<reference path="GiftNPC.ts"/>
///<reference path="PokemonGiftNPC.ts"/>
///<reference path="AssistantNPC.ts"/>
///<reference path="TownContent.ts"/>
class Town {
    constructor(name, region, subRegion, content = [], 
    // Optional arguments are in a named object, so that we don't need
    // to pass undefined to get to the one we want
    optional = {}) {
        var _a;
        this.name = name;
        this.region = region;
        this.requirements = optional.requirements || [];
        this.npcs = optional.npcs;
        this.startingTown = GameConstants.StartingTowns.includes(this.name);
        this.content = content;
        this.subRegion = subRegion;
        this.ignoreAreaStatus = (_a = optional.ignoreAreaStatus) !== null && _a !== void 0 ? _a : false;
        if (GymList[name]) {
            const gym = GymList[name];
            this.content.unshift(gym);
        }
        if (GameConstants.DockTowns.includes(name)) {
            this.content.push(new DockTownContent());
        }
        if (GameConstants.StartingTowns.includes(name)) {
            if (region > GameConstants.Region.kanto) { // Kanto is treated separately
                this.content.push(new PickStarterContent());
            }
            this.content.push(new NextRegionTownContent());
        }
        content.forEach((c) => {
            c.addParent(this);
        });
    }
    isUnlocked() {
        return this.requirements.every(requirement => requirement.isCompleted());
    }
}
class DungeonTown extends Town {
    constructor(name, region, subregion, requirements = [], content = [], optional = {}) {
        optional.requirements = requirements;
        super(name, region, subregion, content, optional);
        this.dungeon = dungeonList[name];
    }
}
/* eslint-disable array-bracket-newline */
///<reference path="../../declarations/requirements/RouteKillRequirement.d.ts"/>
///<reference path="../../declarations/requirements/GymBadgeRequirement.d.ts"/>
///<reference path="../../declarations/requirements/OneFromManyRequirement.d.ts"/>
///<reference path="../../declarations/requirements/SpecialEventRequirement.d.ts"/>
///<reference path="../quests/BulletinBoard.ts"/>
///<reference path="BattleCafe.ts"/>
///<reference path="../../declarations/requirements/MultiRequirement.d.ts"/>
///<reference path="../safari/SafariTownContent.ts"/>
///<reference path="PurifyChamber.ts"/>
///<reference path="../shop/GenericTraderShop.ts"/>
const TownList = {};
const pokeMartShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Lucky_egg,
    ItemList.Token_collector,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.SmallRestore,
    ItemList.MediumRestore,
    ItemList.LargeRestore,
], 'Explorers Poké Mart');
const DepartmentStoreShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Lucky_egg,
    ItemList.Dowsing_machine,
    ItemList.Token_collector,
    ItemList.Lucky_incense,
    ItemList.SmallRestore,
    ItemList.MediumRestore,
    ItemList.LargeRestore,
], 'Department Store');
const pokeLeagueShop = () => new Shop([
    new PokeballItem(GameConstants.Pokeball.Masterball, 10000000, GameConstants.Currency.money, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.money]}` }, 'Master Ball'),
    new PokeballItem(GameConstants.Pokeball.Masterball, 75000, GameConstants.Currency.dungeonToken, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.dungeonToken]}` }, 'Master Ball'),
    new PokeballItem(GameConstants.Pokeball.Masterball, 3000, GameConstants.Currency.questPoint, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.questPoint]}` }, 'Master Ball'),
    new PokeballItem(GameConstants.Pokeball.Masterball, 3000, GameConstants.Currency.farmPoint, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.farmPoint]}` }, 'Master Ball'),
    new PokeballItem(GameConstants.Pokeball.Masterball, 250, GameConstants.Currency.diamond, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.diamond]}` }, 'Master Ball'),
    ItemList.Protein,
    ItemList.Calcium,
    ItemList.Carbos,
]);
//Kanto Shops
const ViridianCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Dungeon_ticket,
]);
const PewterCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Token_collector,
    ItemList.Lucky_egg,
    ItemList.Mystery_egg,
]);
const Route3Shop = new Shop([
    ItemList.Magikarp,
], 'Shady Deal');
const CeruleanCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.Water_egg,
    ItemList.Water_stone,
]);
const VermilionCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Lucky_egg,
    ItemList.Electric_egg,
    ItemList.Thunder_stone,
]);
const LavenderTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.Grass_egg,
]);
const CeladonCityShop = new Shop([
    ItemList.Eevee,
    ItemList.Porygon,
    ItemList.Jynx,
    ItemList['Mr. Mime'],
    ItemList.Lickitung,
], 'Game Corner Shop');
const CeladonDepartmentStoreShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Lucky_egg,
    ItemList.Dowsing_machine,
    ItemList.Token_collector,
    ItemList.Lucky_incense,
], 'Department Store');
const SaffronCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xClick,
    ItemList.Fighting_egg,
    ItemList.Leaf_stone,
    ItemList.Moon_stone,
]);
const FuchsiaCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_egg,
    ItemList.Dragon_egg,
    ItemList.Linking_cord,
]);
const CinnabarIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.SmallRestore,
    ItemList.Fire_egg,
    ItemList.Fire_stone,
    ItemList.Explorer_kit,
    ItemList.Explosive_Charge,
    ItemList.Treasure_Scanner,
    ItemList.HatcheryHelperKris,
]);
const OneIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.Lucky_incense,
]);
const TwoIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.Dowsing_machine,
]);
const ThreeIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
]);
const ClientIslandShop = new Shop([
    ItemList['Charity Chansey'],
], 'Gift Shop');
const FourIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.Soothe_bell,
    ItemList.Wonder_Chest,
]);
const FiveIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.Dragon_scale,
]);
const SixIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_egg,
    ItemList.Prism_scale,
]);
const SevenIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
]);
const MikanIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Metal_coat,
]);
const NavelIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Kings_rock,
]);
const TrovitaIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Deepsea_tooth,
    ItemList.Deepsea_scale,
]);
const KumquatIslandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Upgrade,
]);
const ValenciaPokémonCenterShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Dowsing_machine,
    ItemList.Sun_stone,
]);
const PinkanPokémonReserveShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_incense,
]);
const TanobyRuinsShop = new Shop([
    ItemList['Pinkan Dodrio'],
], 'Trade with Prof. Ivy');
const PinkanBerryMaster = new BerryMasterShop(GameConstants.BerryTraderLocations['Pinkan Pokémon Reserve'], [
    ItemList.Freeze_Mulch,
    ItemList.Berry_Shovel,
    ItemList.Mulch_Shovel,
    ItemList.Gooey_Mulch,
], 'Officer Jenny\'s Pinkan Trade Shop', [new QuestLineCompletedRequirement('Team Rocket\'s Pinkan Theme Park')]);
// Kanto NPCs
const PalletProfOak = new ProfNPC('Prof. Oak', GameConstants.Region.kanto, 'Congratulations on completing your Kanto Pokédex!', 'Your journey isn\'t over yet, a whole world awaits you! Onwards to Johto!', 'assets/images/npcs/Professor Oak.png', 
// Prevent Prof. Oak clones during Celebi questline
new OneFromManyRequirement([new QuestLineStartedRequirement('Unfinished Business', GameConstants.AchievementOption.less), new QuestLineCompletedRequirement('Unfinished Business'), new QuestLineStepCompletedRequirement('Unfinished Business', 2)]));
const PalletMom1 = new NPC('Mom', [
    'So you\'re really leaving on your very own Pokémon journey. I\'m so proud of you. Let me give you some words of wisdom for your travels.',
    'Traveling on your own can be scary. But remember that there are nice people everywhere you go. So strike up a conversation! You will probably learn something useful.',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Tutorial Quests', 2), new QuestLineStepCompletedRequirement('Tutorial Quests', 3, GameConstants.AchievementOption.less)]),
});
const PalletMom2 = new NPC('Mom', [
    'Remember that there are nice people everywhere you go. So strike up a conversation! You will probably learn something useful.',
], {
    requirement: new QuestLineStepCompletedRequirement('Tutorial Quests', 3),
});
const PalletCelebiProfOak1 = new NPC('Prof. Oak', [
    'Good of you to come see me. I need you to pick up something for me. A special kind of Poké Ball, found by Professor Ivy. She lives on one of the Sevii Islands, east of Three Island.',
    'I don\'t know who else to trust with this. It\'s very important and very valuable.',
    'Feel free to take your time, but please don\'t get distracted for the duration of an entire filler anime season.',
], {
    image: 'assets/images/npcs/Professor Oak.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Unfinished Business'), new QuestLineStepCompletedRequirement('Unfinished Business', 1, GameConstants.AchievementOption.less)]),
});
const PalletCelebiProfOak2 = new NPC('Prof. Oak', [
    'Ah, the fabled GS Ball. Let me have a look.',
    'Hm. I just can\'t figure this out. There\'s clearly something inside, but I just can\'t get the darned thing to open.',
    'I know just the man for the job! Kurt, a Poké Ball expert. He lives in Azalea Town, in Johto. Please deliver the GS Ball to him.',
], {
    image: 'assets/images/npcs/Professor Oak.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 1), new QuestLineStepCompletedRequirement('Unfinished Business', 2, GameConstants.AchievementOption.less)]),
});
const ViridianCityOldMan1 = new NPC('Old Man', [
    'Leave me alone. I need my coffee.',
], {
    image: 'assets/images/npcs/Old Man.png',
    requirement: new QuestLineStepCompletedRequirement('Tutorial Quests', 4, GameConstants.AchievementOption.less),
});
const ViridianCityOldMan2 = new NPC('Old Man', [
    'Ahh, I\'ve had my coffee now and I feel great!',
    'You can use the Poké Ball Selector to select which type of Poké Ball to use on specific Pokémon based on caught status.',
    'For example, if you click on the empty ball next to the word "Caught" and assign a Poké Ball, you will then start throwing Poké Balls at Pokémon you\'ve already caught before. This can be very useful if you need Dungeon Tokens.',
    'Here, let me show you how it works.',
    'I\'ll always be here to explain it again if you forget.',
], {
    image: 'assets/images/npcs/Old Man.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Tutorial Quests', 4), new QuestLineStepCompletedRequirement('Tutorial Quests', 5, GameConstants.AchievementOption.less)]),
});
const ViridianCityOldMan3 = new NPC('Old Man', [
    'You can use the Poké Ball Selector to select which type of Poké Ball to use on specific Pokémon based on caught status.',
    'For example, if you click on the empty ball next to the word "Caught" and assign a Poké Ball, you will then start throwing Poké Balls at Pokémon you\'ve already caught before. This can be very useful if you need Dungeon Tokens.',
    'I\'ll always be here to explain it again if you forget.',
], {
    image: 'assets/images/npcs/Old Man.png',
    requirement: new QuestLineStepCompletedRequirement('Tutorial Quests', 5),
});
const PewterBattleItemRival = new NPC('Battle Item Master', [
    'Hey kid, you look new! Let me offer some advice: Battle Items like X Attack can be acquired along Routes, inside Dungeons and in Shops!',
    'Use them to help you out whenever you feel like time is against you!',
]);
const PewterScientist = new NPC('Gem Scientist', [
    'I see you are carrying a Gem Case. Here at the museum we study space, fossils and gems!',
    'When you defeat a Pokémon you gain a gem of that Pokémon\'s type. If the Pokémon has two types you gain one for each! Defeating very strong Pokémon, such as those owned by gym leaders, gets you five!',
    'You can click Gems in the Start Menu to boost your damage using these gems. For example, using rock gems you can boost the super effective damage of your rock type Pokémon! Those flying types had better watch out for your might!',
    'You can even use this to eliminate immunities! By using electric gems to boost your electric type immune damage, your electric Pokémon can suddenly do damage against ground types!',
], {
    image: 'assets/images/npcs/Scientist (female).png',
    requirement: new GymBadgeRequirement(BadgeEnums.Earth),
});
const Route3ShadySalesman = new NPC('Shady Salesman', [
    'Have I got a deal just for you!',
    'I\'ll let you have a super secret Pokémon. For the right price! Buying this pokemon Takes No Effort, you should Value it.',
], { image: 'assets/images/npcs/ShadySalesman.png' });
const CeruleanKantoBerryMaster = new KantoBerryMasterNPC('Berry Master', [
    'Bah! You younglings have no appreciation of the art of Berry farming!',
    'Come back when you are ready to learn!',
]);
const CeruleanFarmApprentice = new NPC('Farm Apprentice', [
    'One day I was tending to my Passho berries and a Squirtle suddenly appeared! If only I knew about this before spending all of my Quest Points on Water Eggs..',
    'If I try mutating different berries maybe I can catch new Pokémon while saving my Quest Points!',
], { image: 'assets/images/npcs/Bug Catcher.png' });
const CeruleanSuperNerd = new NPC('Super Nerd Jovan', [
    'In my spare time I like to play this kickass browser game. It takes ages to get all the best stuff.',
    'Then one day, all my progress was gone. I don\'t know exactly what happened. Something updated, some cookies got cleaned up, I don\'t know. I had to start all over from the beginning.',
    'That day I learned that I should frequently download a save.',
], { image: 'assets/images/npcs/Super Nerd.png' });
const BillsGrandpa1 = new NPC('Bill\'s Grandpa', [
    'Hm? You know Bill? He\'s my grandson. He\'s not here right now. He does something with PCs, so I\'m house-sitting.',
    'I like Pokémon but I\'m not as knowledgeable as my grandson. My grandson Bill told me about a Pokémon that is pink and like a balloon.',
    'Would you catch that Pokémon and show it to me, please?',
], { image: 'assets/images/npcs/Bill\'s Grandpa with Eevee.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Bill\'s Grandpa Treasure Hunt'), new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 1, GameConstants.AchievementOption.less)]),
});
const BillsGrandpa2 = new NPC('Bill\'s Grandpa', [
    'Ah, so that is Jigglypuff? Isn\'t it cute! That\'s so kind of you. Thanks! This Moon Stone is a token of my appreciation.',
    'Ah, my grandson mentioned a round, green Pokémon, wait not green, it\'s blue, a blue Pokémon that has leaves growing on its head.',
    'If you encounter that Pokémon and catch it, would you, please, bring it here?',
], { image: 'assets/images/npcs/Bill\'s Grandpa with Eevee.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 1), new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 3, GameConstants.AchievementOption.less)]),
});
const BillsGrandpa3 = new NPC('Bill\'s Grandpa', [
    'Oh, the Pokémon was called Oddish? It is adorable! Thank you so much for bringing it to me! Please, accept this Leaf Stone.',
    'By the way, do you know of a sea Pokémon that has a red sphere on its body? You know, the one that\'s shaped like a star?',
    'When you get one, could you, please, come back here so I can see it?',
], { image: 'assets/images/npcs/Bill\'s Grandpa with Eevee.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 3), new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 5, GameConstants.AchievementOption.less)]),
});
const BillsGrandpa4 = new NPC('Bill\'s Grandpa', [
    'Ah, you brought it to me. Staryu is the name, you said? It\'s certainly shaped like a star. You are so kind for coming back with it! This Water Stone should be really useful to you.',
    'I was thinking, Bill told me about a Pokémon that is very loyal to its trainer. It\'s supposed to roar well.',
    'I would really like to meet one, can you stop by if you capture one, please?',
], { image: 'assets/images/npcs/Bill\'s Grandpa with Eevee.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 5), new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 7, GameConstants.AchievementOption.less)]),
});
const BillsGrandpa5 = new NPC('Bill\'s Grandpa', [
    'Ah, so this little puppy is Growlithe? I cannot begin to imagine its roaring! I\'m so happy that you are doing all this for me. Thank you so much! I was saving this Fire Stone for a rainy day, but I want you to have it instead.',
    'Did you think I was done by the way? I wanted to ask if you knew that hugely popular Pokémon? The Pokémon that has a yellow body and red cheeks. I would love to see what it looks like.',
    'This is the one I\'m most excited to meet. Please come back once you catch it, I will have tea prepared for you.',
], { image: 'assets/images/npcs/Bill\'s Grandpa with Eevee.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 7), new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 9, GameConstants.AchievementOption.less)]),
});
const BillsGrandpa6 = new NPC('Bill\'s Grandpa', [
    'Yes! That\'s the one! It\'s Pikachu, right? Ohhh, I\'ve wanted to meet it for so long. Such a cutie. You deserve this Thunder Stone!',
    'You\'ve shown me everything I wanted to see and more. You have been a very nice trainer! My grandson could learn one thing or two from you, ho, ho!',
    'There is one more thing I would like to ask you, would you battle this old man? I promise I\'ll make it worth your while. Let\'s go outside.',
    'Let me tell you though, in my youth, I was strong enough to beat Viridian City\'s Gym, so don\'t expect me to be a pushover.',
], { image: 'assets/images/npcs/Bill\'s Grandpa with Eevee.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 9), new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 11, GameConstants.AchievementOption.less)]),
});
const BillsGrandpa7 = new NPC('Bill\'s Grandpa', [
    'As I said, that was one of the best battles I\'ve ever had.',
    'There is someone I would like to go with you, it\'s my partner, Eevee.',
    'I think Eevee is gonna be better with you than with me. I\'m sure that, with you, Eevee is gonna grow up healthy and strong!',
], { image: 'assets/images/npcs/Bill\'s Grandpa without Eevee.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 11), new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 13, GameConstants.AchievementOption.less)]),
});
const BillsGrandpa8 = new NPC('Bill\'s Grandpa', [
    'Hello again, I see you are treating Eevee very well.',
    'I\'m still house-sitting for my grandson, I\'m sure he\'s doing well.',
], { image: 'assets/images/npcs/Bill\'s Grandpa without Eevee.png',
    requirement: new QuestLineStepCompletedRequirement('Bill\'s Grandpa Treasure Hunt', 13),
});
const BillsHouseEusine = new NPC('Eusine', [
    'Puff, puff... I am...no match for you. ...As I predicted.',
    '..................',
    'Go ahead. Since I met you in Ecruteak City, I\'ve sort of known that Suicune would choose you.',
    'Take a look at it! Suicune is still there waiting for you! It has been waiting for a worthy Trainer to whom it can entrust itself!',
], {
    image: 'assets/images/npcs/Eusine.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eusine\'s Chase', 9), new QuestLineCompletedRequirement('Eusine\'s Chase', GameConstants.AchievementOption.less)]),
});
const VermilionFanClubChairman = new NPC('Fan Club Chairman', [
    'You won’t find a Pokémon as wonderful as my favorite Rapidash in those Typed Eggs in the shops, but they might hatch rare Pokémon you can’t find anywhere else!',
], { image: 'assets/images/npcs/Gentleman (Gen 4).png' });
const VermilionShardApprentice = new NPC('Shard Apprentice', [
    'Are you looking for some Shards? You can find them in many Dungeons! Except in Viridian Forest and Mt. Moon. I\'ve never found any Shards there for some reason.',
    'I happen to know that there are some Yellow and Blue Shards in Diglett\'s Cave. Just look inside the chests!',
    'Shards can have lots of different colors. Different Dungeons will have different colors, so keep an eye out! Most of them can\'t even be found in Kanto!',
]);
const VermilionEusine = new NPC('Eusine', [
    'That was so close! I thought I could corner it by ambushing it here... But running on the water... is beyond me. Still, I am starting to see a pattern. Suicune prefers water! That means...',
    'Sorry, I\'ve got to go!',
], {
    image: 'assets/images/npcs/Eusine.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eusine\'s Chase', 5), new QuestLineStepCompletedRequirement('Eusine\'s Chase', 7, GameConstants.AchievementOption.less)]),
});
const LavenderMrFuji = new NPC('Mr. Fuji', [
    'Welcome. In our Volunteer House here we take in all kinds of Pokémon to care for them.',
    'Did you know that sparkling Pokémon are more often found in Dungeons, on Farms, from Eggs, and even from Shops, the Safari Zone, and Evolutions from Items?',
], { image: 'assets/images/npcs/Mr. Fuji.png' });
const LavenderChanneler = new NPC('Channeler Karina', [
    'I know a lot of useful stuff. Like the odds of finding a shiny Pokémon or how to increase Click Attack.',
    'No, I didn\'t learn this from talking to ghosts, don\'t be silly. There\'s a FAQ button in the Start Menu. It\'s very useful.',
], { image: 'assets/images/npcs/Channeler.png' });
const LavenderShopper = new NPC('Shopper', [
    'I always seem to run out of Great Balls. Luckly this shop always have them in stock!',
    'They even have an offer today! They give you free Great Balls if you give them the code <b>THE-GREATEST-POKEBALL</b>',
]);
const BigSpender = new NPC('Big Spender', [
    'I love shopping! When I come in, the cashiers know I want tons of items.',
    'You can use the Shop Amount Button settings to make it easy for big purchases, too!',
], { image: 'assets/images/npcs/Beauty.png' });
const EggHuntErika = new NPC('Erika', [
    'Hello... Isn\'t the spring weather so relaxing? I adore how lovely the blooming flowers look during this time of year...',
    'Oh! I\'m sorry, I almost dozed off. I was reminiscing about my stroll in Viridian Forest earlier today. I came across the loveliest patch of flowers over there and...',
    '...',
    'Zzz... Hm? Oh yes, the forest. It was most peculiar - when I laid down upon the flowerbed I had the strangest dream of a basket full of Pokémon. At least, I think it was a dream... It did not strike me as one of the usual inhabitants of the area.',
], {
    image: 'assets/images/npcs/Erika.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Egg Hunt'), new QuestLineCompletedRequirement('Egg Hunt', GameConstants.AchievementOption.less)]),
});
const SaffronBattleItemRival = new NPC('Battle Item Master', [
    'Do I know you? Wait... Have you met my worthless rival? Ha! Let me guess, he gave you some unwanted advice?',
    'I bet he forget to tell you that although all Battle Items only last for 30 seconds, they can stack and last for days! Now scram!',
]);
const SaffronBreeder = new NPC('Breeder', [
    'You can leave your level 100 Pokémon with us up at the Hatchery. Breeding them will reset their level, but they will be stronger! They gain 25% of their base attack!',
    'And the best part is you can keep doing it over and over and over again! The sky is the limit! Reach for the stars!',
    'With Protein your Pokémon will become even stronger when you breed them. I hear they sell it at the Indigo Plateau.',
], {
    image: 'assets/images/npcs/Pokémon Breeder (female).png',
    requirement: new GymBadgeRequirement(BadgeEnums.Earth),
});
const LaprasGift = new PokemonGiftNPC('Silph Co. Employee', [
    'Oh! Hi! You\'re not a member of Team Rocket! You came to save us? Why thank you!',
    'I want you to have this Pokémon for saving us.',
], 'Lapras', 'assets/images/pokemon/131.png', { saveKey: 'laprasgift', image: 'assets/images/npcs/Office Worker (male).png', requirement: new MultiRequirement([new TemporaryBattleRequirement('Blue 5'), new ObtainedPokemonRequirement('Lapras', true)]) });
const FuchsiaKantoRoamerNPC = new RoamerNPC('Youngster Wendy', [
    'There\'s been some recent sightings of roaming Pokémon on {ROUTE_NAME}!',
], GameConstants.Region.kanto, RoamingPokemonList.findGroup(GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto));
const FuchsiaEusine = new NPC('Eusine', [
    'You! Not again! I\'ll be there first next time! Having followed it here, I\'m starting to understand what Suicune is after.',
    'To be honest, I would like to keep this information to myself. But I want to be an honest Trainer in front of Suicune! That\'s why I am sharing a clue with you.',
    'It seems that... Suicune prefers a hilly place near water... Somewhere north. I don\'t know exactly where, yet. It will be just you and me! Who\'ll find it first? I challenge you!',
], {
    image: 'assets/images/npcs/Eusine.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eusine\'s Chase', 7), new QuestLineStepCompletedRequirement('Eusine\'s Chase', 9, GameConstants.AchievementOption.less)]),
});
const CinnabarIslandResearcher = new NPC('Researcher', [
    'They were trying to clone an ancient Pokémon in the mansion... I wonder if they succeeded.',
    'Apparently the ancient Pokémon escaped, and can be found roaming around Kanto!',
], { image: 'assets/images/npcs/Scientist (male).png' });
const KantoFossilNpc = new NPC('Underground Expert', [
    'That Explorer Kit is a must-have for any Fossil Fanatic! Why, it\'s how I found my very first Old Amber.',
    'Hrm, yes! I see that gleam in your eye! It may look expensive now, but the treasures you\'ll find in the Underground are priceless! And what\'s more- with each new region you travel to, the more adept you will become at identifying new curios!',
    'Speaking of, our very own Kanto is home to three: the Helix Fossil, Dome Fossil, and Old Amber! You can revive them into living Pokémon using techniques developed by the Devon Corporation and a research laboratory on Cinnabar Island! There are also other scientists around the Pokémon world who can revive Fossils using these techniques.',
], { image: 'assets/images/npcs/Ruin Maniac gen3.png' });
const OneIslandCelio1 = new NPC('Celio', [
    'Ah, yes. Welcome! Welcome! Almost didn\'t see you there. I\'m just so busy trying to get this darned thing to work. Once it\'s complete we can finally have a direct communications network between the Sevii Islands and Kanto!',
    'I don\'t even have time to go and pick up an important package. A meteorite, found by the owner of the game corner on Two Island. It contains important materials for my machine.',
    'You seem like the adventuring type. Tell you what. How about Bill stays here with me to work on this machine, and you go fetch my Meteorite for me.',
], {
    image: 'assets/images/npcs/Celio.png',
    requirement: new QuestLineStepCompletedRequirement('Bill\'s Errand', 1, GameConstants.AchievementOption.less),
});
const OneIslandCelio2 = new NPC('Celio', [
    'Back already? That didn\'t take very long.',
    'What? It did take long? You went on a whole rescue mission? Seems like I lost track of time while working on my machine with Bill. It\'s been a lot of fun.',
    'I\'m glad to hear Lostelle is all right. You can hand the meteorite to me. Bill, thank you for your assistance, I\'ll take it from here. I can see that your friend is eager to get back to Kanto and challenge the Pokémon League.',
    'Thank you both very much.',
], {
    image: 'assets/images/npcs/Celio.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Bill\'s Errand', 5), new QuestLineCompletedRequirement('Bill\'s Errand', GameConstants.AchievementOption.less)]),
});
const OneIslandCelio3 = new NPC('Celio', [
    'You\'ve been a great help. Thanks again. Maybe we\'ll meet again some day...',
], {
    image: 'assets/images/npcs/Celio.png',
    requirement: new MultiRequirement([new QuestLineCompletedRequirement('Bill\'s Errand'), new QuestLineStartedRequirement('Celio\'s Errand', GameConstants.AchievementOption.less)]),
});
const OneIslandCelio4 = new NPC('Celio', [
    'How have things been for you? Oh, is that right? You\'ve caught more Pokémon. Do you know what? Maybe I can be useful to you. I\'m modifying the Network Machine right now. I\'m changing it so it can handle trades over long distances. When I get finished, you\'ll be trading for exotic Pokémon from Trainers far away.',
    'But, there is a slight catch. For the link to work, the Machine needs a special gemstone. It\'s supposed to be on One Island, but I haven\'t found one yet. Who knows where it could be.',
], {
    image: 'assets/images/npcs/Celio.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Celio\'s Errand'), new QuestLineStepCompletedRequirement('Celio\'s Errand', 1, GameConstants.AchievementOption.less)]),
});
const OneIslandCelio5 = new NPC('Celio', [
    'Oh! Th-that\'s... Thank you! You\'re simply amazing. ... ... ... ... Um... May I ask one more giant favor of you?',
    'While I was studying gemstones, I discovered something important. There is another gem that forms a pair with this Ruby. That other gemstone is supposed to be in the Sevii Islands. Please, I need you to go find the other gem.',
    'Here, take my ferry pass. It will let you get to all of the Sevii Islands. Please, I can\'t do it without your help.',
], {
    image: 'assets/images/npcs/Celio.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Celio\'s Errand', 4), new QuestLineStepCompletedRequirement('Celio\'s Errand', 6, GameConstants.AchievementOption.less)]),
});
const OneIslandCelio6 = new NPC('Celio', [
    'So this is the gem that forms a pair with the Ruby... You\'ve gone through a lot to get this, didn\'t you? You don\'t have to tell me. I know it wasn\'t easy. Thank you so much! Now it\'s my turn to work for you! Please give me a little time.',
    'Okay, this is good... I did it! I linked up with Lanette! I did it! I\'ve managed to link up with Trainers in the Hoenn region! Finally, the Network Machine is fully operational! I owe it all to you! Thanks to you, my dream came true...',
], {
    image: 'assets/images/npcs/Celio.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Celio\'s Errand', 12), new QuestLineCompletedRequirement('Celio\'s Errand', GameConstants.AchievementOption.less)]),
});
const OneIslandCelio7 = new NPC('Celio', [
    'I... I\'m not crying. That\'s enough about me! You\'re going to keep looking for exotic Pokémon, right? I wish you the best of luck!',
], {
    image: 'assets/images/npcs/Celio.png',
    requirement: new QuestLineCompletedRequirement('Celio\'s Errand'),
});
const OneIslandYoungster = new NPC('Youngster', [
    'Isn\'t it strange how Mol<b><i>tres</i></b> lives on <b><i>One</i></b> Island?',
], {
    image: 'assets/images/npcs/Youngster.png',
    requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Ember Summit')),
});
const TwoIslandGameCornerOwner1 = new NPC('Game Corner Owner', [
    'Hello stranger. I\'m afraid the Game Corner is currently closed.',
    'What? The meteorite for Celio? Yes, I can give that to you. But I need you to do something for me first.',
    'My daughter Lostelle is missing. She likes to pick berries in the Berry Forest on Three Island. She does it all the time. But this time she hasn\'t come back. Please go find her.',
], {
    requirement: new QuestLineStepCompletedRequirement('Bill\'s Errand', 4, GameConstants.AchievementOption.less),
});
const TwoIslandGameCornerOwner2 = new NPC('Game Corner Owner', [
    'My sweet Lostelle! I\'m so glad you\'re all right.',
    'Thank you very much kind stranger. Please take the Meteorite.',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Bill\'s Errand', 4), new QuestLineCompletedRequirement('Bill\'s Errand', GameConstants.AchievementOption.less)]) });
const ThreeIslandBiker1 = new NPC('Biker', [
    'You know what sucks? The other islands are off limits for some arbitrary reason. There is no explanation. Just can\'t go there.',
    'Alright, you want the real truth? Some weird old dude told me this: "The other islands are locked behind part of a "Quest Line" You have to progress to unlock it."',
    'I don\'t know what half those words mean. All I know is I can\'t go back to Kanto with the rest of the gang. This sucks.',
], {
    image: 'assets/images/npcs/Biker Goon.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Bill\'s Errand', 3), new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion, GameConstants.AchievementOption.less)]),
});
const ThreeIslandBiker2 = new NPC('Biker', [
    'You know what sucks? The other islands are off limits for some arbitrary reason. There is no explanation. Just can\'t go there.',
    'Alright, you want the real truth? Some weird old dude told me this: "The other islands are locked behind part of a Questline. You can unlock it at a Bulletin Board."',
    'I don\'t know what half those words mean. All I know is I can\'t go back to Kanto with the rest of the gang. This sucks.',
], {
    image: 'assets/images/npcs/Biker Goon.png',
    requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion), new QuestLineStepCompletedRequirement('Celio\'s Errand', 5, GameConstants.AchievementOption.less)]),
});
const ThreeIslandBiker3 = new NPC('Biker', [
    'You know what sucks? The other islands are off limits for some arbitrary reason. There is no explanation. Just can\'t go there.',
    'Wait, you got to them? Good for you. Not that it matters to me, I\'m still stuck here. This sucks.',
], {
    image: 'assets/images/npcs/Biker Goon.png',
    requirement: new QuestLineStepCompletedRequirement('Celio\'s Errand', 5),
});
const CelebiProfIvy = new NPC('Prof. Ivy', [
    'Welcome to Valencia Island! Well, this tiny beach on Valencia Island. I don\'t know why I decided to have this lab built below this giant cliff... Can\'t even get to the rest of the island from here.',
    'This is the GS Ball. I found it here recently. Professor Oak seemed very interested. Please deliver it to him at your earliest convenience.',
    'But first, wanna get involved in our regional Pokémon League? No? Maybe another time then.',
], {
    image: 'assets/images/npcs/Professor Ivy.png',
    requirement: new QuestLineStepCompletedRequirement('Unfinished Business', 2, GameConstants.AchievementOption.less),
});
const SeviiRocketGrunts = new NPC('Team Rocket Grunts', [
    'Whew, punched through at last. Let\'s go treasure hunting! Any treasure we find, we haul back to the Warehouse, understood?',
    '...Oh, what are the passwords? At the Rocket Warehouse, I mean.',
    'What, you forgot the password? There\'re actually two. The first one\'s "Goldeen need log". And the second one is...',
    'Hey! This snoop\'s been listening in!',
], {
    image: 'assets/images/npcs/Team Rocket Grunts.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Celio\'s Errand', 0), new QuestLineStepCompletedRequirement('Celio\'s Errand', 2, GameConstants.AchievementOption.less)]),
});
const SeviiRuby = new NPC('Ruby', [
    '<img src="assets/images/items/quest/Celios_Errand_Ruby.png">',
    '<i>You found a Ruby!</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Celio\'s Errand', 3), new QuestLineStepCompletedRequirement('Celio\'s Errand', 4, GameConstants.AchievementOption.less)]) });
const SeviiLorelei = new NPC('Lorelei', [
    'Thank you. But this is awful... I was born and raised here on these islands. I had no idea that those horrible criminals were loose here…',
], {
    image: 'assets/images/npcs/Lorelei.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Celio\'s Errand', 6), new QuestLineStepCompletedRequirement('Celio\'s Errand', 8, GameConstants.AchievementOption.less)]),
});
const SeviiGideon1 = new NPC('Gideon', [
    'I can\'t figure out how I\'m supposed to get inside. Let me tell you, I found this place. Don\'t look so envious, will you?',
], {
    image: 'assets/images/npcs/Scientist Gideon.png',
    requirement: new QuestLineStepCompletedRequirement('Celio\'s Errand', 7, GameConstants.AchievementOption.less),
});
const SeviiGideon2 = new NPC('Gideon', [
    'Fufu... Fufufufu... I guessed right. I was right in tailing you! I knew there was a Sapphire here, so it belongs to me! I\'ll sell it to Team Rocket for serious money.',
    '...D-don\'t glare at me like that! If you want it back, why don\'t you go get it after I sell it? I\'ll even tell you one of the passwords to Team Rocket\'s Warehouse. The Warehouse password I know is "Yes, nah, Chansey." I\'m done. Don\'t think badly of me!',
], {
    image: 'assets/images/npcs/Scientist Gideon.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Celio\'s Errand', 7), new QuestLineStepCompletedRequirement('Celio\'s Errand', 9, GameConstants.AchievementOption.less)]),
});
const SixIslandSeviiRoamerNPC = new RoamerNPC('Bug Catcher John', [
    'Apparently some kid released one of his Pokémon around here. That Pokémon, its partner, and for whatever reason, the Legendary Beasts from Johto have been seen roaming on {ROUTE_NAME}.',
], GameConstants.Region.kanto, RoamingPokemonList.findGroup(GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567), 'assets/images/npcs/Bug Catcher.png', new GymBadgeRequirement(BadgeEnums.Elite_OrangeChampion));
const AlteringCaveRuinManiac1 = new NPC('Ruin Maniac', [
    'Hello. You want to know what I\'m doing in this pointless dead end cave?',
    'Well, I\'m trying to dig to a secluded island north of here. I\'ve heard there are some unusual Pokémon there.',
    'Want to help me? No? Ah, you\'re busy dealing with a group of Team Rocket? Well, I wish you luck with that',
    'Once I finish it you\'ll have a way to get to get to that island too, so make sure to come back later!',
], {
    image: 'assets/images/npcs/Ruin Maniac gen3.png',
    requirement: new QuestLineCompletedRequirement('Celio\'s Errand', GameConstants.AchievementOption.less),
});
const AlteringCaveRuinManiac2 = new NPC('Ruin Maniac', [
    'Wow, that was some back breaking work... But I have done it!',
    'I\'ve dug a tunnel to Pinkan Island! Though, I think I\'ll need to rest for a while first... You go on ahead.',
], {
    image: 'assets/images/npcs/Ruin Maniac gen3.png',
    requirement: new QuestLineCompletedRequirement('Celio\'s Errand'),
});
const ValenciaProfIvy = new NPC('Prof. Ivy', [
    'Hello again! I see you too found a way around the giant cliff.',
    'On this island, Pokémon have changed over the years. I am here to study them.',
    'Oh, you have already encountered them? And you are busy with the Orange League?',
    'Well, good luck to you, then.',
], { image: 'assets/images/npcs/Professor Ivy.png' });
const TanobyProfIvy = new NPC('Prof. Ivy', [
    'Hello again! I see you too found your way to these ancient ruins!',
    'A peculiar Pokémon known as Unown lives here. There are 28 different forms of Unown, but not all appear at the same time.',
    'There are 2 other ruins like this, one in Johto, and one in Sinnoh. I have heard that in each ruins, there are forms that only appear there. For example, the forms that resemble a question mark and an exclamation point have only been seen here.',
    'Speaking of peculiar Pokémon, I found this unusual variant of Dodrio on an island in this area. Hmm. If you want, you could buy it from me. I am needing some research funds.',
], { image: 'assets/images/npcs/Professor Ivy.png' });
const PinkanOfficerJenny1 = new NPC('Officer Jenny', [
    'Have you seen the Pinkan Berries? That is what makes all the Pokémon on this island turn pink.',
    'Hang on, this island is strictly off limits! Pinkan is a protected Pokémon reserve. How did you get here?',
    'Well I suppose you did deal with that Team Rocket branch on Five Island, so I guess I\'ll let you stay, as thanks.',
    'I\'m afraid I can\'t allow you into Pinkan Mountain though. The Pokémon there are extremely territorial.',
    'If you want to prove you can deal with such dangerous Pokémon safely, I suggest defeating the Orange League.',
], {
    image: 'assets/images/npcs/Officer Jenny.png',
    requirement: new GymBadgeRequirement(BadgeEnums.Elite_OrangeChampion, GameConstants.AchievementOption.less),
});
const PinkanOfficerJenny2 = new NPC('Officer Jenny', [
    'Have you seen the Pinkan Berries? That is what makes all the Pokémon on this island turn pink.',
    'Hang on, this island is strictly off limits! Pinkan is a protected Pokémon reserve. How did you get here?',
    'Well I suppose you did deal with that Team Rocket branch on Five Island, so I guess I\'ll let you stay, as thanks.',
    'And since you\'ve conquered the Orange League, I suppose it should be safe to let you into Pinkan Mountain. Just be careful.',
], {
    image: 'assets/images/npcs/Officer Jenny.png',
    requirement: new MultiRequirement([new GymBadgeRequirement(BadgeEnums.Elite_OrangeChampion), new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 0, GameConstants.AchievementOption.less)]),
});
const PinkanOfficerJenny3 = new NPC('Officer Jenny', [
    'Oh it\'s you again! Got some Pinkan Berries to trade?',
    'So long as you\'re not helping those Rocket clowns, we\'ll let you trade for some of those rare Pinkan Pokémon that have only just come to the island.',
], {
    image: 'assets/images/npcs/Officer Jenny.png',
    requirement: new QuestLineCompletedRequirement('Team Rocket\'s Pinkan Theme Park'),
});
const ThemeparkTeamRocket1 = new NPC('Jessie & James', [
    'Oh hello there trainer! What do you mean we\'re not supposed to be here? We toootally got permission from Officer Jenny!',
    'Isn\'t your whole "thing" being helpful? We want to build a theme park to help fund the Pinkan Reserve, but this meddlesome twerp named Ash keeps getting in the way. He\'s even electrocuted us with his damn Pikachu!',
    'We need a bunch of Pinkan Berries to help feed the Pokémon at our theme park, but the twerp keeps zapping us when we try to go collect them.',
    'Would you mind farming some Pinkan Berries to help us grow our supply? We don\'t know how to, but we\'ve heard the Berry Master in Kanto could be helpful?',
], {
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Team Rocket\'s Pinkan Theme Park'), new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 1, GameConstants.AchievementOption.less)]),
    image: 'assets/images/npcs/Pinkan Jessie & James.png',
});
const ThemeparkTeamRocket2 = new NPC('Jessie & James', [
    'Whoa! An actual Pinkan Berry! Now our evil plo- plan! Definitely not evil, our very helpful and good plan!...Ahem. Our plan can now proceed.',
    'Now we can get us some Pinkan\'s for the theme park! Would you mind defeating 500 Pinkan Pokémon in the forest and out in the plains? We\'ll do the catching, you just need to beat \'em',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 1), new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 2, GameConstants.AchievementOption.less)]),
    image: 'assets/images/npcs/Pinkan Jessie & James.png',
});
const ThemeparkTeamRocket3 = new NPC('Jessie & James', [
    'Nice! Well, it would be nice. Now we have all these berries and Pinkan Pokémon, but nowhere to put \'em all!',
    'We need a bunch of Pixie Plates, and we need some Fairy Gems to help...uh...pay off the contractor?',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 2), new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 3, GameConstants.AchievementOption.less)]),
    image: 'assets/images/npcs/Pinkan Jessie & James.png',
});
const ThemeparkTeamRocket4 = new NPC('Jessie & James', [
    'Hahahaha! Now our plan can really start! Prepare for trouble, and make it double, because you just built us a profit machine!',
    'We\'re going to make these Pinkan Pokémon perform silly routines and make us a ton of money, no days off for these suckers!',
    'What\'s that? You\'re gonna stop us!? Heh, yeah right! Bring it on twerp!',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 3), new QuestLineStepCompletedRequirement('Team Rocket\'s Pinkan Theme Park', 5, GameConstants.AchievementOption.less)]),
    image: 'assets/images/npcs/Pinkan Jessie & James.png',
});
const Informant1 = new NPC('Informant', [
    '<i>In a shady warehouse, you find the informant. He is a Mr. Mime, and he doesn\'t seem willing to divulge the information you need.</i>',
], {
    image: 'assets/images/npcs/specialNPCs/Mime Interview.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 2), new QuestLineStepCompletedRequirement('Detective Pikachu', 4, GameConstants.AchievementOption.less)]),
});
const Informant2 = new NPC('Informant', [
    '<i>The Mr. Mime signals to you that this is an illicit drug called R. It is frequently used in the underground fighting rings near the Battle Frontier.</i>',
], {
    image: 'assets/images/npcs/specialNPCs/Mime Interview.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 4), new QuestLineStepCompletedRequirement('Detective Pikachu', 6, GameConstants.AchievementOption.less)]),
});
const Mewtwo1 = new NPC('Mewtwo', [
    'You were wise to seek me out. Howard Clifford has been deceiving you. He is the one making the R drug, and....',
    '<i>A sphere of energy envelops Mewtwo, and he is dragged away by some sort of helicopter. The helicopter has a logo on it: Clifford Industries!</i>',
], {
    image: 'assets/images/npcs/specialNPCs/Possessed Mewtwo.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 10), new QuestLineStepCompletedRequirement('Detective Pikachu', 12, GameConstants.AchievementOption.less)]),
});
const Mewtwo2 = new NPC('Mewtwo', [
    'Thank you for your help. I have little to offer you in return, but perhaps this will help.',
    'I found Detective Pikachu\'s partner some days ago injured on the side of the road, and have nursed him back to health. I hope this reunion will suffice.',
], {
    image: 'assets/images/npcs/specialNPCs/Possessed Mewtwo.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 15), new QuestLineStepCompletedRequirement('Detective Pikachu', 17, GameConstants.AchievementOption.less)]),
});
const DetectiveRaichu = new NPC('Detective Raichu', [
    'Thanks for your help, kid! I\'ll stick along with you until our next mystery comes along.',
], {
    image: 'assets/images/pokemon/26.02.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 16), new QuestLineStepCompletedRequirement('Detective Pikachu', 17, GameConstants.AchievementOption.less)]),
});
const ClientSignpost = new NPC('Welcome Sign', [
    '<i>Welcome to Client Island!</i>',
    '<i>This island is exclusive to those dedicated to reducing server load by downloading the client.</i>',
    '<i>Without your support, Red Spearow here wouldn\'t have any time to relax!</i>',
    '<i>Please drop by the Gift Shop on your way out to make a whole new line of friends.</i>',
], { image: 'assets/images/npcs/other/signpost.png' });
const RedSpearow = new NPC('Red Spearow', [
    '<b><i>SQUAWK! SQUAWK!</i></b>',
    '...',
    '<i>The Red Spearow seems to appreciate your visit.</i>',
], { image: 'assets/images/pokemon/21.01.png' });
const NewIslandJessieAndJames = new RoamerNPC('Jessie & James', ['Mewtwo\'s Clones have escaped and are Roaming freely across Kanto. Will you help us track them down? It\'s for a good cause, we swear.'], GameConstants.Region.kanto, 0, 'assets/images/npcs/Jessie and James.png', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('New Island')));
const NewIslandAsh1 = new NPC('Ash Ketchum', ['Mewtwo has created an army of Clones. Please help me fight them, I have to save Pikachu!'], {
    image: 'assets/images/npcs/Ash Ketchum.png',
    requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('New Island'), GameConstants.AchievementOption.less),
});
const NewIslandAsh2 = new NPC('Ash Ketchum', ['There are still Clones left in Mewtwos army! Help me fight them!'], {
    image: 'assets/images/npcs/Ash Ketchum.png',
    requirement: new MultiRequirement([new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('New Island')), new ClearDungeonRequirement(10, GameConstants.getDungeonIndex('New Island'), GameConstants.AchievementOption.less)]),
});
const BugCatcherPinsir = new NPC('Bug Catcher Michel', [
    'I heard there was a stone hidden in the Safari Zone that makes Pinsir stronger!',
    'But... I don\'t have a high enough Safari Level to find it.',
], { image: 'assets/images/npcs/Bug Catcher.png', requirement: new MaxRegionRequirement(GameConstants.Region.kalos) });
const CandyMan = new NPC('The Candy Man', [
    'I sure do love candy. The rarer, the better!',
    'I\'ve got a real <b>SWEET-TOOTH</b>',
]);
const SpeedyRunner = new NPC('Speedy Runner', [
    'I don\'t have time to listen to people explain stuff I already know.',
    'Some old man tried to teach me how to catch Pokémon earlier. I just shouted',
    '<b>HOW-BLU-COIN?</b>',
    'at him and left.',
], { image: 'assets/images/npcs/Jogger.png' });
const UnrivaledBlue = new NPC('Blue', [
    'So, you said you want to know where you might find Mewtwo\'s Mega Stones, right?',
    'Well, you\'re in luck! I was talking to an old rival of mine the other day, and she said she was looking for Mewtwo, and that she already had two of its Mega Stones. Unfortunately for her, they were the same one.',
    'Not much use in having two of the same Mega Stone, so she might be willing to give one up. If you want to find her, you should check out Cerulean Cave.',
], {
    image: 'assets/images/npcs/Blue-lgpe.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('An Unrivaled Power', 2), new QuestLineStepCompletedRequirement('An Unrivaled Power', 4, GameConstants.AchievementOption.less)]),
});
const UnrivaledGreen1 = new NPC('Green', [
    '<i>Ow! You were hit by a low-flying Poké Ball!</i>',
    'Oh, whoops! You\'re not a Pokémon! Sorry, it\'s so dark in here, I saw you and thought you were some kind of Pokémon.',
    'Well, uh... nice to meet you. I\'m Green! So hey, I\'m just curious... Are you here because you\'re also looking for... y\'know, something special?',
    'R-right! Mewtwo! ...Drat, so you knew about it already, huh.......',
    'Whaaaaaaaaaat?! You\'ve already caught it?! Hey, no fair! I was planning on catching it first!',
], {
    image: 'assets/images/npcs/Green.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('An Unrivaled Power', 4), new QuestLineStepCompletedRequirement('An Unrivaled Power', 6, GameConstants.AchievementOption.less)]),
});
const UnrivaledGreen2 = new NPC('Green', [
    'Wow, you\'re strong! Well, I guess that\'s that. Here, you can have this.',
    '</i></br><img src="assets/images/megaStone/Mewtwonite_X.png"/></br><i>You obtained the Mewtwonite X!</i>',
    'Oh, I know! Why don\'t you become one of my Pokémon, together with Mewtwo?',
    '<i>A Poké Ball came flying at you!</i>',
    '<i>A Poké Ball came flying at you!</i>',
    'Hee hee hee... <i>A Poké Ball came flying at you!</i>',
    '<i>A Poké Ball came flying at you!</i>',
    '<i>A Poké Ball came flying at you!</i> Think about it, ok?',
], {
    image: 'assets/images/npcs/Green.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('An Unrivaled Power', 6), new QuestLineStepCompletedRequirement('An Unrivaled Power', 8, GameConstants.AchievementOption.less)]),
});
const AnomalyMewtwo1 = new NPC('Anomaly Mewtwo', [
    '<i>That child... She wished to possess me, like a mere animal. She would have cared little for my own desires. I wish only to live in peace, without being disturbed.</i>',
    '<i>You say you would help me? But you are no different. You even possess another of my kind. You do not fool me.</i>',
    '<i>I will leave this place now, to find what I desire. Do not follow me.</i>',
], {
    image: 'assets/images/pokemon/150.01.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('An Unrivaled Power', 7), new QuestLineStepCompletedRequirement('An Unrivaled Power', 9, GameConstants.AchievementOption.less)]),
});
const BillGrandpaChristmas = new NPC('Bill\'s Grandpa', [
    'Did you find all of the Santa Jynx?',
    'I hope they don\'t come back!',
], {
    image: 'assets/images/npcs/Bill\'s Grandpa without Eevee.png',
    requirement: new OneFromManyRequirement([
        new MultiRequirement([
            new ItemOwnedRequirement('Christmas_present', 11),
            new TemporaryBattleRequirement('Santa Jynx 1'),
        ]),
        new MultiRequirement([
            new ItemOwnedRequirement('Christmas_present', 27),
            new TemporaryBattleRequirement('Santa Jynx 2'),
        ]),
        new MultiRequirement([
            new ItemOwnedRequirement('Christmas_present', 49),
            new TemporaryBattleRequirement('Santa Jynx 3'),
        ]),
        new MultiRequirement([
            new ItemOwnedRequirement('Christmas_present', 150),
            new TemporaryBattleRequirement('Santa Jynx 4'),
        ]),
    ]),
});
const UnownFigure = new NPC('Unown Figure', [
    'I am the lead scientist specializing in all things related to Unown. If you have any questions, don\'t hesitate to ask. Our study has revealed three key patterns regarding the appearance of Unown:',
    '1. <b>Increased Frequency with Clears</b>: The deeper one ventures into the dungeon, the more Unown emerge. Our most daring researchers have observed up to three Unown at a time.',
    '2. <b>Daily Variations</b>: Different types of Unown seem to appear each day, following what appears to be a specific sequence.',
    '3. <b>Limited Variety in the Region</b>: Not all versions of Unown are found here. Although 28 forms exist, some have only been encountered in other regions.',
], { image: 'assets/images/npcs/Scientist (male).png' });
//Kanto Towns
TownList['Pallet Town'] = new Town('Pallet Town', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [new BulletinBoard(GameConstants.BulletinBoards.Kanto)], {
    npcs: [PalletProfOak, PalletCelebiProfOak1, PalletCelebiProfOak2, PalletMom1, PalletMom2],
});
TownList['Viridian City'] = new Town('Viridian City', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [ViridianCityShop, TemporaryBattleList['Unrivaled Blue']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 1)],
    npcs: [ViridianCityOldMan1, ViridianCityOldMan2, ViridianCityOldMan3, UnrivaledBlue],
});
TownList['Pewter City'] = new Town('Pewter City', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [PewterCityShop], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.kanto, 2),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Viridian Forest')),
    ],
    npcs: [PewterBattleItemRival, PewterScientist],
});
TownList['Route 4 Pokémon Center'] = new Town('Route 4 Pokémon Center', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [Route3Shop], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.kanto, 3),
    ],
    npcs: [Route3ShadySalesman],
    ignoreAreaStatus: true,
});
TownList['Cerulean City'] = new Town('Cerulean City', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [CeruleanCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Cerulean City']), new MoveToDungeon(dungeonList['Cerulean Cave'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 4)],
    npcs: [CeruleanKantoBerryMaster, CeruleanFarmApprentice, CeruleanSuperNerd, Mewtwo1, Mewtwo2, DetectiveRaichu],
});
TownList['Bill\'s House'] = new Town('Bill\'s House', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [
    TemporaryBattleList['Bill\'s Grandpa'],
    TemporaryBattleList['Santa Jynx 1'],
    TemporaryBattleList['Santa Jynx 2'],
    TemporaryBattleList['Santa Jynx 3'],
    TemporaryBattleList['Santa Jynx 4'],
], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 25)],
    npcs: [BillsGrandpa1, BillsGrandpa2, BillsGrandpa3, BillsGrandpa4, BillsGrandpa5, BillsGrandpa6, BillsGrandpa7, BillsGrandpa8, BillsHouseEusine, BillGrandpaChristmas],
});
TownList['Vermilion City'] = new Town('Vermilion City', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [VermilionCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Vermilion City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 6)],
    npcs: [VermilionFanClubChairman, VermilionShardApprentice, VermilionEusine],
});
TownList['Lavender Town'] = new Town('Lavender Town', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [LavenderTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Lavender Town']), new MoveToDungeon(dungeonList['Pokémon Tower'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rock Tunnel'))],
    npcs: [LavenderMrFuji, LavenderChanneler, LavenderShopper],
});
TownList['Celadon City'] = new Town('Celadon City', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [CeladonDepartmentStoreShop, CeladonCityShop, new MoveToDungeon(dungeonList['Rocket Game Corner'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 7)],
    npcs: [BigSpender, EggHuntErika, CandyMan],
});
TownList['Saffron City'] = new Town('Saffron City', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [SaffronCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Saffron City']), new MoveToDungeon(dungeonList['Silph Co.']), TemporaryBattleList['Fighting Dojo'], TemporaryBattleList['Mime Interview']], {
    requirements: [new OneFromManyRequirement([
            new GymBadgeRequirement(BadgeEnums.Rainbow),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rocket Game Corner')),
        ])],
    npcs: [SaffronBattleItemRival, SaffronBreeder, Informant1, Informant2],
});
TownList['Fuchsia City'] = new Town('Fuchsia City', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [FuchsiaCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Fuchsia City'])], {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.kanto, 18),
            new RouteKillRequirement(10, GameConstants.Region.kanto, 15),
        ])],
    npcs: [FuchsiaKantoRoamerNPC, FuchsiaEusine],
});
TownList['Safari Zone'] = new Town('Safari Zone', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [new SafariTownContent()], {
    requirements: [new CustomRequirement(ko.pureComputed(() => +App.game.keyItems.hasKeyItem(KeyItemType.Safari_ticket)), 1, 'Obtain the Safari Ticket')],
    npcs: [BugCatcherPinsir],
});
TownList['Cinnabar Island'] = new Town('Cinnabar Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [CinnabarIslandShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Cinnabar Island']), new GenericTraderShop('Palaeontologist', 'Palaeontologist'), new GenericTraderShop('FossilCinnabarLab', 'Cinnabar Lab'), new MoveToDungeon(dungeonList['Pokémon Mansion'])], {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.kanto, 20),
            new RouteKillRequirement(10, GameConstants.Region.kanto, 21),
        ])],
    npcs: [KantoFossilNpc, CinnabarIslandResearcher],
});
TownList['Indigo Plateau Kanto'] = new Town('Indigo Plateau Kanto', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [GymList['Elite Lorelei'], GymList['Elite Bruno'], GymList['Elite Agatha'], GymList['Elite Lance'], GymList['Champion Blue'], pokeLeagueShop(), TemporaryBattleList['Unrivaled Red']], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.kanto, 23),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road')),
    ],
    npcs: [SpeedyRunner],
});
TownList['One Island'] = new Town('One Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii123, [OneIslandShop, new DockTownContent()], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Volcano)],
    npcs: [OneIslandCelio1, OneIslandCelio2, OneIslandCelio3, OneIslandCelio4, OneIslandCelio5, OneIslandCelio6, OneIslandCelio7, OneIslandYoungster],
});
TownList['Mt. Ember'] = new Town('Mt. Ember', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii123, [new MoveToDungeon(dungeonList['Mt. Ember Summit']), new MoveToDungeon(dungeonList['Ruby Path'], new MaxRegionRequirement(GameConstants.Region.hoenn)), TemporaryBattleList['Sevii Rocket Grunt 1'], TemporaryBattleList['Sevii Rocket Grunt 2']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 27)],
    npcs: [SeviiRocketGrunts],
});
TownList['Two Island'] = new Town('Two Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii123, [TwoIslandShop, new GenericTraderShop('EverstoneDealer', 'Rocío Noevo')], {
    requirements: [new QuestLineStepCompletedRequirement('Bill\'s Errand', 0)],
    npcs: [TwoIslandGameCornerOwner1, TwoIslandGameCornerOwner2],
});
TownList['Three Island'] = new Town('Three Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii123, [ThreeIslandShop, TemporaryBattleList['Biker Goon 1'], TemporaryBattleList['Biker Goon 2'], TemporaryBattleList['Biker Goon 3'], TemporaryBattleList['Cue Ball Paxton']], {
    requirements: [new QuestLineStepCompletedRequirement('Bill\'s Errand', 1)],
    npcs: [ThreeIslandBiker1, ThreeIslandBiker2, ThreeIslandBiker3],
});
TownList['Professor Ivy\'s Lab'] = new Town('Professor Ivy\'s Lab', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii123, [], {
    requirements: [new QuestLineStepCompletedRequirement('Unfinished Business', 0)],
    npcs: [CelebiProfIvy],
});
TownList['Client Island'] = new Town('Client Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii123, [ClientIslandShop], {
    requirements: [new ClientRequirement(), new GymBadgeRequirement(BadgeEnums.Volcano)],
    npcs: [ClientSignpost, RedSpearow],
});
TownList['Four Island'] = new Town('Four Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [FourIslandShop, new MoveToDungeon(dungeonList['Icefall Cave'])], {
    requirements: [new QuestLineStepCompletedRequirement('Celio\'s Errand', 5)],
});
TownList['Five Island'] = new Town('Five Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [FiveIslandShop, new DockTownContent()], {
    requirements: [new QuestLineStepCompletedRequirement('Celio\'s Errand', 5)],
});
TownList['Rocket Warehouse'] = new Town('Rocket Warehouse', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [TemporaryBattleList['Sevii Rocket Grunt 3'], TemporaryBattleList['Sevii Rocket Grunt 4'], TemporaryBattleList['Sevii Rocket Grunt 5'], TemporaryBattleList['Sevii Rocket Ariana'], TemporaryBattleList['Sevii Rocket Archer'], TemporaryBattleList['Scientist Gideon']], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.kanto, 30),
        new QuestLineStepCompletedRequirement('Celio\'s Errand', 8),
    ],
});
TownList['Six Island'] = new Town('Six Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [SixIslandShop], {
    requirements: [new QuestLineStepCompletedRequirement('Celio\'s Errand', 5)],
    npcs: [SixIslandSeviiRoamerNPC],
});
TownList['Dotted Hole'] = new Town('Dotted Hole', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 37)],
    npcs: [SeviiGideon1, SeviiGideon2],
});
TownList['Seven Island'] = new Town('Seven Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [SevenIslandShop], {
    requirements: [new QuestLineStepCompletedRequirement('Celio\'s Errand', 5)],
});
TownList['Mikan Island'] = new Town('Mikan Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [MikanIslandShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tanoby Ruins'))],
});
TownList['Navel Island'] = new Town('Navel Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [NavelIslandShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lost Cave'))],
});
TownList['Trovita Island'] = new Town('Trovita Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [TrovitaIslandShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 41)],
});
TownList['Kumquat Island'] = new Town('Kumquat Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [KumquatIslandShop], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Icefall Cave'))],
});
TownList['Pummelo Island'] = new Town('Pummelo Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [GymList['Supreme Gym Leader Drake'], pokeLeagueShop(), new BulletinBoard(GameConstants.BulletinBoards.Sevii4567)], {
    requirements: [
        new GymBadgeRequirement(BadgeEnums['Coral-Eye']),
        new GymBadgeRequirement(BadgeEnums.Sea_Ruby),
        new GymBadgeRequirement(BadgeEnums.Spike_Shell),
        new GymBadgeRequirement(BadgeEnums.Jade_Star),
    ],
});
TownList['Valencia Pokémon Center'] = new Town('Valencia Pokémon Center', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [ValenciaPokémonCenterShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 40)],
    npcs: [ValenciaProfIvy],
});
TownList['Pinkan Pokémon Reserve'] = new Town('Pinkan Pokémon Reserve', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [PinkanPokémonReserveShop, PinkanBerryMaster, TemporaryBattleList['Pinkan Jessie & James'], TemporaryBattleList['Pinkan Officer Jenny']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kanto, 42)],
    npcs: [PinkanOfficerJenny1, PinkanOfficerJenny2, PinkanOfficerJenny3, ThemeparkTeamRocket1, ThemeparkTeamRocket2, ThemeparkTeamRocket3, ThemeparkTeamRocket4],
});
//Kanto Dungeons
TownList['Viridian Forest'] = new DungeonTown('Viridian Forest', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 2)]);
TownList['Mt. Moon'] = new DungeonTown('Mt. Moon', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 3)], [TemporaryBattleList['Silver 6']]);
TownList['Diglett\'s Cave'] = new DungeonTown('Diglett\'s Cave', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 6)]);
TownList['Rock Tunnel'] = new DungeonTown('Rock Tunnel', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 10),
    new GymBadgeRequirement(BadgeEnums.Cascade),
]);
TownList['Rocket Game Corner'] = new DungeonTown('Rocket Game Corner', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 7)]);
TownList['Pokémon Tower'] = new DungeonTown('Pokémon Tower', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 7),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rocket Game Corner')),
], [TemporaryBattleList['Blue 4']]);
TownList['Silph Co.'] = new DungeonTown('Silph Co.', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [new TemporaryBattleRequirement('Blue 4')], [TemporaryBattleList['Blue 5']], {
    npcs: [LaprasGift],
});
TownList['Power Plant'] = new DungeonTown('Power Plant', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 9),
    new GymBadgeRequirement(BadgeEnums.Soul),
]);
TownList['Seafoam Islands'] = new DungeonTown('Seafoam Islands', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 19),
    new GymBadgeRequirement(BadgeEnums.Rainbow),
]);
TownList['Pokémon Mansion'] = new DungeonTown('Pokémon Mansion', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kanto, 20),
        new RouteKillRequirement(10, GameConstants.Region.kanto, 21),
    ])]);
TownList['Mt. Ember Summit'] = new DungeonTown('Mt. Ember Summit', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii123, [new RouteKillRequirement(10, GameConstants.Region.kanto, 27)]);
TownList['Berry Forest'] = new DungeonTown('Berry Forest', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii123, [new RouteKillRequirement(10, GameConstants.Region.kanto, 29)]);
TownList['New Island'] = new DungeonTown('New Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [new SpecialEventRequirement('Mewtwo strikes back!')], [TemporaryBattleList['Ash Ketchum New Island']], {
    npcs: [NewIslandAsh1, NewIslandAsh2, NewIslandJessieAndJames],
});
TownList['Victory Road'] = new DungeonTown('Victory Road', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [new RouteKillRequirement(10, GameConstants.Region.kanto, 23)]);
TownList['Cerulean Cave'] = new DungeonTown('Cerulean Cave', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Kanto, [new GymBadgeRequirement(BadgeEnums.Elite_KantoChampion)], [TemporaryBattleList['Unrivaled Green']], {
    npcs: [UnrivaledGreen1, UnrivaledGreen2, AnomalyMewtwo1],
});
TownList['Ruby Path'] = new DungeonTown('Ruby Path', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii123, [new QuestLineStepCompletedRequirement('Celio\'s Errand', 2)], [], {
    npcs: [SeviiRuby],
});
TownList['Icefall Cave'] = new DungeonTown('Icefall Cave', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [new QuestLineStepCompletedRequirement('Celio\'s Errand', 5)], [], {
    npcs: [SeviiLorelei],
});
TownList['Sunburst Island'] = new DungeonTown('Sunburst Island', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [new RouteKillRequirement(10, GameConstants.Region.kanto, 31)], []);
TownList['Lost Cave'] = new DungeonTown('Lost Cave', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [new RouteKillRequirement(10, GameConstants.Region.kanto, 33)], []);
TownList['Pattern Bush'] = new DungeonTown('Pattern Bush', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [new RouteKillRequirement(10, GameConstants.Region.kanto, 34)], []);
TownList['Altering Cave'] = new DungeonTown('Altering Cave', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [new RouteKillRequirement(10, GameConstants.Region.kanto, 36)], [], {
    npcs: [AlteringCaveRuinManiac1, AlteringCaveRuinManiac2],
});
TownList['Tanoby Ruins'] = new DungeonTown('Tanoby Ruins', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [new RouteKillRequirement(10, GameConstants.Region.kanto, 39)], [TanobyRuinsShop], {
    npcs: [TanobyProfIvy, UnownFigure],
});
TownList['Pinkan Mountain'] = new DungeonTown('Pinkan Mountain', GameConstants.Region.kanto, GameConstants.KantoSubRegions.Sevii4567, [
    new RouteKillRequirement(10, GameConstants.Region.kanto, 42),
    new GymBadgeRequirement(BadgeEnums.Elite_OrangeChampion),
], []);
//Johto Shops
const CherrygroveCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.SmallRestore,
]);
const VioletCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Token_collector,
    ItemList.Lucky_egg,
    ItemList.MediumRestore,
    ItemList.Mystery_egg,
    ItemList.Wonder_Chest,
    ItemList.Togepi,
]);
const AzaleaTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.Grass_egg,
    ItemList.Leaf_stone,
    ItemList.Kings_rock,
]);
const GoldenrodDepartmentStoreShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Lucky_egg,
    ItemList.Dowsing_machine,
    ItemList.Token_collector,
    ItemList.Lucky_incense,
    ItemList.SmallRestore,
    ItemList.MediumRestore,
], 'Department Store');
const EcruteakCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Fire_egg,
    ItemList.Fire_stone,
    ItemList.Soothe_bell,
]);
const OlivineCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.Water_egg,
    ItemList.Electric_egg,
    ItemList.Water_stone,
    ItemList.Thunder_stone,
    ItemList.Metal_coat,
    ItemList.HatcheryHelperCarey,
]);
const CianwoodCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xClick,
    ItemList.Fighting_egg,
    ItemList.Moon_stone,
    ItemList.Sun_stone,
]);
const MahoganyTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Linking_cord,
    ItemList.Upgrade,
    ItemList.HatcheryHelperDakota,
]);
const BlackthornCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.LargeRestore,
    ItemList.Dragon_egg,
    ItemList.Dragon_scale,
]);
const JohtoBerryMaster = new BerryMasterShop(GameConstants.BerryTraderLocations['Goldenrod City'], [
    ItemList.Boost_Mulch,
    ItemList.Rich_Mulch,
    ItemList.Surprise_Mulch,
    ItemList.Amaze_Mulch,
    ItemList.Freeze_Mulch,
    ItemList.Berry_Shovel,
    ItemList.Mulch_Shovel,
    ItemList.Squirtbottle,
    ItemList.FarmHandBailey,
    ItemList.ChopleBerry,
    ItemList.KebiaBerry,
    ItemList.ShucaBerry,
    ItemList.ChartiBerry,
], 'Johto Berry Master');
//Johto Contest Shop
const JohtoContestShop = new Shop([
    ItemList['Sudowoodo (Golden)'],
], 'Contest Shop');
// Johto NPCs
const CherrygroveMrPokemon = new NPC('Mr. Pokémon', [
    'Welcome to Johto! This is where the first ever Pokémon egg was found long ago.',
    'Astounding breakthroughs have been made since then. We can now store Pokémon eggs for longer and queue them up for breeding.',
    'This new technology only allows up to four stored eggs for now, though.',
], { image: 'assets/images/npcs/Mr. Pokémon.png' });
const VioletEarlDervish = new NPC('Earl Dervish', [
    'Earl, I am! Teach you, I will! To be a better trainer!',
    'Some Pokémon babies, only from Day Care they come! Hatch! Hatch! Hatch!',
]);
const VioletPrimo = new NPC('Primo', [
    'You’re a trainer, right? It’s me, the Poké Dude! I’m the guy on Teachy TV!',
    'Your Item Bag has a bunch of nifty features! Take stuff in the Held Items pocket, for instance. You can use a Held Item to empower your Pokémon or acquire unique effects. How do you use it? Well, here’s how it works.',
    'Once you have obtained a Held Item, visit your Item Bag. They are most often found in Dungeons, but some, like the Wonder Chest, are for sale!',
    'From there, go into your Held Items pocket and once an item is selected, you can use it by choosing from the list of available Pokémon to hold it.',
    'Choose who you select carefully! Once you remove a Held Item from your Pokémon, the item will break!',
    'All righty, be seeing you!',
]);
const AzaleaElder = new NPC('Elder Li', [
    'You want to know about Celebi? It hasn\'t been seen in a long time.',
    'I remember, back in the day, it was the Guardian of Ilex Forest. It was a playful Pokémon. It loved playing with children.',
    'It was especially close to a kid named Samuel Oak. When he suddenly moved to Kanto, Celebi was quite sad. He never even said goodbye! I wonder what became of that boy. Maybe he knows more of where Celebi is right now. They certainly have Unfinished Business.',
    'Celebi got over it very quick, playful as it is. There are always other kids to play with. Then, some time later, a strange figure went into the forest with a golden Poké Ball. The Guardian hasn\'t been seen since.',
], { image: 'assets/images/npcs/Elder Li.png' });
const AzaleaHiker = new NPC('Hiker Daniel', [
    'The PokéManiacs in Union Cave are restless. They have been ranting and raving about a weekly visitor.',
    'According to them, a strange Pokémon\'s cries can be heard from a lake deep inside the cave.',
    'I\'ve never heard it myself. Apparently it only happens on Fridays.',
], {
    image: 'assets/images/npcs/Hiker.png',
    requirement: new GymBadgeRequirement(BadgeEnums.Fog),
});
const AzaleaCelebiKurt1 = new NPC('Kurt', [
    'Those poor Slowpoke! I\'m not doing anything until those disgusting Rockets are gone!',
], {
    image: 'assets/images/npcs/Kurt.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 2), new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Slowpoke Well'), GameConstants.AchievementOption.less)]),
});
const AzaleaCelebiKurt2 = new NPC('Kurt', [
    'Thank you for your help at the Slowpoke Well! You have something for me?',
    'So this is it then? The GS Ball. I can see why old Oak wants me to have a crack at it.',
    'I will need some time to figure this out. Please come back later.',
], {
    image: 'assets/images/npcs/Kurt.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 2), new QuestLineStepCompletedRequirement('Unfinished Business', 3, GameConstants.AchievementOption.less), new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Slowpoke Well'))]),
});
const AzaleaCelebiKurt3 = new NPC('Kurt', [
    'Getting closer to the solution...',
    'I think I know what\'s in there... Better give Oak a call.',
    'What? Oh, I\'m just talking to myself. I\'m not done yet. Please come back later.',
], {
    image: 'assets/images/npcs/Kurt.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 3), new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion, GameConstants.AchievementOption.less)]),
});
const AzaleaCelebiKurt4 = new NPC('Kurt', [
    'Welcome back Champ! I have good news and bad news.',
    'Bad news first. I didn\'t manage to open the ball. It\'s just stuck. No way to get in there. Better give up on it. This story ends here.',
    'Naah! Just kidding! Imagine though, how disappointing that would be. What an anticlimax!',
    'Good news first then, I managed to open the ball! And there was a Celebi inside! Bad news, the Celebi immediately left. It just flew away.',
    'Old Oak apparently had an encounter with this Celebi back when he was still young Oak. And he\'s here! He might know where the Celebi went, you should have a chat with him.',
], {
    image: 'assets/images/npcs/Kurt.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 3), new QuestLineStepCompletedRequirement('Unfinished Business', 5, GameConstants.AchievementOption.less), new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)]),
});
const AzaleaCelebiOak1 = new NPC('Prof. Oak', [
    'I knew it! I knew that Celebi was in there! Well, I didn\'t actually know. I had a feeling.',
    'That Celebi is an old friend of mine. Back in the day it liked to hang out at the old shrine in Ilex Forest. You should go check it out and try to catch Celebi.',
    'I can\'t think of a better trainer for this Celebi.',
], {
    image: 'assets/images/npcs/Professor Oak.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 4), new QuestLineStepCompletedRequirement('Unfinished Business', 6, GameConstants.AchievementOption.less)]),
});
const AzaleaCelebiOak2 = new NPC('Prof. Oak', [
    'Celebi wasn\'t there? Strange, usually it loves to play with young people at the shrine.',
    'Wait. You saw a Pichu with a spiked ear?! We used to play with it at that shrine way back when! Looks like it hasn\'t aged a day!',
    'It sounds like you encountered a Time Distortion. Celebi is sensitive to time, it must be distressed. I have heard rumors of something similar going on at Tohjo Falls. Maybe if you clear up that Time Distortion, Celebi will want to come out to play?',
], {
    image: 'assets/images/npcs/Professor Oak.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 7), new QuestLineStepCompletedRequirement('Unfinished Business', 9, GameConstants.AchievementOption.less)]),
});
const AzaleaCelebiOak3 = new NPC('Prof. Oak', [
    'So Giovanni was there at the Falls while you were dealing with that mess at the Radio Tower? If only we had known, we could have had him arrested right then and there.',
    'The Time Distortion seems to have cleared up. Celebi should be happy now. You should go check out the Shrine again.',
], {
    image: 'assets/images/npcs/Professor Oak.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 10), new QuestLineStepCompletedRequirement('Unfinished Business', 12, GameConstants.AchievementOption.less)]),
});
const AzaleaCelebiOak4 = new NPC('Prof. Oak', [
    'What\'s that? Celebi went back into the forest? Well, follow it!',
    'If it wants to play I\'m sure a great trainer such as yourself can figure out a way that you can be friends and play all the time!',
], {
    image: 'assets/images/npcs/Professor Oak.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 12), new QuestLineStepCompletedRequirement('Unfinished Business', 13, GameConstants.AchievementOption.less)]),
});
const AzaleaCelebiOak5 = new NPC('Prof. Oak', [
    'I\'m glad Celebi has been released from that wretched prison and has found a home with a great young trainer like yourself. I\'m going back to Kanto.',
    '...',
    'Goodbye Celebi.',
], {
    image: 'assets/images/npcs/Professor Oak.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 13), new QuestLineCompletedRequirement('Unfinished Business', GameConstants.AchievementOption.less)]),
});
const IlexForestShrine1 = new NPC('Investigate the Shrine', [
    '<i>Something strange is going on here. The air seems to curve around itself. You feel like you\'re here, but also not here at the same time.</i>',
    '<i>No sign of Celebi, but you do see a strange looking Pichu approaching.</i>',
], {
    image: 'assets/images/npcs/other/Ilex Forest.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 5), new QuestLineStepCompletedRequirement('Unfinished Business', 7, GameConstants.AchievementOption.less)]),
});
const IlexForestShrine2 = new NPC('Investigate the Shrine', [
    '<i>Everything is normal.</i>',
    '<i>Celebi is here! It seems to want to play with you, but every time you approach it backs off. It\'s luring you deeper into the forest!</i>',
    '<i>What would the professor do?</i>',
], {
    image: 'assets/images/npcs/other/Ilex Forest.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 11), new QuestLineStepCompletedRequirement('Unfinished Business', 13, GameConstants.AchievementOption.less)]),
});
const IlexForestPichuFan = new NPC('Pichu-Fan', [
    'I\'m looking for a strange Pichu, have you seen it? According to rumors, its favorite hiding spots are chests...',
], {
    image: 'assets/images/npcs/Poké Kid.png',
    requirement: new QuestLineStepCompletedRequirement('Unfinished Business', 7),
});
const EcruteakBill = new NPC('Bill', [
    'I traveled here all the way from Goldenrod to buy a Soothe Bell for my Eevee.',
    'When I use a Soothe Bell on Eevee it can evolve into Espeon or Umbreon. It depends on the time. Espeon during the day, Umbreon at night.',
    'I only brought enough Quest Points for one Soothe Bell. It\'s so hard to choose...',
], { image: 'assets/images/npcs/Bill.png' });
const OlivineLighthouseJasmine1 = new NPC('Jasmine', [
    '...This Pokémon always kept the sea lit at night... But it suddenly got sick... It’s gasping for air...',
    '...I understand that there is a wonderful Pharmacy in Cianwood... But that’s across the sea... And I can’t leave Amphy unattended...',
    'May I ask you to get some medicine for me? Please?',
], {
    image: 'assets/images/npcs/Jasmine.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Sick Ampharos', 0), new QuestLineStepCompletedRequirement('The Sick Ampharos', 4, GameConstants.AchievementOption.less)]),
});
const CianwoodCityPharmacist1 = new NPC('Pharmacist', [
    'Huh? You need medicine? Your Pokémon appear to be fine. Is something worrying you?',
    'The Lighthouse Pokémon is in trouble? I\'ll prepare some medicine right now but it will take some time!',
], {
    image: 'assets/images/npcs/Scientist (male).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Sick Ampharos', 1), new QuestLineStepCompletedRequirement('The Sick Ampharos', 3, GameConstants.AchievementOption.less)]),
});
const CianwoodCityPharmacist2 = new NPC('Pharmacist', [
    'I got it! This ought to do the trick.',
    '<i>You got a \'Secret Potion\'</i>',
], {
    image: 'assets/images/npcs/Scientist (male).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Sick Ampharos', 3), new QuestLineStepCompletedRequirement('The Sick Ampharos', 4, GameConstants.AchievementOption.less)]),
});
const OlivineLighthouseMedicineAmphy = new NPC('Give medicine to Amphy', [
    'Palu! Palulu!',
    '<i>Ampharos seems to feel better.</i>',
], {
    image: 'assets/images/pokemon/181.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Sick Ampharos', 4), new QuestLineStepCompletedRequirement('The Sick Ampharos', 5, GameConstants.AchievementOption.less)]),
});
const OlivineLighthouseJasmine2 = new NPC('Jasmine', [
    ' ...Oh, I’m so relieved... This is just so wonderful... Thank you so very, very much.',
    '...I will return to the Gym...',
], {
    image: 'assets/images/npcs/Jasmine.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Sick Ampharos', 5), new QuestLineStepCompletedRequirement('The Sick Ampharos', 6, GameConstants.AchievementOption.less)]),
});
const OlivineLighthouseAmphy = new NPC('Amphy', [
    'Palu! Palulu!',
], {
    image: 'assets/images/pokemon/181.png',
    requirement: new QuestLineCompletedRequirement('The Sick Ampharos'),
});
const EcruteakEusine = new NPC('Eusine', [
    'Legends say that when the Brass Tower burned down and became the Burned Tower, three unnamed Pokémon perished in the flames...',
    'Ho-Oh came down from the Tin Tower and revived those Pokémon. They became the Legendary Beasts. Some say these Beasts still inhabit the basement of the Burned Tower.',
    'Could you please clear Burned Tower for me and see if this is true?',
], {
    image: 'assets/images/npcs/Eusine.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('The Legendary Beasts'), new QuestLineStepCompletedRequirement('The Legendary Beasts', 2, GameConstants.AchievementOption.less)]),
});
const EcruteakPokéfan = new NPC('Pokéfan Derek', [
    'I saw it! Did you see it?! I saw you go in there! I don\'t know what you did in the Burned Tower, but three great Beasts came running out of there!',
    'It was a great sight to behold. They all went in different directions. I think they are just roaming the region now. My friend Trevor in Blackthorn City can tell you more.',
    'Eusine was here a second ago. He seemed very excited, but then he suddenly left. I don\'t know where he went, but he seemed to be particularly interested in the blue one.',
], {
    image: 'assets/images/npcs/PokéManiac.png',
    requirement: new QuestLineStepCompletedRequirement('The Legendary Beasts', 2),
});
const Zuki = new NPC('Kimono Girl Zuki', [
    'Professor Elm tells me you are a master trainer. Please, show me your skills by training your Pokémon.',
], {
    image: 'assets/images/npcs/Kimono Girl.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Whirl Guardian'), new QuestLineStepCompletedRequirement('Whirl Guardian', 1, GameConstants.AchievementOption.less)]),
});
const Naoko = new NPC('Kimono Girl Naoko', [
    'I seem to have lost my way in the forest. Can you show me the way out?',
], {
    image: 'assets/images/npcs/Kimono Girl.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Whirl Guardian', 1), new QuestLineStepCompletedRequirement('Whirl Guardian', 3, GameConstants.AchievementOption.less)]),
});
const Miki = new NPC('Kimono Girl Miki', [
    'My sisters Zuki and Naoko tell me you have helped them, and I thank you. Please help find my other two sisters, Sayo and Kuni. Please accept this as a token of my gratitude.',
], {
    image: 'assets/images/npcs/Kimono Girl.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Whirl Guardian', 3), new QuestLineStepCompletedRequirement('Whirl Guardian', 5, GameConstants.AchievementOption.less)]),
});
const Sayo = new NPC('Kimono Girl Sayo', [
    'Excuse me! I\'m stuck out here on the ice, can you give me a quick push?',
], {
    image: 'assets/images/npcs/Kimono Girl.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Whirl Guardian', 4), new QuestLineStepCompletedRequirement('Whirl Guardian', 6, GameConstants.AchievementOption.less)]),
});
const Kuni = new NPC('Kimono Girl Kuni', [
    'I\'m supposed to meet my sisters, but the streets here just aren\'t safe! Can you protect me from Team Rocket?',
], {
    image: 'assets/images/npcs/Kimono Girl.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Whirl Guardian', 6), new QuestLineStepCompletedRequirement('Whirl Guardian', 8, GameConstants.AchievementOption.less)]),
});
const KimonoGirlsWhirl = new NPC('Kimono Girls', [
    'With the power of the Tidal Bell, we call to Lugia! Guardian of the Whirl Islands!',
], {
    image: 'assets/images/npcs/Kimono Girl.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Whirl Guardian', 8), new QuestLineStepCompletedRequirement('Whirl Guardian', 10, GameConstants.AchievementOption.less)]),
});
const KimonoGirlsEcruteak = new NPC('Kimono Girls', [
    'We have been watching you, and see that you have tamed the three Pokémon revived by Ho-Oh in the Burned Tower. Show us your power and we shall give you the Clear Bell, which will call Ho-Oh to the Tin Tower.',
], {
    image: 'assets/images/npcs/Kimono Girl.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Rainbow Guardian'), new QuestLineStepCompletedRequirement('Rainbow Guardian', 1, GameConstants.AchievementOption.less)]),
});
const OlivineSSAquaCaptain = new NPC('S.S. Aqua Captain', [
    'Aye! At this here dock you can travel to faraway regions! But only ones you’ve travelled to before; I’ve heard the Professor has his own vessel to take ye’ to new lands!',
], { image: 'assets/images/npcs/Sailor.png' });
const CianwoodPhotographyAide = new NPC('Photography Aide', [
    'Cameron the Photographer isn’t here right now; he’s off taking photos of Pokémon on Berry Farms. Did you know that some Berries can even attract rare Pokémon?',
]);
const CianwoodEusine = new NPC('Eusine', [
    'Yo, wasn\'t that Suicune just now? I only caught a quick glimpse, but I thought I saw Suicune running on the waves.',
    'Suicune is beautiful and grand. And it races through towns and roads at simply awesome speeds. It\'s wonderful... I want to see Suicune up close....',
    'I\'ve decided. I\'ll battle you as a trainer to earn Suicune\'s respect! Come on! Let\'s battle now!',
], {
    image: 'assets/images/npcs/Eusine.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eusine\'s Chase', 0), new QuestLineStepCompletedRequirement('Eusine\'s Chase', 2, GameConstants.AchievementOption.less)]),
});
const MahoganySouvenirShopAttendant = new NPC('Souvenir Shop Attendant', [
    'We’ve got stuff here nobody else has got! But keep any Dowsing Machines you have away from the merchandise… especially the RageCandyBars.',
    'Keep ‘em outside where they belong! I’ve heard those machines can attract Pokémon with Held Items more often, and even more so in Dungeons!',
]);
const MahoGanyOfficerJenny = new NPC('Officer Jenny', [
    'You made it to Mahogany without troubles? Did you see anything suspicious?',
    'Some adventurers reported criminal activities on route 42. Team Rocket are allegedly attempting to steal newborn Phanpy...',
], { image: 'assets/images/npcs/Officer Jenny.png' });
const MahoganyEusine = new NPC('Eusine', [
    'Suicune... How brave it is! How refreshing it is! How beautiful it is! And how quickly it moves! It seems to be heading east.',
    'You seem to be around where Suicune would appear. Well, that\'s OK. My desire to search for Suicune is far beyond yours... My grandpa was...quite into myths. I\'ve heard so many stories about Suicune from him.',
    'Suicune... I won\'t stop following you until I\'ve found out what you\'re after... You hear me!',
], {
    image: 'assets/images/npcs/Eusine.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eusine\'s Chase', 3), new QuestLineStepCompletedRequirement('Eusine\'s Chase', 5, GameConstants.AchievementOption.less)]),
});
const BlackthornJohtoRoamerNPC = new RoamerNPC('Pokéfan Trevor', [
    'On the news, they are getting more reports of roaming Pokémon appearing on {ROUTE_NAME}!',
], GameConstants.Region.johto, RoamingPokemonList.findGroup(GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto), 'assets/images/npcs/Pokéfan (male).png');
const RedOldManJohtoNPC = new NPC('Old Man', [
    'This young fellow comes here every day.',
    'He is a sore loser, poor boy. But he always comes back next day!',
    'But even though he is a sore loser, he will always give his opponent a shiny ball, as a reward for winning.',
], {
    image: 'assets/images/npcs/Old Man.png',
    requirement: new TemporaryBattleRequirement('Red'),
});
const TohjoFallsCelebiTimeDistortion = new NPC('Investigate the Time Distortion', [
    '<i>You are experiencing that same feeling again. Like you\'re not really here.</i>',
    '<i>A man sits in the back of the cave. He is listening to a portable radio.</i>',
    '<img src="assets/images/npcs/Rocket Boss Giovanni.png">',
    '...I don\'t know why you have come here. Anyway, I have to warn you that this is not a place for kids like you.',
    'You have a certain look... You\'re the kid who stood in front of me in Viridian City! I\'m on my way to Goldenrod City to answer the call and join my team. Are you going to get in my way?',
], {
    image: 'assets/images/npcs/other/Tohjo Falls.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Unfinished Business', 8), new QuestLineStepCompletedRequirement('Unfinished Business', 10, GameConstants.AchievementOption.less), new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Tohjo Falls'))]),
});
const Conductor = new NPC('Conductor', [
    'We\'re working on construction of a Magnet Train line to shuttle people <b>east to Kanto</b>. Once it\'s completed, people will be able to get to Saffron City in record time!',
], { image: 'assets/images/npcs/Rail Staff.png' });
const ProfElm = new ProfNPC('Prof. Elm', GameConstants.Region.johto, 'Oh, another regional Pokédex completed so soon?', 'Amazing! Next stop is Hoenn, enjoy the sunshine while you\'re there!', 'assets/images/npcs/Professor Elm.png');
const searchForClues = new NPC('Search For Clues', [
    '<i>You look around the city in search of clues, and are set upon by a gang of angry Aipoms!</i>',
], {
    image: 'assets/images/npcs/specialNPCs/Aipom Alley.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Detective Pikachu'), new QuestLineStepCompletedRequirement('Detective Pikachu', 1, GameConstants.AchievementOption.less)]),
});
const HowardClifford1 = new NPC('Howard Clifford', [
    'I am Howard Clifford, CEO of Clifford Industries. I hear you have been investigating both my company, and a mysterious drug called R.',
    'I have reason to believe that a high ranking official in the company is manufacturing this drug, but have been unable to get to the bottom of it myself.',
    'There is a journalist in Hearthome City who may be able to help us both. Please make contact with her and report anything you find back to me.',
], {
    image: 'assets/images/npcs/Howard Clifford.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 6), new QuestLineStepCompletedRequirement('Detective Pikachu', 8, GameConstants.AchievementOption.less)]),
});
const HowardClifford2 = new NPC('Howard Clifford', [
    'You are too late to stop me! The R drug puts Pokémon in a frenzied state, and allows us to control them with the right equipment! You led me straight to Mewtwo, and now I will take control of the most powerful Pokémon in the world!',
    '<i>Howard puts on a headset and pushes a button. The energy sphere containing Mewtwo comes into view, and it has a crazed look in its eyes. Howard pushes a button on his headset and slumps back in his chair.</i>',
    '<i>Mewtwo makes eye contact with you, and you hear Howard\'s voice in your mind, laughing maniacally. An armed man comes into the room, and warns you not to move.</i>',
], {
    image: 'assets/images/npcs/Howard Clifford.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 11), new QuestLineStepCompletedRequirement('Detective Pikachu', 13, GameConstants.AchievementOption.less)]),
});
const HowardClifford3 = new NPC('Howard Clifford', [
    'UNLIMITED POWER! YOU\'LL NEVER STOP ME!',
], {
    image: 'assets/images/npcs/Howard Clifford.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 13), new QuestLineStepCompletedRequirement('Detective Pikachu', 15, GameConstants.AchievementOption.less)]),
});
const ParkAttendant = new NPC('Park Attendant', [
    'Welcome to the National Park!',
    'Lots of people come through here to take a stroll, and some come from far away to participate in our Bug Catching Contest!',
    'All kinds of Bug Pokémon can be found in the park! Each one can be caught for Contest Tokens, and more powerful Pokémon are worth more Tokens!',
], { image: 'assets/images/npcs/Pokémon Ranger (male).png' });
const ParkResearcher = new NPC('Researcher', [
    'Welcome to the National Park!',
    'Thanks to recent breakthroughs in the field of alloying and electroplating, we have discovered a way to coat some Pokémon in metal!',
    'An experimental specimen can be bought here: A Sudowoodo that is no longer weak against Water attacks!',
], { image: 'assets/images/npcs/Scientist (male).png' });
const BabyAssistant = new AssistantNPC('Elm\'s Assistant', [
    'Prof. Elm\'s research is focused on eggs. Pokémon eggs hatch faster when the trainer is battling strong trainers like Gym leaders.',
], [
    'Oh? Some of your Pokémon may find an extra egg if left in the hatchery. Would you care to find out what baby will hatch?',
], 'baby', 'assets/images/npcs/Scientist (male).png');
//Johto Towns
TownList['New Bark Town'] = new Town('New Bark Town', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new BulletinBoard(GameConstants.BulletinBoards.Johto)], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_KantoChampion)],
    npcs: [ProfElm, BabyAssistant],
});
TownList['Cherrygrove City'] = new Town('Cherrygrove City', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [CherrygroveCityShop, TemporaryBattleList['Youngster Joey']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 29)],
    npcs: [CherrygroveMrPokemon],
});
TownList['Violet City'] = new Town('Violet City', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [VioletCityShop, new MoveToDungeon(dungeonList['Sprout Tower'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 31)],
    npcs: [VioletPrimo, VioletEarlDervish, Zuki],
});
TownList['Azalea Town'] = new Town('Azalea Town', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [AzaleaTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Azalea Town']), new MoveToDungeon(dungeonList['Slowpoke Well'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 33)],
    npcs: [AzaleaElder, AzaleaHiker, AzaleaCelebiKurt1, AzaleaCelebiKurt2, AzaleaCelebiKurt3, AzaleaCelebiKurt4, AzaleaCelebiOak1, AzaleaCelebiOak2, AzaleaCelebiOak3, AzaleaCelebiOak4, AzaleaCelebiOak5],
});
TownList['Goldenrod City'] = new Town('Goldenrod City', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [GoldenrodDepartmentStoreShop, JohtoBerryMaster, new MoveToDungeon(dungeonList['Radio Tower']), TemporaryBattleList['Silver 4'], TemporaryBattleList['Aipom Alley'], TemporaryBattleList.Imposter, TemporaryBattleList['Possessed Mewtwo']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 34)],
    npcs: [Conductor, searchForClues, HowardClifford1, HowardClifford2, HowardClifford3, Kuni],
});
TownList['Ecruteak City'] = new Town('Ecruteak City', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [EcruteakCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Ecruteak City']), new MoveToDungeon(dungeonList['Burned Tower']), new MoveToDungeon(dungeonList['Tin Tower']), TemporaryBattleList['Kimono Girls']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 37)],
    npcs: [EcruteakBill, EcruteakEusine, EcruteakPokéfan, Miki, KimonoGirlsEcruteak],
});
TownList['Olivine City'] = new Town('Olivine City', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [OlivineCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Olivine City']), new MoveToDungeon(dungeonList['Olivine Lighthouse'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 39)],
    npcs: [OlivineSSAquaCaptain],
});
TownList['Cianwood City'] = new Town('Cianwood City', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [CianwoodCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Cianwood City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 41)],
    npcs: [CianwoodPhotographyAide, CianwoodEusine, CianwoodCityPharmacist1, CianwoodCityPharmacist2],
});
TownList['Mahogany Town'] = new Town('Mahogany Town', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [MahoganyTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Mahogany Town']), new MoveToDungeon(dungeonList['Team Rocket\'s Hideout'])], {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.johto, 42),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Mortar')),
        ])],
    npcs: [MahoganySouvenirShopAttendant, MahoganyEusine, MahoGanyOfficerJenny],
});
TownList['Blackthorn City'] = new Town('Blackthorn City', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [BlackthornCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Blackthorn City'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ice Path'))],
    npcs: [BlackthornJohtoRoamerNPC],
});
TownList['Indigo Plateau Johto'] = new Town('Indigo Plateau Johto', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [TemporaryBattleList['Silver 7'], GymList['Elite Will'], GymList['Elite Koga'], GymList['Elite Bruno2'], GymList['Elite Karen'], GymList['Champion Lance'], pokeLeagueShop()], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.johto, 26),
        new TemporaryBattleRequirement('Silver 5'),
    ],
});
TownList['National Park'] = new Town('National Park', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new SafariTownContent('Bug Catching Contest'), JohtoContestShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.johto, 35)],
    npcs: [ParkAttendant, ParkResearcher],
});
//Johto Dungeons
TownList['Sprout Tower'] = new DungeonTown('Sprout Tower', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 31)]);
TownList['Ruins of Alph'] = new DungeonTown('Ruins of Alph', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 32)], undefined, {
    npcs: [UnownFigure],
});
TownList['Union Cave'] = new DungeonTown('Union Cave', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 32)]);
TownList['Slowpoke Well'] = new DungeonTown('Slowpoke Well', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 33)]);
TownList['Ilex Forest'] = new DungeonTown('Ilex Forest', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [
    new GymBadgeRequirement(BadgeEnums.Hive),
    new TemporaryBattleRequirement('Silver 2'),
], [TemporaryBattleList['Spiky-eared Pichu']], {
    npcs: [IlexForestShrine1, IlexForestShrine2, IlexForestPichuFan, Naoko],
});
TownList['Burned Tower'] = new DungeonTown('Burned Tower', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new QuestLineStepCompletedRequirement('The Legendary Beasts', 0)], [TemporaryBattleList['Silver 3']]);
TownList['Olivine Lighthouse'] = new DungeonTown('Olivine Lighthouse', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 39)], [], {
    npcs: [OlivineLighthouseJasmine1, OlivineLighthouseJasmine2, OlivineLighthouseMedicineAmphy, OlivineLighthouseAmphy],
});
TownList['Tin Tower'] = new DungeonTown('Tin Tower', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Radio Tower'))]);
TownList['Whirl Islands'] = new DungeonTown('Whirl Islands', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Radio Tower'))], [], {
    npcs: [KimonoGirlsWhirl],
});
TownList['Mt. Mortar'] = new DungeonTown('Mt. Mortar', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 37)]);
TownList['Team Rocket\'s Hideout'] = new DungeonTown('Team Rocket\'s Hideout', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new TemporaryBattleRequirement('Red Gyarados')]);
TownList['Radio Tower'] = new DungeonTown('Radio Tower', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new TemporaryBattleRequirement('Silver 4')]);
TownList['Ice Path'] = new DungeonTown('Ice Path', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 44)], [], {
    npcs: [Sayo],
});
TownList['Dark Cave'] = new DungeonTown('Dark Cave', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 45)]);
TownList['Tohjo Falls'] = new DungeonTown('Tohjo Falls', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new GymBadgeRequirement(BadgeEnums.Rising)], [TemporaryBattleList['Rocket Boss Giovanni']], {
    npcs: [TohjoFallsCelebiTimeDistortion],
});
TownList['Victory Road Johto'] = new DungeonTown('Victory Road Johto', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 26)]);
TownList['Mt. Silver'] = new DungeonTown('Mt. Silver', GameConstants.Region.johto, GameConstants.JohtoSubRegions.Johto, [new RouteKillRequirement(10, GameConstants.Region.johto, 28)], [], {
    npcs: [RedOldManJohtoNPC],
});
//Hoenn Shops
const OldaleTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.SmallRestore,
]);
const PetalburgCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Token_collector,
    ItemList.Lucky_egg,
    ItemList.Kings_rock,
]);
const RustboroCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.Mystery_egg,
    ItemList.Wonder_Chest,
]);
const DewfordTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Lucky_egg,
    ItemList.Fighting_egg,
]);
const SlateportCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.MediumRestore,
    ItemList.Water_egg,
    ItemList.Linking_cord,
]);
const MauvilleCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xClick,
    ItemList.Electric_egg,
    ItemList.Thunder_stone,
    ItemList.Metal_coat,
    ItemList.HatcheryHelperJasmine,
]);
const VerdanturfTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Grass_egg,
    ItemList.Soothe_bell,
]);
const FallarborTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Token_collector,
    ItemList.Moon_stone,
    ItemList.Sun_stone,
]);
const LavaridgeTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xAttack,
    ItemList.Lucky_incense,
    ItemList.Fire_egg,
    ItemList.Fire_stone,
]);
const RoadsideStandShop = new Shop([
    ItemList['Probably Feebas'],
], 'Shady Deal');
const FortreeCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.Dowsing_machine,
    ItemList.LargeRestore,
    ItemList.Leaf_stone,
]);
const WindChimeShop = new Shop([
    ItemList['Probably Chimecho'],
], 'Shady Deal');
const MossdeepCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.Upgrade,
    ItemList.Prism_scale,
    ItemList.Beldum,
]);
const SootopolisCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_egg,
    ItemList.Lucky_incense,
    ItemList.Water_stone,
]);
const PacifidlogTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.Dowsing_machine,
    ItemList.Deepsea_tooth,
    ItemList.Deepsea_scale,
]);
const EverGrandeCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Dragon_egg,
    ItemList.Dragon_scale,
]);
const BattleFrontierShop = new Shop([
    new PokeballItem(GameConstants.Pokeball.Ultraball, 1, GameConstants.Currency.battlePoint, undefined, 'Ultra Ball'),
    new PokeballItem(GameConstants.Pokeball.Masterball, 500, GameConstants.Currency.battlePoint, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.battlePoint]}` }, 'Master Ball'),
    new EnergyRestore(GameConstants.EnergyRestoreSize.SmallRestore, 10, GameConstants.Currency.battlePoint, 'Small Restore'),
    new EnergyRestore(GameConstants.EnergyRestoreSize.MediumRestore, 20, GameConstants.Currency.battlePoint, 'Medium Restore'),
    new EnergyRestore(GameConstants.EnergyRestoreSize.LargeRestore, 40, GameConstants.Currency.battlePoint, 'Large Restore'),
    ItemList.FarmHandJamie,
    ItemList.HatcheryHelperNoel,
    ItemList.Muscle_Band,
]);
const OutskirtStandShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.SmallRestore,
    ItemList.MediumRestore,
    ItemList.LargeRestore,
    ItemList.Wonder_Chest,
]);
const PhenacCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Lucky_egg,
    ItemList.Wonder_Chest,
]);
const AgateVillageShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_incense,
    ItemList.Token_collector,
    ItemList.Dowsing_machine,
    ItemList.Wonder_Chest,
]);
const GateonPortShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Lucky_incense,
    ItemList.Miracle_Chest,
]);
//Hoenn Berry Master
const HoennBerryMaster = new BerryMasterShop(GameConstants.BerryTraderLocations['Mauville City'], [
    ItemList.Boost_Mulch,
    ItemList.Rich_Mulch,
    ItemList.Surprise_Mulch,
    ItemList.Amaze_Mulch,
    ItemList.Freeze_Mulch,
    ItemList.Berry_Shovel,
    ItemList.Mulch_Shovel,
    ItemList.Sprinklotad,
    ItemList.FarmHandKerry,
    ItemList.HatcheryHelperCameron,
], 'Hoenn Berry Master');
//Hoenn Contest Shop
const HoennContestShop = new Shop([
    ItemList['Tangela (Pom-pom)'],
    ItemList['Goldeen (Diva)'],
    ItemList['Weepinbell (Fancy)'],
    ItemList['Onix (Rocker)'],
    ItemList['Dugtrio (Punk)'],
    ItemList['Gengar (Punk)'],
    new PokeballItem(GameConstants.Pokeball.Ultraball, 20, GameConstants.Currency.contestToken, undefined, 'Ultra Ball'),
    new EnergyRestore(GameConstants.EnergyRestoreSize.SmallRestore, 5, GameConstants.Currency.contestToken, 'Small Restore'),
    new EnergyRestore(GameConstants.EnergyRestoreSize.MediumRestore, 10, GameConstants.Currency.contestToken, 'Medium Restore'),
    new EnergyRestore(GameConstants.EnergyRestoreSize.LargeRestore, 30, GameConstants.Currency.contestToken, 'Large Restore'),
], 'Contest Shop', [new DevelopmentRequirement()]);
//Hoenn Flute Master
const HoennFluteMaster = new GemMasterShop(GameConstants.GemShops.HoennFluteMaster);
const HoennStoneSalesman = new GemMasterShop(GameConstants.GemShops.HoennStoneSalesman, 'Stone Salesman', [new TemporaryBattleRequirement('Hoenn Stone Salesman')], true);
//Hoenn NPCs
const LittlerootAide = new NPC('Professor Birch\'s Aide', [
    'We have received word from Mr. Pokémon in Johto! He has made another breakthrough.',
    'You can now store an additional four eggs in the queue! His research has really gained speed.',
    'He wants you to know that he will have an additional eight slots ready by the time you reach Sinnoh.',
]);
const OldaleTrackingScientist = new NPC('Tracking Scientist', [
    'Hey trainer, look at these footprints! Huh, I’ve never seen footprints like these before… They look like they came from two different Pokémon, and I saw two blurs, one red and one blue, quickly fly away just as I exited the Pokémon Center.',
    'They were flying really fast, I bet Pokémon that fast will only challenge trainers who have proven they are as strong as Champion Wallace...',
]);
const HoennFossilNpc = new NPC('Laid-Back Angler', [
    'Every so often, I\'ll snag an old fossil from the seafloor. It weirds me out to think of all the Pokémon that used to crawl around the ocean so many years ago, but it also reminds me that life is fleeting and precious.',
    'So far I\'ve found two that I relate to, a kind of flower-looking thing and one that looks like a bug pincer.',
    'I wonder what you\'ll feel the next time you find one.',
], { image: 'assets/images/npcs/Fisherman.png' });
const SlateportHoennRoamerNPC = new RoamerNPC('Reporter Gabby', [
    'Our sources indicate that roaming Pokémon are gathering on {ROUTE_NAME}!',
], GameConstants.Region.hoenn, RoamingPokemonList.findGroup(GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn), 'assets/images/npcs/Reporter.png');
const SkepticalFisherman = new NPC('Skeptical Fisherman', [
    'There\'s some salesman offering rare fish east of New Mauville, out on the water.',
    'I\'m a bit skeptical of his wares, especially since his shop isn\'t on any maps.',
], { image: 'assets/images/npcs/Fisherman.png' });
const FallarborProfessorCozmo = new NPC('Prof. Cozmo', [
    'Oh! Welcome, welcome. Do you by any chance have any Meteorites? No? Ah well, I’m studying the Pokémon Deoxys and I’ve heard that a Meteorite can cause it to change forms!',
    'I’ve also heard that the Battle Frontier may have some secrets relevant to Deoxys and its forms… but I’m not strong enough to find out...'
], { requirement: new QuestLineStartedRequirement('The Delta Episode', GameConstants.AchievementOption.less),
});
const LavaridgeSootCollector = new NPC('Soot Collector', [
    'Blegh! I\'ve taken three soaks in the hot springs and I can still taste the soot!',
    'The Flute Trader in Fallarbor Town has been paying me to go collect soot to make Flutes, but I\'m sick of it.',
    'People say they have truly mystical powers, but that they require Gems of different types to use. Also, using more Flutes at the same time costs more Gems to use.',
]);
const RoadsideStandShadySalesman = new NPC('Shady Salesman', [
    'Have I got a deal just for you!',
    'I have spent weeks finding the perfect fishing spot for Feebas, and finally got some! For a special low price, I\'ll sell you one!',
    'All sales are final!',
], { image: 'assets/images/npcs/ShadySalesman.png' });
const FortreeWeatherman = new NPC('Weatherman', [
    'Castform is a very finicky Pokémon.',
    'It changes forms when the weather is drastically different.',
    'If you want to collect them all, wait for the weather to change.',
]);
const FortreeRanger = new NPC('Pokémon Ranger Catherine', [
    'Have you seen this? It\'s horrific. Absolutely despicable.',
    'Disposable Dowsing Machines! Who even came up with this?! People leave these everywhere. It\'s absolutely terrible for the environment. Some poor innocent Pokémon could choke on it!',
    'Please recycle your used Dowsing Machines.',
], { image: 'assets/images/npcs/Pokemon Ranger (female).png' });
const WindChimeShopShadySalesman = new NPC('Shady Salesman', [
    'Step right up! Get your Chimecho while they last! Chimecho, a very rare Pokémon indeed, with a voice that\'s both beautiful and powerful. Look closer! I see it bringing a smile to your face, just gazing into those loving eyes! They say these are the most gentle, healing eyes in the Pokémon kingdom.',
    'That\'s not all! Just look at the way Chimecho\'s tail swings and sways with the wind, like a weeping willow in a summer breeze. In really hot weather, it will act like a fan to help you cool off. And when it\'s cold outside, your Chimecho can wrap itself around your neck like a scarf, to keep you warm.',
    'And one more thing. It\'s not widely known, but it\'s a true fact; Chimecho are able to choose winning lottery tickets! Soo you see, my friend, just having a Chimecho with you, is a sure-fire ticket to happiness and success. Let Chimecho give you total peace and happiness, for a good price!',
], { image: 'assets/images/npcs/ShadySalesman.png' });
const Steven1 = new NPC('Steven', [
    'I have been investigating the behavior of Kecleon, the Color Swap Pokémon.',
    'There are a few hidden near the city. If you can find them all, I will give you a wonderful prize!'
], { requirement: new TemporaryBattleRequirement('Kecleon 3', 1, GameConstants.AchievementOption.less),
});
const Steven2 = new NPC('Steven', [
    'Thank you for finding the hidden Kecleons for me! Please accept this picture of a camouflaged Kecleon as your reward.',
], { image: 'assets/images/npcs/other/KecleonDrawing.png',
    requirement: new TemporaryBattleRequirement('Kecleon 3'),
});
const MossdeepAstronomer = new NPC('Astronomer', [
    'Hey did you know about the Millennium Comet? We can see it in the sky right now, and it only comes around once every thousand years!',
    'There’s a legend that a mythical Wish Pokémon awakens when it passes over us. If you’re as strong as the Champion, maybe you’ll find it roaming around Hoenn granting wishes!',
]);
const PacifidlogDiver = new NPC('Diver', [
    'Yo! Find any cool stuff in chests lately?',
    'I\'ve heard that if you beat a Dungeon a lot then the stuff you find in chests gets even more awesome.',
]);
const Wallace1 = new NPC('Gym Leader Wallace', [
    'Ah, so you are the new trainer in the region? I\'ve heard tales of your exploits. My name is Wallace. I was once the Gym Leader of Sootopolis, but something came up. So now, I\'ve entrusted my mentor Juan with the Gym\'s operation.',
    'Groudon and Kyogre, the two Pokémon wreaking havoc in Sootopolis City, are considered to be Super-Ancient Pokémon. But there aren\'t just two Super-Ancient Pokémon. Somewhere, there is a Super-Ancient Pokémon named Rayquaza. It\'s said that it was Rayquaza that becalmed the two combatants in the distant past.',
    'I have heard that Rayquaza once lived high atop the Sky Pillar, maybe that\'s where it is now?',
], { image: 'assets/images/npcs/Wallace.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Weather Trio', 1), new QuestLineStepCompletedRequirement('The Weather Trio', 3, GameConstants.AchievementOption.less)]),
});
const Wallace2 = new NPC('Gym Leader Wallace', [
    'My eyes didn\'t deceive me. Thanks to your help, Sootopolis...',
    'No, all of Hoenn was saved. On behalf of the people, I thank you.',
    'Now that their battle is over, the Super-Ancient Pokémon have retreated to rest and recuperate. You will likely find Rayquaza back in the Sky Pillar.',
    'Kyogre and Groudon are rumored to live deep within this very cave, but they are unlikely to show themselves to any normal trainer. Maybe the champion of Hoenn could earn their respect.',
], { image: 'assets/images/npcs/Wallace.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Weather Trio', 4), new QuestLineStepCompletedRequirement('The Weather Trio', 6, GameConstants.AchievementOption.less)]),
});
const WeatherBattle1 = new NPC('The Super-Ancient Pokémon Clash', [
    '<i>Groudon and Kyogre have been awakened by the efforts of Team Magma and Team Aqua! They are engaged in a fierce battle which threatens to destroy Sootopolis City... and more!</i>',
    '<i>The locals in Sootopolis City take shelter from the raging battle. Some say that this sort of thing would never happen if Wallace was still around.</i>',
], { image: 'assets/images/npcs/other/WeatherBattle1.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('The Weather Trio'), new QuestLineStepCompletedRequirement('The Weather Trio', 1, GameConstants.AchievementOption.less)]),
});
const WeatherBattle2 = new NPC('The Super-Ancient Pokémon Clash', [
    '<i>Rayquaza appears above Kyogre and Groudon and utters a single intimidating roar. The battling Super-Ancient Pokémon stop their attacks, and a tense standoff ensues.</i>',
    '<i>After what seems like an eternity, the three Super-Ancient Pokémon seem to have come to an understanding. They each depart the city, and peace is restored.</i>',
], { image: 'assets/images/npcs/other/WeatherBattle2.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Weather Trio', 3), new QuestLineStepCompletedRequirement('The Weather Trio', 5, GameConstants.AchievementOption.less)]),
});
const MillenniumFest = new NPC('The Millennium Festival', [
    '<i>The Millennium Comet is about to make its long-awaited appearance in the sky again, supposedly granting the wishes of all those who see it in the skies above them.</i>',
    '<i>A festival celebrating the arrival of this comet is being held with rides, carnival games, and even a magic show by the Great Butler!</i>',
    '<i>The magic show features many exciting tricks performed by humans and Pokémon, but it looks like someone is crashing the party!</i>',
], { image: 'assets/images/npcs/other/Millennium Festival.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Wish Maker'), new QuestLineStepCompletedRequirement('Wish Maker', 1, GameConstants.AchievementOption.less)]),
});
const Butler1 = new NPC('Butler', [
    'I, the Great Butler, thank you for dealing with Team Rocket!',
    'I have been preparing for the Millennium Festival my whole life, and have big plans for the wish-granting powers it possesses.',
    'I have found what appears to be a crystalline cocoon that contains Jirachi, the Wish Pokémon! I would be honored if you would take this cocoon as thanks for helping me. Legend has it that Jirachi will appear for a trainer who is pure of heart and grant them a wish!',
    '<i>Butler gives you a crystalline cocoon containing Jirachi.</i>',
], { image: 'assets/images/npcs/Butler.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Wish Maker', 1), new QuestLineStepCompletedRequirement('Wish Maker', 3, GameConstants.AchievementOption.less)]),
});
const CocoonHatch = new NPC('Examine the Crystalline Cocoon', [
    '<i>The cocoon shifts, shimmers, and hatches to reveal Jirachi!</i>',
], { image: 'assets/images/npcs/other/Cocoon.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Wish Maker', 4), new QuestLineStepCompletedRequirement('Wish Maker', 6, GameConstants.AchievementOption.less)]),
});
const Butler2 = new NPC('Butler', [
    'I, the Great Butler, thank you for saving me from the wrath of Meta Groudon.',
    'My wish was to resurrect Groudon for Team Magma, but it proved too difficult, and you have showed me that it would be irresponsible to put that much power in the hands of evil doers.',
    'I can try the experiment again using what was learned from the previous failure, but I will need your help. If we are successful, I will give you the opportunity to catch the resulting Meta Groudon to you.',
    'To rebuild my machine, I will need a hundred power-generating Pokémon to run the machine, shiny pokemon to stabilize the energy matrix, and to conduct a new dig for fossilized Groudon materials. After that, I will need to calibrate the machine using DNA from Groudon itself.',
], { image: 'assets/images/npcs/Butler.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('A Meta Discovery'), new QuestLineStepCompletedRequirement('A Meta Discovery', 1, GameConstants.AchievementOption.less)]),
});
const Butler3 = new NPC('Butler', [
    'I, the Great Butler, thank you for all of your help in fulfilling my greatest wish!',
    'Meta Groudon has been revived! It is safely contained in this crater. Catch it whenever you are ready!',
], { image: 'assets/images/npcs/Butler.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Meta Discovery', 2), new QuestLineCompletedRequirement('A Meta Discovery', GameConstants.AchievementOption.less)]),
});
const ProfBirch = new ProfNPC('Prof. Birch', GameConstants.Region.hoenn, 'That\'s another regional Pokédex completed! Fantastic.', 'I really appreciate being able to see your outstanding progress, thank you! Sinnoh is next up.', 'assets/images/npcs/Professor Birch.png');
const CoolTrainerDillan = new NPC('Cool Trainer Dillan', [
    'Hey newcomer! I see you are the Hoenn Champion. You must be an amazing Trainer!',
    'At the Battle Frontier, you can test your skills against Trainers from all over the world.',
    'Since some of these Trainers come from far away, you may see Pokémon that you might not be able to catch yet.',
    'But don\'t worry, catching them all is only a matter of time. Just keep exploring and having fun and you\'ll encounter lots of different Pokémon, either in form, color, or even evolutions!',
], { image: 'assets/images/npcs/Cooltrainer (male).png',
});
const EasterEggHunter = new NPC('Egg Hunter', [
    'My eggs! They ran away!',
    'Can you help me get them back? They have most likely fled to a dungeon in Kanto, Hoenn or Johto.',
    'But be careful! If you defeat them, they will run away again!',
], {
    image: 'assets/images/npcs/Egg Hunter.png',
    requirement: new MultiRequirement([
        new QuestLineStepCompletedRequirement('Egg Hunt', 2, GameConstants.AchievementOption.more),
        new OneFromManyRequirement([
            new QuestLineCompletedRequirement('Egg Hunt', GameConstants.AchievementOption.less),
            new SpecialEventRequirement('Easter'),
        ]),
    ]),
});
const SCEntrance = new NPC('Strange Markings', [
    '<i>These strange markings seem to spell something out. The nearby Braille Enthusiast may know more.</i>',
], { image: 'assets/images/npcs/other/Regi Entrance.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 0), new QuestLineStepCompletedRequirement('The Three Golems', 1, GameConstants.AchievementOption.less)]),
});
const MazeHintLeft = new NPC('Room Engraving', [
    '<i>These strange markings seem to spell something out. The nearby Braille Enthusiast may know more.</i>',
], { image: 'assets/images/npcs/other/LeftBraille.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 1), new QuestLineStepCompletedRequirement('The Three Golems', 3, GameConstants.AchievementOption.less)]),
});
const SCMazeLeft = new NPC('Go Left', [
    '<i>You turn left and proceed to the next room.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 1), new QuestLineStepCompletedRequirement('The Three Golems', 3, GameConstants.AchievementOption.less)]),
});
const SCMazeLeftWrong = new NPC('Go Left', [
    '<i>You turn left, but it is a dead end.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 3), new QuestLineStepCompletedRequirement('The Three Golems', 6, GameConstants.AchievementOption.less)]),
});
const MazeHintRight = new NPC('Room Engraving', [
    '<i>These strange markings seem to spell something out. The nearby Braille Enthusiast may know more.</i>',
], { image: 'assets/images/npcs/other/RightBraille.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 5), new QuestLineStepCompletedRequirement('The Three Golems', 6, GameConstants.AchievementOption.less)]),
});
const SCMazeRight = new NPC('Go Right', [
    '<i>You turn right and proceed to the next room.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 5), new QuestLineStepCompletedRequirement('The Three Golems', 6, GameConstants.AchievementOption.less)]),
});
const SCMazeRightWrong = new NPC('Go Right', [
    '<i>You turn right, but it is a dead end.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 1), new QuestLineStepCompletedRequirement('The Three Golems', 5, GameConstants.AchievementOption.less)]),
});
const MazeHintStraight = new NPC('Room Engraving', [
    '<i>These strange markings seem to spell something out. The nearby Braille Enthusiast may know more.</i>',
], { image: 'assets/images/npcs/other/StraightBraille.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 3), new QuestLineStepCompletedRequirement('The Three Golems', 5, GameConstants.AchievementOption.less)]),
});
const SCMazeStraight = new NPC('Go Straight', [
    '<i>You go straight and proceed to the next room.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 3), new QuestLineStepCompletedRequirement('The Three Golems', 5, GameConstants.AchievementOption.less)]),
});
const SCMazeStraightWrong = new NPC('Go Straight', [
    '<i>You go straight, but it is a dead end.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 1), new QuestLineStepCompletedRequirement('The Three Golems', 3, GameConstants.AchievementOption.less)]),
});
const SCHints = new NPC('Hidden Message', [
    '<i>These strange markings seem to spell something out. The nearby Braille Enthusiast may know more.</i>',
], { image: 'assets/images/npcs/other/Regi Hints.png',
    requirement: new QuestLineStepCompletedRequirement('The Three Golems', 6),
});
const BrailleEnthusiast1 = new NPC('Braille Enthusiast', [
    'The markings at the entrance to the Sealed Chamber seem to say that some sort of secret is inside. Try to find more braille messages, and I can decode them for you!',
], { image: 'assets/images/npcs/Ruin Maniac gen3.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 0), new QuestLineStepCompletedRequirement('The Three Golems', 1, GameConstants.AchievementOption.less)]),
});
const BrailleEnthusiast2 = new NPC('Braille Enthusiast', [
    'There are a few carvings inside this maze. The carving with five dots on the top row says "LEFT".',
    'The carving with nine dots on the top row says "STRAIGHT".',
    'The carving with six dots on the top row says "RIGHT".',
    'If you get totally lost, just wander around. You will find the right path eventually.',
], { image: 'assets/images/npcs/Ruin Maniac gen3.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Three Golems', 1), new QuestLineStepCompletedRequirement('The Three Golems', 6, GameConstants.AchievementOption.less)]),
});
const BrailleEnthusiast3 = new NPC('Braille Enthusiast', [
    'The first carving says DESERT. There is a desert near Route 111, right?',
    'The second carving says ISLAND. There are a lot of islands on Route 105.',
    'The third carving says ANCIENT. I remember seeing some ancient ruins on Route 120.',
], { image: 'assets/images/npcs/Ruin Maniac gen3.png',
    requirement: new QuestLineStepCompletedRequirement('The Three Golems', 6),
});
const Television1 = new NPC('Watch Television', [
    'Reports are coming in from across Hoenn that two fast-moving Pokémon have appeared!',
    'These elusive Pokémon are Blue and Red and White all over, and our reporters will give you the latest updates as we try to discern their identity and location!',
], { requirement: new MultiRequirement([new QuestLineStartedRequirement('The Eon Duo'), new QuestLineStepCompletedRequirement('The Eon Duo', 1, GameConstants.AchievementOption.less)]),
});
const Television2 = new NPC('Watch More Television', [
    'A hot new vacation spot is waiting for you!',
    'Come to the Hoenn Pokémon League to claim your free Eon Ticket today!',
    'Supplies are limited, reserve your spot on a cruise to the Southern Island!',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Eon Duo', 0), new QuestLineStepCompletedRequirement('The Eon Duo', 2, GameConstants.AchievementOption.less)]),
});
const TicketClaim = new NPC('Contest Attendant', [
    'Thank you for reserving your Eon Ticket!',
    'To claim the ticket, all you have to do is go to your Start Menu, select "Save / Enter Code", and enter the following code in the "Enter Code..." box:',
    'EON-TICKET',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Eon Duo', 1), new QuestLineStepCompletedRequirement('The Eon Duo', 3, GameConstants.AchievementOption.less)]),
});
const SurferDave = new NPC('Surfer Dave', [
    'What\'s up? I got here using my Eon Ticket, what about you?'
]);
const SeaMauvilleRocket1 = new NPC('Rocket Grunt', [
    'The boss said to take a look around here and call him if I found anything cool!',
], {
    image: 'assets/images/npcs/Team Rocket Grunt (male).png',
    requirement: new TemporaryBattleRequirement('Delta Giovanni', 1, GameConstants.AchievementOption.less),
});
const SeaMauvilleRocket2 = new NPC('Rocket Grunt', [
    'I can\'t believe you beat up the boss! Better get out of here before he comes back!',
], {
    image: 'assets/images/npcs/Team Rocket Grunt (male).png',
    requirement: new TemporaryBattleRequirement('Delta Giovanni'),
});
const SouthernIsland1 = new NPC('Explore the Southern Island', [
    '<i>The Southern Island is a small but lush forest. The clearing near the center of the island is the perfect place for a tired Pokémon to rest.</i>',
    '<i>Latios and Latias are resting in the clearing. You can approach one of them, but the other will probably flee.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Eon Duo', 2), new QuestLineStepCompletedRequirement('The Eon Duo', 3, GameConstants.AchievementOption.less)]),
});
const Cozmo1 = new NPC('Dr. Cozmo', [
    'Reports are coming in from the Mossdeep Space Center that a meteor is headed our way!',
    'It\'s on a collision course with an island north of Route 131. I\'ve been tasked with finding a way to stop this meteor.',
    '$playername$, can you go to that island and look for anything that might be able to help us?',
], { image: 'assets/images/npcs/Dr Cozmo.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('The Delta Episode'), new QuestLineStepCompletedRequirement('The Delta Episode', 1, GameConstants.AchievementOption.less)]),
});
const Zinnia1 = new NPC('Mysterious Figure', [
    'You must be $playername$, the trainer Wa... People are talking about.',
    'If you\'re here, it means you\'ve heard the same news that I have: a meteor is headed towards this island.',
    'Who am I? My name is Zinnia, nice to meet you. I have a certain.... connection to the Pokémon of this region, but we can get into that later.',
    'For now, I think we can help each other out. I need you to introduce me to your rival, May. If you do that, I\'ll tell you my plan to stop the meteor.',
], { image: 'assets/images/npcs/Zinnia.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 0), new QuestLineStepCompletedRequirement('The Delta Episode', 2, GameConstants.AchievementOption.less)]),
});
const DeltaMay1 = new NPC('May', [
    'Funny meeting you here, $playername$! I was just going to meet up with Professor Birch to discuss this weird stone I found. It seems to have a powerful energy hidden inside. I wonder if it\'s one of the Key Stones I\'ve heard let Pokémon Mega Evolve?',
    'Who\'s this? You have a new friend? Zinnia is her name? Nice to meet you!',
    'Tell you what, I\'ll show Zinnia around town for a little bit, you should go see the Professor. He had some interesting news.',
    '<i>Zinnia and May head off to May\'s house, discussing Pokémon.',
], { image: 'assets/images/npcs/May.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 1), new QuestLineStepCompletedRequirement('The Delta Episode', 3, GameConstants.AchievementOption.less)]),
});
const NewsBirch = new NPC('Discuss the news with Professor Birch', [
    'Hello again, $playername$! It\'s been a while since you last visited!',
    'There\'s been a lot of hubbub and excitement in the region since the Mossdeep Space Center announced that a meteor was headed our way. This has lead to a lot of new faces in Hoenn.',
    'Some of them have been carrying small but powerful items known as Key Stones. These have the power to let Pokémon Mega Evolve! You may have experienced something like that in Kalos, but it\'s new to us here.',
    'Keep an eye out for new faces in familiar places!',
], { image: 'assets/images/npcs/Professor Birch.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 2), new QuestLineStepCompletedRequirement('The Delta Episode', 4, GameConstants.AchievementOption.less)]),
});
const DeltaMay2 = new NPC('May', [
    'What\s the big idea, $playername$?!?',
    'Your new friend waited until my back was turned, stole my Key Stone, and skipped town!',
    'She was headed towards Petalburg City. You better help me get my Key Stone back!',
], { image: 'assets/images/npcs/May.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 3), new QuestLineStepCompletedRequirement('The Delta Episode', 5, GameConstants.AchievementOption.less)]),
});
const DeltaSteven1 = new NPC('Ringing Holo Caster', [
    'Hello? Is that you, $playername$? It\'s me. Steven. Have you been doing well?',
    'I imagine you must be quite shocked. This is a communication mode that Devon is still currently developing. It comes installed on every Holo Caster. I thought I would only use it if I needed to contact you urgently.',
    'But it looks as though that time has already come. I\'m sorry to ask this of you, but I need your help getting some materials for Devon Corporation\'s new rocket project. We think we can help Dr. Cozmo stop the incoming meteor.',
    'Our company\'s records indicate that a meteor landed in Granite Cave thousands of years ago. Can you search the area for fragments of that meteor?',
    'Oh, and my father was asking about you. Look out for him in Rustboro City.',
], { image: 'assets/images/npcs/Steven.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 5), new QuestLineStepCompletedRequirement('The Delta Episode', 7, GameConstants.AchievementOption.less)]),
});
const DeltaWally1 = new NPC('Wally', [
    'Thank you so much, $playername$... those strange people suddenly attacked me, demanding that I hand over my Key Stone! The truth is that I couldn\'t give it to them even if I wanted to.',
    'My Key Stone is gone. I left it in the house when I went out, and it just disappeared. What in the world is going on? If someone like that ever shows up again... I\'ve gotta protect my mom and dad. You be careful, too!',
], { image: 'assets/images/npcs/Wally.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 5), new QuestLineStepCompletedRequirement('The Delta Episode', 7, GameConstants.AchievementOption.less)]),
});
const Zinnia2 = new NPC('Zinnia', [
    'Hm, hm, hm. Well, seems like it\'s true. It really is just like the wall painting there. This one shows Primal Reversion... While that one shows Mega Evolution... I guess that proves it once and for all.',
    'Our great ancestors once lived here, too. The ancestors who passed down through me the knowledge of how to protect the world... How to avert the threat that will appear from space, as long was foretold... From a place higher even than the heavens...',
    'What is it, Aster? Oh?',
    'We do seem to meet an awful lot, $playername$. Are you also interested in this old painting? Or are you here for something else? For one of the Meteorite Shards that can serve as a source of power for the Legendary Pokémon that lives in the heavens above.',
    'Either way... You know I adore you. That\'s it! I can\'t help it! I have to battle you! I\'ll play nice, though, and ask first... You\'re ready to battle me, right?',
], { image: 'assets/images/npcs/Zinnia.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 7), new QuestLineStepCompletedRequirement('The Delta Episode', 9, GameConstants.AchievementOption.less)]),
});
const Zinnia3 = new NPC('Zinnia', [
    'That glittering Meteorite that you\'ve got there... Hmm... It\'s sure giving off some vibes. I\'d keep a tight hold on it if I were you, along with that shard I just gave you.',
    'Hey... The actions that you\'re taking now... Are they based on the ideals you cling to? Or are they based on actual truths? And if they are... How much of the truth do you think you know?',
], { image: 'assets/images/npcs/Zinnia.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 9), new QuestLineStepCompletedRequirement('The Delta Episode', 11, GameConstants.AchievementOption.less)]),
});
const Cozmo2 = new NPC('Dr. Cozmo', [
    'WHAT? Recheck the data! Update the course calculations and confirm the new trajectory! But changing trajectories midflight... It\'s almost like it\'s alive.',
    'Oh, $playername$, I didn\'t see you there. And you brought the Meteorite Shard with you. Well done!',
    'Thank you for bringing it, this will really help our plan to stop the meteor. Our current plan involves using the Infinity Energy within our rocket, combined with the life energy of humans found in Key Stones.',
    'We will start off by artificially replicating the massive energy that is triggered at the time of Mega Evolution! We will fire the energy produced from our rocket into space... And create a "warp hole".',
    'By creating a warp hole in the path of the incoming meteoroid, we hope to be able to transport it somewhere far away from here....',
    '<i>Zinnia bursts into the room and interrupts Dr. Cozmo!<i>',
], { image: 'assets/images/npcs/Dr Cozmo.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 10), new QuestLineStepCompletedRequirement('The Delta Episode', 12, GameConstants.AchievementOption.less)]),
});
const Zinnia4 = new NPC('Zinnia', [
    'So this is what has come of human technology and of hope and blood and sweat and tears and... Well, the list gets kinda long and boring.',
    'But it contains everything, huh? I know all about it. About just what kinda energy you\'re using to fuel this rocket thing... The abominable technology humanity first thought up 3,000 years ago!',
    'So you\'re once again planning to claim that this is best for humanity, or best for the whole darn world? It\'s a snap of your fingers to repeat the sins of the past.',
    'Worse, if what I overheard is true then this time, you\'re about to commit an error more abominable than before!',
    'Instead of trying to make something outta nothing, you\'d rather repeat the mistakes of the past, straight up? No, you\'re gonna add new mistakes on top—that really takes the cake. You guys need some imagination.',
    '<i>Zinnia storms out of the building.</i>',
], { image: 'assets/images/npcs/Zinnia.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 11), new QuestLineStepCompletedRequirement('The Delta Episode', 13, GameConstants.AchievementOption.less)]),
});
const Cozmo3 = new NPC('Dr. Cozmo', [
    'That was.... quite the interruption.',
    'But there\'s no need to worry. Based on our theory, we can at least guarantee that we will be sending the meteor away from our planet if the plan is successful. Not sure where it will go.',
    'However, we\'ve realized that we will need more energy than originally anticipated to control the process properly... I\'m sorry to ask this of you, but we will need one more Meteorite Shard. There should be one at Meteor Falls.',
], { image: 'assets/images/npcs/Dr Cozmo.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 12), new QuestLineStepCompletedRequirement('The Delta Episode', 14, GameConstants.AchievementOption.less)]),
});
const DraconidElder1 = new NPC('Draconid Elder', [
    'Yes, I am one of the Draconid people. One of those ancient folk tasked with passing down the knowledge of Mega Evolution—with the great lore of Lord Rayquaza, who was the beginning of all.',
    'Since times long gone, Hoenn has repeatedly suffered great disasters. At times, the destruction took the form of a huge meteoroid, which fell upon our land from distant space.',
    'At other times, the Primal Reversion of our own super-ancient Pokémon brought us to the brink of destruction. Each time, Lord Rayquaza has saved us from doom.',
    'The chosen Lorekeeper, standing before a stone that shone with rainbow light, offered up a wish to the great one. And Lord Rayquaza\'s body was suffused with a brilliant light and transformed.',
    'In its transformed state, Rayquaza\'s power was more devastating than ever before, overcoming even the super-ancient Pokémon with all their primal power.',
    'I want to tell you more, but first you must prove you are worthy.',
], { image: 'assets/images/npcs/Draconid Elder.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 14), new QuestLineStepCompletedRequirement('The Delta Episode', 16, GameConstants.AchievementOption.less)]),
});
const DraconidElder2 = new NPC('Draconid Elder', [
    'Zinnia is the current Lorekeeper of our people, who has inherited the knowledge and power to summon Lord Rayquaza when disaster imperils the world.',
    'She has long known about the meteor approaching the planet, and has been trying to draw out the power of Rayquaza. Part of this plan was working with Teams Aqua and Magma to revive the Super-Ancient Pokémon.',
    'She taught them the secrets needed to bring back these threats and summon the great Dragon itself. And now it seems she travels the land, scouring the world for Key Stones.',
    'I do not know what you plan to do, but Zinnia will continue to follow her convictions to the very end. This may cost her her life, but she is dedicated. Please, help her if you can.',
    'Take this Meteorite Shard, and please hurry! After you have helped Zinnia, please come back here and find me.',
], { image: 'assets/images/npcs/Draconid Elder.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 16), new QuestLineStepCompletedRequirement('The Delta Episode', 18, GameConstants.AchievementOption.less)]),
});
const DraconidElder3 = new NPC('Draconid Elder', [
    'Thank you for everything you\'ve done for the Draconid people, Hoenn, and me personally.',
    'You will forever be a friend of the Draconid people.',
], { image: 'assets/images/npcs/Draconid Elder.png',
    requirement: new TemporaryBattleRequirement('Mega Draconid Elder'),
});
const Zinnia5 = new NPC('Zinnia', [
    'Thank you, dear. Now then... That is an impressive machine. Snap your fingers, the asteroid vanishes, and we all live happily ever after? It\'s a good thing you saved it from those Aqua and Magma thugs.',
    'This thing is the best hope we have of saving this planet and everything on it. But you know... It could also be the worst tragedy imaginable for some other world and everything on it.',
    'My people have passed down a story of another world, much like our own. In this other world, the world took a different path. The war in Kalos 3000 years ago never happened, and Mega Evolution is not known there.',
    'If a meteor appeared in that world because of the use of this warp hole technology, they would be unable to save themselves! We can\'t do that to the other world! We have to solve this problem a different way!',
    '<i>Zinnia smashes the complex machines Dr. Cozmo has been working on and flees.</i>',
], { image: 'assets/images/npcs/Zinnia.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 19), new QuestLineStepCompletedRequirement('The Delta Episode', 21, GameConstants.AchievementOption.less)]),
});
const Archie = new NPC('Archie', [
    'Baah, what\'s the use in fighting you?',
    'That Dragon twerp stole my Key Stone, there\'s no way I can win without it. Looks like you\'re after her too, huh?',
    'Last I saw, she was headed towards Mt. Chimney. Hopefully she messes up Maxie\'s day too! At least she didn\'t take the.... uuh...',
    'Never you mind that, get outta here!',
], { image: 'assets/images/npcs/Aqua Leader.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 21), new QuestLineStepCompletedRequirement('The Delta Episode', 23, GameConstants.AchievementOption.less)]),
});
const Maxie = new NPC('Maxie', [
    'There\'s no way I can beat you!',
    'Zinnia.... I thought I could trust her after she found the Red Orb for me, but I guess not. She stole my Key Stone!',
    'Oh uh... forget I said that. Zinnia\'s already gone. I have no idea where she went, but another Draconid or even an ancient Sootopolitan might know. Maybe try talking to Wallace?',
], { image: 'assets/images/npcs/Magma Leader.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 23), new QuestLineStepCompletedRequirement('The Delta Episode', 25, GameConstants.AchievementOption.less)]),
});
const Wallace3 = new NPC('Gym Leader Wallace', [
    'Hello again, $playername$. I can see by the look on your face that this is not just a social call.',
    '....Yes I do know about Zinnia, she is a Draconid and this generation\'s Lorekeeper. She may be acting in ways you disagree with, but everything she\'s doing is for a reason.',
    'I do know where she is, but I can\'t just tell you. If you can defeat me, you may be worthy of knowing.',
], { image: 'assets/images/npcs/Wallace.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 24), new QuestLineStepCompletedRequirement('The Delta Episode', 26, GameConstants.AchievementOption.less)]),
});
const Zinnia6 = new NPC('Zinnia', [
    '<i>Your Rayquaza approaches Zinnia.</i>',
    'Yes! Finally! The moment I have been waiting for! I have gathered enough Key Stones to draw out the latent power in Rayquaza and stop the impending disaster!',
    'Huh?! H-how can this be? I did everything I was supposed to, and you\'re not changing! <b>Come on! Do it! Mega Evolve! Why?!</b>',
    'Is it... you\'re not here for me? You\'re here for $playername$? That\'s no fair! I\'m the chosen one!',
    '<i>You notice the Meteorite Shards you have been carrying have fused together and are emitting a powerful glow.</i></br><img src="assets/images/megaStone/Meteorite.png"/>',
], { image: 'assets/images/npcs/other/RayquazaEncounter.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 28), new QuestLineStepCompletedRequirement('The Delta Episode', 30, GameConstants.AchievementOption.less)]),
});
const Zinnia7 = new NPC('Zinnia', [
    'You did it! Your bond with Rayquaza is strong enough to bring out its Mega Evolution!',
    'Here, take this space suit! I put it together from parts I... Er... Borrowed from the Aqua and Magma Hideouts. It should keep you safe while you accompany Mega Rayquaza into space.',
], { image: 'assets/images/npcs/Zinnia.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Delta Episode', 30), new QuestLineStepCompletedRequirement('The Delta Episode', 32, GameConstants.AchievementOption.less)]),
});
const Cozmo4 = new NPC('Dr. Cozmo', [
    'You did it! You saved Hoenn and maybe the whole planet by destroying the meteor!',
    'We have been working on repairing all the damage your... friend did when she was here last. The rocket system here at the Space Center should be able to take you up to the debris field the meteor left behind any time you want!',
], { image: 'assets/images/npcs/Dr Cozmo.png',
    requirement: new QuestLineStepCompletedRequirement('The Delta Episode', 32),
});
const ShoalFisherman1 = new NPC('Shoal Fisherman', [
    'Hi! I\'m collecting shells while I fish. There\'s a lot of neat stuff lying around here.',
], {
    image: 'assets/images/npcs/Fisherman.png',
    requirement: new TemporaryBattleRequirement('Shoal Fisherman', 1, GameConstants.AchievementOption.less),
});
const ShoalFisherman2 = new NPC('Shoal Fisherman', [
    'Oh well. Back to fishin\'.',
], {
    image: 'assets/images/npcs/Fisherman.png',
    requirement: new TemporaryBattleRequirement('Shoal Fisherman'),
});
const GraniteCamper1 = new NPC('Camper', [
    'This is a prime camping spot! Gem and mineral hunters come from all over the world to explore here!',
], {
    image: 'assets/images/npcs/Camper.png',
    requirement: new TemporaryBattleRequirement('Delta Brock', 1, GameConstants.AchievementOption.less),
});
const GraniteCamper2 = new NPC('Camper', [
    'Wow! I can\'t believe <b>THE</b> Kanto Gym Leader Brock came all this way! What an honor to meet him!',
], {
    image: 'assets/images/npcs/Camper.png',
    requirement: new TemporaryBattleRequirement('Delta Brock'),
});
const IcyBoulder = new NPC('Icy Boulder', [
    '<i>A large, icy boulder sits in the corner of the cave. Maybe you can move it when you\'re stronger?</i>',
], {
    requirement: new TemporaryBattleRequirement('Icy Boulder', 1, GameConstants.AchievementOption.less),
});
const DeltaSteven2 = new NPC('Steven', [
    'You\'re a rather impressive trainer $playername$, but there\'s no way you can beat me. Come back when you\'re stronger.',
], {
    image: 'assets/images/npcs/Steven.png',
    requirement: new TemporaryBattleRequirement('Delta Steven', 1, GameConstants.AchievementOption.less),
});
const DeltaSteven3 = new NPC('Steven', [
    'Heh... You know, this experience really brought it home for me again that there is still so much about this world that I do not know. Thank you, $playername$ for all your help.',
], {
    image: 'assets/images/npcs/Steven.png',
    requirement: new TemporaryBattleRequirement('Delta Steven'),
});
const HoennStoneSalesman1 = new NPC('Stone Salesman', [
    'I\'m hunting for rare stones! If I find any extras, I\'ll sell you some!',
], {
    requirement: new TemporaryBattleRequirement('Hoenn Stone Salesman', 1, GameConstants.AchievementOption.less),
});
const HoennStoneSalesman2 = new NPC('Stone Salesman', [
    'I\'m selling some unusual stones for gems. Let me know if any of them strike your fancy!',
], {
    requirement: new TemporaryBattleRequirement('Hoenn Stone Salesman'),
});
const MrStone1 = new NPC('Mr. Stone', [
    'Hello, $playername$! It\'s good to see you again, but I have some dire news.',
    'Despite Zinnia having stolen their leaders\ Key Stones, Team Aqua and Team Magma seem to be at it again, cooking up a scheme involving something called "Primal Reversion".',
    'My researchers tell me that there is a mural carved into the wall of Granite Cave that has some information about "Primal Reversion". Can you find it, and report back?',
], { image: 'assets/images/npcs/Mr Stone.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Primal Reversion'), new QuestLineStepCompletedRequirement('Primal Reversion', 1, GameConstants.AchievementOption.less)]),
});
const PrimalMural1 = new NPC('Groudon Mural', [
    '<i>A large mural depicting  some sort of fire-spewing lizard Pokémon. It seems to be engaged in a battle.</i>',
], { image: 'assets/images/npcs/other/GroudonMural.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Primal Reversion', 1), new QuestLineStepCompletedRequirement('Primal Reversion', 3, GameConstants.AchievementOption.less)]),
});
const PrimalMural2 = new NPC('Kyogre Mural', [
    '<i>A large mural depicting  some sort of oceanic whale-like Pokémon. It seems to be engaged in a battle.</i>',
    '<i>You see someone else looking at the mural: Steven Stone!</i>',
], { image: 'assets/images/npcs/other/KyogreMural.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Primal Reversion', 1), new QuestLineStepCompletedRequirement('Primal Reversion', 3, GameConstants.AchievementOption.less)]),
});
const PrimalSteven = new NPC('Steven', [
    'Hello again, $playername$! I see you\'re interested in these murals as well? They seem to be about Groudon and Kyogre.',
    'So in the ancient world, their primal forms once held this much power…? The super-ancient Pokémon… What terrible strength… But this appearance here… It seems somehow different from Mega Evolution, but somehow related.',
    'If you don\'t mind me asking… Do you feel anything in particular when you look up at this wall? A primal world, lost thousands of years in the past… A Legendary Pokémon of tremendous power became humanity\'s greatest threat…',
    'The terror aroused by that power is clear to see in this ancient artwork. You know who might know more about this? Captain Stern, a sailor who works for my father.',
    'He\'s usually out to sea, but you can find him in Sea Mauville if the weather is too stormy to sail.',
], { image: 'assets/images/npcs/Steven.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Primal Reversion', 2), new QuestLineStepCompletedRequirement('Primal Reversion', 4, GameConstants.AchievementOption.less)]),
});
const Stern1 = new NPC('Captain Stern', [
    'Ahoy! What brings you to this port?',
    'On the search for mysteries of the sea, eh? Well then I have one whale of a tale for you! But are yeh worthy?',
], { image: 'assets/images/npcs/Sailor.png',
    requirement: new MultiRequirement([new WeatherRequirement([WeatherType.Thunderstorm]), new QuestLineStepCompletedRequirement('Primal Reversion', 3), new QuestLineStepCompletedRequirement('Primal Reversion', 5, GameConstants.AchievementOption.less)]),
});
const SternSubstitute = new NPC('Deck Swabber', [
    'Hoy thar, matey! What\'s that? You lookin\' for Cap\'n Stern, are ya? That ol\' Jack Tar! A loose cannon \'e is! You\'ll only see \'im ashore in a Thunderstorm. \'E\'ll say it\'s all due to protocol but the trut\' is lightnin\' scares \'im stem to stern! Didn\' \'ear that from me \'ough...',
    '',
    'If ya feel like meetin\' \'im, the fine folks at the Weather Insitute can tell you when the next storm\'s brewin\'.',
], { image: 'assets/images/npcs/Janitor.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Primal Reversion', 3), new QuestLineStepCompletedRequirement('Primal Reversion', 5, GameConstants.AchievementOption.less)]),
});
const Stern2 = new NPC('Captain Stern', [
    'I see you can be trusted with the mysteries of the sea!',
    'I have been seeing a lot of strange activity around the Seafloor Cavern recently. Whirlpools, thunderstorms, and all nature of strange beasts.',
    'There\'s an old submarine around here that I\'ve been working on upgrading to go explore the lowest parts of that cavern, but need some help getting the parts.',
    'The hull needs some new Metal Coating, the ballast tanks need filled with Mystic Water, and some Heat Rocks are needed for a dive that deep.',
], { image: 'assets/images/npcs/Sailor.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Primal Reversion', 5), new QuestLineStepCompletedRequirement('Primal Reversion', 7, GameConstants.AchievementOption.less)]),
});
const Stern3 = new NPC('Captain Stern', [
    'Thanks for getting all the supplies together, $playername$!',
    'We\'re ready to set sail to the Seafloor Cavern!',
], { image: 'assets/images/npcs/Sailor.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Primal Reversion', 7), new QuestLineStepCompletedRequirement('Primal Reversion', 9, GameConstants.AchievementOption.less)]),
});
const WeatherScan = new NPC('Scan for unusual weather', [
    '<i>Pressure readings are indicating that a huge storm is brewing in Hoenn. All instruments point to Mt. Pyre as the center of the disturbance.</i>',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Primal Reversion', 11), new QuestLineStepCompletedRequirement('Primal Reversion', 13, GameConstants.AchievementOption.less)]),
});
const PrimalArchie = new NPC('Archie', [
    'Bwahahahaha! At last… AT LAST! I\'ve finally done it!!! It hasn\'t even finished reversion, and it still has this much power!!! With this I can return everything to its natural beginning! It\'s time at last!',
    'Is that crew outside?',
    'What is it…? Oh? So the great deluge has begun… Bwahahahaha! But of course it has! That is exactly what I have―',
    'What…? What do you mean far more than we thought?! It can\'t be… Then if it completes its Primal Reversion… N-never mind that! Just keep an eye on it!',
    'All that matters is… That I have used the Blue Orb to awaken Kyogre… And now… I will return this world to its natural state… The state that is best for Pokémon!',
], { image: 'assets/images/npcs/Aqua Leader.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Primal Reversion', 13), new QuestLineStepCompletedRequirement('Primal Reversion', 15, GameConstants.AchievementOption.less)]),
});
const PrimalMaxie = new NPC('Maxie', [
    '... Hm? A message from our members outside? What is it? So the sun has turned mercilessly fierce in its heat. I should expect so. That is what I have long—',
    'No, what WE have long wished for. What?! The heat is greater than simulations predicted? It will be a risk to our own safety if it continues?! That cannot be...',
    'It has only just awoken... Where is it getting so much power from? And how much more will it gain when it does undergo Primal Reversion... C-continue your readings! Then report back!',
    'All that matters is... That I have used the red orb to awaken Groudon. And now... I will transform this planet to a land ideal for humanity.',
], { image: 'assets/images/npcs/Magma Leader.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Primal Reversion', 13), new QuestLineStepCompletedRequirement('Primal Reversion', 15, GameConstants.AchievementOption.less)]),
});
const MrStone2 = new NPC('Mr. Stone', [
    'Thank you, $playername$! Your heroics have saved Hoenn once again!',
    'My researchers tell me that since their defeat, Groudon and Kyogre have been reverting to their primal forms in the Cave of Origin during Harsh Sunlight and Rainy weather.',
    'They are certainly very dangerous, but it doesn\'t seem like they are a threat to the region anymore.',
], { image: 'assets/images/npcs/Mr Stone.png',
    requirement: new QuestLineStepCompletedRequirement('Primal Reversion', 15),
});
const ZinniaOrigin = new NPC('Zinnia', [
    'Wow, $playername$! You\'ve been busy!',
    'Now that things are calmer in Hoenn, I\'ve decided to keep an eye on Kyogre and Groudon and make sure they don\'t cause any more trouble.',
    'Groudon reverts to its Primal form when the sun is harsh, and Kyogre reverts to its Primal form in the rain.',
    'Archie and Maxie are still lurking somewhere in Hoenn, but without the Orbs I think they\'re mostly harmless. If you need some help smacking em down again, come get me!',
], { image: 'assets/images/npcs/Zinnia.png',
    requirement: new MultiRequirement([new QuestLineCompletedRequirement('The Delta Episode'), new QuestLineCompletedRequirement('Primal Reversion')]),
});
const ExploreStand = new NPC('Explore the Outskirt Stand', [
    '<i>You look around the Outskirt Stand, and see two shady figures shuffling off into the horizon. As you move to get a closer look, some guy steps in your way.</i>',
    'Hey there! You\'re a fresh face \'round these parts, aren\'tcha!',
    'You\'ll have to let me welcome you with a battle, or my name ain\'t Willie!',
], { image: 'assets/images/npcs/Willie.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Shadows in the Desert'), new QuestLineStepCompletedRequirement('Shadows in the Desert', 1, GameConstants.AchievementOption.less)]),
});
const Willie = new NPC('Willie', [
    'Well partner, that was some dang fancy fighting, I\'ll tell you what.',
    'I dunno what your plans are round these parts, but you\'d best keep an eye out for some of them dang ole Shadow Pokémon. Give a stranger enough of a whooping an\' ya might see yourself face to face with one in a dungeon next time!',
    'I hear they are weaker than normal Pokémon but can hold a fancy incense. If you manage to purify their souls, they\'ll get a wee bit stronger!',
], { image: 'assets/images/npcs/Willie.png',
    requirement: new QuestLineStepCompletedRequirement('Shadows in the Desert', 1),
});
const Sack = new NPC('Check the sack', [
    '<i>You open the sack and a girl pops out!</i>',
    'Thanks for letting me out! I thought I was done for!',
    'My name is Rui, by the way. I\'m a psychic of sorts, on a mission to save Pokémon who have had their souls corrupted by some evil folks in Orre.',
    'There\'s a few in this city that need help. Can you come with me though? I\'m worried more shady guys will show up.',
    'I can point out which Pokémon have been corrupted, or turned into "Shadow Pokémon", and you can confiscate them from evildoers using your Pokéballs.',
    'You can adjust your Catch Filters to catch any Shadow Pokémon now too.',
], { image: 'assets/images/npcs/Rui.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Shadows in the Desert', 2), new QuestLineStepCompletedRequirement('Shadows in the Desert', 4, GameConstants.AchievementOption.less)]),
});
const EsCade1 = new NPC('Mayor Es Cade', [
    'Ah, you must be travelers! Welcome to Phenac City! I am Es Cade, the Mayor. Now, you wanted to see me? Is there something that I may be able to assist you with?',
    'O-o-o-oh, my! Shadow Pokémon? And they attack people?! Now if that were true, that would be truly frightening. However, that is a little hard to believe.',
    'I understand your concern, though. I will order an investigation at once.',
    'I promise you, we will obtain useful information about those sinister Pokémon. While we do so, I heartily recommend that you visit our Stadium, the symbol of our civic pride!',
], { image: 'assets/images/npcs/Es Cade.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Shadows in the Desert', 4), new QuestLineStepCompletedRequirement('Shadows in the Desert', 6, GameConstants.AchievementOption.less)]),
});
const Rui1 = new NPC('Rui', [
    'There\'s something suspicious going on here, but I\'m not sure what our next move is here.',
    'The Stadium here isn\'t even open yet, I think the Mayor was just trying to get rid of us.',
    'Let\'s see if we can find out more in Pyrite Town.',
], { image: 'assets/images/npcs/Rui.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Shadows in the Desert', 5), new QuestLineStepCompletedRequirement('Shadows in the Desert', 7, GameConstants.AchievementOption.less)]),
});
const Duking1 = new NPC('Duking', [
    '<i>Grr...</i>.',
    'Those masked trainers went and kidnapped my beloved Plusle! How dare they!',
    'They told me that I had to let them have free reign in town, or there would be trouble. They\'re out at the Colosseum causing trouble.',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Shadows in the Desert', 7), new QuestLineStepCompletedRequirement('Shadows in the Desert', 9, GameConstants.AchievementOption.less)]),
});
const Doken1 = new NPC('Doken', [
    'Yow! You\'re too tough!',
    'I know the Plusle you\'re looking for, it got taken by the infamous dance machine, Miror B.',
    'You don\'t want to mess with him, I promise! Oh? You do?',
    'Well, his hideout is in the Pyrite Cave. But you shouldn\'t go there.',
], { image: 'assets/images/npcs/Hunter (male).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Shadows in the Desert', 10), new QuestLineStepCompletedRequirement('Shadows in the Desert', 12, GameConstants.AchievementOption.less)]),
});
const FreePlusle = new NPC('Free Duking\'s Plusle', [
    '<i>Miror B. flees, leaving Plusle behind. Plusle runs off in the direction of Pyrite Town.</i>',
], { image: 'assets/images/pokemon/311.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Shadows in the Desert', 12), new QuestLineStepCompletedRequirement('Shadows in the Desert', 14, GameConstants.AchievementOption.less)]),
});
const Rui2 = new NPC('Rui', [
    'You did a good thing, freeing that Plusle from those goons. I think they were all part of the evil organization I\'ve been hearing about: Team Cipher!',
    'My grandfather might know more about them, he\'s a smart guy. Let\'s go see him in Agate Village!',
], { image: 'assets/images/npcs/Rui.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Shadows in the Desert', 13), new QuestLineStepCompletedRequirement('Shadows in the Desert', 15, GameConstants.AchievementOption.less)]),
});
const GrandpaEagun1 = new NPC('Grandpa Eagun', [
    'Rui! And you are? $playername$? Nice to meet you!',
    'Thank you both for saving me from those goons. They were disrupting the peace and tranquility of this whole area.',
    '$playername$, if you ever have troubled or downright evil Pokémon, take them to the nearby Relic Stone. Its power, combined with the power of friendship you share with your Pokémon, may purify their souls.',
], { image: 'assets/images/npcs/Old Man.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Shadows in the Desert', 16), new QuestLineStepCompletedRequirement('Shadows in the Desert', 18, GameConstants.AchievementOption.less)]),
});
const Rui3 = new NPC('Rui', [
    'Have you seen this crazy broadcast on TV?',
    '<i>Rui shows you a TV broadcast coming out of a dark room underground, in which a beautiful woman is encouraging her minions to steal Pokémon.</i>',
], { image: 'assets/images/npcs/Rui.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Shadows in the Desert', 18), new QuestLineStepCompletedRequirement('Shadows in the Desert', 20, GameConstants.AchievementOption.less)]),
});
const SearchTheStudio = new NPC('Search The Studio', [
    '<i>Scripts litter Venus\' desk, as well as other, more suspicious files addressing what trainers in town have which Pokémon. There are also several letters labeled "Mayor\'s Office".</i>',
    '<i>Rui calls to you from across the room:</i>',
    'Hey $playername$! I found a button! I\'m gonna press it!',
    '<i>An explosion rocks the room, revealing a tunnel out of a secret entrance. The scripts and letters are scattered all over the studio, making them impossible to sort out.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Shadows in the Desert', 20), new QuestLineStepCompletedRequirement('Shadows in the Desert', 22, GameConstants.AchievementOption.less)]) });
const EsCade2 = new NPC('Mayor Es Cade', [
    'My, my. That certainly was a battle worth seeing. I must be honest with you. I never imagined that you would get this far.',
    'Oh, dear me. Do you fail to understand still? You\'re such an innocent child. At times, I am the affable mayor of Phenac... And at others, I am the secret boss of the criminal syndicate Cipher!',
    'I am Evice, and I shall rule the world!',
    '<i>The Mayor changes before your eyes, taking on a much more sinister appearance.</i>',
], { image: 'assets/images/npcs/Es Cade.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Shadows in the Desert', 23), new QuestLineStepCompletedRequirement('Shadows in the Desert', 25, GameConstants.AchievementOption.less)]),
});
const EviceEscape = new NPC('Watch Evice Escape', [
    '<i>Before the helicopter can land, a fireball shoots across the sky, blowing it up!</i>',
    '<i>A Ho-oh flies low, screeching a thanks to you for stopping the evil Team Cipher.</i>',
    '</br><img src="assets/images/pokemon/250.png"/>',
], { image: 'assets/images/npcs/other/EviceHelicopter.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Shadows in the Desert', 25), new QuestLineCompletedRequirement('Shadows in the Desert', GameConstants.AchievementOption.less)]),
});
const PhenacRoller = new NPC('Cool Dude', [
    'There\'s been a lot of crime around here recently. But nothing I can\'t handle!',
    'Some folks have been corrupting their Pokémon and making them commit totally jank acts.',
    'Those Pokémon would be better off in the hands of a radical trainer who knows how to use Catch Filters, like me!',
], { image: 'assets/images/npcs/Roller Boy.png' });
const OrreRoamerNPC = new RoamerNPC('Fateen\'s Fortune Telling', [
    'I sense the presence of rare Pokémon at the {ROUTE_NAME}! Hurry, before the fates intervene!',
], GameConstants.Region.hoenn, RoamingPokemonList.findGroup(GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre), 'assets/images/npcs/Psychic (female).png');
const AgateAthlete = new NPC('Jogger', [
    'This town is pretty quiet. Most folks here are retired trainers.',
    'We\'re always happy to help out any young folks who come through though!',
    'Our only real tourist attraction is the Relic Stone north of town. Just passing by it is enough to make you feel calmer.',
], { image: 'assets/images/npcs/Athlete (male).png' });
const RelicSage = new NPC('Relic Stone Sage', [
    'This stone has the power to cleanse and purify the spirits of Pokémon.',
    'If you train with your Pokémon, you will gain spiritual energy, or "Flow". You can use this Flow to purify your Pokémon.',
    'Purification will take more flow with each Pokémon you purify.',
    '<img src="./assets/images/status/shadow.svg" height="60px"/> <img src="./assets/images/arrow.svg" height="30px"/> <img src="./assets/images/status/purified.svg" height="60px"/>',
], { image: 'assets/images/npcs/Sage.png' });
const GateonSailor = new NPC('Sailor', [
    'I\'ve been waiting for the S. S. Libra to come into port for HOURS!',
    'Rumor has it that some giant Pokémon picked it up and flew away with it, but that has to be impossible.',
    'If such a Pokémon existed, Professor Krane at the Pokémon HQ Lab would know about it.',
], { image: 'assets/images/npcs/Sailor.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Gale of Darkness'), new QuestLineStepCompletedRequirement('Gale of Darkness', 1, GameConstants.AchievementOption.less)]),
});
const Chobin1 = new NPC('Chobin', [
    'Chobin has heard all about the Shadow Pokémon from Dr. Kaminko!',
    'There is a stone near Agate Village that can purify the souls of Pokémon, yes indeed.',
], { image: 'assets/images/npcs/Chobin.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Gale of Darkness', 3), new QuestLineStepCompletedRequirement('Gale of Darkness', 5, GameConstants.AchievementOption.less)]),
});
const Eagun2 = new NPC('Grandpa Eagun', [
    'Ah, $playername$! It\'s good to see you again, though I wish it was under better circumstances.',
    'Yes, I heard that Professor Krane was kidnapped from the Pokémon HQ Lab. There\'s some shady characters up on Mount Battle who might know more.',
], { image: 'assets/images/npcs/Old Man.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Gale of Darkness', 4), new QuestLineStepCompletedRequirement('Gale of Darkness', 6, GameConstants.AchievementOption.less)]),
});
const Lovrina = new NPC('Cipher Admin Lovrina', [
    'Ooh, I so hate to say this! I can\'t beat you right now. Master Greevil will so be cross with me but… But that\'s okay.',
    'I\'ll let you owe me this one time. But you have to promise you will think of my plan next time. If you see XD001 you will so want to help me. I\'ll so be waiting for you!',
    'And don\'t bother looking for Professor Krane here, he\'s like long gone.',
], { image: 'assets/images/npcs/Cipher Admin Lovrina.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Gale of Darkness', 7), new QuestLineStepCompletedRequirement('Gale of Darkness', 9, GameConstants.AchievementOption.less)]),
});
const Exol = new NPC('Cipher Commander Exol', [
    'Your victory doesn\'t matter, we got what we came for!',
    '<i>Exol shouts to his assembled peons:</i>',
    'Troops, move out! On to Phenac!',
], { image: 'assets/images/npcs/Cipher (commander).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Gale of Darkness', 11), new QuestLineStepCompletedRequirement('Gale of Darkness', 13, GameConstants.AchievementOption.less)]),
});
const Snattle = new NPC('Cipher Admin Snattle', [
    'How is this possible?! I\'ve never seen a trainer so strong! But, no matter! Surely I\'ve bought Gorigan enough time.',
    'His precious recovery operation must be finished by now. Today, we will leave quietly. But don\'t you forget us!',
], { image: 'assets/images/npcs/Cipher Admin Snattle.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Gale of Darkness', 14), new QuestLineStepCompletedRequirement('Gale of Darkness', 16, GameConstants.AchievementOption.less)]),
});
const Trest = new NPC('Mayor Trest', [
    'Thank you, $playername$, for saving our town from Team Cipher once again.',
    'I haven\'t seen Professor Krane around here, but hopefully this will be of some use to you.',
], { image: 'assets/images/npcs/Office Worker (male).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Gale of Darkness', 15), new QuestLineStepCompletedRequirement('Gale of Darkness', 17, GameConstants.AchievementOption.less)]),
});
const Verich = new NPC('Mr. Verich', [
    'Hohoho! You must be the $playername$ I\'m hearing so much about you from my.... employees.',
    'There\'s a lot of rumors buzzing around about the S. S. Libra, but if you ask me, it\'s long gone and may never be found.',
    'You\'d have to be as crazy as Kaminko to go looking for it.',
], { image: 'assets/images/npcs/Grand Master Greevil.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Gale of Darkness', 16), new QuestLineStepCompletedRequirement('Gale of Darkness', 18, GameConstants.AchievementOption.less)]),
});
const Chobin2 = new NPC('Chobin', [
    'Dr. Kaminko and Chobin have invented this most wonderful device! The Robo Groudon!',
    'With this robot, we can explore the deserts of Orre! Surely Chobin and $playername$ will find something interesting!',
], { image: 'assets/images/npcs/Robo Groudon.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Gale of Darkness', 18), new QuestLineStepCompletedRequirement('Gale of Darkness', 20, GameConstants.AchievementOption.less)]),
});
const SearchLibra = new NPC('Search the S. S. Libra', [
    '<i>You rummage around in the wreckage of the S. S. Libra, and find evidence of a recent battle. It looks like something very strong beat up a lot of weaker Pokémon.</i>',
    '<i>Deep in the wreckage, you find a box that was left behind on accident.</i>',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Gale of Darkness', 20), new QuestLineStepCompletedRequirement('Gale of Darkness', 22, GameConstants.AchievementOption.less)]),
});
const ProfKrane = new NPC('Professor Krane', [
    '$playername$! Thank you for rescuing me from those fiends!',
    'In my time in captivity, I learned that the new Grand Master of Team Cipher has used a powerful Shadow Pokémon to kidnap all the trainers and Pokémon from the S. S. Libra and has taken them to Citadark Island!',
    'Snagging this powerful Shadow Pokémon will be hard, take this Master Ball!',
], { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Gale of Darkness', 25), new QuestLineStepCompletedRequirement('Gale of Darkness', 27, GameConstants.AchievementOption.less)]),
});
const DrKaminko = new NPC('Dr. Kaminko', [
    'Leave me alone! I\'m WORKING!'
]);
const OrreColosseumSpectator = new NPC('Colosseum Spectator', [
    'Only the toughest trainers in Orre are allowed to fight here! I\'m just watching until I get stronger.'
]);
// For Leafeon and Glaceon. Show up in Hoenn too
const MossRock = new NPC('Moss Rock', [
    'The rock is covered in moss. It feels pleasantly cool.',
], {
    image: 'assets/images/npcs/other/Moss Rock.png',
    requirement: new MaxRegionRequirement(GameConstants.Region.sinnoh),
});
const IceRock = new NPC('Ice Rock', [
    'The rock is encrusted in ice. It is freezing to touch.',
], { image: 'assets/images/npcs/other/Ice Rock.png',
    requirement: new MaxRegionRequirement(GameConstants.Region.sinnoh),
});
//Hoenn Towns
TownList['Littleroot Town'] = new Town('Littleroot Town', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new BulletinBoard(GameConstants.BulletinBoards.Hoenn)], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_JohtoChampion)],
    npcs: [ProfBirch, LittlerootAide, Television1, Television2, DeltaMay1, NewsBirch, DeltaMay2],
});
TownList['Oldale Town'] = new Town('Oldale Town', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [OldaleTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 101)],
    npcs: [OldaleTrackingScientist],
});
TownList['Petalburg City'] = new Town('Petalburg City', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [PetalburgCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Petalburg City']), TemporaryBattleList['Courtney 1'], TemporaryBattleList['Matt 1']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 102)],
    npcs: [DeltaSteven1, DeltaWally1],
});
TownList['Rustboro City'] = new Town('Rustboro City', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [RustboroCityShop, new GenericTraderShop('FossilDevonCorporation', 'Devon Corporation'), TemporaryBattleList['Mr. Stone']], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Petalburg Woods'))],
});
TownList['Dewford Town'] = new Town('Dewford Town', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [DewfordTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Dewford Town'])], {
    requirements: [new TemporaryBattleRequirement('May 2')],
    npcs: [HoennFossilNpc],
});
TownList['Slateport City'] = new Town('Slateport City', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [SlateportCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Slateport City'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Granite Cave'))],
    npcs: [SlateportHoennRoamerNPC, MrStone1, MrStone2],
});
TownList['Mauville City'] = new Town('Mauville City', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [MauvilleCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Mauville City']), HoennBerryMaster], {
    requirements: [new TemporaryBattleRequirement('May 3')],
    npcs: [SkepticalFisherman],
});
TownList['Sea Mauville'] = new Town('Sea Mauville', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [TemporaryBattleList['Delta Giovanni'], TemporaryBattleList['Captain Stern']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 109)],
    npcs: [SeaMauvilleRocket1, SeaMauvilleRocket2, Stern1, SternSubstitute, Stern2, Stern3],
});
TownList['Verdanturf Town'] = new Town('Verdanturf Town', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [VerdanturfTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Verdanturf Town'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 117)],
});
TownList['Mt. Chimney'] = new Town('Mt. Chimney', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new MoveToDungeon(dungeonList['Fiery Path']), new MoveToDungeon(dungeonList['Mt. Chimney Crater']), new MoveToDungeon(dungeonList['Jagged Pass']), new MoveToDungeon(dungeonList['Magma Hideout'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 112)],
});
TownList['Fallarbor Town'] = new Town('Fallarbor Town', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [FallarborTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Fallarbor Town']), HoennFluteMaster, HoennStoneSalesman, TemporaryBattleList['Hoenn Stone Salesman']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 113)],
    npcs: [FallarborProfessorCozmo, Cozmo1, HoennStoneSalesman1, HoennStoneSalesman2],
});
TownList['Lavaridge Town'] = new Town('Lavaridge Town', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [LavaridgeTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Lavaridge Town']), TemporaryBattleList['Clown Jessie & James']], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Jagged Pass'))],
    npcs: [MillenniumFest, Butler1],
});
TownList['Fish Shop'] = new Town('Fish Shop', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [RoadsideStandShop], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 118),
    ],
    npcs: [RoadsideStandShadySalesman],
    ignoreAreaStatus: true,
});
TownList['Fortree City'] = new Town('Fortree City', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [FortreeCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Fortree City'])], {
    requirements: [new TemporaryBattleRequirement('May 4')],
    npcs: [FortreeWeatherman, FortreeRanger, Steven1, Steven2],
});
TownList['Wind Chime Shop'] = new Town('Wind Chime Shop', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [WindChimeShop], {
    requirements: [new TemporaryBattleRequirement('May 4')],
    npcs: [WindChimeShopShadySalesman],
    ignoreAreaStatus: true,
});
TownList['Lilycove City'] = new Town('Lilycove City', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [DepartmentStoreShop], 
//[DepartmentStoreShop, HoennContestShop],
{
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 121)],
});
TownList['Mossdeep City'] = new Town('Mossdeep City', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [MossdeepCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Mossdeep City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 125)],
    npcs: [MossdeepAstronomer],
});
TownList['Mossdeep Space Center'] = new Town('Mossdeep Space Center', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [TemporaryBattleList['Aqua Grunt'], TemporaryBattleList['Magma Grunt'], TemporaryBattleList['Courtney 2'], TemporaryBattleList['Matt 2'], TemporaryBattleList['Dr Cozmo'], new MoveToDungeon(dungeonList['Near Space'])], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Mind)],
    npcs: [Cozmo2, Zinnia4, Cozmo3, Zinnia5, Cozmo4],
});
TownList['Pacifidlog Town'] = new Town('Pacifidlog Town', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [PacifidlogTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Pacifidlog Town']), TemporaryBattleList['Underground Fighting Ring']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 131)],
    npcs: [PacifidlogDiver],
});
TownList['Sootopolis City'] = new Town('Sootopolis City', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [SootopolisCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Sootopolis City']), TemporaryBattleList['Delta Wallace']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.hoenn, 126), new GymBadgeRequirement(BadgeEnums.Mind)],
    npcs: [WeatherBattle1, WeatherBattle2, Wallace3],
});
TownList['Ever Grande City'] = new Town('Ever Grande City', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [EverGrandeCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Ever Grande City'])], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Rain)],
});
TownList['Battle Frontier'] = new Town('Battle Frontier', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [BattleFrontierShop, new BattleFrontierTownContent()], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)],
    npcs: [CoolTrainerDillan],
});
TownList['Pokémon League Hoenn'] = new Town('Pokémon League Hoenn', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [GymList['Elite Sidney'], GymList['Elite Phoebe'], GymList['Elite Glacia'], GymList['Elite Drake'], GymList['Champion Wallace'], pokeLeagueShop(), TemporaryBattleList['Delta Steven']], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.hoenn, 128),
        new TemporaryBattleRequirement('Wally 2'),
    ],
    npcs: [TicketClaim, DeltaSteven2, DeltaSteven3],
});
TownList['Southern Island'] = new Town('Southern Island', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [TemporaryBattleList.Latios, TemporaryBattleList.Latias, TemporaryBattleList['Matt 3'], TemporaryBattleList['Courtney 3']], {
    requirements: [new CustomRequirement(ko.pureComputed(() => +App.game.keyItems.hasKeyItem(KeyItemType.Eon_ticket)), 1, 'Obtain an Eon Ticket')],
    npcs: [SurferDave, SouthernIsland1],
});
TownList['Outskirt Stand'] = new Town('Outskirt Stand', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [OutskirtStandShop, TemporaryBattleList.Willie, TemporaryBattleList['Miror B. 2']], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion), new QuestLineStartedRequirement('Shadows in the Desert')],
    npcs: [ExploreStand, Willie],
});
TownList['Phenac City'] = new Town('Phenac City', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [PhenacCityShop, new MoveToDungeon(dungeonList['Phenac Stadium']), new MoveToDungeon(dungeonList['Phenac City Battles']), TemporaryBattleList.Folly], {
    requirements: [new QuestLineStepCompletedRequirement('Shadows in the Desert', 1)],
    npcs: [PhenacRoller, Sack, EsCade1, Rui1, Trest],
});
TownList['Pyrite Town'] = new Town('Pyrite Town', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [GymList['Cipher Admin Miror B.'], new MoveToDungeon(dungeonList['Pyrite Colosseum']), new MoveToDungeon(dungeonList['The Under']), new MoveToDungeon(dungeonList['Pyrite Town Battles']), new MoveToDungeon(dungeonList['Deep Colosseum']), new MoveToDungeon(dungeonList['Under Colosseum'])], {
    requirements: [new QuestLineStepCompletedRequirement('Shadows in the Desert', 6)],
    npcs: [OrreRoamerNPC, Duking1],
});
TownList['Agate Village'] = new Town('Agate Village', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [AgateVillageShop, new MoveToTown('Relic Stone'), new MoveToDungeon(dungeonList['Relic Cave']), TemporaryBattleList['Cipher Peon Doven'], TemporaryBattleList['Cipher Peon Silton'], TemporaryBattleList['Cipher Peon Kass']], {
    requirements: [new QuestLineStepCompletedRequirement('Shadows in the Desert', 14)],
    npcs: [AgateAthlete],
});
TownList['Relic Stone'] = new Town('Relic Stone', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [new MoveToTown('Agate Village', undefined, false), new MoveToDungeon(dungeonList['Relic Cave']), new PurifyChamberTownContent()], {
    requirements: [new QuestLineStepCompletedRequirement('Shadows in the Desert', 17)],
    npcs: [RelicSage, Eagun2],
});
TownList['Realgam Tower'] = new Town('Realgam Tower', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [new MoveToDungeon(dungeonList['Realgam Tower Battles']), new MoveToDungeon(dungeonList['Realgam Colosseum'])], {
    requirements: [new QuestLineStepCompletedRequirement('Shadows in the Desert', 22)],
    npcs: [EsCade2],
});
TownList['Gateon Port'] = new Town('Gateon Port', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [GateonPortShop, new MoveToDungeon(dungeonList['Gateon Port Battles']), new DockTownContent()], {
    requirements: [new QuestLineStartedRequirement('Shadows in the Desert')],
    npcs: [GateonSailor, Verich],
});
TownList['Pokémon HQ Lab'] = new Town('Pokémon HQ Lab', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [new ShardTraderShop(GameConstants.ShardTraderLocations['Pokémon HQ Lab']), TemporaryBattleList['Cipher Peon Naps']], {
    requirements: [new QuestLineStepCompletedRequirement('Gale of Darkness', 0)],
    npcs: [ProfKrane],
});
TownList['Kaminko\'s Manor'] = new Town('Kaminko\'s Manor', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [TemporaryBattleList['Chobin 1'], TemporaryBattleList['Chobin 2']], {
    requirements: [new QuestLineStepCompletedRequirement('Gale of Darkness', 2)],
    npcs: [DrKaminko, Chobin1, Chobin2],
});
TownList['S. S. Libra'] = new Town('S. S. Libra', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [TemporaryBattleList['Cipher Peon Smarton']], {
    requirements: [new QuestLineStepCompletedRequirement('Gale of Darkness', 19)],
    npcs: [SearchLibra],
});
TownList['Orre Colosseum'] = new Town('Orre Colosseum', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [GymList['Cipher Admin Lovrina'], GymList['Cipher Admin Snattle'], GymList['Cipher Admin Gorigan'], GymList['Cipher Admin Ardos'], GymList['Cipher Admin Eldes']], {
    requirements: [new QuestLineCompletedRequirement('Gale of Darkness')],
    npcs: [OrreColosseumSpectator],
});
//Hoenn Dungeons
TownList['Petalburg Woods'] = new DungeonTown('Petalburg Woods', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 104)], [], { npcs: [MossRock, EasterEggHunter] });
TownList['Rusturf Tunnel'] = new DungeonTown('Rusturf Tunnel', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 116),
    new GymBadgeRequirement(BadgeEnums.Stone),
]);
TownList['Granite Cave'] = new DungeonTown('Granite Cave', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new TemporaryBattleRequirement('May 2')], [TemporaryBattleList['Zinnia 1'], TemporaryBattleList['Delta Brock']], {
    npcs: [Zinnia2, Zinnia3, GraniteCamper1, GraniteCamper2, PrimalMural1, PrimalMural2, PrimalSteven],
});
TownList['Fiery Path'] = new DungeonTown('Fiery Path', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 112)]);
TownList['Meteor Falls'] = new DungeonTown('Meteor Falls', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 114)], [TemporaryBattleList['Draconid Elder'], TemporaryBattleList['Mega Draconid Elder']], {
    npcs: [DraconidElder1, DraconidElder2, DraconidElder3],
});
TownList['Mt. Chimney Crater'] = new DungeonTown('Mt. Chimney Crater', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Meteor Falls'))], [TemporaryBattleList['Butler 1']], {
    npcs: [CocoonHatch, Butler3],
});
TownList['Jagged Pass'] = new DungeonTown('Jagged Pass', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Chimney Crater'))], [TemporaryBattleList['Butler 2']], {
    npcs: [Butler2],
});
TownList['New Mauville'] = new DungeonTown('New Mauville', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new GymBadgeRequirement(BadgeEnums.Balance)]);
TownList['Weather Institute'] = new DungeonTown('Weather Institute', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 119)], [new WeatherAppTownContent()], {
    npcs: [WeatherScan],
});
TownList['Mt. Pyre'] = new DungeonTown('Mt. Pyre', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 122)], [], {
    npcs: [PrimalArchie, PrimalMaxie],
});
TownList['Magma Hideout'] = new DungeonTown('Magma Hideout', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Pyre'))], [TemporaryBattleList['Delta Tabitha']], {
    npcs: [Maxie],
});
TownList['Aqua Hideout'] = new DungeonTown('Aqua Hideout', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Magma Hideout'))], [TemporaryBattleList['Delta Shelly']], {
    npcs: [Archie],
});
TownList['Shoal Cave'] = new DungeonTown('Shoal Cave', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new RouteKillRequirement(10, GameConstants.Region.hoenn, 125)], [TemporaryBattleList['Shoal Fisherman'], TemporaryBattleList['Icy Boulder']], {
    npcs: [IceRock, ShoalFisherman1, ShoalFisherman2, IcyBoulder],
});
TownList['Cave of Origin'] = new DungeonTown('Cave of Origin', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 126),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seafloor Cavern')),
], [], {
    npcs: [Wallace1, Wallace2, ZinniaOrigin],
});
TownList['Seafloor Cavern'] = new DungeonTown('Seafloor Cavern', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 128),
    new GymBadgeRequirement(BadgeEnums.Mind),
], [TemporaryBattleList['Archie Primal'], TemporaryBattleList['Maxie Primal']], {
    npcs: [],
});
TownList['Sky Pillar'] = new DungeonTown('Sky Pillar', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 131),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Cave of Origin'))
], [TemporaryBattleList['Zinnia 2'], TemporaryBattleList.Deoxys], {
    npcs: [Zinnia1, Zinnia6, Zinnia7],
});
TownList['Victory Road Hoenn'] = new DungeonTown('Victory Road Hoenn', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [new GymBadgeRequirement(BadgeEnums.Rain)], [TemporaryBattleList['Wally 2']]);
TownList['Sealed Chamber'] = new DungeonTown('Sealed Chamber', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [
    new RouteKillRequirement(10, GameConstants.Region.hoenn, 134),
    new GymBadgeRequirement(BadgeEnums.Mind)
], [], {
    npcs: [SCEntrance, MazeHintLeft, MazeHintRight, MazeHintStraight, SCMazeLeft, SCMazeLeftWrong, SCMazeRight, SCMazeRightWrong, SCMazeStraight, SCMazeStraightWrong, SCHints, BrailleEnthusiast1, BrailleEnthusiast2, BrailleEnthusiast3],
});
TownList['Near Space'] = new DungeonTown('Near Space', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Hoenn, [
    new QuestLineCompletedRequirement('The Delta Episode'),
]);
TownList['Phenac City Battles'] = new DungeonTown('Phenac City Battles', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineStepCompletedRequirement('Shadows in the Desert', 3),
]);
TownList['Pyrite Town Battles'] = new DungeonTown('Pyrite Town Battles', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineStepCompletedRequirement('Shadows in the Desert', 6),
]);
TownList['Pyrite Colosseum'] = new DungeonTown('Pyrite Colosseum', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineStepCompletedRequirement('Shadows in the Desert', 8),
], [], {
    npcs: [Rui2],
});
TownList['Pyrite Building'] = new DungeonTown('Pyrite Building', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineStepCompletedRequirement('Shadows in the Desert', 9),
], [], {
    npcs: [Doken1, Exol],
});
TownList['Pyrite Cave'] = new DungeonTown('Pyrite Cave', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineStepCompletedRequirement('Shadows in the Desert', 11),
], [], {
    npcs: [FreePlusle],
});
TownList['Relic Cave'] = new DungeonTown('Relic Cave', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineStepCompletedRequirement('Shadows in the Desert', 15),
], [], {
    npcs: [GrandpaEagun1],
});
TownList['Mt. Battle'] = new DungeonTown('Mt. Battle', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineStepCompletedRequirement('Shadows in the Desert', 17),
], [GymList['Cipher Admin Dakim']], {
    npcs: [Rui3],
});
TownList['The Under'] = new DungeonTown('The Under', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineStepCompletedRequirement('Shadows in the Desert', 19),
], [GymList['Cipher Admin Venus']], {
    npcs: [SearchTheStudio],
});
TownList['Cipher Lab'] = new DungeonTown('Cipher Lab', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineStepCompletedRequirement('Shadows in the Desert', 21),
], [GymList['Cipher Admin Ein']], {
    npcs: [Lovrina],
});
TownList['Realgam Tower Battles'] = new DungeonTown('Realgam Tower Battles', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineStepCompletedRequirement('Shadows in the Desert', 22),
]);
TownList['Realgam Colosseum'] = new DungeonTown('Realgam Colosseum', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineStepCompletedRequirement('Shadows in the Desert', 24),
], [], {
    npcs: [EviceEscape],
});
TownList['Snagem Hideout'] = new DungeonTown('Snagem Hideout', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineCompletedRequirement('Shadows in the Desert'),
]);
TownList['Deep Colosseum'] = new DungeonTown('Deep Colosseum', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineCompletedRequirement('Shadows in the Desert'),
]);
TownList['Phenac Stadium'] = new DungeonTown('Phenac Stadium', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineCompletedRequirement('Shadows in the Desert'),
], [], {
    npcs: [Snattle],
});
TownList['Under Colosseum'] = new DungeonTown('Under Colosseum', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [
    new QuestLineCompletedRequirement('Shadows in the Desert'),
]);
TownList['Gateon Port Battles'] = new DungeonTown('Gateon Port Battles', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [new QuestLineStepCompletedRequirement('Gale of Darkness', 1)]);
TownList['Cipher Key Lair'] = new DungeonTown('Cipher Key Lair', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [new QuestLineStepCompletedRequirement('Gale of Darkness', 24)]);
TownList['Citadark Isle'] = new DungeonTown('Citadark Isle', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [new QuestLineStepCompletedRequirement('Gale of Darkness', 26)]);
TownList['Citadark Isle Dome'] = new DungeonTown('Citadark Isle Dome', GameConstants.Region.hoenn, GameConstants.HoennSubRegions.Orre, [new QuestLineStepCompletedRequirement('Gale of Darkness', 27)]);
//Sinnoh Shops
const SandgemTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.SmallRestore,
]);
const JubilifeCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Token_collector,
    ItemList.Lucky_egg,
    ItemList.Mystery_egg,
    ItemList.Wonder_Chest,
]);
const OreburghCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.Moon_stone,
    ItemList.Sun_stone,
]);
const FloaromaTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Lucky_egg,
    ItemList.Linking_cord,
    ItemList.Kings_rock,
]);
const EternaCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.Grass_egg,
    ItemList.Leaf_stone,
]);
const HearthomeCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xClick,
    ItemList.MediumRestore,
    ItemList.Fire_egg,
    ItemList.Fire_stone,
    ItemList.Soothe_bell,
]);
const SolaceonTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Shiny_stone,
    ItemList.Dusk_stone,
    ItemList.Dawn_stone,
]);
const PastoriaShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.LargeRestore,
    ItemList.Water_egg,
    ItemList.Water_stone,
    ItemList.Prism_scale,
]);
const CelesticTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.Lucky_incense,
    ItemList.Dragon_egg,
    ItemList.Dragon_scale,
]);
const CanalaveCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.Dowsing_machine,
    ItemList.Fighting_egg,
    ItemList.Metal_coat,
]);
const PalParkShop = new Shop([
    ItemList.Razor_claw,
    ItemList.Razor_fang,
    ItemList.Combee,
    ItemList['Burmy (Plant)'],
    ItemList.Cherubi,
]);
const SnowpointCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.Upgrade,
]);
const SunyshoreCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_egg,
    ItemList.Lucky_incense,
    ItemList.Electric_egg,
    ItemList.Thunder_stone,
    ItemList.Deepsea_tooth,
    ItemList.Deepsea_scale,
]);
const FightAreaShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Macho_Brace,
]);
const SurvivalAreaShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Electirizer,
    ItemList.Magmarizer,
]);
const ResortAreaShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Protector,
    ItemList.Dubious_disc,
    ItemList.Reaper_cloth,
]);
//Sinnoh Berry Master
const SinnohBerryMaster = new BerryMasterShop(GameConstants.BerryTraderLocations['Hearthome City'], [
    ItemList.Boost_Mulch,
    ItemList.Rich_Mulch,
    ItemList.Surprise_Mulch,
    ItemList.Amaze_Mulch,
    ItemList.Freeze_Mulch,
    ItemList.Berry_Shovel,
    ItemList.Mulch_Shovel,
    ItemList.Gracidea,
    ItemList.FarmHandRiley,
], 'Sinnoh Berry Master');
const SecretBerryMaster = new BerryMasterShop(GameConstants.BerryTraderLocations['Secret Berry Shop'], [
    ItemList.Freeze_Mulch,
    ItemList.Gooey_Mulch,
    ItemList.Berry_Shovel,
    ItemList.Mulch_Shovel,
], 'Secret Berry Shop');
//Sinnoh NPCs
const TwinleafContestChampion = new NPC('Contest Champion', [
    'Welcome to Sinnoh! There are many legends and myths here. For example, it is said that trainers that conquer the Lake nearby, Lake Verity, will meet a mythical Pokémon known for Emotion roaming around the region. It sure would have been awesome to partner with that Pokémon in one of my routines!',
], { image: 'assets/images/npcs/Contest Champion (Johanna).png' });
const SandgemBeachcomber = new NPC('Beachcomber', [
    'Hmmm… Oh! Sorry, I didn’t see you there! Sometimes the strangest things wash up on this beach, so I just got caught up in the search.',
    'Just last week a weird blue stone with a red center showed up. A rather slow-looking guy with a slowpoke found it first, and took it to the Pokémon Lab.',
    'I think I\'ve seen that stone before - it was on a book of an old legend about the sea.',
    'I think it went something like... "When the Prince of the Seas is born, all of his kin will come to this region to celebrate."',
    'Does that mean when this Prince comes, Pokémon like him will start roaming the region?',
]);
const SinnohFossilNpc = new NPC('Gossiper', [
    'Did you know?! The Gym Leaders of Canalave and Oreburgh are father and son! And what\'s more- there\'s a third person in the mix! Apparently he\'s such a dedicated digger he travelled all the way to Kanto to set up shop selling Explorer Kits! Talk about a family tradition!',
    'Too bad there are only two new fossils in the Sinnoh region. If there was one more, maybe he could be a Gym Leader too!',
    'What? Oh you didn\'t know? The ace Pokémon of Gym Leaders Byron and Roark are resurrected from fossils!',
], { image: 'assets/images/npcs/Aroma Lady.png' });
const FloaromaFlowerGirl = new NPC('Flower Girl', [
    'Something amazing just happened!',
    'My friend was taking their Eevee on a walk through Eterna Forest, and it suddenly evolved!',
    'Can you believe that?',
], { image: 'assets/images/npcs/Aroma Lady.png' });
const EternaLassCaroline = new NPC('Lass Caroline', [
    'Oh, you came from the Forest! That Old Chateau is so creepy, isn’t it? I’ve heard that trainers that catch the weird ghost in the TV have found ghosts in other appliances. Even lawnmowers!',
], { image: 'assets/images/npcs/Lass.png' });
const SinnohBerryMasterAssistant = new NPC('Berry Master Assistant', [
    'I have so many Gracidea right now, so i\'ll sell you one.',
    'If you give it to your Shaymin, it can change form!',
]);
const OreburghConstructionWorker = new NPC('Construction Worker', [
    'I was doing some exploring in Mt. Coronet last week, and my Nosepass gained a lot of levels.',
    'I had a big suprise when he reached level 20 though!',
], { image: 'assets/images/npcs/Worker (male).png' });
const HearthomeContestFan = new NPC('Contest Fan', [
    'My favourite contestant had a big reveal for us this week!',
    'Their prized Magneton had evolved into a Magnezone!',
    'I\'m so happy for them, all of that training in Mt. Coronet must have paid off!',
]);
const CelesticGrandma = new NPC('Cynthia\'s Grandmother', [
    'Hello young one, have you come here to learn of Sinnoh’s mysteries?',
    'Did you know that in Johto they don’t see Pokémon like Mamoswine? It’s strange too, because you don’t even need a stone to evolve Piloswine… maybe they should try the Day Care?',
]);
const PalParkWarden = new NPC('Pal Park Warden', [
    'Hey, welcome to the Pal Park! Have you been to my Dad’s Safari Zone in Kanto? We don’t have as many Pokémon here, but I’ve heard that a flower Pokémon found here can bloom when it’s sunny outside!',
]);
const PalParkBurglar = new NPC('Burglar', [
    'A lot of scary stuff can happen at night. For example, I only see people using Razor Claw and Razor Fang at night.',
    'I wonder why that is? Maybe it doesn\'t work during the day?',
], { image: 'assets/images/npcs/Burglar.png' });
const CanalaveRiley = new NPC('Riley', [
    'My partner Lucario evolved from a Riolu during daytime when I used a Soothe Bell.',
], { image: 'assets/images/npcs/Riley.png' });
const CanalaveYoungBoy = new NPC('Young Boy', [
    'Oh, hello! Say, have you ever heard of Cresselia? Once when I was really little I had a really bad dream I couldn’t wake up from, but then a kind trainer went to an island near here and got help from Cresselia to cure me!',
    'Maybe if you can prove yourself by conquering that island, you could find Cresselia roaming around the region...',
]);
const CanalaveSinnohMyth = new NPC('Sinnoh\'s Myth', [
    '<i>Three Pokémon there were.</i>',
    '<i>Into the lakes they dove.</i>',
    '<i>Deep, deep, drawing no breath.</i>',
    '<i>Deeper, deeper they dove.</i>',
    '<i>Into suffocating depths they dove.</i>',
    '<i>Deeper, then deepest they alight.</i>',
    '<i>From the lake floor they rise.</i>',
    '<i>Bearing with them the power to make vast lands, they rise again.</i>',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Zero\'s Ambition', 0), new QuestLineStepCompletedRequirement('Zero\'s Ambition', 2, GameConstants.AchievementOption.less)])
});
const VerityMesprit = new NPC('Mesprit', [
    '<i>You are the trainer looking for the Distortion World, right?</i>',
    '<i>We can help you in your mission, but we will need a few materials.</i>',
    '<i>Collect 10 Purple Shards in dungeons from the Johto region and then visit my two siblings. They will also help you in your quest.</i>',
], {
    image: 'assets/images/pokemon/481.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Zero\'s Ambition', 2), new QuestLineStepCompletedRequirement('Zero\'s Ambition', 4, GameConstants.AchievementOption.less)])
});
const ValorAzelf = new NPC('Azelf', [
    '<i>Mesprit told me you would come.</i>',
    '<i>In order to enter the Distortion World, we need to open a gate to it. The materials you gathered for Mesprit are only a third of the ones needed to open such gate.</i>',
    '<i>Obtain 10 Ochre Shards and then visit Uxie at Lake Acuity. These Shards can be found in a few dungeons from the Hoenn region.</i>',
], {
    image: 'assets/images/pokemon/482.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Zero\'s Ambition', 4), new QuestLineStepCompletedRequirement('Zero\'s Ambition', 6, GameConstants.AchievementOption.less)])
});
const SnowpointYoungGirl = new NPC('Young Girl', [
    'Someone told me that training an Eevee on Route 217 will make it evolve.',
    'They must be lying, how can that be true?!',
]);
const MindyFriend = new NPC('Mindy\'s Friend', [
    'I recently traded with my friend Mindy expecting to get a Gengar. Instead, her Haunter came with this useless rock! I can\'t believe she would do this to me!',
    'Here, you can have MINDY\'S-GIFT for all I care! I pity whoever decides to trade with her in the future.',
]);
const AcuityUxie = new NPC('Uxie', [
    '<i>My siblings had informed me of your arrival.</i>',
    '<i>Looks like you have already gathered more than half of the necessary materials. The only materials left to make the key are 10 Crimson Shards, which can be found in various Sinnoh Dungeons.</i>',
    '<i>We will be waiting at Sendoff Spring, meet us there after you have collected the shards.</i>',
], {
    image: 'assets/images/pokemon/480.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Zero\'s Ambition', 6), new QuestLineStepCompletedRequirement('Zero\'s Ambition', 8, GameConstants.AchievementOption.less)])
});
const SunyshoreRibbonerJulia = new NPC('Ribboner Julia', [
    'Oh! I don’t get visitors often. My husband is a sailor who visits faraway lands… he always tells me these fantastic things.',
    'One time he came back and his Wailmer looked funny. We took it to the Pokécenter and they said it had caught some weird virus called Pokérus!',
    'They said that it is a virus that can spread in the Pokémon Day Care. They said that Pokémon can only spread or catch the virus if they aren’t ready to hatch yet, and that they need to share a type with one another.',
    'If you have a Pokémon with Pokérus, try catching more of that type of Pokémon. When he got back from his next trip, oddly enough Wailmer seemed stronger than ever!',
], { image: 'assets/images/npcs/Beauty.png' });
const FightAreaAceTrainer = new NPC('Ace Trainer Quinn', [
    'Something amazing happened on top of Mt. Coronet. We could see it all the way from here. I\'m sure everyone in the entire region saw it.',
    'What? You were there? What happened? What was that purple thing?',
    'The Distortion World? Hold on, I think I\'ve heard that name before, there was a guy around here named Zero looking for a way to enter that place.',
    'I doubt he\'d be interested in talking to you unless you could help him find a way to get there... Can\'t the lake guardians help you with that?',
], { image: 'assets/images/npcs/Ace Trainer (male).png' });
const FightAreaZero1 = new NPC('Zero', [
    'You\'re the Champion, right? I need your help on a small errand.',
    'My old friend Newton used to study the Distortion World, he was working on opening a gate to it. I\'ve heard that you were able to enter the Distortion World from a portal at the top of Mt. Coronet, so I was wondering if you could help me open a new portal to fulfill my friend\'s wish.',
    'An old book about Sinnoh\'s history was recently discovered at the Canalave City Library, it may have useful information.',
], {
    image: 'assets/images/npcs/Zero.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Zero\'s Ambition'), new QuestLineStepCompletedRequirement('Zero\'s Ambition', 1, GameConstants.AchievementOption.less)]),
});
const FightAreaZero2 = new NPC('Zero', [
    'What was in that book? Did you find any information on the Distortion World?',
    'It didn\'t mention it once? That\'s a shame.',
    'Wait, you said the book mentioned the Lake Trio, right? Legends say they have existed since the creation of the world, they may know how to enter the Distortion World.',
], {
    image: 'assets/images/npcs/Zero.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Zero\'s Ambition', 1), new QuestLineStepCompletedRequirement('Zero\'s Ambition', 2, GameConstants.AchievementOption.less)]),
});
const SurvivalAreaSinnohRoamerNPC = new RoamerNPC('Hiker Kevin', [
    'I spotted a bunch of roaming Pokémon on {ROUTE_NAME}!',
], GameConstants.Region.sinnoh, RoamingPokemonList.findGroup(GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh), 'assets/images/npcs/Hiker.png');
const SendoffSpringLakeTrio = new NPC('Lake Trio', [
    '<i>You are finally here.</i>',
    '<i>We have been able to create a key to the Distortion World using the materials you collected, but it is unable to work in its current state.</i>',
    '<i>We bestow it upon you, charge it with the ghostly energy of the Distortion World.</i>',
    '<i>In order to do so, you must collect Ghost gems by defeating Ghost type Pokémon and find a Spooky Plate. There should be some in this dungeon, we can sense their energy.</i>',
], {
    image: 'assets/images/npcs/specialNPCs/Lake Trio.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Zero\'s Ambition', 9), new QuestLineStepCompletedRequirement('Zero\'s Ambition', 11, GameConstants.AchievementOption.less)])
});
const SendoffSpringZero1 = new NPC('Zero', [
    'I couldn\'t wait anymore for you to report about your progress, so I asked around and discovered you were coming here.',
    'Wait, is that the key to the Distortion World? With that, I could open the gate myself.',
    'You know what? You are fired, I no longer need you. Now, give me the key to the Distortion World or I will take it by force!',
], {
    image: 'assets/images/npcs/Zero.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Zero\'s Ambition', 11), new QuestLineStepCompletedRequirement('Zero\'s Ambition', 12, GameConstants.AchievementOption.less)]),
});
const SendoffSpringZero2 = new NPC('Zero', [
    'Seems like you have managed to catch the Pokémon that rules the Distortion World.',
    'But this doesn\'t look like the Renegade Pokémon from legend, it seems like some sort of altered form.',
    'I once read that, deep within the Distortion World, there is an object capable of carrying the realm\'s power. Maybe, if you train Giratina while it has such object equipped, it can turn into its true form.',
], {
    image: 'assets/images/npcs/Zero.png',
    requirement: new QuestLineStepCompletedRequirement('Zero\'s Ambition', 14),
});
const ProfRowan = new ProfNPC('Prof. Rowan', GameConstants.Region.sinnoh, 'Congratulations, you\'re more than half-way completed on the national Pokédex!', 'Next stop is Unova! I\'ve always wanted to visit Castelia City, personally...', 'assets/images/npcs/Professor Rowan.png');
const LucyStevens1 = new NPC('Lucy Stevens', [
    'Who sent you to talk to me? Howard Clifford himself? That\'s a little suspicious, but you seem trustworthy enough.',
    'I\'ve been doing some research on this R compound, and have reason to believe it is being manufactured or used in research at the P2 Lab in Unova.',
    'We should investigate!',
], {
    image: 'assets/images/npcs/Lucy Stevens.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Detective Pikachu', 7), new QuestLineStepCompletedRequirement('Detective Pikachu', 9, GameConstants.AchievementOption.less)]),
});
const ManaphyHastings1 = new NPC('Professor Hastings', [
    'Ah, are you a strong trainer? I\'d like to leave this to a Pokémon Ranger, but the ones in this region are far away, and the crooks could escape by the time they caught up!',
    'I was robbed of a precious Pokémon Egg by the Go-Rock Squad! The egg was coloured a transparent blue...  Like the colour of the sea!',
    'The Go-Rock Squad were troublemakers the Pokémon Rangers dealt with in my home region. I don\'t know why they took it, but the Go-Rock Squad is trying to regroup!',
    'I was robbed in the forest to the north. Please, you have to hurry!',
], {
    image: 'assets/images/npcs/Professor Hastings.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Recover the Precious Egg!'), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 2, GameConstants.AchievementOption.less)]),
});
const ManaphyHastings2 = new NPC('Professor Hastings', [
    'Thanks for retrieving the Egg!',
    'The Go-Rock Squad was already beaten once. That was probably their very last gasp of trouble-making.',
    'While you were gone I discovered that the egg belongs to Manaphy! No wonder the Go-Rock Squad was after it.',
    'Canalave\'s Library has several books detailing the legends of Manaphy. Perhaps one of them can help us find out how to hatch this egg.',
    'No time to waste - I\'ll see you at the Canalave Library!',
], {
    image: 'assets/images/npcs/Professor Hastings.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 10), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 11, GameConstants.AchievementOption.less)]),
});
const ManaphyHastings3 = new NPC('Professor Hastings', [
    'Trainer, there\'s trouble afoot!',
    'The egg was stolen again - this time by a Happiny who belongs to a little girl here. It went eastward at top speed - it\'s probably left this city far behind it now.',
    'We must retrieve that egg at all costs! Please, you have to chase down the egg-napper!',
], {
    image: 'assets/images/npcs/Professor Hastings.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 11), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 25, GameConstants.AchievementOption.less)]),
});
const ManaphyHastings4 = new NPC('Professor Hastings', [
    'Ah, Manaphy hatched, did it? Looks like all that running around you and Happiny did incubated it enough to hatch it.',
    'There is something I\'ve discovered researching the Manaphy stories here. Apparently, Manaphy can be bred to produce an entirely different species of Pokémon!',
    'Quite frankly, it\'s probably for the best if Manaphy stays with you. Apparently many things want to take that Pokémon for themselves, and I don\'t have the strength to fend them off.',
], {
    image: 'assets/images/npcs/Professor Hastings.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 25), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 26, GameConstants.AchievementOption.less)]),
});
const ManaphyBoulders = new NPC('Strange Boulders', [
    '<i>One of the pathways into the forest is blocked by a trio of large boulders.</i>',
    '<i>However, all three of the boulders look very similar... and they almost seem to have arms, as well.</i>',
    '<i>Perhaps these aren\'t boulders after all... and if they are what you think they are, a good soaking should settle the matter.</i>',
], {
    image: 'assets/images/npcs/specialNPCs/Strange Boulders.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 0), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 2, GameConstants.AchievementOption.less)]),
});
const ManaphyGoRockCommander = new NPC('Go-Rock Commander', [
    'You... are you a Pokémon Ranger? ...No? Well, no matter.',
    'Allow me to explain something to you. This egg is meaningful only if we possess it.',
    'We\'re going to hatch Manaphy from this egg and get it to guide us to its Sea Temple.',
    'With the power contained within, I will become the King of the Sea - far stronger than the old fool guiding us before!',
    '<i>The Commander flees into the forest, with the Go-Rock Grunts covering his escape!</i>',
], {
    image: 'assets/images/npcs/Go-Rock Squad Commander.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 3), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 5, GameConstants.AchievementOption.less)]),
});
const ManaphyGoRock = new NPC('Go-Rock Grunt', [
    'Huff... huff... we should have been out of the forest by now!',
    'The plan was so simple. One of our grunts pre-planted a bunch of big red mushrooms with yellow spots to make a path out of the forest and to our hideout.',
    'But it feels like we\'ve been going in circles! The only reason I know we aren\'t is because every time we reach a similar crossroads, the mushrooms are in different places.',
    'Unless... the mushrooms are moving somehow?',
    '<i>What she\'s describing... could it be they\'re using Parasect? It\'s never a good idea to use living landmarks.</i>',
    '<i>If you can take out a few of the Parasect, that should quickly corner them.</i>',
], {
    image: 'assets/images/npcs/Go-Rock Squad Grunt (female).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 6), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 8, GameConstants.AchievementOption.less)]),
});
const HappinyWitness1 = new NPC('Black Belt', [
    'A Happiny with a blue egg?',
    'I did see a Happiny like that. They were heading north, across Route 204.',
], {
    image: 'assets/images/npcs/Black Belt.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 12), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 14, GameConstants.AchievementOption.less)]),
});
const HappinyWitness2 = new NPC('Lady', [
    'A Happiny with a blue egg? Are you its trainer?',
    'I was just minding my own business, when a little pink thing knocked me right over! By the time I got up, it was long gone, racing for the Eterna Forest.',
    'I was worried its trainer had lost it, so I came here to ask around. I hope you catch up to it soon.',
    '<i>If it has a better sense of direction than the Go-Rock Squad, it\'ll probably pop out at Eterna City.</i>',
], {
    image: 'assets/images/npcs/Lady.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 13), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 15, GameConstants.AchievementOption.less)]),
});
const HappinyWitness3 = new NPC('Cyclist', [
    'A Happiny with a blue egg? Ah yeah, I saw it.',
    'It ran right through here and went across Route 211, straight for Mt. Coronet.',
    '<i>Did the Happiny really leave Eterna and brave Mt. Coronet with the egg in tow? Maybe it\'s reached the other side by now.</i>',
], {
    image: 'assets/images/npcs/Cyclist (female).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 14), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 16, GameConstants.AchievementOption.less)]),
});
const HappinyWitness4 = new NPC('Waitress', [
    'I was just finishing up my shift at the Café Cabin when a little pink puffball ran past! It was heading south, for the ruins down there.',
    '...Eh, it was a Happiny? ...That\'s one fast Happiny, then, isn\'t it?',
], {
    image: 'assets/images/npcs/Waitress.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 15), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 17, GameConstants.AchievementOption.less)]),
});
const HappinyWitness5 = new NPC('Pokémon Ranger', [
    'Ah, you\'re the one chasing after that Happiny? You look a bit puffed, are you okay?',
    'I tried to capture it, but it barrelled right through my Capture Disc\'s trail! It went for Hearthome City. It wasn\'t showing any signs of slowing down yet.',
], {
    image: 'assets/images/npcs/Pokemon Ranger (female).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 16), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 18, GameConstants.AchievementOption.less)]),
});
const HappinyWitness6 = new NPC('Murph', [
    'Me and my buddy Slowpoke are trying to catch a Happiny that just went running into Mt. Coronet.',
    'It had a blue egg on its belly - I\'ve definitely seen an egg like that before, back in Fiore.',
    'My Slowpoke\'s gone ahead, I hope I can catch up to them soon.',
], {
    image: 'assets/images/npcs/Murph.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 17), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 19, GameConstants.AchievementOption.less)]),
});
const HappinyWitness7 = new NPC('Cyclist', [
    'Oh hey! Still chasing that Happiny, huh?',
    'When I saw it still running, I tried to catch up to it, but it got into the Oreburgh Tunnel and I lost track of it.',
    '...Say, are you alright? You look a little... bug-eyed.',
    '<i>...This annoying little twerp has been taking you in one big loop, hasn\'t it...</i>',
], {
    image: 'assets/images/npcs/Cyclist (female).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 18), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 20, GameConstants.AchievementOption.less)]),
});
const HappinyWitness8 = new NPC('Bug Catcher', [
    'Some guy in a weird white outfit was chasing a Happiny!',
    'They were heading south, towards Professor Rowan\'s lab!',
    'You\'re chasing after them too, right? Good luck catching up to them!',
], {
    image: 'assets/images/npcs/Bug Catcher.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 19), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 21, GameConstants.AchievementOption.less)]),
});
const HappinyWitness9 = new NPC('Go-Rock Pincher', [
    'Damn, that Happiny got away. Just when I had it cornered, a Pichu and a Glameow came out and attacked me.',
    '...Hey, I recognize you! You pinched the egg we pinched in Eterna Forest!',
    'I\'m gonna pinch that Pokémon first, so if you want to try and stop me, you\'ll have to get through my Pokémon!',
], {
    image: 'assets/images/npcs/Go-Rock Squad Grunt (male).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 20), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 22, GameConstants.AchievementOption.less)]),
});
const HappinyBoulders = new NPC('Strange Boulders', [
    '<i>You\'ve seen \'boulders\' like this before.</i>',
    '<i>According to the murmuring crowd around them, a Happiny ran this way and threw the boulders behind it to block any pursuers.</i>',
    '<i>You spray the boulders with your water types, and they... don\'t move. Huh, guess they really are boulders this time.</i>',
    '<i>Well, that just means that you can get some fighting-types and crush them with no regrets.</i>',
], {
    image: 'assets/images/npcs/specialNPCs/Strange Boulders.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 22), new QuestLineStepCompletedRequirement('Recover the Precious Egg!', 24, GameConstants.AchievementOption.less)]),
});
const SnoverBreeder = new NPC('Snover Breeder', [
    'I\'ve been finding ways to grow Snover Berries using humane methods.',
    'Snover are happy to let you pick their berries.  They then wander away into the wilderness. Please be kind to them!',
], { image: 'assets/images/npcs/Pokémon Breeder (female).png' });
const GrotleAcornParty = new NPC('Grotle and Friends', [
    '<i>Several friendly Pokémon are snacking on a Grotle\'s acorns.</i>',
], {
    image: 'assets/images/npcs/specialNPCs/Grotle Acorn Party.png',
    requirement: new ObtainedPokemonRequirement('Grotle (Acorn)'),
});
const EvolutionAssistant = new AssistantNPC('Prof. Rowan\'s Assistant', [
    'Hey, $playername$! According to Prof. Rowan\'s research, 90% of all Pokémon are somehow tied to evolution! Yup, you can also see a Pokémon\'s evolution line in your Pokédex.',
], [
    'Speaking of Pokémon! How\'s your Pokédex coming along? Wow! You have so many Pokémon that can evolve!',
], 'evolution', 'assets/images/npcs/Lucas.png');
//Sinnoh Towns
TownList['Twinleaf Town'] = new Town('Twinleaf Town', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new BulletinBoard(GameConstants.BulletinBoards.Sinnoh)], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_HoennChampion)],
    npcs: [TwinleafContestChampion],
});
TownList['Sandgem Town'] = new Town('Sandgem Town', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [SandgemTownShop, TemporaryBattleList['Manaphy Go-Rock Pincher'], new ShardTraderShop(GameConstants.ShardTraderLocations['Sandgem Town'], 'Santa\'s Secret Daycare', true, 'Plates')], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 201)],
    npcs: [ProfRowan, EvolutionAssistant, SandgemBeachcomber, ManaphyHastings1, ManaphyHastings2, HappinyWitness9],
});
TownList['Jubilife City'] = new Town('Jubilife City', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [JubilifeCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 202)],
    npcs: [SinnohFossilNpc, HappinyWitness1, HappinyWitness8],
});
TownList['Oreburgh City'] = new Town('Oreburgh City', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [OreburghCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Oreburgh City']), new GenericTraderShop('FossilOreburghMiningMuseum', 'Oreburgh Mining Museum')], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Oreburgh Gate'))],
    npcs: [OreburghConstructionWorker, HappinyWitness7],
});
TownList['Floaroma Town'] = new Town('Floaroma Town', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [FloaromaTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Floaroma Town'])], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.sinnoh, 204),
        new GymBadgeRequirement(BadgeEnums.Coal),
    ],
    npcs: [FloaromaFlowerGirl, HappinyWitness2],
});
TownList['Eterna City'] = new Town('Eterna City', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [EternaCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Eterna City']), new MoveToDungeon(dungeonList['Team Galactic Eterna Building'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Eterna Forest'))],
    npcs: [EternaLassCaroline, HappinyWitness3],
});
TownList['Mt. Coronet'] = new Town('Mt. Coronet', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new MoveToDungeon(dungeonList['Mt. Coronet South']), new MoveToDungeon(dungeonList['Mt. Coronet North']), new MoveToDungeon(dungeonList['Spear Pillar']), new MoveToDungeon(dungeonList['Hall of Origin'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 207)],
});
TownList['Hearthome City'] = new Town('Hearthome City', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [HearthomeCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Hearthome City']), SinnohBerryMaster], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 208)],
    npcs: [HearthomeContestFan, SinnohBerryMasterAssistant, LucyStevens1, HappinyWitness6],
});
TownList['Solaceon Town'] = new Town('Solaceon Town', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [SolaceonTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Solaceon Town'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 209)],
    npcs: [HappinyWitness5],
});
TownList['Veilstone City'] = new Town('Veilstone City', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [DepartmentStoreShop, new MoveToDungeon(dungeonList['Team Galactic HQ'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 215)],
    npcs: [],
});
TownList['Pastoria City'] = new Town('Pastoria City', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [PastoriaShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Pastoria City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 213)],
});
TownList['Celestic Town'] = new Town('Celestic Town', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [CelesticTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Celestic Town']), TemporaryBattleList['Galactic Boss Cyrus']], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Fen)],
    npcs: [CelesticGrandma, HappinyWitness4],
});
TownList['Pal Park'] = new Town('Pal Park', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [PalParkShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Pal Park']), TemporaryBattleList['Manaphy Egg Protectors']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 221)],
    npcs: [PalParkWarden, PalParkBurglar, HappinyBoulders],
});
TownList['Canalave City'] = new Town('Canalave City', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [CanalaveCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Canalave City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 218)],
    npcs: [CanalaveRiley, CanalaveYoungBoy, CanalaveSinnohMyth, ManaphyHastings3, ManaphyHastings4],
});
TownList['Great Marsh'] = new Town('Great Marsh', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new SafariTownContent()], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 218)],
    npcs: [],
});
TownList['Snowpoint City'] = new Town('Snowpoint City', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [SnowpointCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Snowpoint City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 217)],
    npcs: [SnowpointYoungGirl, MindyFriend],
});
TownList['Secret Berry Shop'] = new Town('Secret Berry Shop', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [SecretBerryMaster], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.sinnoh, 217),
    ],
    npcs: [SnoverBreeder, GrotleAcornParty],
    ignoreAreaStatus: true,
});
TownList['Sunyshore City'] = new Town('Sunyshore City', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [SunyshoreCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Sunyshore City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 222)],
    npcs: [SunyshoreRibbonerJulia],
});
TownList['Fight Area'] = new Town('Fight Area', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [FightAreaShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)],
    npcs: [FightAreaAceTrainer, FightAreaZero1, FightAreaZero2],
});
TownList['Survival Area'] = new Town('Survival Area', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [TemporaryBattleList['Barry 7'], SurvivalAreaShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Survival Area'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 225)],
    npcs: [SurvivalAreaSinnohRoamerNPC],
});
TownList['Resort Area'] = new Town('Resort Area', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [ResortAreaShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Resort Area'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 229)],
});
TownList['Pokémon League Sinnoh'] = new Town('Pokémon League Sinnoh', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [GymList['Elite Aaron'], GymList['Elite Bertha'], GymList['Elite Flint'], GymList['Elite Lucian'], GymList['Champion Cynthia'], pokeLeagueShop()], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.sinnoh, 223),
        new TemporaryBattleRequirement('Barry 6'),
    ],
});
//Sinnoh Dungeons
TownList['Oreburgh Gate'] = new DungeonTown('Oreburgh Gate', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 203)]);
TownList['Valley Windworks'] = new DungeonTown('Valley Windworks', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 204),
    new GymBadgeRequirement(BadgeEnums.Coal),
]);
TownList['Eterna Forest'] = new DungeonTown('Eterna Forest', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 205),
    new GymBadgeRequirement(BadgeEnums.Coal),
], [TemporaryBattleList['Manaphy Go-Rock MGrunt 1'], TemporaryBattleList['Manaphy Go-Rock MGrunt 2'], TemporaryBattleList['Manaphy Go-Rock MGrunt 3'], TemporaryBattleList['Manaphy Go-Rock MGrunt 4'], TemporaryBattleList['Manaphy Go-Rock FGrunt 1'], TemporaryBattleList['Manaphy Go-Rock FGrunt 2']], {
    npcs: [MossRock, ManaphyGoRock, ManaphyGoRockCommander, ManaphyBoulders],
});
TownList['Old Chateau'] = new DungeonTown('Old Chateau', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 205),
    new GymBadgeRequirement(BadgeEnums.Forest),
], [TemporaryBattleList['Manaphy Go-Rock Commander']]);
TownList['Team Galactic Eterna Building'] = new DungeonTown('Team Galactic Eterna Building', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new GymBadgeRequirement(BadgeEnums.Forest)]);
TownList['Wayward Cave'] = new DungeonTown('Wayward Cave', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 206)]);
TownList['Mt. Coronet South'] = new DungeonTown('Mt. Coronet South', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 207)]);
TownList['Solaceon Ruins'] = new DungeonTown('Solaceon Ruins', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 209)], undefined, {
    npcs: [UnownFigure],
});
TownList['Iron Island'] = new DungeonTown('Iron Island', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 218)]);
TownList['Lake Valor'] = new DungeonTown('Lake Valor', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new GymBadgeRequirement(BadgeEnums.Mine)], [], {
    npcs: [ValorAzelf],
});
TownList['Lake Verity'] = new DungeonTown('Lake Verity', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lake Valor'))], [], {
    npcs: [VerityMesprit],
});
TownList['Mt. Coronet North'] = new DungeonTown('Mt. Coronet North', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 211),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lake Verity')),
]);
TownList['Lake Acuity'] = new DungeonTown('Lake Acuity', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new GymBadgeRequirement(BadgeEnums.Icicle)], [], {
    npcs: [IceRock, AcuityUxie],
});
TownList['Team Galactic HQ'] = new DungeonTown('Team Galactic HQ', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lake Acuity'))]);
TownList['Spear Pillar'] = new DungeonTown('Spear Pillar', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Galactic HQ'))]);
TownList['Distortion World'] = new DungeonTown('Distortion World', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [
    new OneFromManyRequirement([
        new MultiRequirement([
            new QuestLineStepCompletedRequirement('A New World', 9),
            new QuestLineStepCompletedRequirement('A New World', 10, GameConstants.AchievementOption.less),
        ]),
        new TemporaryBattleRequirement('Zero'),
    ]),
]);
TownList['Victory Road Sinnoh'] = new DungeonTown('Victory Road Sinnoh', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 223)]);
TownList['Sendoff Spring'] = new DungeonTown('Sendoff Spring', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new QuestLineStepCompletedRequirement('Zero\'s Ambition', 8)], [TemporaryBattleList.Zero], {
    npcs: [SendoffSpringLakeTrio, SendoffSpringZero1, SendoffSpringZero2],
});
TownList['Hall of Origin'] = new DungeonTown('Hall of Origin', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
TownList['Fullmoon Island'] = new DungeonTown('Fullmoon Island', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
TownList['Newmoon Island'] = new DungeonTown('Newmoon Island', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
TownList['Flower Paradise'] = new DungeonTown('Flower Paradise', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [
    new RouteKillRequirement(10, GameConstants.Region.sinnoh, 224),
    new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion),
]);
TownList['Stark Mountain'] = new DungeonTown('Stark Mountain', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new RouteKillRequirement(10, GameConstants.Region.sinnoh, 227)]);
TownList['Snowpoint Temple'] = new DungeonTown('Snowpoint Temple', GameConstants.Region.sinnoh, GameConstants.SinnohSubRegions.Sinnoh, [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)]);
//Unova Shops
const FloccesyTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.SmallRestore,
    ItemList.Mystery_egg,
    ItemList.Wonder_Chest,
    ItemList.Miracle_Chest,
]);
const VirbankCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Token_collector,
    ItemList.Lucky_egg,
    ItemList.MediumRestore,
]);
const CasteliaCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xAttack,
    ItemList.Water_egg,
    ItemList.Linking_cord,
    ItemList.Kings_rock,
]);
const NimbasaCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Grass_egg,
    ItemList.Electric_egg,
    ItemList.Metal_coat,
]);
const DriftveilCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.Razor_claw,
    ItemList.Razor_fang,
    ItemList.Zorua,
]);
const MistraltonCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.LargeRestore,
    ItemList.Thunder_stone,
    ItemList.Upgrade,
]);
const LentimasTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_egg,
    ItemList.Fire_egg,
]);
const UndellaTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.Deepsea_tooth,
    ItemList.Deepsea_scale,
]);
const LacunosaTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.Lucky_incense,
    ItemList.Fighting_egg,
]);
const OpelucidCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.Dowsing_machine,
    ItemList.Dragon_egg,
    ItemList.Dragon_scale,
]);
const HumilauCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.Prism_scale,
]);
const IcirrusCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Protector,
    ItemList.Dubious_disc,
    ItemList.Reaper_cloth,
]);
const BlackAndWhiteParkShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Moon_stone,
    ItemList.Sun_stone,
]);
const NacreneCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Soothe_bell,
]);
const StriatonCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Leaf_stone,
    ItemList.Fire_stone,
    ItemList.Water_stone,
]);
const AccumulaTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Shiny_stone,
    ItemList.Dusk_stone,
    ItemList.Dawn_stone,
]);
const NuvemaTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Electirizer,
    ItemList.Magmarizer,
]);
const AnvilleTownShop = new Shop([
    ItemList['Meloetta (Pirouette)'],
]);
//Unova Gem Master
const UnovaFluteMaster = new GemMasterShop(GameConstants.GemShops.UnovaFluteMaster);
//Unova Berry Master
const DriftveilBerryMaster = new BerryMasterShop(GameConstants.BerryTraderLocations['Driftveil City'], [
    ItemList.Boost_Mulch,
    ItemList.Rich_Mulch,
    ItemList.Surprise_Mulch,
    ItemList.Amaze_Mulch,
    ItemList.Freeze_Mulch,
    ItemList.Gooey_Mulch,
    ItemList.Berry_Shovel,
    ItemList.Mulch_Shovel,
], 'Unova Berry Master');
//Unova NPCs
const ExcitedChild = new NPC('Excited Child', [
    'Did you hear? Did you see? It was on TV!',
    'I was just watching my favorite show, The National Gymquirer. It was a live segment! Some hot shot trainer from Kanto defeated Drayden! It was amazing! That trainer is so cool! Drayden is like unbeatable.',
    'Then my programme got interrupted by an emergency broadcast. A report on the first confirmed sightings of Tornadus and Thundurus in over twenty-five years! I\'ve read so much about them, they are my favorites.',
    'Last time they were spotted they just roamed around, causing all kinds of mischief. According to my books anyway. I\'m sure that amazing trainer from the TV will want to catch these mighty forces of nature.',
], { image: 'assets/images/npcs/School Kid (female).png' });
const CasteliaMusician = new NPC('Musician', [
    'Sup. Ya like jazz? No? Well then you should check out me and my band at the Sonata Cafe where we never play Jazz.',
    'Sometimes a cool singing Pokémon shows up and joins in on our set. I’ve heard that trainers as strong as the Champion have found it roaming around the region looking for Pokémon battles… but even I wouldn’t challenge it to a Music battle.',
], { image: 'assets/images/npcs/Musician.png' });
const PlasmaGrunt1 = new NPC('Team Plasma Grunt', [
    'Why hello there. Nothing strange going on here. Please move along.',
    'Oh that business in the sewers? Yes, we should not have gone in there. Very unfortunate situation. A complete misunderstanding. We were just curious about what was down there.',
    'Bye now.',
], { image: 'assets/images/npcs/Team Plasma Grunt (male).png' });
const RelicCastleRuinmaniac = new NPC('Ruin Maniac', [
    'I\'ve heard tell of a secret room in this ruin. A room that supposedly contains a very rare Pokémon.',
    'Apparently this secret room is only accessible via a secret entrance in Relic Passage. Relic Passage runs from Driftveil City all the way under the river to Relic Castle. It\'s very impressive. Once I\'m done investigating this part of the ruin I\'m definitely going to check it out!',
], { image: 'assets/images/npcs/Ruin Maniac.png' });
const NimbasaExplorer = new NPC('Explorer', [
    'Whew! The desert is rough out there, glad you\'ve made it all the way to Nimbasa.',
    'Sometimes I find some weird stuff out in the sand, sometimes even Pokémon hiding in Chests. Like this one time in Relic Castle, I found a Pokémon that looks like a statue that I\'ve never seen before!',
], { image: 'assets/images/npcs/Backpacker (male).png' });
const PlasmaGrunt2 = new NPC('Team Plasma Grunt', [
    'I told you. There\'s nothing suspicious going on here. We aren\'t stealing any Pokémon.',
    'If you won\'t leave, we\'ll have to remove you.',
], {
    image: 'assets/images/npcs/Team Plasma Grunt (male).png',
    requirement: new OneFromManyRequirement([new TemporaryBattleRequirement('Team Plasma Grunt 4', 1, GameConstants.AchievementOption.less), new TemporaryBattleRequirement('Team Plasma Grunt 5', 1, GameConstants.AchievementOption.less), new TemporaryBattleRequirement('Team Plasma Grunts 1', 1, GameConstants.AchievementOption.less), new TemporaryBattleRequirement('Team Plasma Grunts 2', 1, GameConstants.AchievementOption.less)]),
});
const DriftveilZinzolin = new NPC('Zinzolin', [
    'YOU!',
    'Once again we will use the legendary Dragon-type Pokémon and we will rule the Unova region!',
    'Curious Trainers, we shall not let you run around as you please!',
    'Shadow Triad! Get them out of here!',
], {
    image: 'assets/images/npcs/Team Plasma (zinzolin).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 6), new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 7, GameConstants.AchievementOption.less)]),
});
const PlasmaGrunt3 = new NPC('Team Plasma Grunt', [
    'Remember when I told you that there was nothing suspicious about this frigate? I was lying, of course.',
    'But truth be told, I didn\'t know that this thing could fly. I was not prepared for this.',
    'I\'m gonna be sick...',
], { image: 'assets/images/npcs/Team Plasma Grunt (male).png' });
const GiantChasmColress = new NPC('Colress', [
    'Welcome! I was asked by an acquaintance to help with his research. What I desire is to bring out the entirety in Pokémon potential! If I can accomplish that, I don\'t care what it takes!',
    'If it means the strength must be brought out by the interactions between Pokémon and Trainers, then so be it! If it means you have to use a merciless approach, like Team Plasma\'s, and force out all of the Pokémon\'s power, then so be it! And yes, if the entire world is destroyed as a result, then so be it...',
    'That aside! The reason I have been traveling all over Unova and battling many Pokémon Trainers is because I was testing the viability of this approach to bringing out the full strength of Pokémon. In that respect, you\'ve done an amazing job.',
    'Well now! Tell me if you have the answer I desire or not! If you\'re ready, come at me!',
], {
    image: 'assets/images/npcs/Team Plasma (colress).png',
    requirement: new MultiRequirement([new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Giant Chasm')), new TemporaryBattleRequirement('Plasma Shadow 1'), new TemporaryBattleRequirement('Colress 3', 1, GameConstants.AchievementOption.less)]),
});
const GiantChasmShadowTriad = new NPC('Shadow Triad', [
    'Listen well! We swore to be loyal to Lord Ghetsis since he saved us! The only thing we want is the world Lord Ghetsis desires! Even if we lose, Lord Ghetsis simply has to win...',
    'The only thing you can do is watch Lord Ghetsis use Kyurem to freeze Unova solid. That\'s all...',
], {
    image: 'assets/images/npcs/specialNPCs/Shadow Triad.png',
    requirement: new MultiRequirement([new TemporaryBattleRequirement('Colress 3'), new TemporaryBattleRequirement('Ghetsis 1', 1, GameConstants.AchievementOption.less)]),
});
const IcirrusFanClubChairman = new NPC('Fan Club Chairman', [
    'Legends say Kyurem is missing a part of itself. It is waiting for a hero to fill in the missing parts of its body with Truth or Ideals.',
    'The legendary dragons of Dragonspiral Tower are said to embody these very concepts. They sometimes leave a piece of their DNA behind after a battle.',
    'If you have DNA splicers, perhaps you can make Kyurem whole again.',
    'I\'ve never seen it, but supposedly it works just like any other evolution item.',
], { image: 'assets/images/npcs/Gentleman.png' });
const P2LaboratoryColress = new NPC('Colress', [
    'So you defeated Ghetsis. Interesting. You must be a very strong trainer.',
    'A rare Pokémon is hiding somewhere inside this abandoned laboratory. You can catch it if you want. I have no interest in it.',
    'However, I do have an interest in you! I want to taste your power. Defeat me, and I\'ll let you search for the rare Pokémon.',
    'I\'ll be waiting for you inside.',
], {
    image: 'assets/images/npcs/Team Plasma (colress).png',
    requirement: new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('P2 Laboratory'), GameConstants.AchievementOption.less),
});
const UnovaRoamerNPC = new RoamerNPC('Professor Juniper\'s Aide', [
    'Our research indicates a higher concentration of roaming Pokémon on {ROUTE_NAME}!',
], GameConstants.Region.unova, RoamingPokemonList.findGroup(GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova));
const ProfJuniper = new ProfNPC('Prof. Juniper', GameConstants.Region.unova, 'Let me see your progress...Ah, fantastic, as usual!', 'Allow me some time to arrange tickets for your next destination.', 'assets/images/npcs/Professor Juniper.png');
const ProfBurnet = new NPC('Professor Burnet', [
    'Welcome to my laboratory, trainer! I am working here to understand the mysterious Interdream Zone.',
    'My laboratory equipment can convert the energy of dreams you experience while sleeping, or "Offline" into orbs. We can then open these orbs and see what your mind experienced in the Interdream Zone.',
    'A trainer like you surely dreams of rare Pokémon. The more rare Pokémon you find from the Interdream Zone, the more we can explore to find others!',
], {
    image: 'assets/images/npcs/Professor Burnet.png',
});
const DreamResearcher1 = new NPC('Dream Researcher', [
    'I have been helping Professor Burnet explore the Interdream Zone with the help of my Audino.',
    'Audino\'s excellent hearing lets it pick up even the quietest hints from Dream Orbs. If you can help the professor advance her research, I may be able to help you in return.',
], {
    image: 'assets/images/npcs/Scientist (female).png',
    requirement: new TemporaryBattleRequirement('Dream Researcher', 1, GameConstants.AchievementOption.less),
});
const DreamResearcher2 = new NPC('Dream Researcher', [
    'What a battle! That Audinite will let you Mega Evolve your Audino, under certain circumstances.',
], {
    image: 'assets/images/npcs/Scientist (female).png',
    requirement: new TemporaryBattleRequirement('Dream Researcher'),
});
const VitaminRefundCode = new NPC('Pokémon Breeder', [
    'I used to have my Pokémon maxed out on Protein, but then I found out about the new Vitamins!',
    'I swapped out some of my Proteins for the new Vitamins, but then I was left with a bunch of extra Protein I couldn\'t use.',
    'Luckily I was able to use the code REFUND-VITAMINS to get my money back! Too bad it only has one use though...',
    'It will also only refund Vitamins you bought after hitting the price cap.',
]);
const UnovaFossilNpc = new NPC('Friendly Waitress', [
    'Hello! Would you like a seat indoors or on the patio? We have a lovely view of the museum, it used to double as a Gym you know! Business may have slowed down since the new Normal Gym moved to Aspertia, but our ex-Gym Leader Lenora is still at it with her husband restoring fossils!',
    'Just last week they had an exhibit on a prehistoric bird and turtle! There was quite the crowd!',
    '... Do you think they\'re hiring?',
], { image: 'assets/images/npcs/Waitress.png' });
// Swords of Justice Quest Npcs
const OldManSwords = new NPC('Old Man', [
    'Hello kiddo. You must be $playername$, nice to meet you.',
    'You might\'ve heard about the Swords of Justice. They seem to be really worried recently and that also worries me, but you seem to be a really nice fellow so I\'ll tell you how to find their leader, Cobalion.',
    'It usually lurks around the deepest layers of Mistralton Cave so you might be able to find it by exploring around here.',
], {
    image: 'assets/images/npcs/Old Man.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Swords of Justice'), new QuestLineStepCompletedRequirement('Swords of Justice', 1, GameConstants.AchievementOption.less)]),
});
const Cobalion1 = new NPC('Cobalion', [
    'Greetings, may I ask who are you? Oh, you\'re a friend of the Old Man? That\'s great, and he sent you here to find me, I assume.',
    'Well, since he told you to find me, there must be a reason. Unless you\'re here to help me re-form the Swords of Justice? If so, then thank you for your aid. Meet me in the Moor of Icirrus after you find them. You should look for Terrakion first, somewhere in the depths of the Unova Victory Road. Good luck, Trainer.',
], {
    image: 'assets/images/pokemon/638.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Swords of Justice', 1, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Swords of Justice', 3, GameConstants.AchievementOption.less)]),
});
const Terrakion1 = new NPC('Terrakion', [
    'How did you find me? Cobalion told me this place was well hidden! Anyways, what do you want from me? Cobalion wants to reunite the Swords of Justice? Do you think I\'m dumb enough to fall for lies of a human?',
    'I\'ll consider your worth only if you prove your strength and can beat me in battle!',
], {
    image: 'assets/images/pokemon/639.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Swords of Justice', 3, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Swords of Justice', 5, GameConstants.AchievementOption.less)]),
});
const Cobalion2 = new NPC('Cobalion', [
    'Thank you, $playername$. Your assistance with reuniting the Swords of Justice is greatly appreciated.',
    'Now that you\'ve found and brought back Terrakion, you should probably look for Virizion. Virizion usually likes to meditate to the sound of nature, so Pinwheel Forest might be a good place to search in. Good luck, and report back once you\'ve found each other.',
], {
    image: 'assets/images/pokemon/638.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Swords of Justice', 5, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Swords of Justice', 7, GameConstants.AchievementOption.less)]),
});
const Virizion1 = new NPC('Virizion', [
    'Hello, who are you, may I ask? You say you were sent here by Cobalion to reunite the Swords of Justice? I\'m sorry dear, you\'ll have to create a much more believable lie to deceive me. I\'m not so easily fooled.',
    'To earn my trust, you need to prove your patience to me. If you can gather 5,000 Grass Gems and bring them to me, then I\'ll trust your word. If you cannot handle such a task, do not return.',
], {
    image: 'assets/images/pokemon/640.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Swords of Justice', 7, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Swords of Justice', 9, GameConstants.AchievementOption.less)]),
});
const Virizion2 = new NPC('Virizion', [
    'Oh, you\'re back? And you\'ve brought the 5,000 Grass Gems. I\'m impressed. Very well, you\'ve earned my trust. So, Cobalion wants us to meet at the Moor of Icirrus to reunite the Swords of Justice? Sounds just like the old Cobalion I remember. I\'ll make my way there now, you should come too. I\'m sure your assistance is still desired.',
], {
    image: 'assets/images/pokemon/640.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Swords of Justice', 9, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Swords of Justice', 10, GameConstants.AchievementOption.less)]),
});
const Cobalion3 = new NPC('Cobalion', [
    'Welcome back, $playername$! I can see you\'ve brought back Virizion. Thank you for your assistance towards reuniting the Swords of Justice.',
    'Now, let\'s discuss the plan. Wait, you want to help too? You should know this will be a very dangerous mission, $playername$. We may not be able to fully protect you from the dangers we may face. The only way we can be sure of your safety is if you can hold your own against all three of us in battle. If you succeed, we will happily accept your assistance, but should you fail, then I apologise, but we cannot allow you to join the mission. What say you? Shall we spar?',
], {
    image: 'assets/images/pokemon/638.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Swords of Justice', 10, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Swords of Justice', 12, GameConstants.AchievementOption.less)]),
});
const Cobalion4 = new NPC('Cobalion', [
    'Greetings, $playername$. I assume you couldn\'t find much, but I was able to find that Kyurem has been seen near Lacunosa Town. We should check it out immediately, before it decides to attack. You go ahead, I\'ll warn the others.',
], {
    image: 'assets/images/pokemon/638.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Swords of Justice', 13, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Swords of Justice', 15, GameConstants.AchievementOption.less)]),
});
const Cobalion5 = new NPC('Cobalion', [
    'Hey, $playername$. It\'s not your fault Kyurem fled, but I\'m thinking it has probably gone into hiding. We should search the Giant Chasm for its lair at once.',
], {
    image: 'assets/images/pokemon/638.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Swords of Justice', 15, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Swords of Justice', 17, GameConstants.AchievementOption.less)]),
});
const Cobalion6 = new NPC('Cobalion', [
    '$playername$... Don\'t worry about us... We\'ll be fine... Defeat Kyurem once and for all so we can live in peace.',
], {
    image: 'assets/images/pokemon/638.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Swords of Justice', 18, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Swords of Justice', 20, GameConstants.AchievementOption.less)]),
});
const Cobalion7 = new NPC('Cobalion', [
    'Thank you for all your help, $playername$. You really were a great ally, and I hope we can meet again. As thanks for helping us, I\'ll be waiting for you in Mistralton Cave if you\'d wish for me to join your team.',
], {
    image: 'assets/images/pokemon/638.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Swords of Justice', 20, GameConstants.AchievementOption.more), new QuestLineCompletedRequirement('Swords of Justice', GameConstants.AchievementOption.less)]),
});
const Terrakion2 = new NPC('Terrakion', [
    'Hey, you were a really great partner! It was really nice doing this mission with you, and you seem like a strong trainer, so if you want me to join your team, I\'ll be waiting at Victory Road!',
], {
    image: 'assets/images/pokemon/639.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Swords of Justice', 20, GameConstants.AchievementOption.more), new QuestLineCompletedRequirement('Swords of Justice', GameConstants.AchievementOption.less)]),
});
const Virizion3 = new NPC('Virizion', [
    'You were a great ally, $playername$. I feel it\'d be a wise decision on my part if I joined your team, but that\'s a decision for you to make. If you decide you wish for me to join your team, you can look for me in the depths of Pinwheel Forest.',
], {
    image: 'assets/images/pokemon/640.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Swords of Justice', 20, GameConstants.AchievementOption.more), new QuestLineCompletedRequirement('Swords of Justice', GameConstants.AchievementOption.less)]),
});
// Genesect Quest Npcs
const InvestigateP2 = new NPC('Investigate the P2 Laboratory', [
    '<i>A bright red Pokémon flies past you at a high speed, heading west.</i>',
], {
    image: 'assets/images/shinypokemon/649.05.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('The Legend Awakened'), new QuestLineStepCompletedRequirement('The Legend Awakened', 1, GameConstants.AchievementOption.less)]),
});
const AncientBugHunter1 = new NPC('Ancient Bug Hunter', [
    'Did you see it come through? The Paleozoic Pokémon, Genesect?',
    'They haven\'t been seen in Unova for millions of years! If one is here now, it\'s sure to be a little confused about what the world is like.',
    'I worry it might attack the city out of fear.',
], {
    image: 'assets/images/npcs/Super Nerd.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Legend Awakened', 2), new QuestLineStepCompletedRequirement('The Legend Awakened', 4, GameConstants.AchievementOption.less)]),
});
const GenesectFight = new NPC('Witness the battle', [
    '<i>The Red Genesect and a powerful Pokémon you don\'t recognize exchange energy blasts. The Red Genesect flees the battle, heading east.</i>',
], {
    image: 'assets/images/npcs/other/GenesectFight.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Legend Awakened', 4), new QuestLineStepCompletedRequirement('The Legend Awakened', 6, GameConstants.AchievementOption.less)]),
});
const AncientBugHunter2 = new NPC('Ancient Bug Hunter', [
    'Wow! A real, live Genesect!',
    'I hear that when you equip them with powerful Drive devices, they change forms!',
    'They also have a high-speed form, which I hear has been sighted across Unova.',
], {
    image: 'assets/images/npcs/Super Nerd.png',
    requirement: new QuestLineCompletedRequirement('The Legend Awakened'),
});
//Unova Towns
TownList['Aspertia City'] = new Town('Aspertia City', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new BulletinBoard(GameConstants.BulletinBoards.Unova)], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_SinnohChampion)],
    npcs: [],
});
TownList['Floccesy Town'] = new Town('Floccesy Town', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [FloccesyTownShop], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.unova, 19),
        new TemporaryBattleRequirement('Hugh 1'),
    ],
});
TownList['Virbank City'] = new Town('Virbank City', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [VirbankCityShop, TemporaryBattleList['Team Plasma Grunt 1']], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Basic)],
});
TownList['Castelia City'] = new Town('Castelia City', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [CasteliaCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Castelia City']), new MoveToDungeon(dungeonList['Castelia Sewers'])], {
    requirements: [new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 0)],
    npcs: [CasteliaMusician, GenesectFight],
});
TownList['A Perfectly Ordinary Frigate'] = new Town('A Perfectly Ordinary Frigate', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [], {
    requirements: [
        new GymBadgeRequirement(BadgeEnums.Insect),
        new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 1),
        new TemporaryBattleRequirement('Team Plasma Grunt 1'),
    ],
    npcs: [PlasmaGrunt1],
});
TownList['Nimbasa City'] = new Town('Nimbasa City', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [NimbasaCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Nimbasa City']), TemporaryBattleList['Team Plasma Grunt 2'], TemporaryBattleList['Team Plasma Grunt 3']], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.unova, 4),
        new TemporaryBattleRequirement('Colress 1'),
        new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 2),
    ],
    npcs: [NimbasaExplorer],
});
TownList['Driftveil City'] = new Town('Driftveil City', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [TemporaryBattleList['Hugh 7'], DriftveilCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Driftveil City']), DriftveilBerryMaster], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.unova, 5),
        new TemporaryBattleRequirement('Team Plasma Grunt 2'),
        new TemporaryBattleRequirement('Team Plasma Grunt 3'),
        new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 4),
    ],
});
TownList['A Totally Unsuspicious Frigate'] = new Town('A Totally Unsuspicious Frigate', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [TemporaryBattleList['Team Plasma Grunt 4'], TemporaryBattleList['Team Plasma Grunt 5'], TemporaryBattleList['Team Plasma Grunts 1'], TemporaryBattleList['Team Plasma Grunts 2']], {
    requirements: [
        new GymBadgeRequirement(BadgeEnums.Quake),
        new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 4),
    ],
    npcs: [PlasmaGrunt2, DriftveilZinzolin],
});
TownList['Mistralton City'] = new Town('Mistralton City', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [MistraltonCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Mistralton City'])], {
    requirements: [
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Chargestone Cave')),
        new TemporaryBattleRequirement('Colress 2'),
        new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 7),
    ],
});
TownList['Lentimas Town'] = new Town('Lentimas Town', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [LentimasTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Lentimas Town'])], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Jet)],
});
TownList['Undella Town'] = new Town('Undella Town', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [UndellaTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Undella Town']), UnovaFluteMaster], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))],
});
TownList['Lacunosa Town'] = new Town('Lacunosa Town', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [LacunosaTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Lacunosa Town']), TemporaryBattleList['Team Plasma Grunt 6'], TemporaryBattleList['Zinzolin 1'], TemporaryBattleList['Kyurem 1']], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.unova, 13),
        new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 8),
    ],
    npcs: [Cobalion5],
});
TownList['Opelucid City'] = new Town('Opelucid City', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [OpelucidCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Opelucid City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 11)],
});
TownList['Team Plasma Assault'] = new Town('Team Plasma Assault', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [TemporaryBattleList['Team Plasma Grunt 7'], TemporaryBattleList['Team Plasma Grunt 8'], TemporaryBattleList['Team Plasma Grunt 9'], TemporaryBattleList['Zinzolin 2'], TemporaryBattleList['Plasma Shadow 1']], {
    requirements: [
        new GymBadgeRequirement(BadgeEnums.Legend),
        new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 11),
    ],
    npcs: [PlasmaGrunt3],
});
TownList['Shopping Mall Nine'] = new Town('Shopping Mall Nine', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [DepartmentStoreShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 9)],
});
TownList['Humilau City'] = new Town('Humilau City', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [HumilauCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Humilau City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 21)],
    npcs: [ExcitedChild],
});
TownList['Icirrus City'] = new Town('Icirrus City', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [IcirrusCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Icirrus City'])], {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, GameConstants.Region.unova, 8),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Twist Mountain')),
        ])],
    npcs: [IcirrusFanClubChairman],
});
TownList['Black and White Park'] = new Town('Black and White Park', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new DreamOrbTownContent(), BlackAndWhiteParkShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Black and White Park']), TemporaryBattleList['Dream Researcher']], {
    requirements: [new OneFromManyRequirement([
            new MultiRequirement([
                new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
                new RouteKillRequirement(10, GameConstants.Region.unova, 14),
            ]),
            new RouteKillRequirement(10, GameConstants.Region.unova, 15),
        ])],
    npcs: [ProfBurnet, DreamResearcher1, DreamResearcher2],
});
TownList['Nacrene City'] = new Town('Nacrene City', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [NacreneCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Nacrene City']), new GenericTraderShop('FossilNacreneMuseum', 'Nacrene Museum')], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pinwheel Forest'))],
    npcs: [VitaminRefundCode, UnovaFossilNpc],
});
TownList['Striaton City'] = new Town('Striaton City', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [StriatonCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Striaton City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 3)],
});
TownList['Accumula Town'] = new Town('Accumula Town', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [AccumulaTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Accumula Town'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 2)],
});
TownList['Nuvema Town'] = new Town('Nuvema Town', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [NuvemaTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Nuvema Town']), TemporaryBattleList['Lab Ambush']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.unova, 1)],
    npcs: [ProfJuniper, UnovaRoamerNPC],
});
TownList['Anville Town'] = new Town('Anville Town', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [AnvilleTownShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)],
});
TownList['Pokémon League Unova'] = new Town('Pokémon League Unova', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [GymList['Elite Shauntal'], GymList['Elite Marshal'], GymList['Elite Grimsley'], GymList['Elite Caitlin'], GymList['Champion Iris'], pokeLeagueShop()], {
    requirements: [
        new TemporaryBattleRequirement('Hugh 5'),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Unova')),
    ],
});
//Unova Dungeons
TownList['Pledge Grove'] = new DungeonTown('Pledge Grove', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [
    new ObtainedPokemonRequirement('Keldeo'),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Moor of Icirrus')),
]);
TownList['Floccesy Ranch'] = new DungeonTown('Floccesy Ranch', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 20),
    new TemporaryBattleRequirement('Hugh 2'),
]);
TownList['Liberty Garden'] = new DungeonTown('Liberty Garden', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, 
//Victini dungeon, maybe unlock later
[new TemporaryBattleRequirement('Team Plasma Grunt 1')]);
TownList['Castelia Sewers'] = new DungeonTown('Castelia Sewers', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [
    new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 0),
], [TemporaryBattleList['Red Genesect 1'], TemporaryBattleList['Red Genesect 2']], {
    npcs: [AncientBugHunter1, AncientBugHunter2],
});
TownList['Relic Passage'] = new DungeonTown('Relic Passage', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new GymBadgeRequirement(BadgeEnums.Quake)]);
TownList['Relic Castle'] = new DungeonTown('Relic Castle', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 25)], [], {
    npcs: [RelicCastleRuinmaniac],
});
TownList['Lostlorn Forest'] = new DungeonTown('Lostlorn Forest', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 16)]);
TownList['Chargestone Cave'] = new DungeonTown('Chargestone Cave', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 6)]);
TownList['Mistralton Cave'] = new DungeonTown('Mistralton Cave', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [
    new TemporaryBattleRequirement('Colress 2'),
    new RouteKillRequirement(10, GameConstants.Region.unova, 6),
], [], {
    npcs: [OldManSwords, Cobalion1],
});
TownList['Celestial Tower'] = new DungeonTown('Celestial Tower', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 7)]);
TownList['Reversal Mountain'] = new DungeonTown('Reversal Mountain', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new GymBadgeRequirement(BadgeEnums.Jet)]);
TownList['Seaside Cave'] = new DungeonTown('Seaside Cave', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 24),
    new TemporaryBattleRequirement('Plasma Shadow 1'),
    new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 14),
]);
TownList['Plasma Frigate'] = new DungeonTown('Plasma Frigate', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [
    new OneFromManyRequirement([
        new MultiRequirement([
            new GymBadgeRequirement(BadgeEnums.Wave),
            new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 14),
            new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 15, GameConstants.AchievementOption.less),
        ]),
        new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 16),
        new QuestLineCompletedRequirement('Hollow Truth and Ideals'),
    ]),
], [TemporaryBattleList['Colress 3'], TemporaryBattleList['Plasma Shadow 2'], TemporaryBattleList['Plasma Shadow 3'], TemporaryBattleList['Plasma Shadow 4']], {
    npcs: [GiantChasmColress, GiantChasmShadowTriad],
});
TownList['Giant Chasm'] = new DungeonTown('Giant Chasm', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Plasma Frigate')),
    new QuestLineStepCompletedRequirement('Hollow Truth and Ideals', 15),
], [TemporaryBattleList['Ghetsis 1'], TemporaryBattleList['Ghetsis 2'], TemporaryBattleList['Kyurem 2'], TemporaryBattleList['Kyurem 3']], {
    npcs: [Cobalion6, Cobalion7, Terrakion2, Virizion3],
});
TownList['Cave of Being'] = new DungeonTown('Cave of Being', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 23)]);
TownList['Abundant Shrine'] = new DungeonTown('Abundant Shrine', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 23),
    new RouteKillRequirement(10, GameConstants.Region.unova, 14),
    new ObtainedPokemonRequirement('Tornadus'),
    new ObtainedPokemonRequirement('Thundurus'),
]);
TownList['Victory Road Unova'] = new DungeonTown('Victory Road Unova', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 23)], [TemporaryBattleList['Terrakion 1']], {
    npcs: [Terrakion1],
});
TownList['Twist Mountain'] = new DungeonTown('Twist Mountain', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new OneFromManyRequirement([
        new MultiRequirement([
            new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion),
            new RouteKillRequirement(10, GameConstants.Region.unova, 7),
        ]),
        new RouteKillRequirement(10, GameConstants.Region.unova, 8),
    ])], undefined, {
    npcs: [IceRock],
});
TownList['Dragonspiral Tower'] = new DungeonTown('Dragonspiral Tower', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new OneFromManyRequirement([
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Twist Mountain')),
        new RouteKillRequirement(10, GameConstants.Region.unova, 8),
    ])]);
TownList['Moor of Icirrus'] = new DungeonTown('Moor of Icirrus', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [
    new RouteKillRequirement(10, GameConstants.Region.unova, 8),
    new QuestLineStepCompletedRequirement('Swords of Justice', 2, GameConstants.AchievementOption.more),
], [TemporaryBattleList['Swords of Justice 1']], {
    npcs: [Cobalion2, Cobalion3, Cobalion4],
});
TownList['Pinwheel Forest'] = new DungeonTown('Pinwheel Forest', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)], [], {
    npcs: [MossRock, Virizion1, Virizion2],
});
TownList.Dreamyard = new DungeonTown('Dreamyard', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 3)]);
TownList['P2 Laboratory'] = new DungeonTown('P2 Laboratory', GameConstants.Region.unova, GameConstants.UnovaSubRegions.Unova, [new RouteKillRequirement(10, GameConstants.Region.unova, 17)], [], {
    npcs: [P2LaboratoryColress, InvestigateP2],
});
//Kalos Shops
const AquacordeTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.SmallRestore,
]);
const SantaluneCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Token_collector,
    ItemList.Lucky_egg,
    ItemList.Mystery_egg,
    ItemList.Wonder_Chest,
    ItemList.Miracle_Chest,
]);
const FriseurFurfrouShop = new Shop([
    ItemList['Furfrou (Debutante)'],
    ItemList['Furfrou (Diamond)'],
    ItemList['Furfrou (Matron)'],
    ItemList['Furfrou (Dandy)'],
    ItemList['Furfrou (Kabuki)'],
    ItemList['Furfrou (Pharaoh)'],
    //ItemList['Furfrou (Heart)'],
], 'Friseur Furfrou');
const CamphrierTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xAttack,
    ItemList.MediumRestore,
    ItemList.Electric_egg,
    ItemList.Thunder_stone,
]);
const AmbretteTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Water_egg,
    ItemList.Water_stone,
]);
const CyllageCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.Upgrade,
    ItemList.Prism_scale,
]);
const DisguisedShop = new Shop([
    ItemList['Probably Not Pikachu'],
], 'Badly Disguised Shop', [new TemporaryBattleRequirement('Twerps')]);
const GeosengeTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xClick,
    ItemList.Fire_egg,
    ItemList.Fire_stone,
    ItemList.Kings_rock,
]);
const ShalourCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Fighting_egg,
    ItemList.Linking_cord,
    ItemList.Metal_coat,
    ItemList.Key_stone,
]);
const CoumarineCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.LargeRestore,
    ItemList.Grass_egg,
    ItemList.Leaf_stone,
    ItemList.Electirizer,
    ItemList.Magmarizer,
]);
const LaverreCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xAttack,
    ItemList.Lucky_incense,
    ItemList.Deepsea_tooth,
    ItemList.Deepsea_scale,
    ItemList.Sachet,
    ItemList.Whipped_dream,
]);
const DendemilleTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.Dowsing_machine,
    ItemList.Shiny_stone,
    ItemList.Dusk_stone,
    ItemList.Dawn_stone,
]);
const AnistarCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Moon_stone,
    ItemList.Sun_stone,
    ItemList.Razor_claw,
    ItemList.Razor_fang,
]);
const CouriwayTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Dragon_egg,
    ItemList.Dragon_scale,
]);
const SnowbelleCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Protector,
    ItemList.Dubious_disc,
    ItemList.Reaper_cloth,
]);
//Hoenn Flute Master
const FurfrouGemTrader = new GemMasterShop(GameConstants.GemShops.FurfrouGemTrader, 'Furfrou Gem Trader');
const KalosStoneSalesman = new GemMasterShop(GameConstants.GemShops.KalosStoneSalesman, 'Stone Emporium', [new TemporaryBattleRequirement('Kalos Stone Salesman')], true);
//Kalos NPCs
const LumioseEngineer = new NPC('Engineer', [
    'I\'m glad to be back in the city after so long at the Power Plant; it\'s so dusty out there!',
    'Rumor has it that if you conquer the Kalos Power Plant enough times, a strong Pokémon made out of Fire and Water will challenge you. But I bet you’d have to be the Champion before it finds you worthy… I certainly have never seen it!',
]);
const LumioseDexio = new NPC('Dexio', [
    'Hey there! I\'m one of Professor Sycamore\'s assistants. If you\'ve made it to Kalos, you probably have a pretty impressive Pokédex by now, right?',
    'When you\'ve got your Pokédex open, you can click on a Pokémon\'s image to see more detailed stats about the Pokémon.',
    'Even if you don\'t remember details like how many times you\'ve encountered a particular species in the wild, or how many times you\'ve captured a Pokémon, your Pokédex does!',
    'And if some of the rumours about Mega Stones are true... it\'ll be worth keeping track of those sorts of things.',
], {
    image: 'assets/images/npcs/Dexio (Gen 6).png',
});
const Lysandre1 = new NPC('Lysandre', [
    'Oh! You\'ve already met Professor Sycamore, how wonderful! That is a wonderful thing, indeed. You are one of the chosen ones.',
    'I am Lysandre. I\'ve tried to learn as much about Pokémon as I can to help build a brighter future. Professor Sycamore has taught me so much.',
    'Now listen! It is vital that this world becomes a better place. The people and Pokémon chosen to make the world better must work tirelessly to achieve this goal.',
    'Well, I\'ll be off. Please give Professor Sycamore my best. My desire... it is for a more beautiful world!',
], { image: 'assets/images/npcs/Team Flare Lysandre.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('A Beautiful World'), new QuestLineStepCompletedRequirement('A Beautiful World', 1, GameConstants.AchievementOption.less)]),
});
const Calem1 = new NPC('Calem', [
    'Hi $playername$, I just saw Diantha, a really cool and pretty actress, talking with a funny looking guy with orange spiky hair.',
    'He was such a weirdo. He kept telling her how everything should be beautiful forever and how he would end the world in an instant so that beauty never fades.',
    'Anyway, I\'m gonna continue forward. I\'ll wait for you in Ambrette Town.',
], {
    image: 'assets/images/npcs/Calem.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 0), new QuestLineStepCompletedRequirement('A Beautiful World', 2, GameConstants.AchievementOption.less)]),
});
const CamphrierFlabébéEnthusiast = new NPC('Flabébé Enthusiast', [
    'Ah, isn\'t Flabébé such an eye-catching Pokémon? All these different lovely colors…',
    'If you\'re searching for the yellow and blue kinds, look no further than the Farm!',
    'They simply can\'t resist berries that match their colors - just plant a few and they\'ll soon come wandering in.',
]);
const Calem2 = new NPC('Calem', [
    'Oh $playername$, you made it here. I wanted to learn about fossils so I went to the fossil lab, but the head scientist is not here.',
    'I heard he\'s in Glittering Cave but I also saw some weird guys in orange going there. Will you come with me and check it out?',
], {
    image: 'assets/images/npcs/Calem.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 1), new QuestLineStepCompletedRequirement('A Beautiful World', 3, GameConstants.AchievementOption.less)]),
});
const KalosFossilNpc1 = new NPC('Honeymooner Gal', [
    'I must find one! I simply must!',
    'I sent my husband to buy tickets for the aquarium but it was all a ploy to get some alone time so I can find him a Pokémon fossil found only here in Kalos!',
    'According to my brochure, there\'s a pretty cave past these cliffs that\'s filled with them! It says reviving a Jaw Fossil can give you a Tyrunt, the perfect anniversary gift for my sweetie pie!',
    'I WILL find a Jaw Fossil! Nothing will get in the way of seeing my booboo\'s smile! Anything is possible with the power of love! And don\'t you forget that either!',
], {
    image: 'assets/images/npcs/Tourist (female).png',
    requirement: new OneFromManyRequirement([
        new ObtainedPokemonRequirement('Tyrunt', true),
        new ObtainedPokemonRequirement('Amaura', true),
    ]),
});
const KalosFossilNpc2 = new NPC('Honeymooner Guy', [
    'I have to find one! I just have to!',
    'I told my wife I was going buy tickets for the aquarium in the town back there but little did she know it was a white lie so I could search for a Pokémon fossil found only here in Kalos!',
    'According to my travel guide, this cave is filled with them! It says reviving a Sail Fossil can nab you an Amaura, the perfect anniversary gift for my pumpkin!',
    'I MUST find a Sail Fossil! Nothing will get in the way of making my sunshine happy! She\'s taught me that anything is possible with the power of love!',
], {
    image: 'assets/images/npcs/Tourist (male).png',
    requirement: new OneFromManyRequirement([
        new ObtainedPokemonRequirement('Tyrunt', true),
        new ObtainedPokemonRequirement('Amaura', true),
    ]),
});
const KalosFossilNpc3 = new NPC('Honeymooner Couple', [
    'Oh, you\'ve found all the fossil Pokémon native to Kalos! We tried too, but our search ended in failure. No, that\'s not entirely true...!',
    'We may not have found those fossils, but our real goal was making each other smile! No Pokémon can compare to the feeling of catching your loved one in the same secret act as you! To think we split up to surprise each other with a fossil when the real present is the time we spend together!',
    'Safe travels, Trainer! And may the blessing of love follow you!',
], {
    image: 'assets/images/npcs/Honeymooners.png',
    requirement: new MultiRequirement([
        new ObtainedPokemonRequirement('Tyrunt'),
        new ObtainedPokemonRequirement('Amaura'),
    ]),
});
const FossilScientist = new NPC('Fossil Scientist', [
    'Why, hello! Here to look for fossils as well?',
    'What did you say? Teemphlair was here? What\'s that? A Pokémon?',
    'You are very lucky! I just now found a fossil! But it\'s one I already have, so I\'ll give it to you!',
    'Well, I\'m going back to the lab, goodbye!',
], {
    image: 'assets/images/npcs/Scientist (male).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 4), new QuestLineStepCompletedRequirement('A Beautiful World', 6, GameConstants.AchievementOption.less)]),
});
const CyllageStoneCollector = new NPC('Vivid Stone Collector', [
    'You see that beautiful gemstone in Grant\'s gym? There is no mistake, that is a genuine Mega Stone!',
    'Oh, what I would pay to add it to my collection! But money is of no help here. I bet Grant would be willing to part with it if I challenge him enough times and prove my skills to him.',
    'Unfortunately my skills as a collector far surpass my skills as a Pokémon trainer. But anyone who can become the Champion of Kalos surely can convince Grant that this stone will be in good hands.',
], {
    image: 'assets/images/npcs/Collector.png',
    requirement: new ObtainedPokemonRequirement('Tyranitar'),
});
const TeamFlareGrunt1 = new NPC('Team Flare Grunt', [
    'Stop right there! I remember you! You\'re the one who foiled our fossil-finding plans!',
    'And now you\'re here, standing around these stones. Do you have any idea what they even are?',
    'Of course you don\'t! You know nothing about the legend of 3000 years ago that says...',
    'Oh, whatever! Who cares about all of that? It\'s time for me to get some sweet revenge... with style!',
], {
    image: 'assets/images/npcs/Team Flare Grunt (male).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 6), new QuestLineStepCompletedRequirement('A Beautiful World', 8, GameConstants.AchievementOption.less)]),
});
const NotAsh = new NPC('Not Ash', [
    'Hey uh.... twerp. Would you happen to have any Dungeon Tokens? We\'ve, uh, run out.',
    'I\'ll give you that Pikachu costume my Inkay was wearing for some?',
    '...Give me a break. I know that you knew that the Pikachu was a costume. You could see right through us, as if you could just see its name over its head or something.',
], {
    image: 'assets/images/npcs/Not Ash.png',
    requirement: new TemporaryBattleRequirement('Twerps'),
});
const SharlourKorrina = new NPC('Korrina', [
    'What an explosive battle! I could tell that you didn\'t hold anything back!',
    'To Mega Evolve your Lucario, you need an even stronger bond!',
    'You can follow your progress in your Pokédex.',
    'When your bond is strong enough, you can Mega Evolve it using a Key Stone! You can buy them in this city!',
], {
    image: 'assets/images/npcs/Korrina.png',
    requirement: new TemporaryBattleRequirement('Korrina'),
});
const CoumarineBirdwatcher = new NPC('Birdwatcher', [
    'I\'ve heard there is a cave you can find if you go out on the ocean a little ways.',
    'Apparently defeating a strong creature there unleashes some energy.',
    'There are rumors that the energy calls some legendary birds to roam Kalos!',
]);
const CoumarineElectricTrainer = new NPC('Electric Trainer', [
    'My Ampharos has gotten a boost since a friendly soul gave me an Ampharosite!',
    'Luckily my Ampharos was already strong enough to use it!',
    'If you find that fella, tell him the code <b>DO-MAGEARNA-DREAM-OF-MAREEP?</b> and he might help you too!',
]);
const Diantha1 = new NPC('Diantha', [
    'Bonds... They really are important to us all, aren\'t they? When I\'m acting, I think I\'m always trying to forge a bond between myself and the character I\'m playing.',
    'If all I think about is how I\'m nothing like a character, then I\'ll just hate playing it.',
    'But if I focus on what I have in common with the character and put myself in her shoes, I might be able to understand her. It\'s the same for people, or Pokémon.',
    'Oh, never mind me! I\'m just babbling about my own things. Let\'s have a battle the next we meet, shall we? I\'m looking forward to it!',
], {
    image: 'assets/images/npcs/Diantha.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 8), new QuestLineStepCompletedRequirement('A Beautiful World', 10, GameConstants.AchievementOption.less)]),
});
const Lysandre2 = new NPC('Lysandre', [
    'Professor Sycamore told me how much stronger you\'ve become.',
    'That is truly wonderful. With that power, you can steer your future in a better direction!',
    'We can\'t just cover up the old filth with new filth!',
    'I implore you to consider what we need to do to change the world into a new, beautiful world!',
], { image: 'assets/images/npcs/Team Flare Lysandre.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 9), new QuestLineStepCompletedRequirement('A Beautiful World', 11, GameConstants.AchievementOption.less)]),
});
const Lysandre3 = new NPC('Lysandre', [
    'I\'m a descendant of the king\'s younger brother. That being said, that story is 3,000 years old, so it might not be entirely reliable.',
    'People can be divided into two groups. Those who give... And those who take... It\'s just as how the Kalos region\'s two Legendary Pokémon gave life and took life.',
    'I want to be the kind of person who gives... But in this world, some foolish humans exist who would show their strength by taking what isn\'t theirs. They\'re filth!',
    'Long, long ago, the king of Kalos sought to take everything for his own, and he created a terrible weapon. Then the fire of destruction was unleashed... That is the legend that has been passed down.',
    'Kalos is beautiful right now! There will be no foolish actions if the number of people and Pokémon do not increase. That being said, the future isn\'t decided. You can\'t be sure each day will be like the one before.',
    'What the king of Kalos did was reprehensible, but... The ultimate weapon did manage to wash the world clean of that era\'s filth. Thank you for listening.',
], { image: 'assets/images/npcs/Team Flare Lysandre.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 12), new QuestLineStepCompletedRequirement('A Beautiful World', 14, GameConstants.AchievementOption.less)]),
});
const SantaluneSageChen = new NPC('Sage Chen', [
    'Ever since growing old I\'m no longer the Pokémon Trainer that I used to be. Now I always like to keep my garden full of Kasib Berries.',
    'One day, I forgot to harvest them, and within its withered husk, I found a small stone that enabled my Banette to perform a Mega Evolution.',
], {
    image: 'assets/images/npcs/Sage.png',
    requirement: new ObtainedPokemonRequirement('Banette'),
});
const LaverreFurisodeGirlKatherine = new NPC('Furisode Girl Katherine', [
    'Don\'t you find Goomy to be an interesting Pokémon? I certainly think so, even though it isn\'t a problem for my Pokémon~',
    'I\'ve heard its evolutionary line loves damp conditions, and apparently if you train a Sliggoo during rainy or foggy weather something marvelous happens!',
], { image: 'assets/images/npcs/Furisode Girl Katherine.png' });
const LaverreGengariteAster1 = new NPC('Hex Maniac Aster', [
    'I\'m shocked... You have a Pokédex, but you still don\'t know... you really don\'t know anything about Pokémon connected to Gengar, do you?',
    'Well then, I guess I\'ll just have to keep this wonderful item I was going to give you...',
    'If you want to change my mind... you will have to encounter at least 666 wild Gastly, 444 wild Haunter, and 13 wild Gengar.',
    'And do bring a Gengar of your own, won\'t you?',
], {
    image: 'assets/images/npcs/Hex Maniac.png',
    requirement: new OneFromManyRequirement([
        new StatisticRequirement(['pokemonEncountered', PokemonHelper.getPokemonByName('Gastly').id], 666, undefined, GameConstants.AchievementOption.less),
        new StatisticRequirement(['pokemonEncountered', PokemonHelper.getPokemonByName('Haunter').id], 444, undefined, GameConstants.AchievementOption.less),
        new StatisticRequirement(['pokemonEncountered', PokemonHelper.getPokemonByName('Gengar').id], 13, undefined, GameConstants.AchievementOption.less),
        new ObtainedPokemonRequirement('Gengar', true)
    ]),
});
const LaverreGengariteAster2 = new NPC('Hex Maniac Aster', [
    'Some Pokémon evolve when exposed to a Linking Cord, or sent through a trade.',
    'That\'s right. Haunter is one of those Pokemon.',
    'I don\'t have enough Quest Points to buy a Linking Cord, but a girl named Mindy from Snowpoint City offered to trade me her Haunter for a Medicham.',
    'Hopefully I\'ll have a Gengar soon...',
], { image: 'assets/images/npcs/Hex Maniac.png',
    requirement: new TemporaryBattleRequirement('Hex Maniac Aster'),
});
const LaverreMedichamite = new NPC('Black Belt', [
    'My partner Medicham and I are always training to become the strongest in the world.',
    'Our favorite way to train is by doing quests. Someday my Medicham even found a Mega Stone while claiming some.',
    'I can\'t quite remember what Quest Level we were at, but it was probably 16 or higher.',
], { image: 'assets/images/npcs/Black Belt.png',
    requirement: new ObtainedPokemonRequirement('Medicham'),
});
const PokéBallFactoryDirector = new NPC('Poké Ball Factory Director', [
    'You saved us! Thank you so much! You\'re an astounding Pokémon Trainer.',
    'Very well, then. I want to show my appreciation. I\'ll give you a Master Ball.',
    'I have a feeling you will put it to great use. You\'re different from those Team Flare people.',
    'What were they planning to accomplish by taking all the Poké Balls for themselves...',
], { image: 'assets/images/npcs/Gentleman (Gen 4).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 14), new QuestLineStepCompletedRequirement('A Beautiful World', 16, GameConstants.AchievementOption.less)]),
});
const DendemilleDogLover = new NPC('Dubious Dog-loving Duke', [
    'Dog Pokémon are the best of all! I\'m particularly fond of Houndour - I\'ve caught about five hundred of them.',
    'There\'s no such thing as a cold night in my house, no sir! The most fierce chill of winter is completely defeated by their warm, cozy presence.',
    'But recently, now that I\'ve got so many Houndour, they have been acting rather curiously.',
    'When the weather turns really sunny, they\'ll all run barking out onto Route 16. Honestly, it\'s quite a racket, and has gotten me into no small amount of trouble.',
    'They come wandering back when the weather changes, though. I wonder if a strong Pokémon is calling them?',
    'You could build your own Houndour pack and find out, but if it\'s strong enough to call five hundred Pokémon, it probably wouldn\'t give anyone weaker than Diantha the time of day.',
], { image: 'assets/images/npcs/Gentleman.png',
});
const DendemilleWolfLover = new NPC('Worrisome Wolf-loving Woman', [
    'I adore wolf Pokémon! The most precious of all have to be the brave little Electrike - I\'ve gathered five hundred of the darlings in my home.',
    'They\'re so loyal, and so fast! I give them letters to take to a friend in Galar in the morning, and I have a response back by supper!',
    'But now that I have so many of them, their behaviour has taken a... regrettable turn.',
    'When storms come along the horizon, they\'ll run en masse out to Route 16.',
    'They fortunately do return home when the weather changes, at least. I wonder what sort of creature is calling them? A strong Pokémon, perhaps?',
    'I\'ve been debating asking someone else to collect five hundred of their own Electrike and investigate, but if it can call such a fearsome pack with its presence alone, I don\'t imagine anyone less than Diantha herself could handle it.',
], { image: 'assets/images/npcs/Madame.png',
});
const ProfessorSycamore1 = new NPC('Prof. Sycamore', [
    'Hello $playername$! Do you remember the Pokémon Lysandre mentioned in that café? Kalos\'s Legendary Pokémon are called... Xerneas and Yveltal!',
    'Apparently, these Pokémon can control energy or absorb energy, respectively. Xerneas gives life energy to plants and Pokémon, whereas Yveltal steals all of the spirits around it.',
    'When they lose all of their vitality, they go to sleep in a secret place. It would be absolutely astounding if you found it!',
    'By the way, I heard Frost Cavern has a lot of cool Pokémon, why don\'t you go check it out?',
], { image: 'assets/images/npcs/Sycamore.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 15), new QuestLineStepCompletedRequirement('A Beautiful World', 17, GameConstants.AchievementOption.less)]),
});
const AnistarKalosRoamerNPC = new RoamerNPC('Hex Maniac Melanie', [
    'The spirits tell me roaming Pokémon have been spotted on {ROUTE_NAME}!',
], GameConstants.Region.kalos, RoamingPokemonList.findGroup(GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos), 'assets/images/npcs/Hex Maniac.png');
const KalosTVNews = new NPC('Kalos TV News', [
    'Pokémon Trainers. I come to you to make an important announcement. Listen well.',
    'Team Flare will revive the ultimate weapon, eliminate everyone who isn\'t in our group, and return the world to a beautiful, natural state.',
    'Unproductive fools are consuming our future... If nothing changes, the world will become ugly and conflicts will raze the land from end to end.',
    'I repeat. We will use the ultimate weapon and wipe the slate clean. I\'m sorry, those of you who are not members of Team Flare, but this is adieu to you all.',
], { image: 'assets/images/npcs/Team Flare Lysandre.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 18), new QuestLineStepCompletedRequirement('A Beautiful World', 20, GameConstants.AchievementOption.less)]),
});
const Lysandre4 = new NPC('Lysandre', [
    'Welcome. I guess you found my secret labs, inside my own café. The world was just too vast...and too full of fools that I couldn\'t save through my hard work alone...',
    'That\'s why I decided the only way to save the world was to take it all for myself. I don\'t expect that I will ever make you understand how I think and feel...',
    'Try to stop the ultimate weapon if you must. Saving everything... The world is suffering because of this absurd dream...',
], { image: 'assets/images/npcs/Team Flare Lysandre.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 19), new QuestLineStepCompletedRequirement('A Beautiful World', 21, GameConstants.AchievementOption.less)]),
});
const AZ1 = new NPC('AZ', [
    'Listen, trainer who will face Lysandre. A terribly long time ago... There was a man and a Pokémon. A war began. The man\'s beloved Pokémon took part in the war.',
    'The Pokémon died. The man wanted to bring the Pokémon back. No matter what it took. The man built a machine to give it life and succeeded.',
    'The lives of many Pokémon were taken to restore its life. The resurrected Pokémon left the man.',
    'The man had suffered too much. His rage had not subsided. He turned the machine into the ultimate weapon. The man became a bringer of destruction that ended the war.',
], { image: 'assets/images/npcs/AZ.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 21), new QuestLineStepCompletedRequirement('A Beautiful World', 23, GameConstants.AchievementOption.less)]),
});
const BlueButton = new NPC('Blue Button', [
    'You pressed it! Oh ho ho! You pressed the blue switch! Winner, winner! Congratulations!',
    'But I\'m still going to activate the ultimate weapon! I\'ll just use my remote, here! Click-click! And the power is ON!',
    'The ultimate weapon is reborn! The poisonous flower has bloomed! All shall perish! Except for Team Flare! Look at Geosenge! It has bloomed in Geosenge Town!',
    'The boss\'s dream of creating a beautiful world will come true! Add it all up, and it equals... a victory for our SCIENCE!',
], { image: 'assets/images/npcs/Team Flare Xerosic.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 23), new QuestLineStepCompletedRequirement('A Beautiful World', 24, GameConstants.AchievementOption.less)]),
});
const RedButton = new NPC('Red Button', [
    'You pushed it! Oh ho ho! You pushed the little red button! Too bad...for you!',
    'Pushing that button has enabled us to use the ultimate weapon! Don\'t feel too down, though. I would have activated it even if you had guessed correctly.',
    'The ultimate weapon is reborn! The poisonous flower has bloomed! All shall perish! Except for Team Flare! Look at Geosenge! It has bloomed in Geosenge Town!',
    'The boss\'s dream of creating a beautiful world will come true! Add it all up, and it equals... a victory for our SCIENCE!',
], { image: 'assets/images/npcs/Team Flare Xerosic.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 23), new QuestLineStepCompletedRequirement('A Beautiful World', 24, GameConstants.AchievementOption.less)]),
});
const XerneasAZ = new NPC('AZ', [
    'So, you’ve managed to calm the Aura Duo… Quite the feat. But your Xerneas… it seems to have entered a dormant state. That form you see now is but a shadow of its true power. To awaken its full potential, you must strengthen its bond through training. Only then, when its strength has grown a hundredfold, will the light of its true form shine once more.',
], {
    image: 'assets/images/npcs/AZ.png',
    requirement: new MultiRequirement([new ObtainedPokemonRequirement('Xerneas'), new ObtainedPokemonRequirement('Xerneas (Active)', true)]),
});
const TeamFlareLysandre1 = new NPC('Team Flare Lysandre', [
    'The ultimate weapon\'s flower has finally bloomed above the soil. Don\'t you find its beauty captivating? As we speak, it draws its energy from the Legendary Pokémon.',
    'Even though resources, space, and energy on this planet are limited, the number of people and Pokémon has increased to an unsustainable level. Whether it\'s money or energy, the ones who steal are the ones who win in this world.',
    'Pokémon... Shall no longer exist. Pokémon are wonderful beings. Humans have worked with Pokémon, and we have helped each other flourish. But precisely because of that, they will inevitably become tools for war and theft!',
    'You\'re as strong as ever. But... It\'s too late! There\'s no hope for you now! Go down to the lowest floor, and see for yourself!',
], { image: 'assets/images/npcs/Team Flare Lysandre.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 29), new QuestLineStepCompletedRequirement('A Beautiful World', 31, GameConstants.AchievementOption.less)]),
});
const TeamFlareBossLysandre1 = new NPC('Team Flare Boss Lysandre', [
    'What a startling development! I never would\'ve thought you were really a chosen one!',
    'So THESE were the mighty Xerneas and Yveltal?! I expected more from Pokémon called legend! You desire help from people? YOU need help from a human?',
    'For me, victory is using the ultimate weapon. In order to do that, I need to reclaim the Legendary Pokémon\'s power and send that power to that weapon once again.',
    'I\'ll be taking the Legendary Pokémon back now! This time, I won\'t lose.',
], { image: 'assets/images/npcs/Team Flare Boss Lysandre.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('A Beautiful World', 31), new QuestLineStepCompletedRequirement('A Beautiful World', 33, GameConstants.AchievementOption.less)]),
});
const EternalFloetteGift = new PokemonGiftNPC('AZ', [
    'Floette... It\'s been 3,000 years...',
    'And with you... another of your kind?',
    'Ah... it seems to be interested in you, $playername$. Would you like to take it with you?',
], 'Floette (Eternal)', 'assets/images/pokemon/670.05.png', { saveKey: 'eternalfloettegift', image: 'assets/images/npcs/AZ.png', requirement: new QuestLineCompletedRequirement('A Beautiful World') });
const CouriwayOldGentlemanHarold = new NPC('Old Gentleman Harold', [
    'I love going on walks at <b>dusk</b>. It\'s my favourite part of the day, everything\'s so calm...',
    'Though lately, I\'ve been hearing roars near the waterfalls, but I\'m too scared to see for myself what kind of monster is making those sounds.',
    'I would ask you to go, but I\'m sure you\'re really busy either dealing with Team Flare or the Pokémon League challenge.',
    'Once you are done, you could come back at dusk. Maybe you can do something about it...',
], { image: 'assets/images/npcs/Gentleman (Gen 4).png',
    requirement: new TemporaryBattleRequirement('Team Flare Boss Lysandre 2', 1, GameConstants.AchievementOption.less),
});
const KiloudeConfusedHiker = new NPC('Confused Hiker', [
    'Whoa! What the- Where am I? How did I get here? Last thing I can remember I was in Reflection Cave when this little Pokémon with hoops threw something at me… Oh you’ve beaten the Pokémon League? Maybe you can find it roaming around the region so you can tame that little prankster. Now how am I gonna get home…',
], { image: 'assets/images/npcs/Hiker.png' });
const ProfSycamore = new ProfNPC('Prof. Sycamore', GameConstants.Region.kalos, 'You\'re encountering Pokémon at a really good clip, aren\'t you? Congratulations! You completed the Pokédex!', 'Onward to Alola, shall we?', 'assets/images/npcs/Sycamore.png');
const MysteryFan = new NPC('Mystery Fan', [
    'I\'ve heard a Pokémon detective is sniffing around here for mysteries! He might be interested in an enigmatic berry, too.',
]);
const Spelunker = new NPC('Spelunker', [
    'I\'ve heard that a hidden realm lies beneath this cave, ruled by a Pokémon Princess. She might come out for a powerful and helpful trainer.',
    'That would be big news, sure to be reported on local bulletin boards!',
]);
const ExamineAegislash = new PokemonGiftNPC('Millis and Argus Steels\' Aeglislash', [
    '<i>Aegislash wants to join you on your adventure.</i>',
], 'Aegislash (Blade)', 'assets/images/pokemon/681.01.png', { requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Princess Diancie', 4, GameConstants.AchievementOption.more), new ObtainedPokemonRequirement('Aegislash (Blade)', true)]) });
const ThanksDiancie = new NPC('Princess Diancie', [
    'Thank you for your help saving the Diamond Domain. I will be waiting for you in Reflection Cave.',
    'There are many threats in this world, and I think we will both be safer if we work together!',
], {
    image: 'assets/images/pokemon/719.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Princess Diancie', 6), new QuestLineStepCompletedRequirement('Princess Diancie', 8, GameConstants.AchievementOption.less)]),
});
const KalosStoneSalesman1 = new NPC('Stone Salesman', [
    'I\'m hunting for rare stones! If I find any extras, I\'ll sell you some!',
], {
    requirement: new TemporaryBattleRequirement('Kalos Stone Salesman', 1, GameConstants.AchievementOption.less),
});
const KalosStoneSalesman2 = new NPC('Stone Salesman', [
    'I\'m selling some peculiar stones for gems at my new shop, the Stone Emporium. Let me know if anything there strikes your fancy!',
], {
    requirement: new TemporaryBattleRequirement('Kalos Stone Salesman'),
});
const Baraz1 = new NPC('Baraz', [
    'Hello, $playername$! My name is Baraz, and my people have a complicated history with Hoopa.',
    'I have come to this region to search for a Prison Bottle, in which the spirit of a powerful Hoopa is bound.',
    'Can you help with my search? My search indicates it is nearby, maybe one of the local Psychic Pokémon has it?',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Clash of Ages', 0), new QuestLineStepCompletedRequirement('Clash of Ages', 2, GameConstants.AchievementOption.less)]),
});
const Baraz2 = new NPC('Baraz', [
    '$playername$! No luck?',
    'Maybe beating the Pokémon isn\'t enough. Try catching some of these Psychic Pokémon.',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Clash of Ages', 2), new QuestLineStepCompletedRequirement('Clash of Ages', 3, GameConstants.AchievementOption.less)]),
});
const Baraz3 = new NPC('Baraz', [
    'There\'s only one Pokémon who could keep the Prison Bottle from us for so long: Hoopa!',
    'You\'ll have to catch a ton before you find the Prison Bottle. Maybe... 100?',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Clash of Ages', 4), new QuestLineStepCompletedRequirement('Clash of Ages', 6, GameConstants.AchievementOption.less)]),
});
const Baraz4 = new NPC('Baraz', [
    'Wow, you caught 100 that fast?',
    'No? There\'s no other way, I\'m sorry...',
    '<i>While Baraz is talking, a hoop appears behind him and the Prison Bottle falls out.</i>',
    'Aha! There it is!',
    '<i>Baraz grabs the Prison Bottle, and an eerie glow surrounds him. A massive Pokémon picks him up and flies away into a nearby hoop.</i>',
], {
    image: 'assets/images/items/quest/Prison_Bottle.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Clash of Ages', 6), new QuestLineStepCompletedRequirement('Clash of Ages', 8, GameConstants.AchievementOption.less)]),
});
const VivillonPhotobook = new NPC('Vivillon Photobook', [
    '<i>Viola has sent some of her Vivillon photographs in to the local Pokémon Center as a photobook, to celebrate the Lunar New Year. You flip through the pages...</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookFancyMeadow.png" style="max-width:100%; height:auto"/>',
    '<i>You see both a Meadow and a Fancy Vivillon flying together in the skies above Kalos. Strangely, the Meadow Vivillon is wearing a necklace of exotic flowers, and the Fancy has a tiny tea cup in its grip.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookMarine.png" style="max-width:100%; height:auto"/>',
    '<i>You see a Marine Vivillon flying above the surface of a lake. It\'s got one foot trailing through the water.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookModern.png" style="max-width:100%; height:auto"/>',
    '<i>You see what was seemingly meant to be a photo of a Pokémon with a bulbous purple tail. However, a Modern Vivillon has jumped in front, and you can\'t get a good look at the other Pokémon.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookJungle.png" style="max-width:100%; height:auto"/>',
    '<i>You see a Jungle Vivillon resting on a blue frog-like Pokémon. The two of them seem to be in the center of a deep bog, but neither looks very concerned.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookMonsoon.png" style="max-width:100%; height:auto"/>',
    '<i>You see a Monsoon Vivillon. It\'s been startled by a light shone in its face. As far as you can see, the area around the spotlight is darker than pitch.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookTundra.png" style="max-width:100%; height:auto"/>',
    '<i>You see a Tundra Vivillon, watching a conveyor belt full of Poké Balls. A worker in the background looks mildly perplexed, as if he was expecting a different Pokémon there.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookSun.png" style="max-width:100%; height:auto"/>',
    '<i>You see a Sun Vivillon bursting through a cloud of smoke. It\'s sweating, but seems to be enjoying itself.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookArchipelago.png" style="max-width:100%; height:auto"/>',
    '<i>You see an Archipelago Vivillon staring in shock at a swaying pillar. A Hoothoot sits next to it, completely unfazed.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookElegant.png" style="max-width:100%; height:auto"/>',
    '<i>You see an Elegant Vivillon frantically pulling at a doorknob. A Klefki seems to be giggling in the background.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookOcean.png" style="max-width:100%; height:auto"/>',
    '<i>You see an Ocean Vivillon snoozing peacefully. An Audino is carefully laying a blanket atop it.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookContinental.png" style="max-width:100%; height:auto"/>',
    '<i>You see a shocked Continental Vivillon staring into a chest. A Voltorb stares back, already primed to explode.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookRiver.png" style="max-width:100%; height:auto"/>',
    '<i>You see a River Vivillon flying through a forest. A spooky old mansion is in the background.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookPolar.png" style="max-width:100%; height:auto"/>',
    '<i>You see a Polar Vivillon peering over the edge of a tower. Clouds travel distantly below.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookSandstorm.png" style="max-width:100%; height:auto"/>',
    '<i>You see a Sandstorm Vivillon atop some desert ruins. It\'s trying to communicate with a large, orange moth-like Pokémon.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookGarden.png" style="max-width:100%; height:auto"/>',
    '<i>You see a Garden Vivillon playing in a field of flowers. The flowers extend far, far into the distance...</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookHighPlains.png" style="max-width:100%; height:auto"/>',
    '<i>You see a High Plains Vivillon dancing with a group of Clefairy. Their dance is illuminated only by the full moon.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookSavanna.png" style="max-width:100%; height:auto"/>',
    '<i>You see a Savanna Vivillon running for its life through a ruined tower. Several dragon-type Pokémon are chasing it relentlessly.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookIcySnow.png" style="max-width:100%; height:auto"/>',
    '<i>You see an Icy Snow Vivillon bundled up with its trainer. It\'s enjoying a much-needed warm cup of cocoa to counteract the icy cave around it.</i>',
    '<img src="assets/images/npcs/textbody/VivillonPhotobookPokéBall.png" style="max-width:100%; height:auto"/>',
    '<i>Lastly, you see a Poké Ball Vivillon in a darkened mall. It\'s trying to scare the camerawoman, completely unaware of the sinister eyes peering from the darkness behind it.</i>',
], {
    requirement: new MultiRequirement([
        new QuestLineCompletedRequirement('The Great Vivillon Hunt!'),
        new SpecialEventRequirement('Lunar New Year'),
    ]),
});
const FriendlyAttendant = new NPC('Friendly Attendant', [
    'Welcome to the Friend Safari!',
    'This place is a lot like the Kanto Safari Zone, except we get a much wider variety of Pokémon coming through here.',
    'Our park staff stocks the Safari with different hard-to-find Pokémon every day. Many of these Pokémon can\'t be caught anywhere else in the world!',
    'As new and rare types of Pokémon are discovered, park staff will add them to our rotation of potential stock!',
], { image: 'assets/images/npcs/Pokemon Ranger (female).png' });
const BugCatcherScizor = new NPC('Bug Catcher Elliot', [
    'I heard there was a stone hidden in the Friend Safari that makes Scizor stronger!',
    'It takes a very experienced trainer to find it, though.',
], { image: 'assets/images/npcs/Bug Catcher.png' });
const AnomalyMewtwo2 = new NPC('Anomaly Mewtwo', [
    '<i>This place is... beautiful. I am amazed such a place truly exists.</i>',
    '<i>.......Thank you.</i>',
    '<i>I would like to give you something, but first, may I ask two things of you?</i>',
    '<i>First, I would like to gather 110,000 each of Psychic and Fighting Gems to boost the power of my attacks.</i>',
    '<i>If you could gather 60,000 of each I can take care of the rest.</i>',
    '<i>Also, you have heard of Twisted Spoons, yes? They are items that greatly boost the power of psychic type Pokémon.</i>',
    '<i>When I was created, I had an enhanced version of this item created for me. I have heard it is now in the hands of an organisation named Team Plasma, in an area named P2 Laboratory.</i>',
    '<i>I would greatly appreciate it if you would retrieve this item for me.</i>',
], {
    image: 'assets/images/pokemon/150.02.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('An Unrivaled Power', 13), new QuestLineStepCompletedRequirement('An Unrivaled Power', 15, GameConstants.AchievementOption.less)]),
});
const AnomalyMewtwo3 = new NPC('Anomaly Mewtwo', [
    '<i>I am even more in your debt. But there is one more thing I would like to ask of you.</i>',
    '<i>Would you be willing to fight me, one last time, in this new home you have given me?</i>',
    '<i>With my Twisted Spoon in hand, my moves boosted by Gems, and my Mega Evolution, I can finally show you the true heights of my power!</i>',
], {
    image: 'assets/images/pokemon/150.02.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('An Unrivaled Power', 15), new QuestLineStepCompletedRequirement('An Unrivaled Power', 17, GameConstants.AchievementOption.less)]),
});
const AnomalyMewtwo4 = new NPC('Anomaly Mewtwo', [
    '<i>Hah! Your strength is truly unyielding!</i>',
    '<i>I would like to apologise for accusing you of merely possessing the Mewtwo in your care. It is clear that you greatly care for it, as well as all your other Pokémon. Take this.</i>',
    '</i></br><img src="assets/images/megaStone/Mewtwonite_Y.png"/></br><i>You obtained the Mewtwonite Y!</i>',
    '<i>You are truly deserving of this Mega Stone. Use it to give your Mewtwo a truly unrivaled power.</i>',
], {
    image: 'assets/images/pokemon/150.02.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('An Unrivaled Power', 17), new QuestLineCompletedRequirement('An Unrivaled Power', GameConstants.AchievementOption.less)]),
});
//Kalos Towns
TownList['Vaniville Town'] = new Town('Vaniville Town', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new BulletinBoard(GameConstants.BulletinBoards.Kalos)], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_UnovaChampion)],
    npcs: [],
});
TownList['Aquacorde Town'] = new Town('Aquacorde Town', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [AquacordeTownShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 1)],
});
TownList['Santalune City'] = new Town('Santalune City', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [SantaluneCityShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 3)],
    npcs: [MysteryFan, VivillonPhotobook, SantaluneSageChen],
});
TownList['Lumiose City'] = new Town('Lumiose City', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [TemporaryBattleList['Sycamore 1'], DepartmentStoreShop, FriseurFurfrouShop, KalosStoneSalesman, TemporaryBattleList['Team Flare Lysandre 1'], TemporaryBattleList['Team Flare Xerosic'], TemporaryBattleList.AZ, TemporaryBattleList.Merilyn, TemporaryBattleList['Grand Duchess Diantha'], TemporaryBattleList['Kalos Stone Salesman']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 4)],
    npcs: [ProfSycamore, LumioseDexio, LumioseEngineer, Lysandre1, Calem1, Lysandre3, Lysandre4, AZ1, BlueButton, RedButton, EternalFloetteGift, KalosStoneSalesman1, KalosStoneSalesman2],
});
TownList['Camphrier Town'] = new Town('Camphrier Town', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [CamphrierTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Camphrier Town'])], {
    requirements: [new TemporaryBattleRequirement('Tierno 1')],
    npcs: [CamphrierFlabébéEnthusiast],
});
TownList['Parfum Palace'] = new Town('Parfum Palace', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new ShardTraderShop(GameConstants.ShardTraderLocations['Parfum Palace'], 'Furfrou Shard Trader', true), FurfrouGemTrader], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 6)],
});
TownList['Ambrette Town'] = new Town('Ambrette Town', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [AmbretteTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Ambrette Town']), new GenericTraderShop('FossilAmbretteFossilLab', 'Ambrette Fossil Lab')], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 8)],
    npcs: [KalosFossilNpc1, KalosFossilNpc3, Calem2],
});
TownList['Cyllage City'] = new Town('Cyllage City', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [CyllageCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Cyllage City']), TemporaryBattleList['Marquis Grant']], {
    requirements: [new QuestLineStepCompletedRequirement('A Beautiful World', 5)],
    npcs: [CyllageStoneCollector],
});
TownList['Disguised Shop'] = new Town('Disguised Shop', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [DisguisedShop, TemporaryBattleList.Twerps], {
    requirements: [
        new RouteKillRequirement(10, GameConstants.Region.kalos, 10),
    ],
    npcs: [NotAsh],
    ignoreAreaStatus: true,
});
TownList['Geosenge Town'] = new Town('Geosenge Town', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [GeosengeTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Geosenge Town']), new MoveToDungeon(dungeonList['Team Flare Secret HQ']), TemporaryBattleList['Team Flare Grunt 2']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 10)],
    npcs: [TeamFlareGrunt1],
});
TownList['Shalour City'] = new Town('Shalour City', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [ShalourCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Shalour City']), TemporaryBattleList.Korrina, TemporaryBattleList.Riot, TemporaryBattleList['Millis and Argus Steel']], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reflection Cave'))],
    npcs: [SharlourKorrina, ExamineAegislash, ThanksDiancie],
});
TownList['Coumarine City'] = new Town('Coumarine City', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [CoumarineCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Coumarine City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 12)],
    npcs: [CoumarineBirdwatcher, CoumarineElectricTrainer, Diantha1, Lysandre2],
});
TownList['Laverre City'] = new Town('Laverre City', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [LaverreCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Laverre City']), TemporaryBattleList['Hex Maniac Aster']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 14)],
    npcs: [LaverreFurisodeGirlKatherine, LaverreGengariteAster1, LaverreGengariteAster2, LaverreMedichamite],
});
TownList['Dendemille Town'] = new Town('Dendemille Town', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [DendemilleTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Dendemille Town'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 15)],
    npcs: [DendemilleWolfLover, DendemilleDogLover, ProfessorSycamore1],
});
TownList['Anistar City'] = new Town('Anistar City', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [AnistarCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Anistar City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 17)],
    npcs: [AnistarKalosRoamerNPC, KalosTVNews],
});
TownList['Couriway Town'] = new Town('Couriway Town', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [TemporaryBattleList['Sycamore 2'], CouriwayTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Couriway Town']), TemporaryBattleList['Team Flare Boss Lysandre 2']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.kalos, 18)],
    npcs: [CouriwayOldGentlemanHarold],
});
TownList['Snowbelle City'] = new Town('Snowbelle City', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [SnowbelleCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Snowbelle City'])], {
    requirements: [new TemporaryBattleRequirement('Trevor')],
});
TownList['Kiloude City'] = new Town('Kiloude City', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [TemporaryBattleList['Calem 6']], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)],
    npcs: [KiloudeConfusedHiker, Baraz1, Baraz2, Baraz3, Baraz4],
});
TownList['Pokémon League Kalos'] = new Town('Pokémon League Kalos', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [GymList['Elite Malva'], GymList['Elite Siebold'], GymList['Elite Wikstrom'], GymList['Elite Drasna'], GymList['Champion Diantha'], pokeLeagueShop()], {
    requirements: [
        new TemporaryBattleRequirement('Calem 5'),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Kalos')),
    ],
});
TownList['Friend Safari'] = new Town('Friend Safari', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new SafariTownContent('Enter Friend Safari')], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)],
    npcs: [FriendlyAttendant, BugCatcherScizor],
});
//Kalos Dungeons
TownList['Santalune Forest'] = new DungeonTown('Santalune Forest', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 2)]);
TownList['Connecting Cave'] = new DungeonTown('Connecting Cave', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new TemporaryBattleRequirement('Trevor & Tierno')]);
TownList['Glittering Cave'] = new DungeonTown('Glittering Cave', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 9), new QuestLineStepCompletedRequirement('A Beautiful World', 2)], [TemporaryBattleList['Team Flare Grunt 1']], {
    npcs: [FossilScientist, KalosFossilNpc2],
});
TownList['Reflection Cave'] = new DungeonTown('Reflection Cave', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 11)], [], {
    npcs: [Spelunker],
});
//Tower of Mastery?
TownList['Sea Spirit\'s Den'] = new DungeonTown('Sea Spirit\'s Den', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 23)]);
TownList['Poké Ball Factory'] = new DungeonTown('Poké Ball Factory', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new GymBadgeRequirement(BadgeEnums.Fairy)], [], {
    npcs: [PokéBallFactoryDirector],
});
TownList['Kalos Power Plant'] = new DungeonTown('Kalos Power Plant', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 13), new GymBadgeRequirement(BadgeEnums.Plant), new QuestLineStepCompletedRequirement('A Beautiful World', 10)]);
TownList['Lost Hotel'] = new DungeonTown('Lost Hotel', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 15)]);
TownList['Frost Cavern'] = new DungeonTown('Frost Cavern', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new QuestLineStepCompletedRequirement('A Beautiful World', 16)], undefined, {
    npcs: [IceRock],
});
TownList['Team Flare Secret HQ'] = new DungeonTown('Team Flare Secret HQ', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new QuestLineStepCompletedRequirement('A Beautiful World', 24)], [TemporaryBattleList.Xerneas, TemporaryBattleList.Yveltal, TemporaryBattleList['Team Flare Boss Lysandre 1']], {
    npcs: [TeamFlareLysandre1, TeamFlareBossLysandre1, XerneasAZ],
});
TownList['Terminus Cave'] = new DungeonTown('Terminus Cave', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 18)]);
TownList['Pokémon Village'] = new DungeonTown('Pokémon Village', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [new RouteKillRequirement(10, GameConstants.Region.kalos, 20)], [], {
    npcs: [MossRock, AnomalyMewtwo2, AnomalyMewtwo3, AnomalyMewtwo4],
});
TownList['Victory Road Kalos'] = new DungeonTown('Victory Road Kalos', GameConstants.Region.kalos, GameConstants.KalosSubRegions.Kalos, [
    new GymBadgeRequirement(BadgeEnums.Iceberg),
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.kalos, 21),
        new RouteKillRequirement(10, GameConstants.Region.kalos, 22),
    ]),
]);
//Unknown Cave?
//Alola Shops
const IkiTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.SmallRestore,
]);
const HauoliCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Token_collector,
    ItemList.Lucky_egg,
    ItemList.Mystery_egg,
    ItemList.Wonder_Chest,
    ItemList.Miracle_Chest,
    ItemList.Shiny_stone,
    ItemList.Dusk_stone,
    ItemList.Dawn_stone,
]);
const HeaheaCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.xAttack,
    ItemList.MediumRestore,
    ItemList.Water_stone,
    ItemList.Kings_rock,
    ItemList.Metal_coat,
]);
const PaniolaTownShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Lucky_egg,
    ItemList.Grass_egg,
    ItemList.Fire_egg,
    ItemList.Water_egg,
]);
const RoadsideMotelShop = new Shop([
    ItemList.Beastball,
], 'Looker’s Exchange', [new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 1),
]);
const KonikoniCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
    ItemList.Fire_stone,
    ItemList.Linking_cord,
    ItemList.Soothe_bell,
]);
const AetherParadiseShop = new Shop([
    ItemList.Upgrade,
    ItemList['Type: Null'],
]);
const MalieCityShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.xClick,
    ItemList.LargeRestore,
    ItemList.Thunder_stone,
    ItemList.Electric_egg,
    ItemList.Electirizer,
    ItemList.Magmarizer,
]);
const TapuVillageShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Lucky_egg,
    ItemList.Razor_claw,
    ItemList.Razor_fang,
    ItemList.Ice_stone,
]);
const SeafolkVillageShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Token_collector,
    ItemList.Fighting_egg,
    ItemList.Deepsea_tooth,
    ItemList.Deepsea_scale,
    ItemList.Prism_scale,
    ItemList.Sachet,
    ItemList.Whipped_dream,
]);
const ExeggutorIslandShop = new Shop([
    ItemList.Dragon_egg,
    ItemList.Leaf_stone,
    ItemList.Dragon_scale,
    ItemList.Protector,
    ItemList.Dubious_disc,
    ItemList.Reaper_cloth,
]);
const AltaroftheSunneandMooneShop = new Shop([
    ItemList.Moon_stone,
    ItemList.Sun_stone,
    ItemList.Poipole,
]);
const ATreeMaybeShop = new Shop([
    ItemList.Power_Bracer,
    ItemList.Key_stone,
]);
//Silvally Typings Shops
const BrookletHillShop = new Shop([
    ItemList.Water_Memory_Silvally,
], 'Lana\'s Trade', [
    new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 5, GameConstants.AchievementOption.more), new ItemOwnedRequirement('Water_Memory_Silvally', 1, GameConstants.AchievementOption.less)]),
], true);
const LushJungleShop = new Shop([
    ItemList.Grass_Memory_Silvally,
], 'Mallow\'s Trade', [
    new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 7, GameConstants.AchievementOption.more), new ItemOwnedRequirement('Grass_Memory_Silvally', 1, GameConstants.AchievementOption.less)]),
], true);
const WelaVolcanoParkShop = new Shop([
    ItemList.Fire_Memory_Silvally,
], 'Kiawe\'s Trade', [
    new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 9, GameConstants.AchievementOption.more), new ItemOwnedRequirement('Fire_Memory_Silvally', 1, GameConstants.AchievementOption.less)]),
], true);
const HokulaniObservatoryShop = new Shop([
    ItemList.Electric_Memory_Silvally,
], 'Sophocles\'s Trade', [
    new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 11, GameConstants.AchievementOption.more), new ItemOwnedRequirement('Electric_Memory_Silvally', 1, GameConstants.AchievementOption.less)]),
], true);
const MountLanakilaShop = new Shop([
    ItemList.Ice_Memory_Silvally,
], 'Veteran Aristo\'s Trade', [
    new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 13, GameConstants.AchievementOption.more), new ItemOwnedRequirement('Ice_Memory_Silvally', 1, GameConstants.AchievementOption.less)]),
], true);
const ExeggutorIslandHillShop = new Shop([
    ItemList.Ground_Memory_Silvally,
], 'Hapu\'s Trade', [
    new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 15, GameConstants.AchievementOption.more), new ItemOwnedRequirement('Ground_Memory_Silvally', 1, GameConstants.AchievementOption.less)]),
], true);
// Magikarp Jump Shops
const MagikarpJumpGemTrade = new GemMasterShop(GameConstants.GemShops.MagikarpJumpGemTrader, 'Trade', [new GymBadgeRequirement(BadgeEnums.Heal_League)]);
const MagikarpJumpShadySalesMan = new Shop([
    ItemList['Magikarp Blue Raindrops'],
    ItemList['Magikarp Saucy Violet'],
], 'Shady Salesman', [new GymBadgeRequirement(BadgeEnums.Master_League)]);
//Alola NPCs
const IkiOutskirtsMom = new NPC('Scratch Cat Girl', [
    'I love cats very much, but dogs aren\'t so bad either.',
    'Out of all the dog-like Pokémon, I think Rockruff is definitely the most adorable. And it even has three evolutions! One during the day, one at night and one in between, from 5 to 6 o\'clock.',
    'What\'s that? AM or PM?',
    'Yes.',
], { image: 'assets/images/npcs/Scratch Cat Girl.png' });
const TrainerSchoolTeacher = new NPC('Teacher Emily', [
    'Just as Alola has multiple islands, its dungeons have multiple floors! Hurry to the ladder to find your way to the next floor.',
    'Watch the clock, if you make it to the next floor you\'ll get a time boost to help you find the boss.',
    'Good luck with your island challenge!',
], { image: 'assets/images/npcs/Teacher (gen7).png' });
const IkiKahuna = new NPC('Kahuna Hala', [
    'Welcome to Alola!',
    'Here we don\'t have gyms. We have the Island Challenge. On each of our four islands you will complete one or more trials.',
    'After completing all of an island\'s trials, you will battle that island\'s kahuna in a Grand trial.',
    'This island only has one trial: Captain Ilima\'s trial in Verdant Cavern, below the Melemele Woods. Come back here after clearing that challenge for your Grand trial battle.',
], {
    image: 'assets/images/npcs/Hala.png',
    requirement: new OneFromManyRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 1, GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Typing some Memories', 3, GameConstants.AchievementOption.more)]),
});
const VerdantCavernIlima = new NPC('Captain Ilima', [
    'Greetings. Captain Ilima here. In every locale where a captain holds his or her trials, you will encounter a particularly strong boss, known as a Totem Pokémon. To clear a Trial, all you have to do is defeat these Pokémon!',
    'Some Trial Sites are protected by different Pokémon depending on the time of day. The difficulty of each Trial isn\'t affected by these changes, but it makes for quite the interesting observance!',
], {
    image: 'assets/images/npcs/Ilima.png',
});
const LagunaKahuna = new NPC('Kahuna Hala', [
    'Dooot doo doo, just a kahuna on a stroll to the laguna. ♪',
], {
    image: 'assets/images/npcs/Hala.png',
    requirement: new QuestLineCompletedRequirement('Welcome to Paradise, Cousin!'),
});
const HeaheaCafeOwner = new NPC('Café Owner', [
    'Akala Island has three trials.',
    'Captain Lana\'s trial in Brooklet Hill, Captain Kiawe\'s trial in Wela Volcano Park and Captain Mallow\'s trial in Lush Jungle.',
    'For what it\'s worth, I say don\'t go to any of those places. Too wet, too hot and too... jungly. Why not stay here? Have a coffee! Enjoy the city!',
    'Or go to Konikoni City down south. You might even meet our kahuna there!',
], { image: 'assets/images/npcs/Owner.png' });
const HeaheaGentleman = new NPC('Gentleman', [
    'There\'s an ancient legend here on Akala Island that tells of Marshadow.',
    'It is said that when Marshadow is defeated, it sometimes leaves behind a rare crystallized fragment of its shadow.',
    'According to the legend this fragment is known as the Crystallized Shadow and if you reunite Marshadow with it, Marshadow will unlock a hidden potential.',
], {
    image: 'assets/images/npcs/Gentleman.png',
    requirement: new GymBadgeRequirement(BadgeEnums.Champion_Stamp),
});
const ProfBurnetAlola2 = new NPC('Professor Burnet', [
    'Long ago, Cosmog was called the child of the stars. Its powers seem to have some connection with Ultra Wormholes.',
    'The mysteries of the Ultra Wormhole and Ultra Beasts...  I would be very happy if I could somehow unravel them!',
    'You say I look familiar? Oh, you\'ve probably seen me with Kukui. He\'s my husband!',
], {
    image: 'assets/images/npcs/Professor Burnet (gen7).png',
    requirement: new QuestLineStepCompletedRequirement('Symbiotic Relations', 6),
});
const PikachuValleyPikachuGeneric = new NPC('Pikachu', [
    'Pikachu!',
    '<i>The Pikachu looks happy playing with all its friends!</i>',
], {
    image: 'assets/images/pokemon/25.png',
});
const PikachuValleyAlolaCap = new NPC('Pikachu', [
    'Pi-Pikachu!',
    '<i>The Pikachu is waving at you supportively! Its goodwill carries you forward on your journey to Alola Championship!</i>',
], {
    image: 'assets/images/pokemon/25.06.png',
    requirement: new GymBadgeRequirement(BadgeEnums.Champion_Stamp, GameConstants.AchievementOption.less),
});
const PikachuValleyPikachuWorldCap = new NPC('Pikachu', [
    'Pii-kachu!',
    '<i>The Pikachu is staring at you intently! Is it waiting for you to become stronger?</i>',
], {
    image: 'assets/images/pokemon/25.07.png',
    requirement: new MultiRequirement([new MaxRegionRequirement(GameConstants.Region.galar), new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion, GameConstants.AchievementOption.less)]),
});
const PaniolaTownActor = new NPC('Actor Meredith', [
    'I love Oricorio. I can tell you all about it!',
    'Each of the four islands in Alola has its own meadow, and each meadow has its own form of Oricorio. Each island, except for Akala Island. So you\'d think there\'s only three forms of Oricorio, right?',
    'Wrong! There is a fourth! Did you know you can find all of the Oricorio forms on the farm? One of them doesn\'t appear anywhere else!',
    'Each Oricorio form is attracted to the berry color that matches its own style. Red for Baile style, yellow for Pom-Pom style, pink for Pa\'u style and purple for Sensu style.',
    'You want to know which one can only be found on the farm? I\'m sure you can figure that out yourself. Simple process of elimination, really.',
], { image: 'assets/images/npcs/Actor.png' });
const RoyalAvenueSpectator = new NPC('Spectator', [
    'I like sneaking snacks inside the Battle Royal Dome. One time I snuck in pancakes and there were two trainers from Kanto who both had a Pikachu. I ended up sharing some with one.',
    'Weird thing is, both trainers evolved their Pikachu after the battle, but one had a different form from usual! Maybe there\'s something about Alola that makes certain Pokémon evolve differently? I would check my Evolution Items if I were you.',
], { image: 'assets/images/npcs/Preschooler (female).png' });
const KonikoniKahuna = new NPC('Kahuna Olivia', [
    'What do you mean Grand trials are just like gym battles? It\'s a totally different thing!',
    'Come fight me in our very special and unique brand new Pokémon League and see if you still think our Island Challenge is nothing special!',
], {
    image: 'assets/images/npcs/Olivia.png',
    requirement: new OneFromManyRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 1, GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Typing some Memories', 3, GameConstants.AchievementOption.more)]),
});
const MalieKahuna = new NPC('Kahuna Nanu', [
    'What do I think of Grand trials? They\'re just like gym battles. Yup, it\'s totally the same thing. They\'re even making a Pokémon League.',
    'What? Why are you looking at me like that? If you don\'t wanna battle, I\'m going home.',
], {
    image: 'assets/images/npcs/Nanu.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Child of the Stars', 7), new OneFromManyRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 1, GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Typing some Memories', 3, GameConstants.AchievementOption.more)])]),
});
const TapuWorker = new NPC('Worker Ovid', [
    'Yesterday was my first day working on Mount Lanakila. I was up there maintaining the paths to the new Pokémon League.',
    'My trusty Crabrawler was with me. He was smashing some rocks that were blocking the path, having a grand ol\' time like usual, when suddenly we were attacked by a wild Pokémon!',
    'After the battle, Crabrawler evolved! I didn\'t even know he could do that. He\'s so different now. But I still love him. He\'s my best friend, and he\'s even better at rock smashing now!',
], { image: 'assets/images/npcs/Worker (male).png' });
const PoTownNanu = new NPC('Officer Nanu', [
    'A trial-goer, huh? Figures. Look, I\'m not gonna fight someone who is taking on Team Skull. So...go. Just go.',
], {
    image: 'assets/images/npcs/Nanu.png',
    requirement: new QuestLineStepCompletedRequirement('Child of the Stars', 6, GameConstants.AchievementOption.less),
});
const PoTownHomeowner = new NPC('Office Worker Royce', [
    'My house! My car! MY LAWN! What did those Team Skull kids do!?',
], {
    image: 'assets/images/npcs/Office Worker (male).png',
    requirement: new QuestLineStepCompletedRequirement('Child of the Stars', 6),
});
const YungoosAetherHouse = new NPC('Yungoos', [
    'Grrrssssss',
], {
    image: 'assets/images/pokemon/734.png',
    requirement: new OneFromManyRequirement([new QuestLineStepCompletedRequirement('Child of the Stars', 5, GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Child of the Stars', 6)]),
});
const SeafolkCaptain = new NPC('Mina', [
    'We don\'t have a kahuna on Poni, so I don\'t have an actual trial or anything...',
    'Old man Nanu has been looking after our grand trials up until now. I\'m the captain and all, so I\'ve gotta come up with a trial.',
], {
    image: 'assets/images/npcs/Mina.png',
    requirement: new QuestLineStepCompletedRequirement('Eater of Light', 0, GameConstants.AchievementOption.less),
});
const SeafolkCaptainMina = new NPC('Captain Mina', [
    'My trial is in this town. Right there, inside my very own houseboat. Normally you\'d have to clear my trial to find our kahuna on Exeggutor Island, but I guess you took care of some things, huh?',
    'Well, in that case, I\'d better add a little something more. This is the final trial of your island challenge, after all. I hope you\'re ready for your toughest opponents yet!',
], {
    image: 'assets/images/npcs/Mina.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eater of Light', 0), new OneFromManyRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 1, GameConstants.AchievementOption.less), new QuestLineStepCompletedRequirement('Typing some Memories', 3, GameConstants.AchievementOption.more)])]),
});
const LanakilaColress = new NPC('Colress', [
    'It\'s been a while. You must be a formidable Trainer indeed if you are able to get Necrozma as one of your allies.',
    'Good! And this is from me! The Ultra Recon Squad asked me to develop a device that would be able to control Necrozma. But I improved it to my own liking! And now it is a device that makes it possible to draw out even more power from Necrozma!',
    '<img src="assets/images/npcs/textbody/N-Solarizer.png">',
    'Yes, in short, it makes it possible for Necrozma to fuse with the light of the Legendary Pokémon Solgaleo! This is the Colress Machine No. 1198, officially dubbed the N-Solarizer!',
    '<img src="assets/images/npcs/textbody/N-Lunarizer.png">',
    'In addition, this is the Colress Machine No. 1199, officially dubbed the N-Lunarizer! It makes it possible for Necrozma to fuse with the light of the Legendary Pokémon, Lunala!',
    'If you wish to make use of them, you will require light from Solgaleo and Lunala respectively. I believe that they may drop the crystallised form of this light if you defeat them in battle! I believe each of them will be able to make good use of their own light, as well.',
    'I believe Necrozma may drop a crystal of its own light, as well. Although I doubt it can make any use of it in its current state. Perhaps if it was already fused with the light of Solgaleo or Lunala....',
    'At any rate, I believe that a Trainer like you will be able to use both Alola\'s Legendary Pokémon and the fearsome power of Necrozma properly! I happen to know quite a bit about Pokémon fusion myself... But that is a different tale. Good luck in your battles!',
], {
    image: 'assets/images/npcs/Team Plasma (colress).png',
    requirement: new ObtainedPokemonRequirement('Necrozma'),
});
const ReconSquadAltar = new NPC('Ultra Recon Squad', [
    'Care for a Poipole? It only costs a few thousand Quest Points!',
], {
    image: 'assets/images/npcs/specialNPCs/Ultra Recon Squad (all).png',
    requirement: new QuestLineStepCompletedRequirement('Eater of Light', 0),
});
const AetherParadiseAlolaRoamerNPC = new RoamerNPC('Assistant Branch Chief Wicke', [
    'Some very rare Pokémon have been sighted on {ROUTE_NAME}. I hope we can learn more about them.',
], GameConstants.Region.alola, RoamingPokemonList.findGroup(GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland), 'assets/images/npcs/Assistant Branch Chief Wicke.png');
const ProfKukui = new ProfNPC('Prof. Kukui', GameConstants.Region.alola, 'This is truly an astounding feat! Congratulations on completing the Pokédex!', 'With that, you can stamp your ticket to the noble Galar region!', 'assets/images/npcs/Professor Kukui.png');
// Alola Story NPCs
const Lillie1 = new NPC('Mysterious Girl', [
    'Oh... Oh, thank goodness! So...you\'re also one of the professor\'s acquaintances? It\'s nice to meet you...',
    'I am so grateful to you for helping us out of that dangerous spot. Come on. Into the bag, Nebby.',
    'Oh...um...yes! You can call me Lillie. I know it\'s too much for me to ask it, but... Do you think you could see us back to town?',
    'So you will be taking part in the festival battle? I\'ll be sure to watch you and Hau.',
], {
    image: 'assets/images/npcs/specialNPCs/Lillie (nebby).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 0), new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 1, GameConstants.AchievementOption.less)]),
});
const Lillie2 = new NPC('Return Nebby to Lillie', [
    'Nebby! Oh thank goodness you\'re safe. Thank you $playername$, let me heal your Poké- No? Um, very well then.',
    'It seems Hau is outside on Route 3. Are you two having another battle?',
], {
    image: 'assets/images/npcs/specialNPCs/Lillie (nebby).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 8), new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 9, GameConstants.AchievementOption.less)]),
});
const Lillie3 = new NPC('Lillie', [
    'Nebby is... Its real home is far away from here. And I want to help it get home. Thank you for helping me. The two of us will be heading to the next island as well!',
    'Oh, and here, $playername$. Some Revives. It\'s the least I can do after all the running around I\'ve made you do.',
], {
    image: 'assets/images/npcs/Lillie.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 9), new QuestLineCompletedRequirement('Welcome to Paradise, Cousin!', GameConstants.AchievementOption.less)]),
});
const Lillie4 = new NPC('Meet with Lillie', [
    'I think Nebby might be interested in visiting the Ruins of Life. Apparently they house the sacred guardian of Akala Island. I wondered if you\'d like to come with us when we go to visit the ruins. I\'ll be here if you decide you want to come.',
    'By chance, have you spoken to Professor Burnet? She and Professor Kukui have been so kind, helping me investigate Nebby\'s origins. She\'s not here at the moment, but I\'d like introduce you.',
], {
    image: 'assets/images/npcs/Lillie.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Symbiotic Relations'), new QuestLineStepCompletedRequirement('Symbiotic Relations', 0, GameConstants.AchievementOption.less)]),
});
const ProfBurnetAlola1 = new NPC('Talk to Professor Burnet', [
    'Nebby\'s Pokémon species, Cosmog, used to be known as the child of the stars. Its modern name was coined by a researcher in Aether Paradise!',
    'Oh, where are my manners! Hi there! Have some Rare Candies! I\'m Burnet, a professor who researches Ultra Wormholes. They sometimes appear in the skies of Alola and give off similar signals to Cosmog\'s powers.',
    'Legends of Pokémon appearing from the Ultra Wormhole also exist and are called Ultra Beasts, but it\'s all legends and folktales. It\'s hard to know how much is true.',
], {
    image: 'assets/images/npcs/Professor Burnet (gen7).png',
    requirement: new MultiRequirement([new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lush Jungle')), new QuestLineStepCompletedRequirement('Symbiotic Relations', 5), new QuestLineStepCompletedRequirement('Symbiotic Relations', 6, GameConstants.AchievementOption.less)]),
});
const Lillie5 = new NPC('Talk to Lillie', [
    'There\'s an old book with myths about Alola\'s Legendary Pokémon here. It seems to suggest they came from another world and brought life to an heir that was to be protected by the island guardians.',
], {
    image: 'assets/images/npcs/Lillie.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Child of the Stars'), new QuestLineStepCompletedRequirement('Child of the Stars', 0, GameConstants.AchievementOption.less)]),
});
const Lillie6 = new NPC('Lillie', [
    'Nebby changed forms... and it\'s not moving...',
    '<img src="assets/images/pokemon/790.png">',
    'I feel like there\'s so much I have to do now... to save Nebby... to save my mother... That\'s why I\'m going to try my hardest! This is my Z-Powered form! Come on! Let\'s show the world what we can really do!',
], {
    image: 'assets/images/npcs/Lillie (z powered).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Child of the Stars', 12), new QuestLineStepCompletedRequirement('Child of the Stars', 13, GameConstants.AchievementOption.less)]),
});
const Gladion1 = new NPC('Gladion', [
    'The Sun Flute and the Moon Flute. When sounded together, it\'s said that they can call the Legendary Pokémon... That is, if you believe in old myths, anyway. I found one of them downstairs and gave it to Lillie.',
    'Here. Take this Master Ball with you. I\'m counting on you to help Lillie. This is the least I can do.',
    'Even if she is...like that, Lusamine is still our mother. We can\'t just leave her in the beast\'s world.',
], {
    image: 'assets/images/npcs/Gladion.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Child of the Stars', 12), new QuestLineStepCompletedRequirement('Child of the Stars', 13, GameConstants.AchievementOption.less)]),
});
const HapuHope = new NPC('Hapu', [
    'My grandfather died suddenly some years back, and we were left without a kahuna on Poni. So I set out on my own sort of island challenge, traveling Alola and trying to grow stronger. Lillie. The kahuna you wished to meet is now here.',
    'There is a ceremony held for the Legendary Pokémon at the Altar of the Sunne and Moone that uses two particular flutes. Ho! You already have the one. The other is said to be held on Exeggutor Island.',
], {
    image: 'assets/images/npcs/Hapu.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Emissary of Light', 0), new QuestLineStepCompletedRequirement('Emissary of Light', 3, GameConstants.AchievementOption.less)]),
});
const SunFlute = new NPC('Play the Sun Flute', [
    'Oh my goodness, Nebby! To think you would be the emissary of the sun, Solgaleo!',
    '<img src="assets/images/pokemon/791.png">',
], {
    saveKey: 'SunFlute',
    image: 'assets/images/npcs/Lillie (z powered).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Emissary of Light', 5), new QuestLineStepCompletedRequirement('Emissary of Light', 6, GameConstants.AchievementOption.less), new OneFromManyRequirement([new DayCyclePartRequirement([1]), new DayCyclePartRequirement([2])])]),
});
const MoonFlute = new NPC('Play the Moon Flute', [
    'Oh my goodness, Nebby! To think you would be the emissary of the moon, Lunala!',
    '<img src="assets/images/pokemon/792.png">',
], {
    saveKey: 'MoonFlute',
    image: 'assets/images/npcs/Lillie (z powered).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Emissary of Light', 5), new QuestLineStepCompletedRequirement('Emissary of Light', 6, GameConstants.AchievementOption.less), new OneFromManyRequirement([new DayCyclePartRequirement([0]), new DayCyclePartRequirement([3])])]),
});
const Lillie7 = new NPC('Lillie', [
    'Nebby... all I ever wanted to do was to help you get back to your own home... But instead you helped me, over and over... I got the chance to finally talk with my mother. Thank you... Thank you so much!',
    'And thank you too, $playername$! You\'ve helped me gain so much confidence in myself. I am very grateful for that. I was able to achieve things I had never dreamed I could... Getting to meet you, traveling together with you... I\'m so glad I got to be part of your journey!',
    'Wait- what is this darkness in the sky? Oh my goodness! $playername$! In the sky! Another Ultra Wormhole!',
], {
    image: 'assets/images/npcs/Lillie (z powered).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Emissary of Light', 7), new QuestLineCompletedRequirement('Emissary of Light', GameConstants.AchievementOption.less)]),
});
const Lillie8 = new NPC('Talk to Lillie', [
    'I...I\'ve been wanting to thank you for saving Nebby that day. Back then I was so desperate... It hasn\'t all been easy... but I\'m really glad that I came to Alola! I\'ve decided I\'m going to become a real Trainer and meet all kinds of wonderful Pokémon!',
    'I\'m going to go back to Aether Paradise for a bit to help my mother recover. I need to see for myself that she\'ll be all right, but before that... $playername$! Won\'t you have a battle with me?',
], {
    image: 'assets/images/npcs/Lillie (z powered).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eater of Light', 0), new QuestLineStepCompletedRequirement('Eater of Light', 2, GameConstants.AchievementOption.less)]),
});
const LillieSun = new NPC('Lillie', [
    'At first I\'d taken Nebby with me, but I didn\'t have the courage to protect it myself. But I\'m not that person anymore!',
    'Traveling around Alola with you, learning all the things you knew... And seeing Nebby evolve into Solgaleo under that radiant sun... I\'ll never forget those precious memories, $playername$!',
    'You, Professor Kukui, Professor Burnet, Hau, Hapu, and everyone else... I\'m so glad I got to meet everyone!',
], {
    image: 'assets/images/npcs/Lillie (z powered).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eater of Light', 4), new StatisticRequirement(['npcTalkedTo', GameHelper.hash('SunFlute')], 1, 'Must have played the Sun Flute during Emissary of Light quest line')]),
});
const LillieMoon = new NPC('Lillie', [
    'At first I\'d taken Nebby with me, but I didn\'t have the courage to protect it myself. But I\'m not that person anymore!',
    'Traveling around Alola with you, learning all the things you knew... And seeing Nebby evolve into Lunala under that brilliant moon... I\'ll never forget those precious memories, $playername$!',
    'You, Professor Kukui, Professor Burnet, Hau, Hapu, and everyone else... I\'m so glad I got to meet everyone!',
], {
    image: 'assets/images/npcs/Lillie (z powered).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Eater of Light', 4), new StatisticRequirement(['npcTalkedTo', GameHelper.hash('MoonFlute')], 1, 'Must have played the Moon Flute during Emissary of Light quest line')]),
});
// Optional Story NPCs
// Lillies
const LillieMahaloTrail1 = new NPC('Mysterious Girl', [
    'H-help... Save Nebby!',
], {
    image: 'assets/images/npcs/Lillie.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Welcome to Paradise, Cousin!'), new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 0, GameConstants.AchievementOption.less)]),
});
const LillieMahaloTrail2 = new NPC('Lillie', [
    'Please... Don\'t tell anyone about this... About seeing Nebby... It\'s...it\'s a secret, OK?',
    'I work as Professor Kukui\'s assistant. He\'s told me to show you around the island, so come along now.',
], {
    image: 'assets/images/npcs/Lillie.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 1), new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 2, GameConstants.AchievementOption.less)]),
});
const LillieMelemeleMeadow1 = new NPC('Lillie', [
    'Nebby! Nebby, come back!',
    'Ah... $playername$...',
    'Nebby ran off into the meadow here... What if a wild Pokémon attacks it? It doesn\'t have any moves it can use to battle!',
], {
    image: 'assets/images/npcs/Lillie.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 5), new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 8, GameConstants.AchievementOption.less)]),
});
const LillieMelemeleMeadow2 = new NPC('Lillie', [
    'Hello, $playername$. Are you done with your battle against Hau on Route 3? We should all head back to Iki Town, now.',
], {
    image: 'assets/images/npcs/specialNPCs/Lillie (nebby).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 9), new QuestLineStepCompletedRequirement('Welcome to Paradise, Cousin!', 10, GameConstants.AchievementOption.less)]),
});
const LillieHeahea = new NPC('Lillie', [
    'Professor Burnet has been so kind, and she\'s helping me try to find a way to get Nebby back to its own home... She\'s been like...like a real mother to me.',
    'I\'ll be waiting here until you\'re ready to join us to the Ruins of Life. I\'ve heard that there is a group of terrible people called Team Skull who try to steal Pokémon. We need to be careful if we want to escape the notice of such a collection of villains... Isn\'t that right, $playername$?',
    'And Nebby! I\'ll have you stay in your bag, mister!',
], {
    image: 'assets/images/npcs/specialNPCs/Lillie (nebby).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Symbiotic Relations', 0), new QuestLineStepCompletedRequirement('Symbiotic Relations', 7, GameConstants.AchievementOption.less)]),
});
const LillieRuinsOfLife = new NPC('Lillie', [
    'Nebby seems fond of the ruins for some reason, so I keep visiting them and hoping that maybe I will find some clue to help it get back to its home... But I don\'t have any idea how to do that...',
    '$playername$ if it\'s all right with you, I think Nebby and I would like to watch your Grand Trial.',
], {
    image: 'assets/images/npcs/specialNPCs/Lillie (nebby).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Symbiotic Relations', 7), new QuestLineStepCompletedRequirement('Symbiotic Relations', 8, GameConstants.AchievementOption.less)]),
});
const LillieMalie = new NPC('Lillie', [
    'I ended up getting lost, and then I saw this outfit, and it was the last one they had in stock, so I bought it... Hah...',
    '<i>Beast of sun and beast of moon</i>... That\'s what was written in the book from the library. It must be referring to the legendary Pokémon of Alola. I thought I could find something about Nebby in there but...',
], {
    image: 'assets/images/npcs/Lillie.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Child of the Stars', 0), new QuestLineStepCompletedRequirement('Child of the Stars', 3, GameConstants.AchievementOption.less)]),
});
const LillieAetherHouse = new NPC('Lillie', [
    'Pokémon being abducted like that... Maybe even hurt... I just can\'t stand the idea! $playername$! Please...help them!',
], {
    image: 'assets/images/npcs/Lillie.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Child of the Stars', 5), new QuestLineStepCompletedRequirement('Child of the Stars', 6, GameConstants.AchievementOption.less)]),
});
const LillieSeafolkVillage = new NPC('Lillie', [
    'So Hapu lives here on Poni Island? Let\'s go, $playername$! She can help us find the kahuna! It will be good to see her and Mudsdale again!',
    'Poni Island... It\'s a completely different kind of island, isn\'t it?',
], {
    image: 'assets/images/npcs/Lillie (z powered).png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Emissary of Light'), new QuestLineStepCompletedRequirement('Emissary of Light', 1, GameConstants.AchievementOption.less)]),
});
const LillieExeggutorIsland = new NPC('Lillie', [
    'I\'d seen it in a movie... this man singing and dancing in the rain. I had to try it for myself. Mother was so shocked that she ran right out after me. And then...she smiled... and danced with me. But... then she changed. And I couldn\'t do anything...',
    'But you know what $playername$? Every time in this journey, you\'ve shown me that it\'s possible... to do something.',
    'I don\'t know if it will really summon the Legendary Pokémon, but we can at least try! Thank you for coming this far with me, $playername$!',
], {
    image: 'assets/images/npcs/Lillie (z powered).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Emissary of Light', 1), new QuestLineStepCompletedRequirement('Emissary of Light', 5, GameConstants.AchievementOption.less)]),
});
const LillieAltar1 = new NPC('Prepare with Lillie', [
    'My mother is— She\'s selfish. She lavishes her love only on those she deems worthy, not caring whether it is wanted or not.',
    'But I will save her. I still have something I need to tell her. I am alive. Cosmog is alive.',
    'Nebby. Please. I need to see my mother!',
    'All right, $playername$! Let\'s go!',
], {
    image: 'assets/images/npcs/Lillie (z powered).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Emissary of Light', 6), new QuestLineStepCompletedRequirement('Emissary of Light', 7, GameConstants.AchievementOption.less)]),
});
const LillieAltar2 = new NPC('Lillie', [
    'Necrozma... It seems like it is also suffering somehow... It seems to hurt it, to be without its light...',
    '$playername$! Please help Nebby for me! But also... if you can... try to help Necrozma, like you did mother.',
], {
    image: 'assets/images/npcs/Lillie (z powered).png',
    requirement: new MultiRequirement([new QuestLineCompletedRequirement('Emissary of Light'), new QuestLineStepCompletedRequirement('Eater of Light', 0, GameConstants.AchievementOption.less)]),
});
// Other story characters
const HauAether = new NPC('Hau', [
    'So the foundation really was working together with Team Skull? Lillie, Gladion, and Lusamine all are a family?! This is, like, way too mind-blowing to think about right now. $playername$! Let\'s knock some skulls together for now!',
], {
    image: 'assets/images/npcs/Hau.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Child of the Stars', 8), new QuestLineStepCompletedRequirement('Child of the Stars', 12, GameConstants.AchievementOption.less)]),
});
const GladionAether = new NPC('Gladion', [
    'Mother! You mustn\'t open the Ultra Wormhole. You cannot let the beasts run wild!',
    '$playername$! Stop the president!!! If we don\'t, Alola will be flooded with beasts!',
], {
    image: 'assets/images/npcs/Gladion (stance).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Child of the Stars', 9), new QuestLineStepCompletedRequirement('Child of the Stars', 12, GameConstants.AchievementOption.less)]),
});
const LillieAether = new NPC('Lillie', [
    'Mother! Do not sacrifice Cosmog for that beast\'s sake! Please... Stop... If Nebby isn\'t— If you make it use up too much of its power... you don\'t understand what will happen! If you use too much of its power, it will die!',
], {
    image: 'assets/images/npcs/Lillie.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Child of the Stars', 10), new QuestLineStepCompletedRequirement('Child of the Stars', 12, GameConstants.AchievementOption.less)]),
});
const HapuMalie = new NPC('Hapu', [
    '$playername$. Been a while, friend. And who might this be?',
    '...',
    'Lillie? And she plans to visit Ula\'ula\'s ruins? Well, that\'s some fine initiative. I\'d be happy to show her the way whenever she\'d like to go.',
], {
    image: 'assets/images/npcs/Hapu.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Child of the Stars'), new QuestLineStepCompletedRequirement('Child of the Stars', 3, GameConstants.AchievementOption.less)]),
});
const HapuCanyon = new NPC('Hapu', [
    'People cannot survive all on their own. They have got to help one another out. Same for Pokémon, too. That is what my grandfather used to say.',
    '$playername$... you have done well in guiding Lillie. The path to the shrine is through the canyon.',
    'Look at the two of you. I think this might just work out. No, I am quite sure of it!',
], {
    image: 'assets/images/npcs/Hapu.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Emissary of Light', 4), new QuestLineCompletedRequirement('Emissary of Light', GameConstants.AchievementOption.less)]),
});
const HapuAltar = new NPC('Hapu', [
    'I was concerned so I ascended. And what do I find but the Legendary Pokémon... and a strange hole in the sky.',
    'I\'ll await your arrival on Exeggutor Island, if training is something you desire before challenging this beast.',
], {
    image: 'assets/images/npcs/Hapu.png',
    requirement: new MultiRequirement([new QuestLineCompletedRequirement('Emissary of Light'), new QuestLineStepCompletedRequirement('Eater of Light', 0, GameConstants.AchievementOption.less)]),
});
const PhycoAltar = new NPC('Captain Phyco', [
    'Necrozma...and us ourselves... we have both suffered so many long years in this darkness, living a life we did not wish for...',
    'Our Ultra Megalopolis was once a world filled with light... Necrozma was called the Blinding One, and it gave us all the energy we needed.',
    'Our ancestors were greedy, though. They sought to control all of Necrozma\'s light... They hurt Necrozma... They left it incomplete, and in such a state, it went mad with fury... And so our light was stolen by Necrozma. Now, the one that wields light to its will... It would steal all of Alola\'s light!',
], {
    image: 'assets/images/npcs/Phyco.png',
    requirement: new MultiRequirement([new QuestLineCompletedRequirement('Emissary of Light'), new QuestLineStepCompletedRequirement('Eater of Light', 0, GameConstants.AchievementOption.less)]),
});
// Rotom-Dex
const RotomDexSun = new NPC('Rotom Dex', [
    'Zzzzt!!! How\'zzz it going, kiddo? Havin\' fun in the Alolan sun?',
], {
    image: 'assets/images/npcs/specialNPCs/Rotom-Dex.png',
    requirement: new OneFromManyRequirement([new DayCyclePartRequirement([1]), new DayCyclePartRequirement([2])]),
});
const RotomDexMoon = new NPC('Rotom Dex', [
    'Zzzzt!!! How\'zzz it going, kiddo? Feelin\' calm under the Alolan moon?',
], {
    image: 'assets/images/npcs/specialNPCs/Rotom-Dex.png',
    requirement: new OneFromManyRequirement([new DayCyclePartRequirement([0]), new DayCyclePartRequirement([3])]),
});
const RotomDexPreChamp = new NPC('Rotom Dex', [
    'Zzzzt!!! You\'ve almost made it, kiddo! Championship is on the horizzzon! I\'m rootin\' for ya!',
], {
    image: 'assets/images/npcs/specialNPCs/Rotom-Dex.png',
    requirement: new MultiRequirement([new QuestLineCompletedRequirement('Eater of Light'), new GymBadgeRequirement(BadgeEnums.Champion_Stamp, GameConstants.AchievementOption.less)]),
});
const RotomDexChamp = new NPC('Rotom Dex', [
    'Congratulationzzz, bucko! You\'re the new reigning Alola Champion! You really are something, kiddo!',
], {
    image: 'assets/images/npcs/specialNPCs/Rotom-Dex.png',
    requirement: new MultiRequirement([new QuestLineCompletedRequirement('Eater of Light'), new GymBadgeRequirement(BadgeEnums.Champion_Stamp)]),
});
//Silvally Types NPC
const SilvallyGladion1 = new NPC('Gladion', [
    'Oh, it\'s you. I thought the professor would help when I put my request up at the Bulletin Board, but the Champion\'s even better.',
    'See, my Silvally has been acting strange lately, almost as if it\'s back to being haunted by its traumatizing past, the poor thing. Silvally are unique Pokémon who can download memories from artificial disks to change their type, but my Silvally\'s own memories somehow got mixed in with them. I need to get the disks back and recover its memories. That\'s where you come in.',
    'Silvally has its memories divided in 17 parts and I lost all of them after traveling with it around Alola. Try talking with citizens of all four islands to find out if they know anything about them. If you help me restore its memories I\'ll maybe give you a reward, but don\'t expect any charity. The memories look like this:',
    '<img src="assets/images/items/quest/Dark_Memory_Silvally.png">',
    'Keep an eye out if you come across any of them.',
], {
    image: 'assets/images/npcs/Gladion.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 2, GameConstants.AchievementOption.less), new QuestLineStartedRequirement('Typing some Memories', GameConstants.AchievementOption.more)]),
});
const SilvallyHala = new NPC('Kahuna Hala', [
    'Greetings, $playername$. May I help you with something? Oh, you\'re looking for things called Silvally Memories? Something like this one?',
    '<img src="assets/images/items/quest/Fighting_Memory_Silvally.png">',
    'I found that while getting back here after helping Ilima in the Verdant Cavern. If you need it, I can give it to you. Here it is. Oh, also Kahuna Olivia told me she found one of these on Akala Island somewhere. Maybe you should go and ask her for it too. She\'ll probably give it to you as she also doesn\'t know what it is.',
], {
    image: 'assets/images/npcs/Hala.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 1, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 2, GameConstants.AchievementOption.less)]),
});
const SilvallyOlivia = new NPC('Kahuna Olivia', [
    'Hey, kiddo. What are you doing here? Just visiting Akala Island? Cus y\'know lots of tourists come here to see the Battle Royal. So, what\'re you doing here? Looking for something?',
    'Oh, you\'re looking for something called a Silvally Memory and Hala told you I found one? Do you mean this thing?',
    '<img src="assets/images/items/quest/Rock_Memory_Silvally.png">',
    'I found it while helping Mallow with her trial. If you want it, you can have it. It\'s useless to me anyway.',
], {
    image: 'assets/images/npcs/Olivia.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 1, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 2, GameConstants.AchievementOption.less)]),
});
const SilvallyNanu = new NPC('Kahuna Nanu', [
    'Oh, hello. How can I help you? You\'re looking for Silvally Memories? What do they look like? Oh, so like a disk with a broken part. I think I <i>have</i> seen one while helping Acerola with her trial. Here, you can take it.',
    '<img src="assets/images/items/quest/Dark_Memory_Silvally.png">',
    'I don\'t know how to use it, so you can keep it.',
], {
    image: 'assets/images/npcs/Nanu.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 1, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 2, GameConstants.AchievementOption.less)]),
});
const SilvallyMina = new NPC('Captain Mina', [
    'Hello, $playername$. Here to do my trial again? Oh, I see you\'re looking for Silvally Memories. Well, I have just the right thing for you. Here, take it.',
    '<img src="assets/images/items/quest/Fairy_Memory_Silvally.png">',
    'Kahuna Hapu gave me that as a gift. She even told me how to use it, but I couldn\'t afford to buy a Silvally. You can keep it.',
], {
    image: 'assets/images/npcs/Mina.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 1, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 2, GameConstants.AchievementOption.less)]),
});
const SilvallyGladion2 = new NPC('Gladion', [
    'Hey, I see you\'re back. Did you find any Silvally Memories? Oh, I see you found 4 of them, and in surprisingly relevant places too. Let me give them to Silvally.',
    '<i>Gladion uses the 4 memories on Silvally</i>',
    'As for that reward I mentioned, I\'ll put these memories in the Memory Replicator so I can make some Silvally Memories for you. The machine isn\'t powerful enough to create the Memories out of nothing, though. I\'ll be needing you to grab some gems of the Memory\'s type so I can replicate the Memory and insert it into a Silvally for you. It needs some fine-tuning first so the amount needed won\'t be the same after the first trade.',
    'Oh and also, I\'ve heard of more sightings of strange disks across the region. I think they might be the Silvally Memories we\'re looking for. If you\'re ever lost, I got descriptions of them.',
    'I\'ll let you keep the Memories you\'ve found in the meantime so you keep track of your progress.',
], {
    image: 'assets/images/npcs/Gladion.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 2, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 16, GameConstants.AchievementOption.less)]),
});
const SilvallyGladion2Hints = new NPC('Ask Gladion for help', [
    'Here are the descriptions of them. You should look for:',
    'A blue-haired girl near Brooklet Hill,',
    'A green-haired girl in Lush Jungle,',
    'A black and red-haired guy at the Wela Volcano Park,',
    'A child with orange hair in the Hokulani Observatory,',
    'A dark blue-haired guy that looks like a Veteran inside Mount Lanakila,',
    'And a girl with a Mudsdale on Exeggutor Island Hill.',
], {
    image: 'assets/images/npcs/Gladion.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 3, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 16, GameConstants.AchievementOption.less)]),
});
const LanaSilvally1 = new NPC('Captain Lana', [
    'Hi, $playername$. How are you doing? I\'m not doing so well right now.',
    'Why, you ask? That\'s because I need a lot of Dungeon Tokens to pay for an amazing rod so I can fish for every single water pokémon! Sadly, it costs too much and I can\'t afford it because I have to take care of my sisters. Oh, you can help me? Thank you, but I have nothing to offer in return.',
    'Have I a seen a Silvally Memory? Yes, I have. If you want it, I could sell it to you. The price is 125 million Dungeon Tokens. I\'ll be here for a long time, so you can get the Dungeon Tokens and come back later if you need to.',
], {
    image: 'assets/images/npcs/Lana.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 4, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 6, GameConstants.AchievementOption.less)]),
});
const MallowSilvally1 = new NPC('Captain Mallow', [
    'Hey, welcome to the Lush Jungle! How are you doing today? I\'m not so good. I wanted to try a new ingredient to see if it attracts Lurantis, but it costs too much. Like, a lot of Quest Points. I just can\'t afford it.',
    'Oh, you\'re asking if I have a Silvally Memory? You mean from that weird fusion-like Pokémon? Yeah, I do. It has a weird green coloration on it, which weirdly enough reminds me of Pokémon resistant to Electric attacks and weak against Fire attacks.',
    'How about a trade? I will give you the Memory if you give me some Quest Points, how \'bout that? Ok, I\'ll be here in the Lush Jungle for a while, so you can get Quest Points and come back later to do the trade if you need to.',
], {
    image: 'assets/images/npcs/Mallow.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 6, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 8, GameConstants.AchievementOption.less)]),
});
const KiaweSilvally1 = new NPC('Captain Kiawe', [
    'Hey, good to see ya here. How are you doing? I\'m doing well, but I need some Battle Points. I need to get more materials for a school project, but I\'m not sure how I will get Battle Points in Alola, since the Battle Frontier is only in the Hoenn region. And I don\'t know anyone who could get them and deliver them to me.',
    'Oh, Silvally Memory? The thing that\'s shaped like a disk? I have one right here, but I\'m not sure how it works. Wait, I just got an idea, what about a trade? I\'ll trade the Memory for some Battle Points. I\'ll be here for a while, probably long enough for you to take a trip to the Hoenn region to get some Battle Points.',
], {
    image: 'assets/images/npcs/Kiawe.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 8, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 10, GameConstants.AchievementOption.less)]),
});
const SophoclesSilvally1 = new NPC('Captain Sophocles', [
    'Hey, $playername$! How are you doing? I\'ve been doing great, except that my equipment is getting old and rusted. I would like to buy some more, but I don\'t have enough money to buy any right now.',
    'So, how can I help you? Oh, you\'re looking for a Silvally Memory? I have been keeping one of them here and doing a little bit of testing to find out how it works. Maybe we could make a trade. I\'ll trade the Silvally Memory for some Pokédollars. I\'ll be trying to figure out how it works, so you can go get Pokédollars and come back later to trade if you need to.',
], {
    image: 'assets/images/npcs/Sophocles.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 10, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 12, GameConstants.AchievementOption.less)]),
});
const VeteranSilvally1 = new NPC('Veteran Aristo', [
    'Hey, $playername$. Looking for a battle? Hm, ok. Can I say something to you anyway? It will be quick. I want to propose to my girlfriend, but I can\'t afford the ring she really wants. It\'s so expensive, and I feel guilty not being able to give her what she deserves. I don\'t know what to do! Maybe I could pick up some extra work to hire more Miners for some Diamonds.',
    'Anyway what did you want to ask me? Hmm, if I\'ve seen a Silvally Memory anywhere near? Sure, it\'s in my pocket right here. It even is coloured like a diamond! I wish I could trade it for some... hm? You\'re asking if we could do a trade? Sure, I\'ll sell it to you for 100,000 Diamonds, so I can buy my lovely fiancée-to-be an engagement ring. I\'ll always be here in the same place at all times, we can trade anytime you want.',
], {
    image: 'assets/images/npcs/Veteran (male).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 12, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 14, GameConstants.AchievementOption.less)]),
});
const HapuSilvally1 = new NPC('Kahuna Hapu', [
    'Hey, $playername$. How\'s it going? Looking for a rematch, or did you come here explore the Poni Island secrets? Oh, I see. You\'re looking for a Silvally Memory. I found a memory in the ground here, so I took it and studied it a bit. All I could find out is that it was from some Silvally. I also found another memory while helping Mina out with her trial. I gave it to her, but I\'m not sure if she found out how it works.',
    'Anyway. Can I ask you something? Do you know any farmers? I\'m needing to plant more palm trees around here on Exeggutor Island but I don\'t have enough Farm Points to buy all the seeds I need. If I got in contact with a farmer I could get them for much cheaper or even free! Oh? You know how to use the Farm? So that means you have a lot of Farm Points, right? Good! How about you give me some of those Farm Points for this Silvally Memory? Ok, I\'ll be here taking care of the Exeggutor for a while so you can come and visit me anytime to do this trade.',
], {
    image: 'assets/images/npcs/Hapu.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 14, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 16, GameConstants.AchievementOption.less)]),
});
const SilvallyGladion3 = new NPC('Gladion', [
    'I see you\'ve recovered more of the Silvally Memories. Thanks for helping me recover them. Silvally appreciates it too. How did it go, getting them back?',
    'You had to <i>pay</i> for them? Wha- How did you even get that much money? Are you rich? I... Never mind. You\'re doing a great job. Buddy\'s feeling better already. What? No, I said Silvally\'s feeling better already. You must be hearing things. Go find those memories.',
    'Also I\'m not compensating you.',
], {
    image: 'assets/images/npcs/Gladion.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 16, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 32, GameConstants.AchievementOption.less)]),
});
const SilvallyGladion3Hints = new NPC('Ask Gladion for help', [
    'For the next set of memories I\'ve been keeping an ear out and have heard some rumors:',
    'People from Ula\'ula have seen Guzma walking around Po Town, so I suspect he might\'ve found a Silvally Memory. Go ask him in Po Town.',
    'Melemele Island inhabitants have seen Kahili taking daily walks on Ten Carat Hill, she might\'ve found a Silvally Memory during one of those walks.',
    'Some people from Poni Island have seen Plumeria walking around with some old Team Skull grunts around the Vast Poni Canyon. That is really suspicious, so they probably found something rare or presumably a Silvally Memory.',
    'Ula\'ula Island people have seen Captain Acerola inside the Thrifty Megamart with a Mimikyu carrying a disk-shaped item, which I suspect is a Silvally Memory.',
    'Some people from Akala Island have seen some people in white suits with a lot of boxes travelling to the southwest of the island.',
    'I\'ve heard Molayne wanted to brush up on his training a bit. He\'s at the Royal Avenue, and he\'s also offering a strange reward which I presume is a Silvally Memory.',
    'Also, while I was walking near A Tree Maybe I saw a guy dressed almost like an old Pokémon that doesn\'t exist anymore with a Silvally Memory.',
    'They are all tough trainers, so you might need to train more to defeat them.',
], {
    image: 'assets/images/npcs/Gladion.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 17, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 32, GameConstants.AchievementOption.less)]),
});
const GuzmaSilvally = new NPC('Guzma', [
    'Huh? What are you doing in here? A what? Silvally Memory? I think I have what you\'re looking for. Yeah, I have it, if you want to see it. Anyways, I was just passing by and decided to visit this place again.',
    'If you need this Memory, let\'s battle. I miss the times when you got in the way of my plans for Team Skull and I used to battle you. I\'m not gonna lose this time.',
], {
    image: 'assets/images/npcs/Guzma.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 18, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 20, GameConstants.AchievementOption.less)]),
});
const KahiliSilvally = new NPC('Kahili', [
    'Hello there, $playername$! Today is a beautiful day for a walk. I found this disk while walking around. I\'m not so sure what it is, but it\'s an interesting find. What brings you here? Oh, you\'re here looking for this disk. Well, I can give it to you if you beat me in battle! What do you say? Fantastic!',
], {
    image: 'assets/images/npcs/Kahili.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 20, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 22, GameConstants.AchievementOption.less)]),
});
const PlumeriaSilvally = new NPC('Plumeria', [
    'Well, hey! Look who we have here! It\'s the Champ, wandering all the way into Vast Poni Canyon! You gotta have guts to do that, kid. Not many trainers dare to challenge this place.',
    'Let me guess, you\'re after this Silvally Memory I found around here, aren\'t you? I can tell by the way you carry yourself. You\'re not like the rest of the tourists and challengers who come here just for a sightseeing or a battle. You\'re on a mission, right?',
    'If you want it that bad, you gotta earn it. I won\'t just hand it over to you. I\'m starting from scratch as a Pokémon Trainer and doing it right this time, so you gotta show me what you\'re made of, in a battle. You and your Pokémon against me and mine! Are you up for the challenge, kid?',
], {
    image: 'assets/images/npcs/Plumeria (league).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 22, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 24, GameConstants.AchievementOption.less)]),
});
const AcerolaSilvally = new NPC('Captain Acerola', [
    'Hey there, $playername$! Have you checked out the trail behind the Thrifty Megamart lately? It\'s been pretty wild! I ventured there the other day and stumbled upon a Mimikyu holding a Silvally Memory. It was quite a challenge to retrieve it, but I managed to befriend it and recover the disk eventually. I love the thrill of exploring new places and discovering new stuff, don\'t you?',
    'But enough about me, what brings you here? Hmm, I can sense that you have a burning desire for something... Ah, it must be the Silvally Memory I found in the trail, am I right? It was a challenge to befriend that Mimikyu holding it. If you want it, you\'ll have to battle me first! Don\'t worry, I won\'t hold back just because we\'re friends. I want to see what you\'re made of! So, what do you say, ready to face the challenge?',
], {
    image: 'assets/images/npcs/Acerola.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 24, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 26, GameConstants.AchievementOption.less)]),
});
const FabaSilvally = new NPC('Aether Branch Chief Faba', [
    'Oh, welcome $playername$, the Champion of Alola! I see you <i>still</i> haven\'t lost that title. You\'re a pretty... <i>worthy</i> trainer, aren\'t you? Anyways, I think you should come visit us another time we\'re... er.. busy! Yes, we\'re extremely busy right now... ',
    'Oh, you\'re looking for a Silvally Memory? Well I can\'t help you with it so bye! What? You\'re not leaving until I help you? Ugh.. kids are so annoying these days.. er... I mean I\'d gladly help, I\'m just <i>busy</i> right now. <i>LikeISaidTwoSecondsAgo.</i>',
    'Well, I guess you can already tell. We\'ve been in Haina Desert looking for Tapu Bulu, but the search team stumbled upon this Silvally Memory instead and it looks pretty rare because we couldn\'t find much information about it. We want to take it in for some experiments, but we knew you wouldn\'t let us do that so I tried to hide it. Now that you know, my only choice is battling you.',
    'Let\'s make a deal first though: If I defeat you, you\'ll let us do our experiments on that thing and leave us alone forever, but if you defeat me I\'ll give that Memory to you. Sounds like a deal? Then let\'s see if you can take the new Faba!',
], {
    image: 'assets/images/npcs/Aether Branch Chief (faba).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 26, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 28, GameConstants.AchievementOption.less)]),
});
const MolayneSilvally = new NPC('Molayne', [
    'Hello there, $playername$! Have you perchance caught sight of my advertisement? I\'m on the lookout for a formidable opponent to assist me in honing my Pokémon\'s skills. And let me assure you, the rewards are quite substantial! Should you best me in battle, you shall be granted a most wondrous prize: a Silvally Memory that I found inside the Hokulani Observatory.',
    'As you may already know, I am both a Steel-type expert and a stickler for precision in combat. I desire nothing more than to elevate my team to the utmost degree of mastery. But in order to do so, I must face off against trainers of the highest caliber. That is where you come in, my friend! If you are prepared for the challenge, step forward and engage me in a duel for the ages!',
], {
    image: 'assets/images/npcs/Molayne.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 28, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 30, GameConstants.AchievementOption.less)]),
});
const RyukiSilvally = new NPC('Ryuki', [
    'Yo, traveler! The name\'s Ryuki! You\'ve come here to battle against a star like me, haven\'t you? No? Why\'s that? I see, you\'re looking for something?',
    'Speaking of which, I stumbled upon a gnarly disk in my travels recently. It was unlike any music disk I had ever seen before, it has a rockin\' dark blue coloration. But for all its uniqueness, I can\'t make out what it is, see?',
    'A Dragon-type Silvally Memory, you say? Rock on! I had a feeling it was something rare and powerful, but I never would have guessed it was a Silvally Memory! But now that I know what I have, I can\'t simply give it to you. I\'m a rock star, not a trial captain! We\'re on stage and the crowd wants a show!',
    'If you want this Silvally Memory, you have to defeat me in a burning hot battle! It won\'t be easy, mind you. My babies are dying to play a set, and I won\'t be holding back! But if you truly have what it takes to be the champion, then you should be up for the challenge, yeah? Right on! Let\'s rock!',
], {
    image: 'assets/images/npcs/Ryuki.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 30, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Typing some Memories', 32, GameConstants.AchievementOption.less)]),
});
const SilvallyGladion4 = new NPC('Gladion', [
    'Hey there, $playername$! I gotta say, you\'ve done something truly incredible. You\'ve brought back every single one of Silvally\'s lost memories. I expected nothing less from the Champion. I can\'t even imagine how long all that must have taken you. Silvally\'s back to normal and I can\'t thank you enough.',
    'And... seeing my buddy suffer like that made me consider how many new memories I\'ve been taking for granted... I\'m glad to have met you, Hau... everyone. Like Hau said, people can achieve more if they do something together. Thank you for reminding me of that.',
    'I can see what Lillie saw in you now... You\'ve been a true inspiration to me too. I hope our paths cross again someday. Until then... See you around.',
], {
    image: 'assets/images/npcs/Gladion.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Typing some Memories', 32, GameConstants.AchievementOption.more), new QuestLineCompletedRequirement('Typing some Memories', GameConstants.AchievementOption.less)]),
});
//Ultra Beasts NPCs
const RoadsideMotelLooker1 = new NPC('Looker', [
    'I\'m very grateful that you accepted my invitation. My name is Looker. This here is my boss, Chief Anabel, head of the UB Taskforce.',
    'Ever since the incident at Aether Paradise, where you encountered UB-01 Symbiont, also known as Nihilego, we have heard reports of other Symbiont appearing in Alola. And other types of UBs too.',
    'They came here from a different world. Dropped rudely into our world against their will. We know nothing about them. They could be dangerous. They are almost certainly extremely wary and combative.',
    'We must find a way to calm their nerves. To make them feel at home in our world. Or we must destroy them. Either way, we must understand them. We must catch them.',
    'That is where you come in. The Champion of Alola. We do not have the battle power, but hopefully you do. Please allow Anabel to test your battle ability to ensure that you can handle this job.',
], {
    image: 'assets/images/npcs/Looker.png',
    requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 1, GameConstants.AchievementOption.less),
});
const RoadsideMotelAnabel1 = new NPC('Anabel', [
    'The testing is complete. I see no problem at all with your skills. Rather I would have to praise you for them. Welcome to the team!',
    'There is no more time to waste. UB-01 Symbiont, Nihilego, has been spotted on Akala Island! I will protect the nearby population centers, you must go and confront the Beast!',
    'Looker will stay here to coordinate reinforcements if needed. You can ask him about the special Beast Balls you will be using on this mission. I have given you a couple of them, but they are expensive so you will have to pitch in if you need more.',
], {
    image: 'assets/images/npcs/Anabel.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 1, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 4, GameConstants.AchievementOption.less)]),
});
const RoadsideMotelLooker2 = new NPC('Looker', [
    'Catching lots of Ultra Beasts? Oh you want to know more about Beast Balls!',
    'Beast Balls can only be used to catch Ultra Beasts. You can\'t even try to use them against normal Pokémon, and any other Poké Ball type won\'t work against Ultra Beasts.',
    'To help you out, I\'ve added an "Ultra Beast" option to the Encounter Type Pokéball filter setting. You can use this to set up a filter just for Ultra Beasts. Don\'t forget to enable it and assign Beast Balls!',
], {
    image: 'assets/images/npcs/Looker.png',
    requirement: new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 2),
});
const RoadsideMotelAnabel2 = new NPC('Anabel', [
    'Congratulations on a job well done. I\'ve had contact with our colleagues at HQ. They have agreed to let you keep the UBs you catch.',
    'I\'m sure the UBs will truly flourish in the company of a competent trainer like yourself. It\'ll be much better for them than being locked up in some stuffy lab. Just be sure to let us know how they are doing.',
    'Now, enough chit-chat. UB-02 Absorption and UB-02 Beauty, Buzzwole and Pheromosa, have been sighted on Melemele Island. You know what to do!',
], {
    image: 'assets/images/npcs/Anabel.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 4, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 6, GameConstants.AchievementOption.less)]),
});
const RoadsideMotelAnabel3 = new NPC('Anabel', [
    'Congratulations once again. Looker told me he wants to take us to a great restaurant to celebrate. I don\'t know how he knows any restaurants around here, we\'ve only just arrived.',
    'It doesn\'t matter though. There is no rest for us. Captain Mina is here with news, but she insists on battling you before she\'ll tell us anything.',
], {
    image: 'assets/images/npcs/Anabel.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 6, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 8, GameConstants.AchievementOption.less)]),
});
const RoadsideMotelMina = new NPC('Captain Mina', [
    'Still in tip top shape I see. Good. That means you\'re strong enough to take out this monster I heard about on Akala Island.',
    'According to your little list here its... uhm... this one! UB-03 Lighting. Xurkitree. These are some strange names you guys come up with.',
    'Good luck out there!',
], {
    image: 'assets/images/npcs/Mina.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 8, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 10, GameConstants.AchievementOption.less)]),
});
const RoadsideMotelNanu1 = new NPC('Kahuna Nanu', [
    '...',
    'I let myself in. Hope you don\'t mind.',
    'I\'m here to tell you about sightings of monsters on Ula\'ula Island. I missed some big Kahuna meeting we were all supposed to go to, so I got stuck as the messenger.',
    'It\'s not like I\'ve seen them or anything. Your friend Looker knew them from the description though. UB-04 Blade and UB-04 Blaster he called them. Kartana and Celesteela.',
    '...',
], {
    image: 'assets/images/npcs/Nanu.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 10, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 12, GameConstants.AchievementOption.less)]),
});
const RoadsideMotelNanu2 = new NPC('Kahuna Nanu', [
    '...',
    'Good job on rounding up those creatures, kid.',
    'Now, how about one more battle? I insist.',
], {
    image: 'assets/images/npcs/Nanu.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 12, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 14, GameConstants.AchievementOption.less)]),
});
const RoadsideMotelAnabel4 = new NPC('Anabel', [
    'This is tiring work, but I have a feeling that we\'re almost done.',
    'Looker\'s informants told us about monster sightings on Poni Island. It seems UB Assembly and UB Burst, Stakataka and Blacephalon, have taken up residence.',
    'Please be careful.',
], {
    image: 'assets/images/npcs/Anabel.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 14, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 16, GameConstants.AchievementOption.less)]),
});
const RoadsideMotelAnabel5 = new NPC('Anabel', [
    'And so here we are. At the end. And back at the beginning.',
    'Our final target is UB-05 Glutton. Guzzlord. It is very dangerous. You must not underestimate this beast.',
    'Ten years ago, a very similar incident occured. Looker and his team were assigned to fight Guzzlord. Nanu was there too. They lost. Looker lost a colleague that day.',
    'After the battle they found something. A strange young girl, alone in the wilderness of Poni Island. They found me. It seems I came from another world as well. Not their world though. These creatures are strange to me too.',
    'I have made myself at home here. I hope Glutton can do the same. Please catch this Guzzlord. End this once and for all.',
], {
    image: 'assets/images/npcs/Anabel.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 16, GameConstants.AchievementOption.more), new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 18, GameConstants.AchievementOption.less)]),
});
const NecrozmaLooker = new NPC('Looker', [
    'There haven\'t been any new reports of Ultra Beasts in Alola, but I did see something strange over in Ten Carat Hill. It was black, yet shining. It seemed to be fleeing, no doubt about that. Must have been in a weakened state. Was it involved in some kind of battle? If you find it, I doubt it will have much energy left.',
], {
    image: 'assets/images/npcs/Looker.png',
    requirement: new QuestLineCompletedRequirement('Ultra Beast Hunt'),
});
const BattleTreeRed = new NPC('Red', [
    '...',
], { image: 'assets/images/npcs/Red-masters.png' });
const BattleTreeBlue = new NPC('Blue', [
    'Hello there champ! Fancy seeing you here.',
    'We just planted this sapling here. Maybe it will grow into something great some day.',
], { image: 'assets/images/npcs/Blue-masters.png' });
// Magikarp Jump NPCs
const MayorKarp = new NPC('Mayor Karp', [
    'Welcome to the region of Magikarp!',
    'This is a magical place where everybody loves Magikarp!',
    'You\'re good at raising Pokémon, right? We called you here to compete in the ten leagues around the island and pick up our poor Magikarp\'s spirits!',
    'Around these parts, folks love to compete to see whose Magikarp can splash harder and jump higher! No other Pokémon are allowed to compete in these events. So, do your best to raise up some fine Magikarp!',
    'Our island is a special place, home to Magikarp patterns that aren\'t found anywhere else in the world! Collect and raise them all to increase your jump power and take on our league champion!',
], {
    image: 'assets/images/npcs/MayorKarp.png',
    requirement: new OneFromManyRequirement([new ObtainedPokemonRequirement('Magikarp'), new ObtainedPokemonRequirement('Magikarp (Feebas)')]),
});
const MagikarpJumpRoamerNPC = new RoamerNPC('Roddy Tackle', [
    'There are some singularly stunning individuals down at {ROUTE_NAME}! Some Magikarp with real personality!',
], GameConstants.Region.alola, RoamingPokemonList.findGroup(GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump), 'assets/images/npcs/Roddy Tackle.png', new OneFromManyRequirement([new ObtainedPokemonRequirement('Magikarp'), new ObtainedPokemonRequirement('Magikarp (Feebas)')]));
const HoppyManOfMystery = new NPC('Man of Mystery', [
    'We have been looking for a Shady Salesman.',
    'He is trying to sell overpriced Magikarps to clueless children.',
    'Please keep an <i>eye</i> open for him.',
], {
    image: 'assets/images/npcs/Man of Mystery.png',
    requirement: new OneFromManyRequirement([new ObtainedPokemonRequirement('Magikarp'), new ObtainedPokemonRequirement('Magikarp (Feebas)')]),
});
const DrSplash1 = new NPC('Dr. Splash', [
    'Welcome to my laboratory!',
    'Well... it\'s not much of a laboratory yet. I\'m working on several projects to help Magikarps reach their full potential. Can you help me out?',
    'The first step in unlocking this potential will be to formulate the perfect diet. Can you gather some berries for me to experiment with?',
], {
    image: 'assets/images/npcs/Dr Splash.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Dr. Splash\'s Research Project'), new QuestLineStepCompletedRequirement('Dr. Splash\'s Research Project', 1, GameConstants.AchievementOption.less)]),
});
const DrSplash2 = new NPC('Dr. Splash', [
    'Thank you for the berries! These should be enough for my experiments.',
    'While you were gone, I was working on optimizing the training regimen for Magikarps. According to my calculations, we are missing a LOT of equipment.',
    'I\'m going to need some sand for sandbags, springs for a jump counter, wood for a pell post, rocks and ice for smashing, a TON of Pokéballs, electricity generation...',
    'There\'s a lot more, but that should get you started.',
], {
    image: 'assets/images/npcs/Dr Splash.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Dr. Splash\'s Research Project', 1), new QuestLineStepCompletedRequirement('Dr. Splash\'s Research Project', 3, GameConstants.AchievementOption.less)]),
});
const DrSplash3 = new NPC('Dr. Splash', [
    'Wow, that\'s a lot of stuff! This place is starting to look like a proper lab now!',
    'I have discovered that a critical part of any Magikarp training program is pushing other Pokémon around in a field. This form of exercise rounds out the muscle groups and really boosts performance.',
    'According to my calculations, the ideal Pokémon to push around are Dwebble, Boldore, Forretress, Golem, and Steelix. Can you catch or hatch me some?',
    'Steer clear of the Alolan version of Golem, its electrical fields are too dangerous to use.',
], {
    image: 'assets/images/npcs/Dr Splash.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Dr. Splash\'s Research Project', 3), new QuestLineStepCompletedRequirement('Dr. Splash\'s Research Project', 5, GameConstants.AchievementOption.less)]),
});
const DrSplash4 = new NPC('Dr. Splash', [
    'These Pokémon are perfect! I\'ll put them out back in the training fields.',
    'The last piece of equipment needed is a Tackle Machine. I have a prototype here, but it needs to be calibrated.',
    'Can you take it out for a spin? Defeating a ton of Pokémon should be enough to test it out.',
], {
    image: 'assets/images/npcs/Dr Splash.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Dr. Splash\'s Research Project', 5), new QuestLineStepCompletedRequirement('Dr. Splash\'s Research Project', 7, GameConstants.AchievementOption.less)]),
});
const DrSplash5 = new NPC('Dr. Splash', [
    'Thank you for all your help!',
    'Now that the laboratory and training program are up and running, I\'ll be very busy!',
    'Please take this Magikarp as a thank you! Train them for greatness!',
], {
    image: 'assets/images/npcs/Dr Splash.png',
    requirement: new QuestLineStepCompletedRequirement('Dr. Splash\'s Research Project', 7),
});
const MagikarpEyeShadySalesman = new NPC('Shady Salesman', [
    'Kid, I have a deal for you! And for you alone. Here\'s your chance. I will sell you the secret Magikarp... For an unbelievable price.',
    'Oh, yeah... Returns not accepted, got that?',
], { image: 'assets/images/npcs/ShadySalesman.png' });
const FishPolice = new NPC('The Fish Police', [
    'Stop right there! This is the sacred land of Magikarp Jump. I can tell there is something suspicious about you... Yeah, I see! You have no Magikarp! How did you even make it this far without the best Pokémon, anyway?',
    'In any case, everyone in town will run away from you until you get yourself a Magikarp. So, go catch one, or fish one at the Pond. Then, the residents may be willing to talk to you.',
], {
    image: 'assets/images/npcs/Officer Jenny.png',
    requirement: new MultiRequirement([new ObtainedPokemonRequirement('Magikarp', true), new ObtainedPokemonRequirement('Magikarp (Feebas)', true)]),
});
//Alola Towns
TownList['Iki Town Outskirts'] = new Town('Iki Town Outskirts', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MelemeleIsland, [], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_KalosChampion)],
    npcs: [IkiOutskirtsMom],
});
TownList['Iki Town'] = new Town('Iki Town', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MelemeleIsland, [IkiTownShop], {
    requirements: [new TemporaryBattleRequirement('Hau 1')],
    npcs: [IkiKahuna, SilvallyHala, Lillie3],
});
TownList['Professor Kukui\'s Lab'] = new Town('Professor Kukui\'s Lab', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MelemeleIsland, [new BulletinBoard(GameConstants.BulletinBoards.Alola)], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 18)],
    npcs: [ProfKukui, RotomDexSun, RotomDexMoon],
});
TownList['Hau\'oli City'] = new Town('Hau\'oli City', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MelemeleIsland, [HauoliCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Hau\'oli City']), TemporaryBattleList.Ilima], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Trainers\' School'))],
    npcs: [NecrozmaLooker],
});
TownList['Melemele Woods'] = new Town('Melemele Woods', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MelemeleIsland, [new MoveToDungeon(dungeonList['Ruins of Conflict']), new MoveToDungeon(dungeonList['Verdant Cavern']), new MoveToDungeon(dungeonList['Melemele Meadow'])], {
    requirements: [new MultiRequirement([new RouteKillRequirement(10, GameConstants.Region.alola, 2), new TemporaryBattleRequirement('Skull 2')])],
    npcs: [LagunaKahuna],
});
TownList['Roadside Motel'] = new Town('Roadside Motel', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MelemeleIsland, [TemporaryBattleList.Anabel, TemporaryBattleList['Captain Mina UB'], TemporaryBattleList['Kahuna Nanu UB'], RoadsideMotelShop], {
    requirements: [new QuestLineStartedRequirement('Ultra Beast Hunt')],
    npcs: [RoadsideMotelLooker1, RoadsideMotelAnabel1, RoadsideMotelLooker2, RoadsideMotelAnabel2, RoadsideMotelAnabel3, RoadsideMotelMina, RoadsideMotelNanu1, RoadsideMotelNanu2, RoadsideMotelAnabel4, RoadsideMotelAnabel5],
});
TownList['Heahea City'] = new Town('Heahea City', GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland, [TemporaryBattleList.Dexio, TemporaryBattleList.Sina, HeaheaCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Heahea City']), new DockTownContent()], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Melemele_Stamp)],
    npcs: [HeaheaCafeOwner, HeaheaGentleman, Lillie4, LillieHeahea, ProfBurnetAlola1, ProfBurnetAlola2],
});
TownList['Paniola Town'] = new Town('Paniola Town', GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland, [PaniolaTownShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Paniola Town'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 4)],
    npcs: [PaniolaTownActor],
});
TownList['Royal Avenue'] = new Town('Royal Avenue', GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland, [TemporaryBattleList['Battle Royal'], DepartmentStoreShop, TemporaryBattleList['Molayne Steel Memory']], {
    requirements: [new TemporaryBattleRequirement('Skull 3')],
    npcs: [RoyalAvenueSpectator, MolayneSilvally],
});
TownList['Konikoni City'] = new Town('Konikoni City', GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland, [KonikoniCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Konikoni City'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 9)],
    npcs: [KonikoniKahuna, SilvallyOlivia],
});
TownList['Aether Paradise'] = new Town('Aether Paradise', GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland, [
    TemporaryBattleList['Ultra Wormhole'],
    AetherParadiseShop,
    new ShardTraderShop(GameConstants.ShardTraderLocations['Aether Paradise']),
    new MoveToDungeon(dungeonList['Aether Foundation']),
    TemporaryBattleList['Faba Psychic Memory'],
], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Akala_Stamp)],
    npcs: [AetherParadiseAlolaRoamerNPC, FabaSilvally, Lillie6, Gladion1, LillieSun, LillieMoon],
});
TownList['Malie City'] = new Town('Malie City', GameConstants.Region.alola, GameConstants.AlolaSubRegions.UlaulaIsland, [MalieCityShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Malie City']), new MoveToDungeon(dungeonList['Malie Garden']), new DockTownContent()], {
    requirements: [new TemporaryBattleRequirement('Ultra Wormhole')],
    npcs: [MalieKahuna, SilvallyNanu, Lillie5, LillieMalie, HapuMalie],
});
TownList['Tapu Village'] = new Town('Tapu Village', GameConstants.Region.alola, GameConstants.AlolaSubRegions.UlaulaIsland, [TapuVillageShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Tapu Village'])], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 13)],
    npcs: [TapuWorker],
});
TownList['Aether House'] = new Town('Aether House', GameConstants.Region.alola, GameConstants.AlolaSubRegions.UlaulaIsland, [TemporaryBattleList['Skull 5'], TemporaryBattleList['Kahuna Nanu']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 13)],
    npcs: [YungoosAetherHouse, LillieAetherHouse],
});
TownList['Seafolk Village'] = new Town('Seafolk Village', GameConstants.Region.alola, GameConstants.AlolaSubRegions.PoniIsland, [SeafolkVillageShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Seafolk Village']), new MoveToDungeon(dungeonList['Mina\'s Houseboat']), new DockTownContent(), TemporaryBattleList['Captain Mina']], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Aether Foundation'))],
    npcs: [SeafolkCaptain, SeafolkCaptainMina, SilvallyMina, LillieSeafolkVillage],
});
TownList['Exeggutor Island'] = new Town('Exeggutor Island', GameConstants.Region.alola, GameConstants.AlolaSubRegions.PoniIsland, [ExeggutorIslandShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Exeggutor Island']), new MoveToTown('Exeggutor Island Hill', undefined, false)], {
    requirements: [new QuestLineCompletedRequirement('Emissary of Light')],
});
TownList['Altar of the Sunne and Moone'] = new Town('Altar of the Sunne and Moone', GameConstants.Region.alola, GameConstants.AlolaSubRegions.PoniIsland, [TemporaryBattleList.Lusamine, TemporaryBattleList.Necrozma, TemporaryBattleList['Ultra Megalopolis'], TemporaryBattleList.Lillie, AltaroftheSunneandMooneShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Altar of the Sunne and Moone'])], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Vast Poni Canyon'))],
    npcs: [SunFlute, MoonFlute, LillieAltar1, Lillie7, HapuAltar, PhycoAltar, LillieAltar2, ReconSquadAltar, Lillie8],
});
TownList['Pokémon League Alola'] = new Town('Pokémon League Alola', GameConstants.Region.alola, GameConstants.AlolaSubRegions.UlaulaIsland, [GymList['Elite Molayne'], GymList['Elite Olivia'], GymList['Elite Acerola'], GymList['Elite Kahili'], GymList['Champion Hau'], pokeLeagueShop()], {
    requirements: [
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mount Lanakila')),
    ],
    npcs: [RotomDexPreChamp, RotomDexChamp],
});
TownList['A Tree Maybe'] = new Town('A Tree Maybe', GameConstants.Region.alola, GameConstants.AlolaSubRegions.PoniIsland, [ATreeMaybeShop, TemporaryBattleList['Ryuki Dragon Memory']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 30)],
    npcs: [BattleTreeRed, BattleTreeBlue, RyukiSilvally],
});
// Magikarp Jump Towns
TownList['Hoppy Town'] = new Town('Hoppy Town', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump, [new DockTownContent(), new BulletinBoard(GameConstants.BulletinBoards.Hoppy), MagikarpJumpGemTrade], {
    requirements: [new QuestLineStartedRequirement('Magikarp Jump')],
    npcs: [MayorKarp, MagikarpJumpRoamerNPC, HoppyManOfMystery, DrSplash1, DrSplash2, DrSplash3, DrSplash4, DrSplash5, FishPolice],
});
TownList['Hoppy Town Fishing Pond'] = new Town('Hoppy Town Fishing Pond', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump, [new SafariTownContent('Fishing Pond')], {
    requirements: [new QuestLineStartedRequirement('Magikarp Jump')],
    npcs: [],
});
TownList['Friend League'] = new Town('Friend League', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 31)],
});
TownList['Quick League'] = new Town('Quick League', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump, [TemporaryBattleList['Magikarp Jump Koylee']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 32)],
});
TownList['Heavy League'] = new Town('Heavy League', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump, [TemporaryBattleList['Magikarp Jump Karpella'], TemporaryBattleList['Magikarp Jump Karpen']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 33)],
});
TownList['Great League'] = new Town('Great League', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump, [TemporaryBattleList['Magikarp Jump Tykarp'], TemporaryBattleList['Magikarp Jump Karpress']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 34)],
});
TownList['Fast League'] = new Town('Fast League', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump, [TemporaryBattleList['Magikarp Jump Karami'], TemporaryBattleList['Magikarp Jump Karson']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 35)],
});
TownList['Luxury League'] = new Town('Luxury League', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump, [TemporaryBattleList['Magikarp Jump Karpress 2'], TemporaryBattleList['Magikarp Jump Karpen 2'], TemporaryBattleList['Magikarp Jump Karbuck']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 36)],
});
TownList['Heal League'] = new Town('Heal League', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump, [TemporaryBattleList['Magikarp Jump Skyhopper'], TemporaryBattleList['Magikarp Jump Karpen 3'], TemporaryBattleList['Magikarp Jump Karpella 2']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 37)],
});
TownList['Ultra League'] = new Town('Ultra League', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump, [TemporaryBattleList['Magikarp Jump Karbuck 2'], TemporaryBattleList['Magikarp Jump Kareign'], TemporaryBattleList['Magikarp Jump Koylee 2']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 38)],
});
TownList['Elite Four League'] = new Town('Elite Four League', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump, [GymList['E4 League'], TemporaryBattleList['Magikarp Jump Karpress 3'], TemporaryBattleList['Magikarp Jump Karpen 4'], TemporaryBattleList['Magikarp Jump Karpella 3']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 39)],
});
TownList['Master League'] = new Town('Master League', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump, [TemporaryBattleList['Magikarp Jump Skyhopper 2'], TemporaryBattleList['Magikarp Jump Tykarp 2']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.alola, 40)],
});
TownList['Magikarp\'s Eye'] = new Town('Magikarp\'s Eye', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MagikarpJump, [MagikarpJumpShadySalesMan], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Master_League)],
    npcs: [MagikarpEyeShadySalesman],
    ignoreAreaStatus: true,
});
//Alola Dungeons
TownList['Trainers\' School'] = new DungeonTown('Trainers\' School', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MelemeleIsland, [new RouteKillRequirement(10, GameConstants.Region.alola, 18)], undefined, { npcs: [TrainerSchoolTeacher] });
TownList['Hau\'oli Cemetery'] = new DungeonTown('Hau\'oli Cemetery', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MelemeleIsland, [new RouteKillRequirement(10, GameConstants.Region.alola, 2)], [TemporaryBattleList['Captain Ilima']]);
TownList['Verdant Cavern'] = new DungeonTown('Verdant Cavern', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MelemeleIsland, [new MultiRequirement([new RouteKillRequirement(10, GameConstants.Region.alola, 2), new TemporaryBattleRequirement('Skull 2')])], undefined, { npcs: [VerdantCavernIlima] });
TownList['Melemele Meadow'] = new DungeonTown('Melemele Meadow', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MelemeleIsland, [new RouteKillRequirement(10, GameConstants.Region.alola, 3)], [new MoveToTown('Seaward Cave', new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Melemele Meadow')), false)], { npcs: [Lillie2, LillieMelemeleMeadow1, LillieMelemeleMeadow2] });
TownList['Seaward Cave'] = new DungeonTown('Seaward Cave', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MelemeleIsland, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Melemele Meadow'))], [new MoveToTown('Melemele Meadow', undefined, false), TemporaryBattleList['Recon Squad 1']]);
TownList['Ten Carat Hill'] = new DungeonTown('Ten Carat Hill', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MelemeleIsland, [new GymBadgeRequirement(BadgeEnums.Melemele_Stamp)], [TemporaryBattleList['Kahili Flying Memory']], {
    npcs: [KahiliSilvally],
});
TownList['Pikachu Valley'] = new DungeonTown('Pikachu Valley', GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland, [new RouteKillRequirement(10, GameConstants.Region.alola, 4)], undefined, {
    npcs: [PikachuValleyPikachuGeneric, PikachuValleyAlolaCap, PikachuValleyPikachuWorldCap],
});
TownList['Paniola Ranch'] = new DungeonTown('Paniola Ranch', GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland, [new TemporaryBattleRequirement('Hau 4')]);
TownList['Brooklet Hill'] = new DungeonTown('Brooklet Hill', GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland, [new TemporaryBattleRequirement('Gladion 1')], [BrookletHillShop], {
    npcs: [LanaSilvally1],
});
TownList['Wela Volcano Park'] = new DungeonTown('Wela Volcano Park', GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland, [new RouteKillRequirement(10, GameConstants.Region.alola, 7)], [WelaVolcanoParkShop, TemporaryBattleList['Captain Kiawe']], {
    npcs: [KiaweSilvally1],
});
TownList['Lush Jungle'] = new DungeonTown('Lush Jungle', GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland, [new RouteKillRequirement(10, GameConstants.Region.alola, 8)], [LushJungleShop, TemporaryBattleList['Captain Mallow'], TemporaryBattleList['Captain Lana']], { npcs: [MossRock, MallowSilvally1] });
TownList['Diglett\'s Tunnel'] = new DungeonTown('Diglett\'s Tunnel', GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland, [new QuestLineStepCompletedRequirement('Symbiotic Relations', 6)]);
TownList['Memorial Hill'] = new DungeonTown('Memorial Hill', GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland, [new RouteKillRequirement(10, GameConstants.Region.alola, 9)]);
TownList['Malie Garden'] = new DungeonTown('Malie Garden', GameConstants.Region.alola, GameConstants.AlolaSubRegions.UlaulaIsland, [new TemporaryBattleRequirement('Hau 5')]);
TownList['Hokulani Observatory'] = new DungeonTown('Hokulani Observatory', GameConstants.Region.alola, GameConstants.AlolaSubRegions.UlaulaIsland, [new RouteKillRequirement(10, GameConstants.Region.alola, 22)], [HokulaniObservatoryShop, TemporaryBattleList['Captain Sophocles'], TemporaryBattleList.Molayne], { npcs: [SophoclesSilvally1] });
TownList['Thrifty Megamart'] = new DungeonTown('Thrifty Megamart', GameConstants.Region.alola, GameConstants.AlolaSubRegions.UlaulaIsland, [new MultiRequirement([new TemporaryBattleRequirement('Skull 5'), new RouteKillRequirement(10, GameConstants.Region.alola, 14)])], [TemporaryBattleList['Acerola Ghost Memory']], { npcs: [AcerolaSilvally] });
TownList['Ula\'ula Meadow'] = new DungeonTown('Ula\'ula Meadow', GameConstants.Region.alola, GameConstants.AlolaSubRegions.UlaulaIsland, [new RouteKillRequirement(10, GameConstants.Region.alola, 16)]);
TownList['Po Town'] = new DungeonTown('Po Town', GameConstants.Region.alola, GameConstants.AlolaSubRegions.UlaulaIsland, [new RouteKillRequirement(10, GameConstants.Region.alola, 17)], [TemporaryBattleList['Guzma Bug Memory']], { npcs: [PoTownNanu, PoTownHomeowner, GuzmaSilvally] });
TownList['Aether Foundation'] = new DungeonTown('Aether Foundation', GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland, [new GymBadgeRequirement(BadgeEnums.Ula_Ula_Stamp)], [
    new GemMasterShop(GameConstants.GemShops.SilvallyTrader, 'Memory Replicator', [new QuestLineStepCompletedRequirement('Typing some Memories', 3)], true),
    TemporaryBattleList['Aether Branch Chief Faba'],
    TemporaryBattleList['Team Aqua Leader Archie'],
    TemporaryBattleList['Team Magma Leader Maxie'],
    TemporaryBattleList['Team Galactic Leader Cyrus'],
    TemporaryBattleList['Team Flare Leader Lysandre'],
    TemporaryBattleList['Team Plasma Leader Ghetsis'],
    TemporaryBattleList['Team Rainbow Leader Giovanni'],
], {
    npcs: [HauAether, GladionAether, LillieAether, SilvallyGladion1, SilvallyGladion2, SilvallyGladion3, SilvallyGladion4, SilvallyGladion2Hints, SilvallyGladion3Hints],
});
TownList['Exeggutor Island Hill'] = new DungeonTown('Exeggutor Island Hill', GameConstants.Region.alola, GameConstants.AlolaSubRegions.PoniIsland, [new QuestLineStepCompletedRequirement('Emissary of Light', 1)], [ExeggutorIslandHillShop, TemporaryBattleList['Exeggutor Tree']], { npcs: [LillieExeggutorIsland, HapuSilvally1] });
TownList['Vast Poni Canyon'] = new DungeonTown('Vast Poni Canyon', GameConstants.Region.alola, GameConstants.AlolaSubRegions.PoniIsland, [new QuestLineStepCompletedRequirement('Emissary of Light', 3)], [
    new AccessGym(GymList['Exeggutor Island'], new MultiRequirement([new TemporaryBattleRequirement('Recon Squad 3'), new QuestLineStepCompletedRequirement('Emissary of Light', 4, GameConstants.AchievementOption.less)])),
    TemporaryBattleList['Recon Squad 3'],
    TemporaryBattleList['Plumeria Poison Memory'],
], { npcs: [HapuCanyon, PlumeriaSilvally] });
TownList['Mina\'s Houseboat'] = new DungeonTown('Mina\'s Houseboat', GameConstants.Region.alola, GameConstants.AlolaSubRegions.PoniIsland, [new QuestLineStepCompletedRequirement('Eater of Light', 2)]);
TownList['Mount Lanakila'] = new DungeonTown('Mount Lanakila', GameConstants.Region.alola, GameConstants.AlolaSubRegions.UlaulaIsland, [new TemporaryBattleRequirement('Gladion 3')], [MountLanakilaShop], {
    npcs: [IceRock, LanakilaColress, VeteranSilvally1],
});
TownList['Lake of the Sunne and Moone'] = new DungeonTown('Lake of the Sunne and Moone', GameConstants.Region.alola, GameConstants.AlolaSubRegions.UlaulaIsland, [new GymBadgeRequirement(BadgeEnums.Champion_Stamp)]);
TownList['Ruins of Conflict'] = new DungeonTown('Ruins of Conflict', GameConstants.Region.alola, GameConstants.AlolaSubRegions.MelemeleIsland, [new QuestLineStartedRequirement('Welcome to Paradise, Cousin!')], [TemporaryBattleList['Melemele Spearow']], {
    npcs: [Lillie1, LillieMahaloTrail1, LillieMahaloTrail2],
});
TownList['Ruins of Life'] = new DungeonTown('Ruins of Life', GameConstants.Region.alola, GameConstants.AlolaSubRegions.AkalaIsland, [new TemporaryBattleRequirement('Plumeria 1')], [new AccessGym(GymList['Konikoni City'], new QuestLineStepCompletedRequirement('Symbiotic Relations', 8, GameConstants.AchievementOption.less))], {
    npcs: [LillieRuinsOfLife],
});
TownList['Ruins of Abundance'] = new DungeonTown('Ruins of Abundance', GameConstants.Region.alola, GameConstants.AlolaSubRegions.UlaulaIsland, [new RouteKillRequirement(10, GameConstants.Region.alola, 23)]);
TownList['Ruins of Hope'] = new DungeonTown('Ruins of Hope', GameConstants.Region.alola, GameConstants.AlolaSubRegions.PoniIsland, [new RouteKillRequirement(10, GameConstants.Region.alola, 26)], undefined, {
    npcs: [HapuHope],
});
TownList['Poni Meadow'] = new DungeonTown('Poni Meadow', GameConstants.Region.alola, GameConstants.AlolaSubRegions.PoniIsland, [new RouteKillRequirement(10, GameConstants.Region.alola, 28)]);
TownList['Resolution Cave'] = new DungeonTown('Resolution Cave', GameConstants.Region.alola, GameConstants.AlolaSubRegions.PoniIsland, [
    new QuestLineStepCompletedRequirement('Ultra Beast Hunt', 17),
]);
//Galar Shops
const PostwickShop = new Shop([
    ItemList.Pokeball,
]);
const WedgehurstShop = new Shop([
    ItemList.Pokeball,
    ItemList.Mystery_egg,
    ItemList.Wonder_Chest,
    ItemList.Miracle_Chest,
]);
const TurffieldShop = new Shop([
    ItemList.Pokeball,
    ItemList.Grass_egg,
    ItemList.Sweet_apple,
    ItemList.Tart_apple,
    ItemList.Leaf_stone,
    ItemList.Sun_stone,
]);
const HulburyShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Water_egg,
    ItemList.Water_stone,
    ItemList.Kings_rock,
    ItemList.Prism_scale,
    ItemList.Deepsea_tooth,
    ItemList.Deepsea_scale,
]);
const MotostokeShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Fire_egg,
    ItemList.Fire_stone,
    ItemList.Linking_cord,
    ItemList.Magmarizer,
]);
const HammerlockeShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Event_calendar,
    ItemList.Dragon_egg,
    ItemList.Metal_coat,
    ItemList.Upgrade,
    ItemList.Dragon_scale,
]);
const StowonSideShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Fighting_egg,
    ItemList.Soothe_bell,
    ItemList.Dawn_stone,
    ItemList.Dubious_disc,
    ItemList.Reaper_cloth,
]);
const GlimwoodTangleShop = new Shop([
    ItemList['Zarude (Dada)'],
], 'Zarude Village', [new QuestLineCompletedRequirement('Secrets of the Jungle')]);
const BallonleaShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Cracked_pot,
    ItemList.Moon_stone,
    ItemList.Shiny_stone,
    ItemList.Sachet,
    ItemList.Whipped_dream,
]);
const CirchesterShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Razor_claw,
    ItemList.Razor_fang,
    ItemList.Protector,
    ItemList.Ice_stone,
]);
const SpikemuthShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Electric_egg,
    ItemList.Thunder_stone,
    ItemList.Dusk_stone,
    ItemList.Electirizer,
]);
const WyndonShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.SmallRestore,
    ItemList.MediumRestore,
    ItemList.LargeRestore,
    ItemList.xAttack,
    ItemList.xClick,
    ItemList.Lucky_egg,
    ItemList.Token_collector,
    ItemList.Dowsing_machine,
    ItemList.Lucky_incense,
]);
const MasterDojoShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Galarica_cuff,
    ItemList.Galarica_wreath,
]);
const FreezingtonShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
]);
//Galar NPCs
const PostwickMum = new NPC('Mum', [
    'Don’t go too far into the Slumbering Weald.',
    'I’ve heard there are some very strong Pokémon in there.',
    'Only those who beat the champion are strong enough to face them!',
]);
const WedgehurstRailStaff = new NPC('Rail Staff', [
    'There are some areas around Galar that you can only reach after beating the Champion.',
    'One is an island paradise, the other a freezing wasteland.',
    'I’m sure if you go to these places you’ll find many unique and powerful Pokémon!',
], { image: 'assets/images/npcs/Rail Staff.png' });
const AssistantHenry = new NPC('Assistant Henry', [
    'There are many Pokémon in Galar that I heard look completely different in other regions of the world! They can also evolve in unique ways!',
    'I know that reckless one, Linoone, will only evolve during the night time here. But, I also think I’ve seen its evolution wandering across the lake if you have a way to cross.',
]);
const BattleCafeMaster = new NPC('Battle Café Master', [
    'Milcery can evolve when you spin around with it, while treating it to a Sweet.',
    'For example, you can whip up a Vanilla Alcremie, by spinning clockwise for less than 5 seconds, during the day. Piece of cake! There’s a unique form for each Sweet under this circumstance, so bake it till you make it!',
    'There are more tiers to Alcremie than I can count. Mix up the direction, duration, time of day, and the given Sweet to discover all the flavours there are to find.',
    'I will suggest that you only do 3 spins a day if you don’t want to end up sick! You might be able to try more, when you get more experienced with a flavour...',
    'Stop by the Battle Café, we sell all the Sweets you’ll need!',
], { image: 'assets/images/npcs/BattleCafeMaster.png' });
const MotostokeArtist = new NPC('Artist Duncan', [
    'My Kantonian Farfetch’d would never evolve no matter how many fresh Leeks I gave it.',
    'Lo and behold, here in Galar the Farfetch’d wield thick, tough leeks for battle!',
    'Once my Galarian Farfetch’d was holding a Leek.. Blimey, I was surprised how quickly he transformed into a noble ally! With the Leek growing into a mighty stalk for battle!',
], { image: 'assets/images/npcs/Artist (Gen 8).png' });
const TurffieldCook = new NPC('Cook Stuart', [
    'I love Sweet and Tart Apples! Oh, this is Applin! He isn’t a snack, but helps me make all sorts of dishes!',
    'Applin absolutely loves Sweet and Tart treats.',
    'But, I could never give Applin a Sweet or Tart Apple, that just seems so... wrong...',
    'I can’t be missing out on much anyways, what could be more perfect than my Applin!',
], { image: 'assets/images/npcs/Cook.png' });
const Meteorologist = new NPC('Meteorologist', [
    'The Pokémon in the Wild Area are very finicky, and many of them only appear in certain weathers.',
    'I\'ve also heard that the Pokémon in the Isle of Armor to the East, and the Crown Tundra to the South, are also like this.',
    'There are even some Pokémon, namely Cramorant and Eiscue, that only appear in certain forms depending on weather.',
]);
const HammerlockeHiker = new NPC('Hiker Donald', [
    'Have you spotted a blue bird walking around with an Arrokuda in its throat? It’s quite a daft Pokémon, but it sure is hungry! I guess if it trains near water it tries to swallow Arrokudas, but they always get stuck in its throat.',
    'My mate told me a story of a Pikachu getting lodged in the gluttonous bird’s gullet while it was gorging in a thunderstorm! But that sounds ridiculous! How would it not be bothered by the big rat in its throat? It would drive me mad.',
], { image: 'assets/images/npcs/Hiker (Gen 8).png' });
const WyndonBattleCafeRichard = new NPC('Richard', [
    'This might sound cheesy, but I love Milcery so much! I wasn\'t sure which Alcremie form I liked the most, so I just grabbed a Sweet at random and started to spin and spin for what seemed like an hour.',
    'I saw my partner liked it a lot! Maybe you should try the same one day!',
]);
const AncientMural1 = new NPC('Ancient Mural', [
    '<i>It’s Stow-on-Side’s famous mural.</i>',
    '<i>It’s said to be a very deep work of art...</i>',
], {
    image: 'assets/images/npcs/other/Ancient Mural.png',
    requirement: new QuestLineStepCompletedRequirement('The Darkest Day', 1, GameConstants.AchievementOption.less),
});
const AncientMural2 = new NPC('Ancient Mural Ruins', [
    '<i>It’s the statues that were hidden behind Stow-on-Side’s famous mural.</i>',
    '<i>They depict two heroes and two Pokémon.</i>',
], {
    image: 'assets/images/npcs/other/Ancient Mural Ruins.png',
    requirement: new QuestLineStepCompletedRequirement('The Darkest Day', 1),
});
const StowonSideSonia = new NPC('Sonia', [
    'Not a brilliant turn of events, but the ruins were brought into the light for us to see...',
    'What does this tell us about Galar’s legends? More than any hero, there’s those things that appear to be Pokémon that stand out!',
    'Not just that, but those Pokémon appear to be holding a sword and shield as if they were using them!',
    'More than any statue of a hero or old tapestry, these ruins made in truly ancient times must show us the real truth.',
    'Seems like at some point in history the sword and shield were combined with the two actual Pokémon and treated as the same thing...',
    'Two young heroes... The sword and shield were actually Pokémon... But why would the truth of these ruins be hidden when their stories were depicted in artwork?',
], {
    image: 'assets/images/npcs/Sonia.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Darkest Day', 1), new QuestLineStepCompletedRequirement('The Darkest Day', 3, GameConstants.AchievementOption.less)]),
});
const Archaeologist = new NPC('Archaeologist', [
    'I\'ve been studying the Galarian form of Yamask.',
    'It seems they do not evolve into Galarian Cofagrigus, but a completely different Pokémon instead.',
    'For some mysterious reason, they only evolve when trained in a specific area of the wild area known as the Dusty Bowl.',
], { image: 'assets/images/npcs/Ruin Maniac.png' });
const HerosBath = new NPC('Hero’s Bath', [
    '<i>The ancient Hero’s Bath.</i>',
    '<i>They say this is where the two heroes came to soothe their wounds after the battle to bring down that evil presence, long ago.</i>',
], { image: 'assets/images/npcs/other/HerosBath.png' });
const CirchesterHop = new NPC('Hop', [
    'Based on the statues the sword and shield must have actually been two Pokémon, right?',
    'You remember the Pokémon we met in the Slumbering Weald?',
    'Do you think...it could’ve been one of them? I mean the sword or the shield Pokémon?',
    'Perhaps when their duty was completed, they went into some kind of sleep?',
], {
    image: 'assets/images/npcs/Hop.png',
    requirement: new MultiRequirement([new TemporaryBattleRequirement('Hop 7'), new QuestLineStepCompletedRequirement('The Darkest Day', 6, GameConstants.AchievementOption.less)]),
});
const CirchesterSonia = new NPC('Sonia', [
    'Hmm... Who exactly were the heroes that bathed here?',
    'Nowadays only Pokémon really use the Hero’s Bath...',
    'I think I’ll have to look more into the history of the Slumbering Weald.',
], {
    image: 'assets/images/npcs/Sonia.png',
    requirement: new MultiRequirement([new TemporaryBattleRequirement('Hop 7'), new QuestLineStepCompletedRequirement('The Darkest Day', 6, GameConstants.AchievementOption.less)]),
});
const CirchesterGuitarist = new NPC('Guitarist Justin', [
    'I caught this Snom on Steamdrift Way and we’ve become really good mates.',
    'I thought that friendship was all Snom needed to evolve, but I kept trying to give it a Soothe Bell during the day and nothing happened!',
    'I’m too busy playing gigs to scamper around with Snom in the evening!',
], { image: 'assets/images/npcs/Guitarist (male).png' });
const TeamYellGrunts = new NPC('Team Yell Grunts', [
    'Our Marnie’s Morpeko is so cute, don’tcha think?',
    'When it’s hungry, though, it gets so angry it changes forms.',
    'If you want to catch it in that form, you would probably be best trying to attract it with a berry that electric Pokémon like.',
], { image: 'assets/images/npcs/Team Yell Grunts.png' });
const RoseBroadcast = new NPC('Broadcast of Chairman Rose', [
    'Hello there, Leon! Just letting you know...',
    'I think it\'s time I brought about the Darkest Day. For the sake of Galar\'s future, of course!',
    'But I\'m in a bit of a pickle. The energy released by the Darkest Day is too much for us to contain.',
    'I\'m sorry it\'s come to this. But it\'s you who forced my hand, Leon. You refused to listen!',
], {
    image: 'assets/images/npcs/Macro Cosmos (rose).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Darkest Day', 10), new QuestLineStepCompletedRequirement('The Darkest Day', 12, GameConstants.AchievementOption.less)]),
});
const WyndonHop = new NPC('Hop', [
    'That video stream... That was from Hammerlocke Stadium, right? What in the world did the chairman do...?',
    'I want to help my brother! I\'ve got to! But I can\'t even manage to beat you, so what sort of help could I ever be...?',
    'Hold the phone... The chairman was talking about the Darkest Day. That\'s the thing where the sky went all dark once, ages and ages ago, right? What does he mean, he\'s bringing that about? And where did we even hear that name...?',
    'Ah! That statue of the hero in Motostoke! Sonia said something back then, didn\'t she... Though it turned out to be wrong, since there were actually two heroes and all that.',
    'Still! Those two managed to bring an end to the Darkest Day with the sword and shield Pokémon! Sonia thought the Pokémon might still be sleeping somewhere though, right?',
    'That\'s it! I\'m sure it\'s got to be the Slumbering Weald! Those illusions you tried to fight off that day—they must\'ve been the Pokémon that are supposed to be sleeping there!',
    'Let\'s go back to the Slumbering Weald! If we\'re lucky, we\'ll find something that can help!',
], {
    image: 'assets/images/npcs/Hop.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Darkest Day', 11), new QuestLineStepCompletedRequirement('The Darkest Day', 13, GameConstants.AchievementOption.less)]),
});
const SlumberingHop1 = new NPC('Hop', [
    'Would you take a look at that! Now that\'s something you don\'t see every day... This place definitely feels like the stuff of legend. See that! The sword and the shield! The legends really were true!',
    'That settles it! We\'re taking the sword and shield. Though...wow, would you look at the state of these things? They seem like they might fall to pieces if you so much as look at \'em funny.',
    'I don\'t know if these rusty old things will really be able to stop the Darkest Day, but... Well, I guess it can\'t hurt to have them along! Let\'s hope they bring us some good luck!',
    'Maybe the Pokémon themselves really are still asleep somewhere. So it seems we\'re on our own if we want to go help Lee. This is all the help we\'ve got!',
], {
    image: 'assets/images/npcs/Hop.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Darkest Day', 13), new QuestLineStepCompletedRequirement('The Darkest Day', 15, GameConstants.AchievementOption.less)]),
});
const EnergyPlantRose = new NPC('Chairman Rose', [
    'Most impressive! I wouldn\'t expect any less from a challenger endorsed by the strongest Champion ever to grace our beloved Galar region!',
    'I really do wish I could have seen the Championship Match between you two. And I\'m terribly sorry to have ruined the whole Gym Challenge and everything!',
    'It\'s too bad, but it can\'t be helped... In order to solve the energy issue as soon as possible, we awakened Eternatus. But we couldn\'t control it. The Champion came to aid me, even at the cost of abandoning the match. Indeed, just like a knight in shining armor coming to rescue a princess from a dragon!',
    'I do tend to ramble on, I know. I love to make speeches. But I think I can stop talking now. I think the Champion should have captured Eternatus by now. If you\'re curious, you can take the lift up.',
    'And I trust you\'ll be going too, right, Hop? I certainly hope losing to me didn\'t discourage you too much. Go on now, both of you! Go see how our Champion is doing!',
], {
    image: 'assets/images/npcs/Macro Cosmos (rose).png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Darkest Day', 15), new QuestLineStepCompletedRequirement('The Darkest Day', 17, GameConstants.AchievementOption.less)]),
});
const EternatusCatch = new PokemonGiftNPC('Catch Eternatus', [
    'You caught Eternatus!',
], 'Eternatus', 'assets/images/pokemon/890.png', { saveKey: 'eternatuscatch', requirement: new MultiRequirement([new TemporaryBattleRequirement('The Darkest Day'), new ObtainedPokemonRequirement('Eternatus', true)]) });
const Leon = new NPC('Leon', [
    'My matches are always sold out, but this... I\'ve never seen a crowd this wild!',
    'Everyone knows what you did for us this week... They know you\'re the one who caught Eternatus and saved the future of the Galar region.',
    'A real hero, who battled alongside the Legendary Pokémon, Zacian and Zamazenta... I couldn\'t have dreamed of a better challenger to help increase my winning streak!',
    'Now that I\'ve seen just what kind of strength you possess as the greatest of challengers...crushing you into the dirt will show everyone just how strong their Champion truly is!',
    'Come on, now! Let\'s make this a final match that\'ll go down in Galar\'s history! No! A match that\'ll change Galar forever!',
    'We\'re gonna have an absolutely champion time!',
], {
    image: 'assets/images/npcs/Leon.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Darkest Day', 18), new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion, GameConstants.AchievementOption.less)]),
});
const SlumberingHop2 = new NPC('Hop', [
    'Huh? What\'re you doing here in the woods? Nobody ever comes in here, since this is the forest where Zacian and Zamazenta rested. It\'s the best place to do a bit of thinking, since it\'s so quiet and all.',
    'Oh, but I hadn\'t had the chance to tell you! Congrats on your victory! Honestly... I never thought you\'d manage to beat my brother. The greatest Champion Galar ever had! He was undefeatable till you came around! It\'s actually still pretty hard to believe...',
    'Really... You\'re amazing. So amazing, maybe, that I don\'t even realize just how amazing you really are!',
    'So, do you think... Would you be up for one more battle?',
], {
    image: 'assets/images/npcs/Hop.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Sword and Shield'), new QuestLineStepCompletedRequirement('Sword and Shield', 1, GameConstants.AchievementOption.less)]),
});
const SordwardShielbert1 = new NPC('Sordward & Shielbert', [
    'Well, well, well... I thought I heard someone making some noise over this way!',
    'I am Sordward!',
    'I am Shielbert!',
    'We are the new kings of Galar! We\'re descendents of the first kings!',
    'More than that, we\'re celebrities!',
    'Well, well, well! Could these things here be the fabled sword and shield?',
    'Well, well, well! They certainly are dirty! They must be fake! I fear to touch them with my bare hands.',
    'Oh, you want us to return them? Then perhaps we should settle this with a battle?',
], {
    image: 'assets/images/npcs/Sordward & Shielbert.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Sword and Shield', 1), new QuestLineStepCompletedRequirement('Sword and Shield', 3, GameConstants.AchievementOption.less)]),
});
const SordwardShielbert2 = new NPC('Sordward & Shielbert', [
    'We know all the Wishing Stars that Chairman Rose had gathered are here. We celebrities have an advanced level of insight into such things!',
    'You non-celebrities are not suited to having such valuable things. Hand them over to us.',
    'You wish to keep them from us? No matter. This time we\'ve brought much stronger Pokémon to thoroughly trounce you with!',
], {
    image: 'assets/images/npcs/Sordward & Shielbert.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Sword and Shield', 6), new QuestLineStepCompletedRequirement('Sword and Shield', 8, GameConstants.AchievementOption.less)]),
});
const SordwardShielbert3 = new NPC('Sordward & Shielbert', [
    'Well, well, well? It seems you have rescued the stadiums from their perils. As expected of the Champion.',
    'You want to know why we have been forcing those Pokémon to rampage? We did it in order to expose the true nature of Zacian and Zamazenta!',
    'We have always been revered as the resplendent descendents of the real hero...',
    'It\'s all because you ruffians had to go and save Galar from Eternatus!',
    'You said that the real heroes were Pokémon! You just carelessly changed history!',
    'What does that mean we are? You dare say that our esteemed ancestors were liars?',
    'It\'s obvious that the old history was better! It was right!',
    'To suddenly start creating heroes left and right... It\'s complete rubbish!',
    'Ahem... If you want to take the lift up, you\'ll have to defeat us! This time we will show you the opulent Pokémon we have raised explicity for this battle!',
], {
    image: 'assets/images/npcs/Sordward & Shielbert.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Sword and Shield', 13), new QuestLineStepCompletedRequirement('Sword and Shield', 15, GameConstants.AchievementOption.less)]),
});
const SordwardShielbert4 = new NPC('Sordward & Shielbert', [
    'Fwahaheho! We did it! Zacian and Zamazenta came, following after the Rusted Sword and Shield!',
    'Yes! Expose your true, barbaric, brutish nature...and reveal to us exactly who the false kings are!',
    'W-wait! D-don\'t attack us! Go into town, and sow as much destruction as you can!',
], {
    image: 'assets/images/npcs/Sordward & Shielbert.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Sword and Shield', 15), new QuestLineStepCompletedRequirement('Sword and Shield', 17, GameConstants.AchievementOption.less)]),
});
const Piers = new NPC('Piers', [
    'As expected of the Champion... You took complete control of the situation.',
    'Plus it looks like those Pokémon are waiting for you, now they\'re calmed down an\' all.',
], {
    image: 'assets/images/npcs/Piers.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Sword and Shield', 17), new QuestLineStepCompletedRequirement('Sword and Shield', 19, GameConstants.AchievementOption.less)]),
});
const EnergyPlantHop = new NPC('Hop', [
    'Huh? Oh, hi. I forgot to say, congrats on catching Zacian and Zamazenta!',
    'Y\'know, Zacian and Zamazenta got the Rusted Sword and the Rusted Shield back, right?',
    'But when you caught them, neither were using them. But they must still have them, right?',
    'So.... Maybe if you keep defeating them, they\'ll occasionally drop them?',
], {
    image: 'assets/images/npcs/Hop.png',
    requirement: new MultiRequirement([new QuestLineCompletedRequirement('Sword and Shield')]),
});
const SouthGalarRoamerNPC = new RoamerNPC('Professor Sonia', [
    'I’ve heard there’s been sightings of a never-before-seen, super strong Pokémon on {ROUTE_NAME}! You should go check it out!',
], GameConstants.Region.galar, RoamingPokemonList.findGroup(GameConstants.Region.galar, GameConstants.GalarSubRegions.SouthGalar), 'assets/images/npcs/Professor Sonia.png');
//Isle of Armor NPCs
const IsleofArmorRoamerNPC = new RoamerNPC('Master Dojo Student', [
    'One of the other students said they saw a rare Pokémon on {ROUTE_NAME}. Might be worth having a look.',
], GameConstants.Region.galar, RoamingPokemonList.findGroup(GameConstants.Region.galar, GameConstants.GalarSubRegions.IsleofArmor), 'assets/images/npcs/Master Dojo.png');
const Mustard1 = new NPC('Mustard', [
    '... ... ... Why hello there! My name is Mustard! I\'m rather good at Pokémon battles, you know! I\'m pleased as cheese that you could join us!',
    'Yaaay! This is my favorite part! I wanna see just how good you are! So, why not have a battle with little old me? Just say the word when you\'re ready!',
], {
    image: 'assets/images/npcs/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('The Dojo\'s Armor'), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 1, GameConstants.AchievementOption.less)]),
});
const Mustard2 = new NPC('Mustard', [
    'Bah ha ha! I lost! You\'re pretty strong, aren\'t you? The way you battle really shows me how much you care about your Pokémon! Even if you\'ve come because of a misunderstanding, as long as you have a will to learn... then you\'re welcome at the Master Dojo! I think we can all help each other become stronger! I\'m happy you\'ve come to join us!',
    'Now then! The dojo\'s at max capacity! It\'s time to really start our training! You\'ll all be facing three trials. And there\'s more! The person who completes the three trials will receive the secret armor of this dojo!',
    'For the first trial, my students... You\'ve all gotta defeat 6 of those fast Galarian Slowpoke, trained with care by little old me! But that\'s not all... You need to catch them, too!',
], {
    image: 'assets/images/npcs/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 1), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 3, GameConstants.AchievementOption.less)]),
});
const Mustard3 = new NPC('Mustard', [
    'Well mustered! You cleared the first trial like it was nothing! Why, I think this is the first time since Leon that someone was able to handle all six fast Slowpoke on their own! The rest of you tried very hard, too! You were able to catch up to the Slowpoke, but I guess you couldn\'t defeat them.',
    'Tell you what. Anyone who was able to catch up to a Slowpoke at least once gets a pass! Our new student here really outdid themselves, so it\'s only fair everyone else gets another chance. Try to make a comeback, everybody!',
    'And for your second trial we have mushroom picking! I\'m tasking you with finding three Max Mushrooms! They are red with a spiral pattern. I\'m pretty sure they grow in dark, humid places! And with that, your next trial begins! I\'m countin\' on ya!',
], {
    image: 'assets/images/npcs/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 3), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 4, GameConstants.AchievementOption.less)]),
});
const Mustard4 = new NPC('Mustard', [
    'Hey! My bad, my bad! It just dawned on me that you\'re brand-new to the Isle of Armor! I bet you have no idea where to even begin looking for Max Mushrooms! C\'mon--let\'s go for a walk, and I\'ll show you some mushroom hot spots.',
    'Dum dum dee dee... La la de daaa... Now, usually the Forest of Focus is chock-full of Max Mushrooms. But the thing is, a swarm of Greedent came through and ate every last one here! So I\'m thinking maybe you\'ll have more luck finding Max Mushrooms if you go check Warm-Up Tunnel.',
    'It\'s out on the other side of the forest! Just watch where you\'re going in the forest, \'K? It\'s easy to get lost! Anyhoo... Good luck with the hunt for Max Mushrooms! Catch you back at the dojo!',
], {
    image: 'assets/images/npcs/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 4), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 7, GameConstants.AchievementOption.less)]),
});
const Klara1 = new NPC('Klara', [
    'Hold up a sec! *wheeze*... *wheeze*... Hellooo, what\'s this?! Three Max Mushrooms in one spot? Here I thought I\'d need to go find them one by one! I saw those mushrooms first! I swear! I\'ve been at the dojo longer and all. Sooo... It\'s only fair you let me have \'em. Riiight?',
    'Waaait... What\'s this, now? Are you givin\' me attitude? Pityin\' me, are you?! Gosh, you\'re such a pain in the neck... You just show up outta nowhere, and just happen to be young and talented... If you\'re looking to get in my way, well, I think some vile poisons will take care of that!',
], {
    image: 'assets/images/npcs/Klara.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 5), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 7, GameConstants.AchievementOption.less)]),
});
const Avery1 = new NPC('Avery', [
    'Wait just one moment! *pant*... *pant*... Hah! Just as I expected! Multiple Max Mushrooms growing in a bunch! My psychic powers picked up on these Max Mushrooms eons before you found them. I believe I should be the first one to get those Max Mushrooms. First come, first served, and all!',
    'What\'s this? Are you trying to show you\'re stronger than me? How distasteful! I find your presence most disturbing! You show up at the dojo unannounced and go on to show such talent, even though you\'re still so young... You dare get in my way? I warned you about my psychic powers, and now you\'ll experience them firsthand!',
], {
    image: 'assets/images/npcs/Avery.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 5), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 7, GameConstants.AchievementOption.less)]),
});
const Mustard5 = new NPC('Mustard', [
    'Hey there! Welcome back! Looks like you nailed the trial! Congrats on finding the Max Mushrooms! Trial number two was no problem for you!',
    'All my other students ended up getting lost in the forest... Turns out finding Max Mushrooms was the least of their problems! It\'s a shame, but I guess everyone other than you will fail the trial...',
    'Oh! Klara and Avery! You two look out of breath... But you have some Max Mushrooms, so it looks like you both pass the second trial as well!',
    'Right! Well, I\'ve decided that you three... will now take the Master Dojo\'s...final...last...ultimate...third trial!',
    'You three are the only ones who successfully finished the second trial! You\'ve pushed each other to greater heights and helped each other grow. So I\'d say it\'s time to finally see who is stronger... in a Pokémon battle!',
    'Yep! The rules are simple. Whoever wins will complete the trial! The winner will be granted the secret armor of the Master Dojo!',
], {
    image: 'assets/images/npcs/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 7), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 10, GameConstants.AchievementOption.less)]),
});
const Klara2 = new NPC('Klara', [
    'You are here.',
    'When I beat you, I\'ll get the secret armor... and then I\'ll become a Poison-type Gym Leader! I\'ve got to win, no matter what.. I\'m gonna go all out and totally beat you. You ready?',
    'I\'m not holding a single thing back anymore. Time to settle this-fair and square! Oh, and maybe watch your step... Looks like some Toxic Spikes somehow got on the Battle Court!',
], {
    image: 'assets/images/npcs/Klara.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 8), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 10, GameConstants.AchievementOption.less)]),
});
const Avery2 = new NPC('Avery', [
    'So, you\'ve come at last.',
    'Defeating you will grant me the secret armor...then I will at last have what I need to become a Psychic-type Gym Leader! No matter what it takes, I refuse to accept anything but a complete and utter victory... I\'m coming at you with everything I have.',
    'Heh. Let us have an elegant battle worthy of being called a finale. Prepare to sink into despair...and into the weird battlefield beneath your feet!',
], {
    image: 'assets/images/npcs/Avery.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 8), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 10, GameConstants.AchievementOption.less)]),
});
const Mustard6 = new NPC('Mustard', [
    'The victor has been decided! The one to complete the third trial is you, our newest student! You gave it your best and triumphed, even when faced with an unfair challenge. To you, who has completed all the trials... I grant the secret armor of the Master Dojo!',
    'Now then... Come on out! This Pokémon is in fact the secret armor of the Master Dojo! Say hello to...Kubfu!',
    '<img src="assets/images/pokemon/891.png">',
    'I know... I know... It\'s tiny... But raise it with diligence, and it\'ll become strong enough to see you through any battle, just like a suit of armor. No opponent will be able to get past it!',
    'Now, I give you permission to catch it!',
], {
    image: 'assets/images/npcs/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 10), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 12, GameConstants.AchievementOption.less)]),
});
const Mustard7 = new NPC('Mustard', [
    'Good! Now then... The first thing for you to do is become best friends with Kubfu! You need to build trust! Kubfu hasn\'t really had a chance to explore the world outside the dojo, so... Maybe it\'ll help you become better friends if you train alongside it!',
    'Hmm. Maybe you should train against Dark and Water-types. It will be useful for it to know their weaknesses, since they will be its own weaknesses when it evolves.',
], {
    image: 'assets/images/npcs/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 12), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 14, GameConstants.AchievementOption.less)]),
});
const Mustard8 = new NPC('Mustard', [
    'You\'re back! I can see already you look closer to Kubfu, and its training is going well! It isn\'t quite ready yet, however! To switch it up a little, you should now have it help you with catching some Water and Dark-type Pokémon!',
], {
    image: 'assets/images/npcs/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 14), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 16, GameConstants.AchievementOption.less)]),
});
const Mustard9 = new NPC('Mustard', [
    'Good, good! You two are just the best of friends now, aren\'t you? Kubfu\'s really become more confident. How wonderful! I daresay I think you\'re both ready.',
    'Now then! If you want Kubfu to become stronger... there are special training grounds just for Kubfu! Prepare yourselves for the...Towers of Two Fists! The blue tower is the Tower of Waters! And the red tower is the Tower of Darkness!',
    'Each tower will help Kubfu learn a different fighting style! I\'m really looking forward to when you two make it to the top of those towers! It\'s going to be so exciting!',
], {
    image: 'assets/images/npcs/Mustard.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 16), new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 18, GameConstants.AchievementOption.less)]),
});
const Mustard10 = new NPC('Mustard', [
    'Behold! Before you stands Urshifu! Sure to be unyielding armor that will shatter any blade turned against it... And it has mastered the styles of darkness and water!',
    'Ha! You\'ve certainly grown, haven\'t you? And to think, not long ago you would\'ve run and hid behind me the moment you got scared! Indeed, no matter how old I get, witnessing someone grow always brings joy to my heart. Urshifu! And you as well! Thank you both, from the bottom of my heart.',
], {
    image: 'assets/images/npcs/Dojo Master.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 18), new QuestLineCompletedRequirement('The Dojo\'s Armor', GameConstants.AchievementOption.less)]),
});
const JungleAsh1 = new NPC('Ash Ketchum', [
    'Hey! I didn\'t expect to see you again here. Fancy a ba-. Actually, no, I\'d like to ask a favour of you; a friend of mine living in Glimwood Tangle called me asking for some help.',
    'I would go myself, but I promised one of the students here a battle and I don\'t want to bail on them. Would you be able to go for me?',
    'Great! My friend\'s name is Koko, tell him I sent you. This battle shouldn\'t take me too long, so come ask for my help if you need it!',
], {
    image: 'assets/images/npcs/Ash Ketchum.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Secrets of the Jungle'), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 1, GameConstants.AchievementOption.less)]),
});
const JungleKoko1 = new NPC('Koko', [
    'Hmm? Who are you? Oh, so Ash sent you to help me? That\'s great!',
    'So, I\'m part of a tribe of Pokémon called Zarude, I was raised by them despite being a human. One of them has gone missing, I\'ve been told they were seen roaming, completely lost, around the Isle of Armor.',
    'Could you go catch it and bring it back here? If you need help locating it, I\'m sure one of the students at the dojo they have there could help you.',
], {
    image: 'assets/images/npcs/Koko.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 0), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 2, GameConstants.AchievementOption.less)]),
});
const JungleKoko2 = new NPC('Koko', [
    'Great, you found it! Now if you could release it... hmm? It seems to like you. Well, if it wants to stay with you, that\'s its choice, so I guess it\'s fine.',
    'Oh, it looks like a group of Zarude from the tribe are here..... They... are angry, they think you caught Zarude against its will. I\'ll try and talk sense into them,',
    'Zaruza! Zaru Zaru! Zarude!.. Nope, they\'re too angry to listen. Looks like you\'ll have to fight them if we want to calm them down. Zarude are strong, but I\'m sure you\'ll be fine if you are anywhere near as strong as Ash.',
], {
    image: 'assets/images/npcs/Koko.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 2), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 4, GameConstants.AchievementOption.less)]),
});
const JungleKoko3 = new NPC('Koko', [
    'Well, they\'re all knocked out. I\'ll try to talk reason into them when they wake up. Thanks for your help, I\'m glad you found Zarude safe.',
    '...oh no. Another two groups of Zarude are coming and, as I\'m sure you can already guess, being surrounded by unconscious Zarude does not make you look good to them.',
    'I\'m really sorry, it seems you\'ll have to fight off these ones as well.',
], {
    image: 'assets/images/npcs/Koko.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 4), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 6, GameConstants.AchievementOption.less)]),
});
const JungleKoko4 = new NPC('Koko', [
    'Okay... It\'s great that you were able to knock them all out without hurting them too much, but I don\'t think I\'ll be able to calm all of them on my own when they wake up.',
    'Would you be able to bring Ash here? I think the 3 of us together should be able to calm the lot of them down. He\'s probably still at the Master Dojo.',
], {
    image: 'assets/images/npcs/Koko.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 6), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 9, GameConstants.AchievementOption.less)]),
});
const JungleAsh2 = new NPC('Ash Ketchum', [
    'You\'re back! How did it go with the Zarude?',
    'Oh, I see, that\'s quite the problem... Still, you said they\'re all out cold for now, right? In that case, we should have time for a battle!',
    'The battlefield out the back of the Dojo is being used at the moment, so let\'s battle out in front of the Dojo.',
    'With this amazing new team of mine, I\'ll finally beat you, my strongest rival!',
], {
    image: 'assets/images/npcs/Ash Ketchum.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 7), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 9, GameConstants.AchievementOption.less)]),
});
const JungleKoko5 = new NPC('Koko', [
    'You brought Ash? Fantastic! And just in time, the Zarude are starting to wake up. Ash, could you have your Pokémon help me explain to them what\'s going on?',
    'Okay! It seems they finally understand. I\'m really sorry for all the trouble they caused for you.',
    'Oh, Dada! Zaruza Zaru? Zaru. This is the Zarude that raised me, Dada. He says he was impressed watching you fight, and wants to fight you as well.',
    'I should tell you, Dada is much stronger than the rest of the Zarude. Have a good fight, both of you!',
], {
    image: 'assets/images/npcs/Koko.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 9), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 11, GameConstants.AchievementOption.less)]),
});
const JungleAsh3 = new NPC('Ash Ketchum', [
    'Amazing, you even beat Dada! It\'s really clear that he is really amazed by your strength!',
    'Hang on, did you guys see something? Oh, over there, it\'s Celebi! It must have come now things are peaceful here. It looks like it wants to play!',
    'Actually, it looks interested in you in particular. You should challenge it to a fight!',
], {
    image: 'assets/images/npcs/Ash Ketchum.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 11), new QuestLineStepCompletedRequirement('Secrets of the Jungle', 13, GameConstants.AchievementOption.less)]),
});
const JungleKoko6 = new NPC('Koko', [
    'Wow, you actually beat Celebi! It looked like it had fun! It\'s ran off for now, but maybe if you find it again, it\'ll let you catch it.',
    'Oh, also, Dada said he would be interested in travelling with you. Although, he also said he needed to deal with the shortage of Quest Points the tribe is dealing with right now.',
    'If you help him with that, I\'m sure he\'ll join you!',
], {
    image: 'assets/images/npcs/Koko.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Secrets of the Jungle', 13), new QuestLineCompletedRequirement('Secrets of the Jungle', GameConstants.AchievementOption.less)]),
});
const CrownShrineExplorer = new NPC('Explorer', [
    'Whew! This place is quite a trek from Freezington.',
    'I\'ve heard that a rare Pokémon sometimes hides in the chests here. I was told that it is incredibly rare, but can\'t be found anywhere else!',
], { image: 'assets/images/npcs/Backpacker (male).png' });
//Crown Tundra NPCs
const CrownTundraRoamerNPC = new RoamerNPC('Freezington Mayor', [
    'If my eyes didn\'t deceive me, I saw a rare Pokémon at {ROUTE_NAME}. Go and see if you can find it if you\'re interested.',
], GameConstants.Region.galar, RoamingPokemonList.findGroup(GameConstants.Region.galar, GameConstants.GalarSubRegions.CrownTundra));
const GalarFossilHiker = new NPC('Spelunker', [
    'Wow! The Crown Tundra is filled with wild fossil Pokémon! I\'ve heard stories of these snowfields protecting the Pokémon living here, but this level of sanctuary is insane!',
    'And what\'s really interesting is that they only show up to trainers who have already caught one of their species. Could it be they are aware enough to use that as an appraisal of trust?',
], { image: 'assets/images/npcs/Hiker (Gen 8).png' });
const CrownPeony1 = new NPC('Peony', [
    'Hey, Chief! I was talking to the locals and they were talking about some ancient king Pokémon! They also mentioned a couple of horsey Pokémon that it was ultra-mega-close to. There\'s a statue of it outside and I\'ve heard this rock I\'ve been using as a pillow is part of it!',
    'Could you go and put it back on for me?',
], {
    image: 'assets/images/npcs/Peony.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('The Crown of Galar'), new QuestLineStepCompletedRequirement('The Crown of Galar', 1, GameConstants.AchievementOption.less)]),
});
const Calyrex1 = new NPC('Calyrex', [
    'Ah, yes. A sturdy body, just as I expected. I hope this man doesn\'t mind that I make use of it for the time being.',
    'I am Calyrex. I am also known as the King of Bountiful Harvests. I have borrowed this man\'s body in order to thank you in person for restoring my statue...so to speak.',
    'I once reigned over these lands as king, but now I have lost all but a fraction of my former strength. Even my loyal steeds have abandoned me.',
    'Would you do me the favour of protecting me from wild Pokémon at the Old Cemetery and Snowslide Slope? I wish to grow a Shaderoot Carrot and an Iceroot Carrot which I believe could draw out my loyal steeds.',
], {
    image: 'assets/images/npcs/specialNPCs/Possessed Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Crown of Galar', 1), new QuestLineStepCompletedRequirement('The Crown of Galar', 3, GameConstants.AchievementOption.less)]),
});
const Calyrex2 = new NPC('Calyrex', [
    'Thank you for your help in growing these carrots. It is my belief that they will draw my loyal steeds back to me...',
    'What?! They are here already! But they appear to be unable to tell exactly where the scent of the carrots is coming from!',
    'The people of this place are in danger, you must fight them off!',
], {
    image: 'assets/images/npcs/specialNPCs/Possessed Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Crown of Galar', 3), new QuestLineStepCompletedRequirement('The Crown of Galar', 5, GameConstants.AchievementOption.less)]),
});
const Calyrex3 = new NPC('Calyrex', [
    'You have my thanks for protecting the village, human child. Although, unfortunately, this has also caused my loyal steeds to flee.',
    'Hmm... Perhaps now we know they are in this area, it would be better to search for them?',
    'I think that would be for the best. Once you capture them, I would appreciate it if you could bring them to the Crown Shrine at the mountain\'s peak.',
], {
    image: 'assets/images/npcs/specialNPCs/Possessed Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Crown of Galar', 5), new QuestLineStepCompletedRequirement('The Crown of Galar', 7, GameConstants.AchievementOption.less)]),
});
const Calyrex4 = new NPC('Calyrex', [
    'Finally, my loyal steeds have returned to me. There are truly no words with which to fully express my gratitude to you. But I can try. Take these Reins of Unity.',
    '<img src="assets/images/keyitems/Reins_of_unity.png">',
    'They can be used to combine myself and my steeds. However, they are incomplete. You must intertwine the hair from their manes for them to work. I expect they will occasionally leave such hair behind upon being defeated.',
    'And to that point... I have a suggestion. If you are able to capture me, it will prove your worth beyond any doubt, and I will lend you my strength on your journey. Once you have readied yourself, come face me!',
], {
    image: 'assets/images/npcs/specialNPCs/Possessed Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Crown of Galar', 7), new QuestLineStepCompletedRequirement('The Crown of Galar', 9, GameConstants.AchievementOption.less)]),
});
const Calyrex5 = new NPC('Calyrex', [
    '<i>Human child... I look forward to what adventures we might have together.</i>',
    '<i>May I remind you, if you ever wish to return my steeds and I to our true power, you must gather some hair from the manes of my steeds as they roam the Crown Tundra, and intertwine such hair with the Reins of Unity.</i>',
], {
    image: 'assets/images/pokemon/898.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Crown of Galar', 9)]),
});
const CrownPeony2 = new NPC('Peony', [
    'Wait--you really caught Calyrex from the legends?! Thats\'s ultra-mega-brilliant! Report away!',
    'Th-that noggin\'s MASSIVE! I-is that the King of Bountiful Harvests? The one calling the shots around here? Huh? I could swear I\'ve seen it before... Or then again, maybe not...',
    'A-anyway! It\'s definitely regal of it to have steeds... and that massive head does sort of resemble a crown! It\'s kingly enough, at any rate! Let\'s just call this a successful expedition! Smashin\'!',
], {
    image: 'assets/images/npcs/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Crown of Galar', 9), new QuestLineCompletedRequirement('The Crown of Galar', GameConstants.AchievementOption.less)]),
});
const BirdPeony1 = new NPC('Peony', [
    'Hey, Chief! I was talking to the locals and they mentioned they had seen some bird Pokémon that looked like the legendary birds of Kanto at that ultra-mega-massive tree in the middle of Ballimere Lake!',
    'You should go check it out!',
], {
    image: 'assets/images/npcs/Peony.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('The Birds of the Dyna Tree'), new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 2, GameConstants.AchievementOption.less)]),
});
const BirdPeony2 = new NPC('Peony', [
    'You\'re saying you saw some Pokémon that looked like.... Hang on, Chief! There\'s breaking news on the telly! They\'re sayin\' dodgy bird Pokémon are poppin\' up left and right!',
    'There\'s this fancy graceful one\'s apparently flyin\' about the Crown Tundra!',
    'And there\'s this pointy feathered one runnin\' about in the Wild Area of Southern Galar!',
    'Plus a fiery-lookin\' one out on the Isle of Armor!',
    'You\'re sayin\' you saw them and that\'s what you were tellin\' me about? Ah, sorry \'bout that. Anyway, you should go find \'em.',
    'They look real strong, so you probably can\'t catch \'em right off the bat. I\'d try weakening them first.',
], {
    image: 'assets/images/npcs/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 2), new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 4, GameConstants.AchievementOption.less)]),
});
const BirdPeony3 = new NPC('Peony', [
    'Hang on--you really caught up to all three of them dodgy birds? Multiple times each? That\'s pretty impressive!',
    'I think they should all be weakened enough that you can catch \'em now!',
    'I\'d imagine they\'d be in the same areas you chased \'em about in.',
], {
    image: 'assets/images/npcs/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 4), new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 6, GameConstants.AchievementOption.less)]),
});
const BirdPeony4 = new NPC('Peony', [
    'Wait--you really caught Articuno, Moltres, and Zapdos from the legends?! Thats\'s ultra-mega-brilliant! Report away!',
    'So that\'s them is it? I can definitely see the resemblance, but they don\'t seem quite the same...',
    'Maybe they\'re regional variants or somethin\'? At any rate, that\'s good enough for me. Let\'s call this expedition a success!',
], {
    image: 'assets/images/npcs/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Birds of the Dyna Tree', 6), new QuestLineCompletedRequirement('The Birds of the Dyna Tree', GameConstants.AchievementOption.less)]),
});
const GolemPeony1 = new NPC('Peony', [
    'Hey, Chief! I was talking to the locals and they mentioned some weird purple and yellow ruins at Three-Point Pass. You should go check \'em out!',
], {
    image: 'assets/images/npcs/Peony.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('The Ancient Golems'), new QuestLineStepCompletedRequirement('The Ancient Golems', 1, GameConstants.AchievementOption.less)]),
});
const GolemPeony2 = new NPC('Peony', [
    'So they wouldn\'t open... That\'s annoyin\'. Well, there are also 3 more ruins, 2 at opposite ends of Giant\'s Bed, and one at Snowslide Slope. Maybe you should have a look at those?',
    'How \'bout clearin\' em 10 times each, and see if you find anythin\' to open up the ruins at Three-Point Pass.',
], {
    image: 'assets/images/npcs/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Ancient Golems', 1), new QuestLineStepCompletedRequirement('The Ancient Golems', 3, GameConstants.AchievementOption.less)]),
});
const GolemPeony3 = new NPC('Peony', [
    'So that didn\'t work? Well, I heard there are some legendary Pokémon in those ruins, called Regirock, Regice, and Registeel. Apparently they\'ll show up to people who have done enough explorin\' in their ruins.',
    'Maybe if you caught them, the other ruins would open? What? You already have? Well, it might be worth doing it again, anyway.',
], {
    image: 'assets/images/npcs/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Ancient Golems', 3), new QuestLineStepCompletedRequirement('The Ancient Golems', 5, GameConstants.AchievementOption.less)]),
});
const GolemPeony4 = new NPC('Peony', [
    'Looks like that didn\'t do it. But don\'t lose your hopes yet! I was just told that Regigigas appeared in Giant\'s Bed! Probably somethin\' to do with you catching those other three. Anyway! You should go on and catch it!',
], {
    image: 'assets/images/npcs/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Ancient Golems', 5), new QuestLineStepCompletedRequirement('The Ancient Golems', 7, GameConstants.AchievementOption.less)]),
});
const GolemPeony5 = new NPC('Peony', [
    'Wait--so you really caught Regigigas from the legends? Well, that doesn\'t seem to have opened the ruins automatically or anythin\', but I imagine Regigigas can open those doors with sheer strength!',
    'You should go now and see what\'s there!',
], {
    image: 'assets/images/npcs/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Ancient Golems', 7), new QuestLineStepCompletedRequirement('The Ancient Golems', 9, GameConstants.AchievementOption.less)]),
});
const GolemPeony6 = new NPC('Peony', [
    'You caught Regieleki and Regidrago from the legends? Well that\'s that then! Smashin\'! I\'ll mark this expedition done!',
], {
    image: 'assets/images/npcs/Peony.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Ancient Golems', 9), new QuestLineCompletedRequirement('The Ancient Golems', GameConstants.AchievementOption.less)]),
});
const PeonyComplete = new NPC('Peony', [
    'Huh? Well how \'bout that, Chief! Looks like that was the last bit of the grand Peony Adven-tour that I had for you! Whoooooo! Now this is an occasion! What\'s the word? Ultra-mega-epic! Your passion for all this caught me off guard, Chief...',
    'This whole Adven-tour thing was built out of a load of rubbish I scraped together. Even I had my doubts about the whole thing. But you? You went at it with a ton of energy! Thanks for stickin\' around and finishin\' every part of my Adven-tour!',
], {
    image: 'assets/images/npcs/Peony.png',
    requirement: new MultiRequirement([new QuestLineCompletedRequirement('The Crown of Galar'), new QuestLineCompletedRequirement('The Birds of the Dyna Tree'), new QuestLineCompletedRequirement('The Ancient Golems')]),
});
const Peonia1 = new NPC('Peonia', [
    'Hang on-I recognize you! You\'re that kid who was able to beat my dad earlier, right? That\'s impressive, he\'s no pushover!',
    'Actually, a strong trainer like you, I think might be interested in a nearby place I was just about to go to.',
    'It\'s a cave system just to the north of here, called the Max Lair. It\'s the only known place where you can catch wild Gigantamax Pokémon!',
    'If you\'re interested, you should go take a look!',
], {
    image: 'assets/images/npcs/Peonia.png',
    requirement: new MultiRequirement([new QuestLineStartedRequirement('The Lair of Giants'), new QuestLineStepCompletedRequirement('The Lair of Giants', 1, GameConstants.AchievementOption.less)]),
});
const Peonia2 = new NPC('Peonia', [
    'You\'re back! So I take it you saw one? A Gigantamax Pikachu, huh? Yeah, I saw one of those too! I also saw 2 others: Meowth and Eevee. Maybe you\'ll see them when you go back in.',
    'Unfortunately, it seems these 3 are the only ones here at the moment. However, there\'s something you could do if you want to lure in more of them.',
    'I imagine you\'ve noticed some hexagonal rock formations on your journey, right? Those are called Raid Dens. You can find them in the mainland\'s Wild Area, the Isle of Armor, and here in the Crown Tundra.',
    'Every day some of them glow red and emit a purple beam. It seems there are 10 a day, consistently, for some unknown reason. Here, download this app, and they\'ll show up on your map!',
    'Anyway, in each of these Raid Dens, there\'s a Gigantamax Pokémon! You can\'t catch \'em though, they\'ll turn back to their regular form and run before you get the chance.',
    'However! They\'ll each drop a stone called a Wishing Piece. If you gather enough of those stones here, more Gigantamax Pokémon\'ll show up! Dunno which ones, probably just your luck.',
    'Including the 3 already here, there are 33 Gigantamax Pokémon. I imagine you\'ll need more than 200 Wishing Pieces to get all of \'em to show up.',
], {
    image: 'assets/images/npcs/Peonia.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', 1), new QuestLineStepCompletedRequirement('The Lair of Giants', 32, GameConstants.AchievementOption.less)]),
});
const Peonia3 = new NPC('Peonia', [
    'They\'re all here! That took quite a while, but it was well worth it!',
    'Hey, what\'s that purple glow? It looks to be around... Hammerlocke?',
    'Hang on, this looks a lot like when uncle Rose started the Darkest Day! You were the one who stopped that whole thing, right? You should probably get going!',
], {
    image: 'assets/images/npcs/Peonia.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', 32), new QuestLineStepCompletedRequirement('The Lair of Giants', 34, GameConstants.AchievementOption.less)]),
});
const GigantamaxLeon1 = new NPC('Leon', [
    'Champion?! What are you.... no matter, I\'m glad you\'re here!',
    'Eternamax Eternatus has appeared again! There is no time to talk! Let\'s fight it together!',
], {
    image: 'assets/images/npcs/Leon.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', 33), new QuestLineStepCompletedRequirement('The Lair of Giants', 35, GameConstants.AchievementOption.less)]),
});
const GigantamaxLeon2 = new NPC('Leon', [
    'Wow. You\'re just as amazing as ever. You\'re truly worthy of your title.',
    'I think Eternatus absorbed the leftover power it used to transform the first time to do so again. There\'s none left now, though, so that should be the last time. It flew south...',
    'I have a feeling it\'ll come back here, but it shouldn\'t be a problem if it can\'t return to its Eternamax form here, right?',
    'Anyway, thanks for your help! Feel free to come over to Wyndon Stadium anytime if you fancy a match!',
], {
    image: 'assets/images/npcs/Leon.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', 35), new QuestLineStepCompletedRequirement('The Lair of Giants', 37, GameConstants.AchievementOption.less)]),
});
const Peonia4 = new NPC('Peonia', [
    'So it really was Eternatus again? Given that the purple glow has vanished, I guess you\'ve already taken care of it. Congrats!',
    'Actually, I just saw some purple and red Pokémon fly into the caves. Maybe that was Eternatus? I think this place might let it return to its Eternamax form. Maybe you can catch it!',
    'At any rate, I\'m real thankful for all your help. There\'s so many more people coming here now there\'s more Gigantamax Pokémon to find.  It\'s been a lot of fun!',
], {
    image: 'assets/images/npcs/Peonia.png',
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('The Lair of Giants', 36), new QuestLineCompletedRequirement('The Lair of Giants', GameConstants.AchievementOption.less)]),
});
const MaxLairScientist = new NPC('Scientist', [
    'I\'m sure you\'ll have noticed that there\'s quite a few Gigantamax Pokémon. As more get here, it\'s going to get progressively harder to find the one you want.',
    'I have some good news for you though! It seems that those you\'ve already caught will show up less often. That should make it easier to catch \'em all!',
], { image: 'assets/images/npcs/Scientist (female).png' });
const ProfMagnolia = new ProfNPC('Prof. Magnolia', GameConstants.Region.galar, 'Ahhh, how incredible. Look how far you have come, dear trainer. Congratulations on another complete Pokédex.', 'I hear word of an exotic region on the horizon, but there has been no word yet when the blimp will be able to reach such faraway lands.', 
//*TODO*: Change second line to this text when Paldea is available: 'Now be on your way, the illustrious Paldea region awaits over the horizons.',
'assets/images/npcs/Professor Magnolia.png');
const MagearnaMysteryGift = new PokemonGiftNPC('Mystery Gift', [
    'You have received a Mystery Gift for completing the National Shiny Dex!',
], 'Magearna (Original Color)', 'assets/images/pokemon/801.01.png', { saveKey: 'magearnamysterygift', requirement: new MultiRequirement([
        new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.kanto),
        new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.johto),
        new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.hoenn),
        new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.sinnoh),
        new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.unova),
        new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.kalos),
        new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.alola),
        new CaughtUniqueShinyPokemonsByRegionRequirement(GameConstants.Region.galar),
    ]) });
//Galar Towns
TownList.Postwick = new Town('Postwick', GameConstants.Region.galar, GameConstants.GalarSubRegions.SouthGalar, [new BulletinBoard(GameConstants.BulletinBoards.Galar), PostwickShop], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Champion_Stamp)],
    npcs: [PostwickMum, MagearnaMysteryGift],
});
TownList['Slumbering Weald'] = new Town('Slumbering Weald', GameConstants.Region.galar, GameConstants.GalarSubRegions.SouthGalar, [TemporaryBattleList.Mirages, new MoveToDungeon(dungeonList['Slumbering Weald Shrine'])], {
    requirements: [new TemporaryBattleRequirement('Hop 1')],
});
TownList.Wedgehurst = new Town('Wedgehurst', GameConstants.Region.galar, GameConstants.GalarSubRegions.SouthGalar, [TemporaryBattleList['Sordward & Shielbert'], WedgehurstShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 1)],
    npcs: [WedgehurstRailStaff, SouthGalarRoamerNPC, SordwardShielbert2],
});
TownList['Professor Magnolia\'s House'] = new Town('Professor Magnolia\'s House', GameConstants.Region.galar, GameConstants.GalarSubRegions.SouthGalar, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 2)],
    npcs: [ProfMagnolia, AssistantHenry],
});
TownList.Motostoke = new Town('Motostoke', GameConstants.Region.galar, GameConstants.GalarSubRegions.SouthGalar, [TemporaryBattleList['Marnie 1'], TemporaryBattleList['Rampaging Torkoal'], MotostokeShop, new ShardTraderShop(GameConstants.ShardTraderLocations.Motostoke), new BattleCafe()], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 6)],
    npcs: [BattleCafeMaster, MotostokeArtist],
});
TownList.Turffield = new Town('Turffield', GameConstants.Region.galar, GameConstants.GalarSubRegions.SouthGalar, [TemporaryBattleList['Rampaging Tsareena'], TurffieldShop, new ShardTraderShop(GameConstants.ShardTraderLocations.Turffield)], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 13)],
    npcs: [TurffieldCook],
});
TownList.Hulbury = new Town('Hulbury', GameConstants.Region.galar, GameConstants.GalarSubRegions.SouthGalar, [TemporaryBattleList['Rampaging Gyarados'], HulburyShop, new ShardTraderShop(GameConstants.ShardTraderLocations.Hulbury)], {
    requirements: [new TemporaryBattleRequirement('Hop 4')],
    npcs: [Meteorologist],
});
TownList['Stow-on-Side'] = new Town('Stow-on-Side', GameConstants.Region.galar, GameConstants.GalarSubRegions.NorthGalar, [TemporaryBattleList['Rampaging Conkeldurr'], TemporaryBattleList['Rampaging Dusknoir'], GymList['Stow-on-Side1'], GymList['Stow-on-Side2'], StowonSideShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Stow-on-Side']), new GenericTraderShop('FossilMasterGalarRoute6', 'Cara Liss')], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 23)],
    npcs: [AncientMural1, AncientMural2, StowonSideSonia, Archaeologist],
});
TownList.Ballonlea = new Town('Ballonlea', GameConstants.Region.galar, GameConstants.GalarSubRegions.NorthGalar, [TemporaryBattleList['Gym Leader Bede'], BallonleaShop, new ShardTraderShop(GameConstants.ShardTraderLocations.Ballonlea)], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glimwood Tangle'))],
});
TownList.Hammerlocke = new Town('Hammerlocke', GameConstants.Region.galar, GameConstants.GalarSubRegions.NorthGalar, [TemporaryBattleList['Rampaging Haxorus'], new MoveToDungeon(dungeonList['Energy Plant']), HammerlockeShop, new ShardTraderShop(GameConstants.ShardTraderLocations.Hammerlocke), new BattleCafe()], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 22)],
    npcs: [HammerlockeHiker],
});
TownList.Circhester = new Town('Circhester', GameConstants.Region.galar, GameConstants.GalarSubRegions.NorthGalar, [TemporaryBattleList['Rampaging Gigalith'], TemporaryBattleList['Rampaging Froslass'], GymList.Circhester1, GymList.Circhester2, CirchesterShop, new ShardTraderShop(GameConstants.ShardTraderLocations.Circhester)], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 26)],
    npcs: [HerosBath, CirchesterHop, CirchesterSonia, CirchesterGuitarist],
});
TownList.Spikemuth = new Town('Spikemuth', GameConstants.Region.galar, GameConstants.GalarSubRegions.NorthGalar, [TemporaryBattleList['Gym Leader Marnie'], SpikemuthShop, new ShardTraderShop(GameConstants.ShardTraderLocations.Spikemuth), new DockTownContent()], {
    requirements: [new TemporaryBattleRequirement('Marnie 2')],
    npcs: [TeamYellGrunts],
});
TownList.Wyndon = new Town('Wyndon', GameConstants.Region.galar, GameConstants.GalarSubRegions.NorthGalar, [WyndonShop, new MoveToDungeon(dungeonList['Rose Tower']), new BattleCafe()], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 32)],
    npcs: [WyndonBattleCafeRichard],
});
TownList['Wyndon Stadium'] = new Town('Wyndon Stadium', GameConstants.Region.galar, GameConstants.GalarSubRegions.NorthGalar, [GymList['Elite Trainer Marnie'], GymList['Elite Gym Leader Bede'], GymList['Elite Trainer Hop'], GymList['Champion Leon'], pokeLeagueShop()], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 32)],
    npcs: [RoseBroadcast, WyndonHop, Leon],
});
//Isle of Armor Towns
TownList['Armor Station'] = new Town('Armor Station', GameConstants.Region.galar, GameConstants.GalarSubRegions.IsleofArmor, [], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)],
});
TownList['Master Dojo'] = new Town('Master Dojo', GameConstants.Region.galar, GameConstants.GalarSubRegions.IsleofArmor, [new BulletinBoard(GameConstants.BulletinBoards.Armor), TemporaryBattleList.Mustard, TemporaryBattleList.Kubfu, MasterDojoShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Master Dojo']), new DockTownContent()], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 33)],
    npcs: [Mustard1, Mustard2, Mustard3, Mustard4, Mustard5, Klara2, Avery2, Mustard6, Mustard7, Mustard8, Mustard9, JungleAsh1, JungleAsh2, IsleofArmorRoamerNPC],
});
TownList['Master Dojo Battle Court'] = new Town('Master Dojo Battle Court', GameConstants.Region.galar, GameConstants.GalarSubRegions.IsleofArmor, [GymList['Elite Gym Leader Klara'], GymList['Elite Gym Leader Avery'], GymList['Elite Dojo Matron Honey'], GymList['Elite Dojo Master Mustard']], {
    requirements: [new QuestLineCompletedRequirement('The Dojo\'s Armor')],
});
//Crown Tundra Towns
TownList['Crown Tundra Station'] = new Town('Crown Tundra Station', GameConstants.Region.galar, GameConstants.GalarSubRegions.CrownTundra, [new DockTownContent(), TemporaryBattleList.Peony], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_GalarChampion)],
});
TownList.Freezington = new Town('Freezington', GameConstants.Region.galar, GameConstants.GalarSubRegions.CrownTundra, [new BulletinBoard(GameConstants.BulletinBoards.Crown), GymList['Elite Trainer Peony'], TemporaryBattleList.Calyrex, TemporaryBattleList.Glastrier, TemporaryBattleList.Spectrier, FreezingtonShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.galar, 46)],
    npcs: [CrownPeony1, Calyrex1, Calyrex2, Calyrex3, CrownPeony2, BirdPeony1, BirdPeony2, BirdPeony3, BirdPeony4, GolemPeony1, GolemPeony2, GolemPeony3, GolemPeony4, GolemPeony5, GolemPeony6, PeonyComplete, Peonia1, CrownTundraRoamerNPC],
});
//Galar Dungeons
TownList['Slumbering Weald Shrine'] = new DungeonTown('Slumbering Weald Shrine', GameConstants.Region.galar, GameConstants.GalarSubRegions.SouthGalar, [new QuestLineStepCompletedRequirement('The Darkest Day', 12)], [TemporaryBattleList['Hop 8'], TemporaryBattleList['Sordward 1'], TemporaryBattleList['Shielbert 1']], {
    npcs: [SlumberingHop1, SlumberingHop2, SordwardShielbert1],
});
TownList['Galar Mine'] = new DungeonTown('Galar Mine', GameConstants.Region.galar, GameConstants.GalarSubRegions.SouthGalar, [new RouteKillRequirement(10, GameConstants.Region.galar, 12)], [TemporaryBattleList['Bede 1']]);
TownList['Galar Mine No. 2'] = new DungeonTown('Galar Mine No. 2', GameConstants.Region.galar, GameConstants.GalarSubRegions.SouthGalar, [new GymBadgeRequirement(BadgeEnums.Galar_Water)], [TemporaryBattleList['Bede 2']]);
TownList['Glimwood Tangle'] = new DungeonTown('Glimwood Tangle', GameConstants.Region.galar, GameConstants.GalarSubRegions.NorthGalar, [new QuestLineStepCompletedRequirement('The Darkest Day', 2)], [TemporaryBattleList['Zarude Tribe 1'], TemporaryBattleList['Zarude Tribe 2'], TemporaryBattleList['Zarude Tribe 3'], TemporaryBattleList['Zarude (Dada)'], TemporaryBattleList['Flowering Celebi'], GlimwoodTangleShop], {
    npcs: [JungleKoko1, JungleKoko2, JungleKoko3, JungleKoko4, JungleKoko5, JungleAsh3, JungleKoko6],
});
TownList['Rose Tower'] = new DungeonTown('Rose Tower', GameConstants.Region.galar, GameConstants.GalarSubRegions.NorthGalar, [new GymBadgeRequirement(BadgeEnums.Elite_Hop)]);
TownList['Energy Plant'] = new DungeonTown('Energy Plant', GameConstants.Region.galar, GameConstants.GalarSubRegions.NorthGalar, [new QuestLineStepCompletedRequirement('The Darkest Day', 14)], [TemporaryBattleList.Eternatus, TemporaryBattleList['Sordward 2'], TemporaryBattleList['Shielbert 2'], TemporaryBattleList['Rampaging Zacian'], TemporaryBattleList['Rampaging Zamazenta'], TemporaryBattleList['The Darkest Day'], TemporaryBattleList['Eternamax Eternatus']], {
    npcs: [EnergyPlantRose, EternatusCatch, SordwardShielbert3, SordwardShielbert4, Piers, EnergyPlantHop, GigantamaxLeon1, GigantamaxLeon2],
});
TownList['Dusty Bowl'] = new DungeonTown('Dusty Bowl', GameConstants.Region.galar, GameConstants.GalarSubRegions.SouthGalar, [new RouteKillRequirement(10, GameConstants.Region.galar, 18)]);
TownList['Courageous Cavern'] = new DungeonTown('Courageous Cavern', GameConstants.Region.galar, GameConstants.GalarSubRegions.IsleofArmor, [new RouteKillRequirement(10, GameConstants.Region.galar, 33)]);
TownList['Brawlers\' Cave'] = new DungeonTown('Brawlers\' Cave', GameConstants.Region.galar, GameConstants.GalarSubRegions.IsleofArmor, [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, GameConstants.Region.galar, 34),
        new RouteKillRequirement(10, GameConstants.Region.galar, 40),
    ]),
]);
TownList['Warm-Up Tunnel'] = new DungeonTown('Warm-Up Tunnel', GameConstants.Region.galar, GameConstants.GalarSubRegions.IsleofArmor, [new RouteKillRequirement(10, GameConstants.Region.galar, 38)], [TemporaryBattleList['Klara 2'], TemporaryBattleList['Avery 2']], {
    npcs: [Klara1, Avery1],
});
TownList['Tower of Darkness'] = new DungeonTown('Tower of Darkness', GameConstants.Region.galar, GameConstants.GalarSubRegions.IsleofArmor, [
    new MultiRequirement([
        new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 17),
        new RouteKillRequirement(10, GameConstants.Region.galar, 40),
    ]),
], [], {
    npcs: [Mustard10],
});
TownList['Tower of Waters'] = new DungeonTown('Tower of Waters', GameConstants.Region.galar, GameConstants.GalarSubRegions.IsleofArmor, [
    new MultiRequirement([
        new QuestLineStepCompletedRequirement('The Dojo\'s Armor', 17),
        new RouteKillRequirement(10, GameConstants.Region.galar, 36),
    ]),
], [], {
    npcs: [Mustard10],
});
TownList['Roaring-Sea Caves'] = new DungeonTown('Roaring-Sea Caves', GameConstants.Region.galar, GameConstants.GalarSubRegions.CrownTundra, [new RouteKillRequirement(10, GameConstants.Region.galar, 50)], [], {
    npcs: [GalarFossilHiker],
});
TownList['Rock Peak Ruins'] = new DungeonTown('Rock Peak Ruins', GameConstants.Region.galar, GameConstants.GalarSubRegions.CrownTundra, [new RouteKillRequirement(10, GameConstants.Region.galar, 48)]);
TownList['Iron Ruins'] = new DungeonTown('Iron Ruins', GameConstants.Region.galar, GameConstants.GalarSubRegions.CrownTundra, [new RouteKillRequirement(10, GameConstants.Region.galar, 48)]);
TownList['Iceberg Ruins'] = new DungeonTown('Iceberg Ruins', GameConstants.Region.galar, GameConstants.GalarSubRegions.CrownTundra, [new RouteKillRequirement(10, GameConstants.Region.galar, 54)]);
TownList['Split-Decision Ruins'] = new DungeonTown('Split-Decision Ruins', GameConstants.Region.galar, GameConstants.GalarSubRegions.CrownTundra, [new QuestLineStepCompletedRequirement('The Ancient Golems', 8)]);
TownList['Lakeside Cave'] = new DungeonTown('Lakeside Cave', GameConstants.Region.galar, GameConstants.GalarSubRegions.CrownTundra, [new RouteKillRequirement(10, GameConstants.Region.galar, 53)]);
TownList['Dyna Tree Hill'] = new DungeonTown('Dyna Tree Hill', GameConstants.Region.galar, GameConstants.GalarSubRegions.CrownTundra, [new RouteKillRequirement(10, GameConstants.Region.galar, 53)]);
TownList['Tunnel to the Top'] = new DungeonTown('Tunnel to the Top', GameConstants.Region.galar, GameConstants.GalarSubRegions.CrownTundra, [new RouteKillRequirement(10, GameConstants.Region.galar, 54)]);
TownList['Crown Shrine'] = new DungeonTown('Crown Shrine', GameConstants.Region.galar, GameConstants.GalarSubRegions.CrownTundra, [new RouteKillRequirement(10, GameConstants.Region.galar, 55)], [], {
    npcs: [Calyrex4, Calyrex5, CrownShrineExplorer],
});
TownList['Max Lair'] = new DungeonTown('Max Lair', GameConstants.Region.galar, GameConstants.GalarSubRegions.CrownTundra, [new QuestLineStepCompletedRequirement('The Lair of Giants', 0)], [], {
    npcs: [Peonia2, Peonia3, Peonia4, MaxLairScientist],
});
//Hisui shops
const JubilifeVillageShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Black_augurite,
]);
// Hisui NPCs
const ForcesCogita1 = new NPC('Cogita', [
    'I\'ve just been told of the foul plan Volo had concocted. Well, think no more on that scoundrel. Just another tale of passion burning too bright and consuming its bearer. This is what happens, if you allow it to.',
    'But what of you? Are you making any progress with your...what do you call your studies of Pokémon? Surveying, was it?',
    'Indeed? Well, Hisui still holds more fascinating Pokémon.',
    'Such as Tornadus... In every direction it flies, stirring up tremendous storms as it goes. When a blizzard batters the Alabaster Icelands, Tornadus may be about.',
    'Also, Thundurus: as it flies around, it fires bolts of lightning every which way. When a rainstorm lashes the Cobalt Coastlands, Tornadus may be about.',
    'Lastly, Landorus, the Pokémon hailed as the Guardian of the Fields. It seems it can be glimpsed in the Obsidian Fieldlands. Perhaps you\'d be so good as to catch it for me?',
    'I know not why these three have chosen to show themselves. Perhaps the cause lies with the space-time rift...or simply within their own whims...',
], {
    requirement: new MultiRequirement([new QuestLineStartedRequirement('Incarnate Forces of Hisui'), new QuestLineStepCompletedRequirement('Incarnate Forces of Hisui', 1, GameConstants.AchievementOption.less)]),
});
const ForcesCogita2 = new NPC('Cogita', [
    'Ah, you\'ve arrived. You now know much about Landorus, Tornadus and even Thundurus. Well done.',
    'In more normal times, I would bid you to let these three fly free as is their nature.',
    'But we are fresh from the tearing of the space-time rift. Until its aftereffects fade entirely, perhaps its best to keep our trio contained.',
    'And now, it is time to tell you the rest. There is one more of that cohort. Come.',
    '<img src="assets/images/pokemon/905.png">',
    'This is Enamorus, a Pokémon hailed as the Herald of Spring. Enamorus is not particularly given to ill behaviour. But I imagine you\'d like to document her for your Pokédex, wouldn\'t you?',
    'Catch her then, if you like. She always flits about in the Crimson Mirelands.',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Incarnate Forces of Hisui', 1), new QuestLineStepCompletedRequirement('Incarnate Forces of Hisui', 3, GameConstants.AchievementOption.less)]),
});
const ForcesCogita3 = new NPC('Cogita', [
    'Aha, you\'ve caught Enamorus as well. And you know so much about her.',
    'Enamorus arrives in Hisui once winter has passed. Hence the epithet Herald of Spring.',
    'Her company, when I have the pleasure, is of great help, she ferries me hither and yon across Hisui. But I\'ll leave her in your care for now, I suppose.',
    'Indeed, even you can hardly expect to live for all time, surely, but she will be in your care for now.',
    'You, Enamorus and her brethren have something in common: you tend to stir the pot of life. Do not mistake me - I mean this positively.',
    'If everything were straightforward, what meaning would there be in living as long as we do?',
    '"Once there was a god of field, and once there was a god of spring. Upon Hisui\'s winds it wheeled, brought life to every growing thing..." Was that how that old verse went?',
    'I have passed on to you all there is to pass. Where history goes from here...I leave to you and your companions to see through.',
], {
    requirement: new MultiRequirement([new QuestLineStepCompletedRequirement('Incarnate Forces of Hisui', 4), new QuestLineCompletedRequirement('Incarnate Forces of Hisui', GameConstants.AchievementOption.less)]),
});
//Hisui Towns
TownList['Prelude Beach'] = new Town('Prelude Beach', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [TemporaryBattleList['The Galaxy Team\'s Kamado']], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Jubilife Village'] = new Town('Jubilife Village', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [JubilifeVillageShop, new ShardTraderShop(GameConstants.ShardTraderLocations['Jubilife Village']), TemporaryBattleList['Volo 1'], TemporaryBattleList['Akari 1'], TemporaryBattleList['Akari 2'], TemporaryBattleList['Adaman 1']], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Galaxy Hall'] = new Town('Galaxy Hall', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new BulletinBoard(GameConstants.BulletinBoards.Hisui)], {
    requirements: [new DevelopmentRequirement()],
    npcs: [ForcesCogita1],
});
TownList['Fieldlands Camp'] = new Town('Fieldlands Camp', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [TemporaryBattleList['Warden Mai']], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Heights Camp'] = new Town('Heights Camp', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [TemporaryBattleList['Alpha Kricketune']], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Grandtree Arena'] = new Town('Grandtree Arena', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [TemporaryBattleList['Warden Lian'], TemporaryBattleList['Irida 1'], TemporaryBattleList['Lord of the Woods: Kleavor']], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Mirelands Camp'] = new Town('Mirelands Camp', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [TemporaryBattleList['Coin 1']], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Bogbound Camp'] = new Town('Bogbound Camp', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Sludge Mound'] = new Town('Sludge Mound', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [TemporaryBattleList.Ursaluna], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Diamond Settlement'] = new Town('Diamond Settlement', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Brava Arena'] = new Town('Brava Arena', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [TemporaryBattleList['Lady of the Ridge: Lilligant']], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Beachside Camp'] = new Town('Beachside Camp', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [TemporaryBattleList['Irida 2']], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Coastlands Camp'] = new Town('Coastlands Camp', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Iscan\'s Cabin'] = new Town('Iscan\'s Cabin', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Molten Arena'] = new Town('Molten Arena', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [TemporaryBattleList.Clover, TemporaryBattleList['Coin 2'], TemporaryBattleList['Charm 1'], TemporaryBattleList['Lord of the Isles: Arcanine']], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Firespit Island'))],
});
TownList['Highlands Camp'] = new Town('Highlands Camp', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Mountain Camp'] = new Town('Mountain Camp', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Summit Camp'] = new Town('Summit Camp', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Moonview Arena'] = new Town('Moonview Arena', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [TemporaryBattleList['Melli 2'], TemporaryBattleList['Lord of the Hollow: Electrode']], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Snowfields Camp'] = new Town('Snowfields Camp', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Icepeak Camp'] = new Town('Icepeak Camp', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Pearl Settlement'] = new Town('Pearl Settlement', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [TemporaryBattleList['Irida 3']], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Icepeak Arena'] = new Town('Icepeak Arena', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [TemporaryBattleList['Lord of the Tundra: Avalugg']], {
    requirements: [new DevelopmentRequirement()],
});
TownList['Ancient Retreat'] = new Town('Ancient Retreat', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [], {
    requirements: [new DevelopmentRequirement()],
    npcs: [ForcesCogita2, ForcesCogita3],
});
TownList['Stone Portal'] = new Town('Stone Portal', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [TemporaryBattleList.Beni], {
    requirements: [new DevelopmentRequirement()],
});
//Hisui Dungeons
TownList['Floaro Gardens'] = new DungeonTown('Floaro Gardens', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()]);
TownList['Oreburrow Tunnel'] = new DungeonTown('Oreburrow Tunnel', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()]);
TownList.Heartwood = new DungeonTown('Heartwood', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()], undefined, {
    npcs: [MossRock],
});
TownList['Ancient Solaceon Ruins'] = new DungeonTown('Ancient Solaceon Ruins', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()], [TemporaryBattleList['Volo 2']]);
TownList['Shrouded Ruins'] = new DungeonTown('Shrouded Ruins', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()]);
TownList['Veilstone Cape'] = new DungeonTown('Veilstone Cape', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()]);
TownList['Firespit Island'] = new DungeonTown('Firespit Island', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()], [new MoveToTown('Molten Arena')]);
TownList['Ancient Wayward Cave'] = new DungeonTown('Ancient Wayward Cave', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()], [TemporaryBattleList['Melli 1']]);
TownList['Ancient Quarry'] = new DungeonTown('Ancient Quarry', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()]);
TownList['Primeval Grotto'] = new DungeonTown('Primeval Grotto', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()], [TemporaryBattleList['Charm 2']]);
TownList['Clamberclaw Cliffs'] = new DungeonTown('Clamberclaw Cliffs', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()], [TemporaryBattleList['Warden Ingo']]);
TownList['Celestica Ruins'] = new DungeonTown('Celestica Ruins', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()]);
TownList['Sacred Plaza'] = new DungeonTown('Sacred Plaza', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()]);
TownList['Avalugg\'s Legacy'] = new DungeonTown('Avalugg\'s Legacy', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()], [TemporaryBattleList['Warden Gaeric']]);
TownList['Ice Column Chamber'] = new DungeonTown('Ice Column Chamber', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()]);
TownList['Icepeak Cavern'] = new DungeonTown('Icepeak Cavern', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()], undefined, {
    npcs: [IceRock],
});
TownList['Ancient Snowpoint Temple'] = new DungeonTown('Ancient Snowpoint Temple', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()], [TemporaryBattleList['Warden Sabi'], TemporaryBattleList['Hisuian Braviary']]);
TownList['Seaside Hollow'] = new DungeonTown('Seaside Hollow', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [
    new DevelopmentRequirement(),
    new ObtainedPokemonRequirement('Overqwil'),
]);
TownList['Ancient Lake Verity'] = new DungeonTown('Ancient Lake Verity', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()]);
TownList['Ancient Lake Valor'] = new DungeonTown('Ancient Lake Valor', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()], [TemporaryBattleList['Adaman 2']]);
TownList['Ancient Lake Acuity'] = new DungeonTown('Ancient Lake Acuity', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()]);
TownList['Temple of Sinnoh'] = new DungeonTown('Temple of Sinnoh', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()], [TemporaryBattleList['Dialga (Origin)'], TemporaryBattleList['Palkia (Origin)'], TemporaryBattleList['Volo 3'], TemporaryBattleList.Arceus]);
TownList['Turnback Cave'] = new DungeonTown('Turnback Cave', GameConstants.Region.hisui, GameConstants.HisuiSubRegions.Hisui, [new DevelopmentRequirement()]);
//Paldea Shops
const ZapapicoShop = new Shop([
    ItemList.Pokeball,
    ItemList.Greatball,
    ItemList.Ultraball,
    ItemList.Auspicious_armor,
    ItemList.Malicious_armor,
]);
// Paldea NPCs
const PaldeaRoamerNPC = new RoamerNPC('Student Emily', [
    'Hey, hey, did you hear? A group of students saw some super rare Pokémon on {ROUTE_NAME}!',
], GameConstants.Region.paldea, RoamingPokemonList.findGroup(GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea));
//Paldea Towns
TownList['Cabo Poco'] = new Town('Cabo Poco', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [new BulletinBoard(GameConstants.BulletinBoards.Paldea)], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Azure)],
});
TownList['Poco Path Lighthouse'] = new Town('Poco Path Lighthouse', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [GymList['Pokémon Trainer Arven']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList['Los Platos'] = new Town('Los Platos', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList.Mesagoza = new Town('Mesagoza', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [GymList['Champion Nemona']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
//Dunno what do about Naranja and Uva Academy's names. For now I've merged them.
TownList['Naranjuva Academy'] = new Town('Naranjuva Academy', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [GymList['Director Clavell'], GymList['Penny of Team Star']], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
    npcs: [PaldeaRoamerNPC],
});
TownList.Cortondo = new Town('Cortondo', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList.Artazon = new Town('Artazon', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList.Levincia = new Town('Levincia', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList.Alfornada = new Town('Alfornada', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList.Cascarrafa = new Town('Cascarrafa', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList['Porto Marinada'] = new Town('Porto Marinada', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList.Medali = new Town('Medali', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList.Zapapico = new Town('Zapapico', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [ZapapicoShop], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList.Montenevera = new Town('Montenevera', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList['Pokémon League Paldea'] = new Town('Pokémon League Paldea', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [GymList['Elite Rika'], GymList['Elite Poppy'], GymList['Elite Larry'], GymList['Elite Hassel'], GymList['Top Champion Geeta'], pokeLeagueShop()], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList['Segin Squad\'s Base'] = new Town('Segin Squad\'s Base', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList['Schedar Squad\'s Base'] = new Town('Schedar Squad\'s Base', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList['Navi Squad\'s Base'] = new Town('Navi Squad\'s Base', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList['Ruchbah Squad\'s Base'] = new Town('Ruchbah Squad\'s Base', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList['Caph Squad\'s Base'] = new Town('Caph Squad\'s Base', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList['Zero Gate'] = new Town('Zero Gate', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [], {
    requirements: [new RouteKillRequirement(10, GameConstants.Region.paldea, 2)],
});
TownList['Zero Lab'] = new Town('Zero Lab', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [GymList['AI Sada'], GymList['AI Turo'], TemporaryBattleList['Paradise Protection Protocol']], {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Area Zero Depths'))],
});
// Paldea Dungeons
TownList['Inlet Grotto'] = new DungeonTown('Inlet Grotto', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [new RouteKillRequirement(10, GameConstants.Region.paldea, 1)]);
TownList['Glaseado Mountain'] = new DungeonTown('Glaseado Mountain', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [new RouteKillRequirement(10, GameConstants.Region.paldea, 1)]);
TownList['Grasswither Shrine'] = new DungeonTown('Grasswither Shrine', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [new RouteKillRequirement(10, GameConstants.Region.paldea, 1)]);
TownList['Icerend Shrine'] = new DungeonTown('Icerend Shrine', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [new RouteKillRequirement(10, GameConstants.Region.paldea, 1)]);
TownList['Groundblight Shrine'] = new DungeonTown('Groundblight Shrine', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [new RouteKillRequirement(10, GameConstants.Region.paldea, 1)]);
TownList['Firescourge Shrine'] = new DungeonTown('Firescourge Shrine', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [new RouteKillRequirement(10, GameConstants.Region.paldea, 1)]);
TownList['Area Zero'] = new DungeonTown('Area Zero', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, 
/*[new MultiRequirement([
    new QuestLineCompletedRequirement('Path of Legends'),
    new QuestLineCompletedRequirement('Victory Road'),
    new QuestLineCompletedRequirement('Starfall Street'),
])]*/
[new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Inlet Grotto'))]);
TownList['Area Zero Depths'] = new DungeonTown('Area Zero Depths', GameConstants.Region.paldea, GameConstants.PaldeaSubRegions.Paldea, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Area Zero'))]);
// Used to check if next region can be reached, for example for professor NPC
TownList['Final Region Town'] = new Town('Final Region Town', GameConstants.Region.final, GameConstants.FinalSubRegions.Final, [], {
    requirements: [new GymBadgeRequirement(BadgeEnums.Elite_PaldeaChampion)],
});
class Preload {
    static itemLoading(item = 0) {
        this.itemsToLoad.push(item);
        this.updateProgressBar();
    }
    static itemLoaded(item = 0) {
        this.itemsLoaded.push(item);
        this.updateProgressBar();
    }
    static itemErrored(item = 0) {
        this.itemsErrored.push(item);
        this.updateProgressBar();
    }
    static updateProgressBar() {
        const toLoad = this.itemsToLoad.length;
        const loaded = this.itemsLoaded.length;
        const errored = this.itemsErrored.length;
        // Update the progress bar
        const progressBarEl = document.getElementById('preload-progress-bar');
        progressBarEl.style.width = `${(loaded + errored) / toLoad * 100}%`;
        // Update the text
        const progressTextEl = document.getElementById('preload-progress-text');
        progressTextEl.innerText = `${loaded + errored} / ${toLoad}`;
    }
    static hideSplashScreen(fast = false) {
        $('#game').removeClass('loading');
        if (fast) {
            $('#loader').hide();
        }
        else {
            $('#loader').fadeOut('slow');
        }
        // Remove the splash screen
        setTimeout(() => {
            $('#loader').remove();
        }, 1000);
    }
    static load(skipWait = false) {
        console.log(`[${GameConstants.formatDate(new Date())}] %cPreloading Images..`, 'color:#8e44ad;font-weight:900;');
        if (skipWait) {
            return new Promise(resolve => {
                //If you want to skip waiting, resolve immediately
                resolve();
                // Preload.loadTowns();
                // Preload.loadUndergroundItems();
                // Preload.loadMap();
                // Preload.loadPokemon(),
                Preload.hideSplashScreen(true);
            });
        }
        else {
            return new Promise(resolve => {
                // Incase something is taking too long to load
                const forceLoad = setTimeout(() => {
                    console.log(`[${GameConstants.formatDate(new Date())}] %cPreloading images taking too long, Skipping..`, 'color:#c0392b;font-weight:900;');
                    resolve();
                }, GameConstants.MAX_LOAD_TIME);
                Promise.all([
                    // Preload.loadTowns(),
                    // Preload.loadUndergroundItems(),
                    // Preload.loadMap(),
                    // Preload.loadPokemon(),
                    Preload.minimumTime(),
                ]).then(() => {
                    clearTimeout(forceLoad);
                    console.log(`[${GameConstants.formatDate(new Date())}] %cPreloaded images`, 'color:#2ecc71;font-weight:900;');
                    // Give the progress bar a little bit of time to finish the animation
                    setTimeout(() => {
                        resolve();
                    }, 600);
                }).catch((reason => {
                    console.log(`[${GameConstants.formatDate(new Date())}] %cPreload images failed..`, 'color:#c0392b;font-weight:900;');
                    console.error('Preload images failed:', reason);
                    clearTimeout(forceLoad);
                    resolve();
                }));
            });
        }
    }
    static loadTowns() {
        var _a;
        const p = Array();
        for (const name in TownList) {
            // Skip unreleased towns unless a feature flag has enabled them
            if (!((_a = window.featureFlags) === null || _a === void 0 ? void 0 : _a.preloadUnreleasedTowns) && TownList[name].region > GameConstants.MAX_AVAILABLE_REGION) {
                continue;
            }
            // Skip fake towns that exist for the Elite
            if (name.includes('Elite') || name.includes('Champion')) {
                continue;
            }
            Preload.itemLoading(name);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(`town-${name}`);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(`town-${name}`);
                    console.warn('Failed to load town image:', name);
                    resolve();
                };
                img.src = `assets/images/towns/${name}.png`;
            }));
        }
        return Promise.all(p);
    }
    static loadPokemon() {
        const p = Array();
        for (let i = 1; i <= GameConstants.MaxIDPerRegion[GameConstants.MAX_AVAILABLE_REGION]; i++) {
            Preload.itemLoading(i);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(i);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(i);
                    console.warn('Failed to load image for pokemon:', i);
                    resolve();
                };
                img.src = `assets/images/pokemon/${i}.png`;
            }));
        }
        return Promise.all(p);
    }
    static loadUndergroundItems() {
        const p = Array();
        UndergroundItems.list.forEach(item => {
            Preload.itemLoading(item.id);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(item.id);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(item.id);
                    console.warn('Failed to load image for Underground item:', item.name);
                    resolve();
                };
                img.src = item.undergroundImage;
            }));
        });
        return Promise.all(p);
    }
    static minimumTime() {
        return new Promise(resolve => {
            setTimeout(() => {
                resolve();
            }, GameConstants.MIN_LOAD_TIME);
        });
    }
    static loadMap() {
        // TODO: preload the map background images?
        /*
        return new Promise<number>(resolve => {
            let img = new Image();
            img.onload = () => {
                document.querySelector('image')
                    .setAttributeNS('http://www.w3.org/1999/xlink', 'href', 'assets/images/kanto.png');
                resolve();
            };
            img.onerror = () => {
                console.log('Failed to load map image:', name);
                resolve();
            }
            img.src = 'assets/images/kanto.png';
        })
        */
    }
}
Preload.itemsToLoad = [];
Preload.itemsLoaded = [];
Preload.itemsErrored = [];
///<reference path="../../declarations/routes/Routes.d.ts"/>
///<reference path="../../declarations/routes/RoutePokemon.d.ts"/>
/**
 * Helper class to retrieve information from RoutePokemon
 */
class RouteHelper {
    /**
     * Retrieves a list of all Pokémon that can be caught on that route.
     * @param route
     * @param region
     * @param includeHeadbutt
     * @returns {string[]} list of all Pokémon that can be caught
     */
    static getAvailablePokemonList(route, region, includeHeadbutt = true) {
        var _a;
        // If the route is somehow higher than allowed, use the first route to generateWildPokemon Pokémon
        const possiblePokemons = (_a = Routes.getRoute(region, route)) === null || _a === void 0 ? void 0 : _a.pokemon;
        if (!possiblePokemons) {
            return ['Rattata'];
        }
        // Land Pokémon
        let pokemonList = possiblePokemons.land;
        // Water Pokémon
        if (App.game.keyItems.hasKeyItem(KeyItemType.Super_rod) || possiblePokemons.land.length == 0) {
            pokemonList = pokemonList.concat(possiblePokemons.water);
        }
        // Headbutt Pokémon
        if (includeHeadbutt) {
            pokemonList = pokemonList.concat(possiblePokemons.headbutt);
        }
        // Special requirement Pokémon
        pokemonList = pokemonList.concat(...possiblePokemons.special.filter(p => p.isAvailable()).map(p => p.pokemon));
        return pokemonList;
    }
    static routePokerusEVs(route, region) {
        const possiblePokemon = [...new Set(RouteHelper.getAvailablePokemonList(route, region))];
        if (this.minPokerus(possiblePokemon) == GameConstants.Pokerus.Resistant) {
            return 'All Pokémon on this route are resistant!';
        }
        const currentEVs = this.getEvs(possiblePokemon);
        return `EVs until all Pokémon are resistant on this route: ${currentEVs}&nbsp;/&nbsp;${50 * possiblePokemon.length}.`;
    }
    static dungeonPokerusEVs(dungeon) {
        const possiblePokemon = [...new Set(dungeon.allAvailablePokemon())];
        if (this.minPokerus(possiblePokemon) == GameConstants.Pokerus.Resistant) {
            return 'All Pokémon in this dungeon are resistant!';
        }
        const currentEVs = this.getEvs(possiblePokemon);
        return `EVs until all Pokémon are resistant in this dungeon: ${currentEVs}&nbsp;/&nbsp;${50 * possiblePokemon.length}.`;
    }
    static getEvs(possiblePokemon) {
        let currentEVs = 0;
        possiblePokemon.forEach(pkmn => {
            const partyPokemon = App.game.party.getPokemonByName(pkmn);
            if (partyPokemon.pokerus == GameConstants.Pokerus.Resistant) {
                currentEVs += 50;
            }
            else if (partyPokemon.pokerus == GameConstants.Pokerus.Contagious) {
                currentEVs += partyPokemon.evs();
            }
        });
        return Math.round(currentEVs);
    }
    /**
     * Checks if all Pokémon on this route are caught by the player.
     * @param route
     * @param region
     * @param includeShiny
     * @param includeHeadbutt
     * @returns {boolean} true if all Pokémon on this route are caught.
     */
    static routeCompleted(route, region, includeShiny, includeHeadbutt = true) {
        return RouteHelper.listCompleted(RouteHelper.getAvailablePokemonList(route, region, includeHeadbutt), includeShiny);
    }
    static listCompleted(possiblePokemon, includeShiny) {
        for (let i = 0; i < possiblePokemon.length; i++) {
            if (!App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(possiblePokemon[i]).id)) {
                return false;
            }
            if (includeShiny && !App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(possiblePokemon[i]).id, true)) {
                return false;
            }
        }
        return true;
    }
    static minPokerus(possiblePokemon) {
        var _a;
        let pokerus = 3;
        for (let i = 0; i < possiblePokemon.length; i++) {
            const pokerusStatus = (_a = App.game.party.getPokemonByName(possiblePokemon[i])) === null || _a === void 0 ? void 0 : _a.pokerus;
            pokerus = Math.min(pokerus, pokerusStatus);
        }
        return pokerus;
    }
    static minPokerusCheck(possiblePokemon) {
        if (possiblePokemon.length == 0) {
            return false;
        }
        return this.minPokerus(possiblePokemon) > 0;
    }
    static isAchievementsComplete(route, region) {
        return AchievementHandler.achievementList.every(achievement => {
            return !(achievement.property instanceof RouteKillRequirement && achievement.property.region === region && achievement.property.route === route && !achievement.isCompleted());
        });
    }
    static isThereQuestAtLocation(route, region) {
        return App.game.quests.currentQuests().some(q => {
            return q instanceof DefeatPokemonsQuest && q.route == route && q.region == region;
        });
    }
}
class Blimp {
    constructor(name, width, height, image) {
        this.name = name;
        this.width = width;
        this.height = height;
        this.image = image;
    }
}
/// <reference path="../../declarations/TemporaryScriptTypes.d.ts" />
/// <reference path="../../declarations/DataStore/StatisticStore/index.d.ts" />
class MapHelper {
    static getUsableFilters() {
        const priority = Settings.getSetting('mapAreaStateOrder').observableValue();
        return priority.map(status => Settings.getSetting(`--${areaStatus[status]}`)).filter(setting => setting.isUnlocked());
    }
    static routeExist(route, region) {
        return !!Routes.getRoute(region, route);
    }
    static normalizeRoute(route, region, skipIgnoredRoutes = true) {
        return Routes.normalizedNumber(region, route, skipIgnoredRoutes);
    }
    static getEnvironments(area, region) {
        // Environments aren't stored in the locations themselves, so we need to refer to the record in GameConstants.Environments to get an array (list) of all the environments we've written it under
        const envs = Object.keys(GameConstants.Environments).filter((env) => { var _a; return (_a = GameConstants.Environments[env][region]) === null || _a === void 0 ? void 0 : _a.has(area); }); // keeping everything as GameConstants.Environment makes them easier to refer to with an IDE (like VSCode). Environments will show up in a dropdown when you type
        // Now that we have an array we can push (add) environments straight up
        // determine Hisui environments for Burmy and electric friends
        if (region === GameConstants.Region.hisui) {
            const hisuilands = ['AlabasterIcelands', 'CobaltCoastlands', 'CoronetHighlands', 'CrimsonMirelands', 'JubilifeVillage', 'ObsidianFieldlands'];
            const blanklands = hisuilands.find(land => envs.includes(land)); // find which __land the area is part of
            switch (blanklands) {
                case 'ObsidianFieldlands':
                case 'JubilifeVillage':
                    envs.push('PlantCloak');
                    break; // group cloaks together to keep the switch breaks tidy, only three needed
                case 'CoronetHighlands':
                    envs.push('MagneticField'); // no break after this because we want to add SandyCloak to CoronetHighlands too
                case 'CrimsonMirelands':
                    envs.push('SandyCloak');
                    break;
                case 'AlabasterIcelands':
                case 'CobaltCoastlands':
                    envs.push('TrashCloak');
                    break;
            }
            // if not in Hisui, add general envs for Burmy
        }
        else if (envs.includes('Cave')) {
            envs.push('SandyCloak');
        }
        else if (typeof area === 'string' && ['City', 'League', 'Tower'].some(word => area.includes(word))) {
            envs.push('TrashCloak');
        }
        // if not in Cave or TrashCloak, Burmy evolves into (Plant). (this is mainly for realEvos challenge)
        const burmyCloaks = ['PlantCloak', 'SandyCloak', 'TrashCloak'];
        // if some element (cloak) of the "burmyCloaks" array is not (!) included in the "envs" array, add (push) the 'PlantCloak' environment
        if (!burmyCloaks.some(cloak => envs.includes(cloak))) {
            envs.push('PlantCloak');
        }
        // Get environments from Gym and Temp battles lists, if any
        const battleArea = (App.game.gameState == GameConstants.GameState.temporaryBattle
            ? TemporaryBattleRunner.getEnvironmentArea() : undefined) ||
            (App.game.gameState == GameConstants.GameState.gym
                ? GymRunner.getEnvironmentArea() : undefined) ||
            undefined;
        // Add the battle environment arrays
        if (battleArea != undefined) {
            envs.push(...battleArea);
        }
        return (envs);
    }
    static getCurrentEnvironments() {
        var _a;
        const area = player.route ||
            ((_a = player.town) === null || _a === void 0 ? void 0 : _a.name) ||
            undefined;
        return this.getEnvironments(area, player.region);
    }
    static getBattleBackground() {
        var _a;
        const area = player.route ||
            (App.game.gameState == GameConstants.GameState.temporaryBattle
                ? TemporaryBattleRunner.getBattleBackgroundImage() : undefined) ||
            (App.game.gameState == GameConstants.GameState.gym
                ? GymRunner.getBattleBackgroundImage() : undefined) ||
            (App.game.gameState == GameConstants.GameState.battleFrontier
                ? BattleFrontierRunner.battleBackground() : undefined) ||
            ((_a = player.town) === null || _a === void 0 ? void 0 : _a.name) ||
            undefined;
        if (area in GameConstants.BattleBackgrounds) {
            return area;
        }
        const [img] = Object.entries(GameConstants.BattleBackgrounds).find(([, regions]) => { var _a; return (_a = regions[player.region]) === null || _a === void 0 ? void 0 : _a.has(area); }) || [];
        return img;
    }
    static calculateBattleCssClass() {
        return GameConstants.BattleBackgroundImage[this.getBattleBackground()];
    }
    static calculateRouteCssClass(route, region) {
        var _a;
        const states = new Set([areaStatus.completed]);
        if (!MapHelper.accessToRoute(route, region)) {
            states.add(areaStatus.locked);
        }
        if (App.game.statistics.routeKills[region][route]() < GameConstants.ROUTE_KILLS_NEEDED) {
            states.add(areaStatus.incomplete);
        }
        if (RouteHelper.isThereQuestAtLocation(route, region)) {
            states.add(areaStatus.questAtLocation);
        }
        if (!RouteHelper.routeCompleted(route, region, false)) {
            states.add(areaStatus.uncaughtPokemon);
        }
        if (!RouteHelper.routeCompleted(route, region, true)) {
            states.add(areaStatus.uncaughtShinyPokemon);
        }
        if (!RouteHelper.isAchievementsComplete(route, region)) {
            states.add(areaStatus.missingAchievement);
        }
        if (Settings.getSetting(`--${areaStatus[areaStatus.missingResistant]}`).isUnlocked() && RouteHelper.minPokerus(RouteHelper.getAvailablePokemonList(route, region, true)) < GameConstants.Pokerus.Resistant) {
            states.add(areaStatus.missingResistant);
        }
        const statusPriority = Settings.getSetting('mapAreaStateOrder').observableValue();
        const mostImportant = statusPriority.find(state => states.has(state));
        let cls = areaStatus[mostImportant];
        // Water routes
        if ((_a = GameConstants.Environments.Water[region]) === null || _a === void 0 ? void 0 : _a.has(route)) {
            cls = `${cls} waterRoute`;
        }
        return cls;
    }
    static isRouteCurrentLocation(route, region) {
        return player.route == route && player.region == region;
    }
    static isTownCurrentLocation(townName) {
        var _a;
        if (App.game.gameState == GameConstants.GameState.temporaryBattle) {
            return ((_a = TemporaryBattleRunner.battleObservable().getTown()) === null || _a === void 0 ? void 0 : _a.name) == townName;
        }
        return !player.route && player.town.name == townName;
    }
    static calculateTownCssClass(townName) {
        var _a, _b;
        // We don't want to spoil easter eggs with map colors
        if ((_a = TownList[townName]) === null || _a === void 0 ? void 0 : _a.ignoreAreaStatus) {
            return '';
        }
        const states = new Set([areaStatus.completed]);
        // Check if this location is locked
        if (!MapHelper.accessToTown(townName)) {
            return areaStatus[areaStatus.locked];
        }
        // Is this location a dungeon
        if (dungeonList[townName] && dungeonList[townName].isUnlocked()) {
            const possiblePokemon = dungeonList[townName].allAvailablePokemon();
            const shadowPokemon = dungeonList[townName].allAvailableShadowPokemon();
            if (!App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(townName)]()) {
                states.add(areaStatus.incomplete);
            }
            if (dungeonList[townName].isThereQuestAtLocation()) {
                states.add(areaStatus.questAtLocation);
            }
            if (!RouteHelper.listCompleted(possiblePokemon, false)) {
                states.add(areaStatus.uncaughtPokemon);
            }
            if (Settings.getSetting(`--${areaStatus[areaStatus.uncaughtShadowPokemon]}`).isUnlocked()
                && shadowPokemon.some(pokemon => { var _a; return ((_a = App.game.party.getPokemonByName(pokemon)) === null || _a === void 0 ? void 0 : _a.shadow) < GameConstants.ShadowStatus.Shadow; })) {
                states.add(areaStatus.uncaughtShadowPokemon);
            }
            if (!RouteHelper.listCompleted(possiblePokemon, true)) {
                states.add(areaStatus.uncaughtShinyPokemon);
            }
            if (!DungeonRunner.isAchievementsComplete(dungeonList[townName])) {
                states.add(areaStatus.missingAchievement);
            }
            if (Settings.getSetting(`--${areaStatus[areaStatus.missingResistant]}`).isUnlocked() && RouteHelper.minPokerus(possiblePokemon) < GameConstants.Pokerus.Resistant) {
                states.add(areaStatus.missingResistant);
            }
        }
        const town = TownList[townName];
        town.content.forEach(c => {
            const s = c.areaStatus();
            if (!s.includes(areaStatus.locked)) {
                s.forEach(s => {
                    states.add(s);
                });
            }
        });
        (_b = town.npcs) === null || _b === void 0 ? void 0 : _b.filter(npc => npc instanceof PokemonGiftNPC && npc.isVisible()).forEach((npc) => {
            npc.areaStatus().forEach(s => states.add(s));
        });
        const statusPriority = Settings.getSetting('mapAreaStateOrder').observableValue();
        const importantState = statusPriority.find(state => states.has(state));
        return areaStatus[importantState];
    }
    static accessToTown(townName) {
        const town = TownList[townName];
        if (!town) {
            return false;
        }
        return town.isUnlocked();
    }
    static moveToTown(townName) {
        var _a;
        if (MapHelper.accessToTown(townName)) {
            App.game.gameState = GameConstants.GameState.idle;
            player.route = 0;
            Battle.route = 0;
            Battle.catching(false);
            const town = TownList[townName];
            player.region = town.region;
            player.subregion = town.subRegion;
            player.town = town;
            Battle.enemyPokemon(null);
            //this should happen last, so all the values all set beforehand
            App.game.gameState = GameConstants.GameState.town;
        }
        else {
            const town = TownList[townName];
            const reqsList = [];
            (_a = town.requirements) === null || _a === void 0 ? void 0 : _a.forEach(requirement => {
                if (!requirement.isCompleted()) {
                    reqsList.push(requirement.hint());
                }
            });
            Notifier.notify({
                message: `You don't have access to that location yet.\n<i>${reqsList.join('\n')}</i>`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static validRoute(route = 0, region = 0) {
        return !!Routes.getRoute(region, route);
    }
    static openShipModal() {
        const openModal = () => {
            $('#ShipModal').modal('show');
        };
        if (player.highestRegion() > 0 && (TownList[GameConstants.DockTowns[player.region]].isUnlocked())) {
            openModal();
        }
        else {
            Notifier.notify({
                message: `You cannot access this dock yet!${player.region > GameConstants.Region.kanto ? '\n<i>Progress further to return to previous regions!</i>' : ''}`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static ableToTravel() {
        var _a, _b;
        // If player already reached highest region, they can't move on
        if (player.highestRegion() >= GameConstants.MAX_AVAILABLE_REGION) {
            return false;
        }
        const challengeActive = App.game.challenges.list.requireCompletePokedex.active();
        const nextStartingTownUnlocked = (_b = (_a = TownList[GameConstants.StartingTowns[player.highestRegion() + 1]]) === null || _a === void 0 ? void 0 : _a.isUnlocked()) !== null && _b !== void 0 ? _b : false;
        const fullDex = AchievementHandler.findByName(`${GameConstants.camelCaseToString(GameConstants.Region[player.highestRegion()])} Master`).isCompleted();
        return nextStartingTownUnlocked && (fullDex || !challengeActive);
    }
    static travelToNextRegion() {
        if (MapHelper.ableToTravel()) {
            // Gain queue slots based on highest region
            App.game.breeding.gainQueueSlot(App.game.breeding.queueSlotsGainedFromRegion(player.highestRegion()));
            GameHelper.incrementObservable(player.highestRegion);
            player.highestSubRegion(0);
            MapHelper.moveToTown(GameConstants.StartingTowns[player.highestRegion()]);
            player.region = player.highestRegion();
            // Update hatchery region filter to include new region if all previous regions selected
            const previousRegionFullMask = (2 << (player.highestRegion() - 1)) - 1;
            const regionFilterMask = Settings.getSetting('breedingRegionFilter').value & previousRegionFullMask;
            if (regionFilterMask == previousRegionFullMask) {
                const newRegionFullMask = (2 << player.highestRegion()) - 1;
                Settings.setSettingByName('breedingRegionFilter', newRegionFullMask);
            }
            $('#pickStarterModal').modal('show');
        }
    }
    static getBlimpData(professorName = '') {
        const baseProps = {
            name: `${professorName}'s Blimp`,
            width: 6 * 16,
            height: 3 * 16,
            image: '',
        };
        if (!MapHelper.ableToTravel()) {
            return baseProps;
        }
        if (player.regionStarters[GameConstants.Region.kanto]() == GameConstants.Starter.Special) {
            return new Blimp(baseProps.name, baseProps.width, baseProps.height, 'assets/images/map/blimp_pikachu.png');
        }
        else if (!App.game.challenges.list.requireCompletePokedex.active()) {
            return new Blimp('Team Rocket\'s Blimp', 4 * 16, 8 * 16, 'assets/images/map/blimp_meowth.png');
        }
        else {
            return new Blimp(baseProps.name, baseProps.width, baseProps.height, 'assets/images/map/blimp_empty.png');
        }
    }
}
MapHelper.moveToRoute = function (route, region) {
    var _a, _b;
    if (isNaN(route)) {
        return;
    }
    const routeData = Routes.getRoute(region, route);
    let genNewEnemy = false;
    if (route != Battle.route) {
        genNewEnemy = true;
    }
    if (this.accessToRoute(route, region)) {
        if (player.region != region) {
            player.region = region;
        }
        player.subregion = (_a = routeData.subRegion) !== null && _a !== void 0 ? _a : 0;
        player.route = route;
        if (genNewEnemy && !Battle.catching()) {
            Battle.generateNewEnemy();
        }
        App.game.gameState = GameConstants.GameState.fighting;
    }
    else {
        if (!MapHelper.routeExist(route, region)) {
            return Notifier.notify({
                message: `${Routes.getName(route, region)} does not exist in the ${GameConstants.Region[region]} region.`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        const reqsList = [];
        (_b = routeData.requirements) === null || _b === void 0 ? void 0 : _b.forEach(requirement => {
            if (!requirement.isCompleted()) {
                reqsList.push(requirement.hint());
            }
        });
        Notifier.notify({
            message: `You don't have access to that route yet.\n<i>${reqsList.join('\n')}</i>`,
            type: NotificationConstants.NotificationOption.warning,
        });
    }
};
MapHelper.accessToRoute = function (route, region) {
    return this.routeExist(route, region) && Routes.getRoute(region, route).isUnlocked();
};
MapHelper;
/// <reference path="../../declarations/GameHelper.d.ts" />
/// <reference path="../../declarations/DataStore/common/Feature.d.ts" />
class ZMoves {
    constructor() {
        this.name = 'Z Moves';
        this.saveKey = 'zMoves';
        this.counter = 0;
        this.type = ko.observable(PokemonType.Normal);
        this.time = ko.observable(0);
        this.formattedTime = ko.computed(() => GameConstants.formatTime(this.time() / GameConstants.SECOND).split(':').slice(1).join(':'));
        this.status = ko.observable(GameConstants.ZMoveStatus.inactive);
    }
    initialize() {
    }
    getMultiplier(...types) {
        if (this.status() === GameConstants.ZMoveStatus.inactive) {
            return 1;
        }
        return types.includes(this.type()) || !types.length ? this.multiplier : 1;
    }
    isActive() {
        return this.status() > GameConstants.ZMoveStatus.inactive;
    }
    activate(type) {
        if (this.isActive()) {
            return;
        }
        this.type(type);
        this.time(GameConstants.ZMOVE_ACTIVE_TIME);
        this.status(GameConstants.ZMoveStatus.active);
    }
    fromJSON(json) {
        var _a, _b, _c;
        if (!json) {
            return;
        }
        this.type((_a = json.type) !== null && _a !== void 0 ? _a : PokemonType.None);
        this.time((_b = json.time) !== null && _b !== void 0 ? _b : 0);
        this.status((_c = json.status) !== null && _c !== void 0 ? _c : GameConstants.ZMoveStatus.inactive);
    }
    toJSON() {
        return {
            type: this.type(),
            time: this.time(),
            status: this.status(),
        };
    }
    canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItemType['Z-Power_Ring']);
    }
    update(delta) { } // This method intentionally left blank
    tick() {
        if (this.status() !== GameConstants.ZMoveStatus.inactive) {
            GameHelper.incrementObservable(this.time, -GameConstants.ZMOVE_TICK);
            if (this.time() === 0) {
                GameHelper.incrementObservable(this.status, -1);
                if (this.status() === GameConstants.ZMoveStatus.counteractive) {
                    this.time(GameConstants.ZMOVE_COUNTERACTIVE_TIME);
                }
            }
        }
        this.counter = 0;
    }
    get multiplier() {
        return GameConstants[`ZMOVE_${GameConstants.ZMoveStatus[this.status()].toUpperCase()}_MULTIPLIER`];
    }
}
